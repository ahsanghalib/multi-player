var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a2, b2) => (typeof require !== "undefined" ? require : a2)[b2]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/.pnpm/mux.js@5.14.1/node_modules/mux.js/dist/mux.js
var require_mux = __commonJS({
  "node_modules/.pnpm/mux.js@5.14.1/node_modules/mux.js/dist/mux.js"(exports2, module2) {
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.muxjs = factory());
    })(exports2, function() {
      "use strict";
      var Stream = function Stream2() {
        this.init = function() {
          var listeners = {};
          this.on = function(type2, listener) {
            if (!listeners[type2]) {
              listeners[type2] = [];
            }
            listeners[type2] = listeners[type2].concat(listener);
          };
          this.off = function(type2, listener) {
            var index;
            if (!listeners[type2]) {
              return false;
            }
            index = listeners[type2].indexOf(listener);
            listeners[type2] = listeners[type2].slice();
            listeners[type2].splice(index, 1);
            return index > -1;
          };
          this.trigger = function(type2) {
            var callbacks, i, length, args;
            callbacks = listeners[type2];
            if (!callbacks) {
              return;
            }
            if (arguments.length === 2) {
              length = callbacks.length;
              for (i = 0; i < length; ++i) {
                callbacks[i].call(this, arguments[1]);
              }
            } else {
              args = [];
              i = arguments.length;
              for (i = 1; i < arguments.length; ++i) {
                args.push(arguments[i]);
              }
              length = callbacks.length;
              for (i = 0; i < length; ++i) {
                callbacks[i].apply(this, args);
              }
            }
          };
          this.dispose = function() {
            listeners = {};
          };
        };
      };
      Stream.prototype.pipe = function(destination) {
        this.on("data", function(data) {
          destination.push(data);
        });
        this.on("done", function(flushSource) {
          destination.flush(flushSource);
        });
        this.on("partialdone", function(flushSource) {
          destination.partialFlush(flushSource);
        });
        this.on("endedtimeline", function(flushSource) {
          destination.endTimeline(flushSource);
        });
        this.on("reset", function(flushSource) {
          destination.reset(flushSource);
        });
        return destination;
      };
      Stream.prototype.push = function(data) {
        this.trigger("data", data);
      };
      Stream.prototype.flush = function(flushSource) {
        this.trigger("done", flushSource);
      };
      Stream.prototype.partialFlush = function(flushSource) {
        this.trigger("partialdone", flushSource);
      };
      Stream.prototype.endTimeline = function(flushSource) {
        this.trigger("endedtimeline", flushSource);
      };
      Stream.prototype.reset = function(flushSource) {
        this.trigger("reset", flushSource);
      };
      var stream = Stream;
      var ONE_SECOND_IN_TS$5 = 9e4, secondsToVideoTs, secondsToAudioTs, videoTsToSeconds, audioTsToSeconds, audioTsToVideoTs, videoTsToAudioTs, metadataTsToSeconds;
      secondsToVideoTs = function secondsToVideoTs2(seconds) {
        return seconds * ONE_SECOND_IN_TS$5;
      };
      secondsToAudioTs = function secondsToAudioTs2(seconds, sampleRate) {
        return seconds * sampleRate;
      };
      videoTsToSeconds = function videoTsToSeconds2(timestamp) {
        return timestamp / ONE_SECOND_IN_TS$5;
      };
      audioTsToSeconds = function audioTsToSeconds2(timestamp, sampleRate) {
        return timestamp / sampleRate;
      };
      audioTsToVideoTs = function audioTsToVideoTs2(timestamp, sampleRate) {
        return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));
      };
      videoTsToAudioTs = function videoTsToAudioTs2(timestamp, sampleRate) {
        return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);
      };
      metadataTsToSeconds = function metadataTsToSeconds2(timestamp, timelineStartPts, keepOriginalTimestamps) {
        return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);
      };
      var clock = {
        ONE_SECOND_IN_TS: ONE_SECOND_IN_TS$5,
        secondsToVideoTs,
        secondsToAudioTs,
        videoTsToSeconds,
        audioTsToSeconds,
        audioTsToVideoTs,
        videoTsToAudioTs,
        metadataTsToSeconds
      };
      var ONE_SECOND_IN_TS$4 = clock.ONE_SECOND_IN_TS;
      var _AdtsStream;
      var ADTS_SAMPLING_FREQUENCIES$1 = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
      _AdtsStream = function AdtsStream(handlePartialSegments) {
        var buffer, frameNum = 0;
        _AdtsStream.prototype.init.call(this);
        this.skipWarn_ = function(start, end) {
          this.trigger("log", {
            level: "warn",
            message: "adts skiping bytes " + start + " to " + end + " in frame " + frameNum + " outside syncword"
          });
        };
        this.push = function(packet) {
          var i = 0, frameLength, protectionSkipBytes, oldBuffer, sampleCount, adtsFrameDuration;
          if (!handlePartialSegments) {
            frameNum = 0;
          }
          if (packet.type !== "audio") {
            return;
          }
          if (buffer && buffer.length) {
            oldBuffer = buffer;
            buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);
            buffer.set(oldBuffer);
            buffer.set(packet.data, oldBuffer.byteLength);
          } else {
            buffer = packet.data;
          }
          var skip;
          while (i + 7 < buffer.length) {
            if (buffer[i] !== 255 || (buffer[i + 1] & 246) !== 240) {
              if (typeof skip !== "number") {
                skip = i;
              }
              i++;
              continue;
            }
            if (typeof skip === "number") {
              this.skipWarn_(skip, i);
              skip = null;
            }
            protectionSkipBytes = (~buffer[i + 1] & 1) * 2;
            frameLength = (buffer[i + 3] & 3) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 224) >> 5;
            sampleCount = ((buffer[i + 6] & 3) + 1) * 1024;
            adtsFrameDuration = sampleCount * ONE_SECOND_IN_TS$4 / ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 60) >>> 2];
            if (buffer.byteLength - i < frameLength) {
              break;
            }
            this.trigger("data", {
              pts: packet.pts + frameNum * adtsFrameDuration,
              dts: packet.dts + frameNum * adtsFrameDuration,
              sampleCount,
              audioobjecttype: (buffer[i + 2] >>> 6 & 3) + 1,
              channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 192) >>> 6,
              samplerate: ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 60) >>> 2],
              samplingfrequencyindex: (buffer[i + 2] & 60) >>> 2,
              // assume ISO/IEC 14496-12 AudioSampleEntry default of 16
              samplesize: 16,
              // data is the frame without it's header
              data: buffer.subarray(i + 7 + protectionSkipBytes, i + frameLength)
            });
            frameNum++;
            i += frameLength;
          }
          if (typeof skip === "number") {
            this.skipWarn_(skip, i);
            skip = null;
          }
          buffer = buffer.subarray(i);
        };
        this.flush = function() {
          frameNum = 0;
          this.trigger("done");
        };
        this.reset = function() {
          buffer = void 0;
          this.trigger("reset");
        };
        this.endTimeline = function() {
          buffer = void 0;
          this.trigger("endedtimeline");
        };
      };
      _AdtsStream.prototype = new stream();
      var adts = _AdtsStream;
      var ExpGolomb;
      ExpGolomb = function ExpGolomb2(workingData) {
        var workingBytesAvailable = workingData.byteLength, workingWord = 0, workingBitsAvailable = 0;
        this.length = function() {
          return 8 * workingBytesAvailable;
        };
        this.bitsAvailable = function() {
          return 8 * workingBytesAvailable + workingBitsAvailable;
        };
        this.loadWord = function() {
          var position = workingData.byteLength - workingBytesAvailable, workingBytes = new Uint8Array(4), availableBytes = Math.min(4, workingBytesAvailable);
          if (availableBytes === 0) {
            throw new Error("no bytes available");
          }
          workingBytes.set(workingData.subarray(position, position + availableBytes));
          workingWord = new DataView(workingBytes.buffer).getUint32(0);
          workingBitsAvailable = availableBytes * 8;
          workingBytesAvailable -= availableBytes;
        };
        this.skipBits = function(count) {
          var skipBytes;
          if (workingBitsAvailable > count) {
            workingWord <<= count;
            workingBitsAvailable -= count;
          } else {
            count -= workingBitsAvailable;
            skipBytes = Math.floor(count / 8);
            count -= skipBytes * 8;
            workingBytesAvailable -= skipBytes;
            this.loadWord();
            workingWord <<= count;
            workingBitsAvailable -= count;
          }
        };
        this.readBits = function(size) {
          var bits = Math.min(workingBitsAvailable, size), valu = workingWord >>> 32 - bits;
          workingBitsAvailable -= bits;
          if (workingBitsAvailable > 0) {
            workingWord <<= bits;
          } else if (workingBytesAvailable > 0) {
            this.loadWord();
          }
          bits = size - bits;
          if (bits > 0) {
            return valu << bits | this.readBits(bits);
          }
          return valu;
        };
        this.skipLeadingZeros = function() {
          var leadingZeroCount;
          for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {
            if ((workingWord & 2147483648 >>> leadingZeroCount) !== 0) {
              workingWord <<= leadingZeroCount;
              workingBitsAvailable -= leadingZeroCount;
              return leadingZeroCount;
            }
          }
          this.loadWord();
          return leadingZeroCount + this.skipLeadingZeros();
        };
        this.skipUnsignedExpGolomb = function() {
          this.skipBits(1 + this.skipLeadingZeros());
        };
        this.skipExpGolomb = function() {
          this.skipBits(1 + this.skipLeadingZeros());
        };
        this.readUnsignedExpGolomb = function() {
          var clz = this.skipLeadingZeros();
          return this.readBits(clz + 1) - 1;
        };
        this.readExpGolomb = function() {
          var valu = this.readUnsignedExpGolomb();
          if (1 & valu) {
            return 1 + valu >>> 1;
          }
          return -1 * (valu >>> 1);
        };
        this.readBoolean = function() {
          return this.readBits(1) === 1;
        };
        this.readUnsignedByte = function() {
          return this.readBits(8);
        };
        this.loadWord();
      };
      var expGolomb = ExpGolomb;
      var _H264Stream, _NalByteStream;
      var PROFILES_WITH_OPTIONAL_SPS_DATA;
      _NalByteStream = function NalByteStream() {
        var syncPoint = 0, i, buffer;
        _NalByteStream.prototype.init.call(this);
        this.push = function(data) {
          var swapBuffer;
          if (!buffer) {
            buffer = data.data;
          } else {
            swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);
            swapBuffer.set(buffer);
            swapBuffer.set(data.data, buffer.byteLength);
            buffer = swapBuffer;
          }
          var len = buffer.byteLength;
          for (; syncPoint < len - 3; syncPoint++) {
            if (buffer[syncPoint + 2] === 1) {
              i = syncPoint + 5;
              break;
            }
          }
          while (i < len) {
            switch (buffer[i]) {
              case 0:
                if (buffer[i - 1] !== 0) {
                  i += 2;
                  break;
                } else if (buffer[i - 2] !== 0) {
                  i++;
                  break;
                }
                if (syncPoint + 3 !== i - 2) {
                  this.trigger("data", buffer.subarray(syncPoint + 3, i - 2));
                }
                do {
                  i++;
                } while (buffer[i] !== 1 && i < len);
                syncPoint = i - 2;
                i += 3;
                break;
              case 1:
                if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {
                  i += 3;
                  break;
                }
                this.trigger("data", buffer.subarray(syncPoint + 3, i - 2));
                syncPoint = i - 2;
                i += 3;
                break;
              default:
                i += 3;
                break;
            }
          }
          buffer = buffer.subarray(syncPoint);
          i -= syncPoint;
          syncPoint = 0;
        };
        this.reset = function() {
          buffer = null;
          syncPoint = 0;
          this.trigger("reset");
        };
        this.flush = function() {
          if (buffer && buffer.byteLength > 3) {
            this.trigger("data", buffer.subarray(syncPoint + 3));
          }
          buffer = null;
          syncPoint = 0;
          this.trigger("done");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline");
        };
      };
      _NalByteStream.prototype = new stream();
      PROFILES_WITH_OPTIONAL_SPS_DATA = {
        100: true,
        110: true,
        122: true,
        244: true,
        44: true,
        83: true,
        86: true,
        118: true,
        128: true,
        // TODO: the three profiles below don't
        // appear to have sps data in the specificiation anymore?
        138: true,
        139: true,
        134: true
      };
      _H264Stream = function H264Stream2() {
        var nalByteStream = new _NalByteStream(), self2, trackId, currentPts, currentDts, discardEmulationPreventionBytes2, readSequenceParameterSet, skipScalingList;
        _H264Stream.prototype.init.call(this);
        self2 = this;
        this.push = function(packet) {
          if (packet.type !== "video") {
            return;
          }
          trackId = packet.trackId;
          currentPts = packet.pts;
          currentDts = packet.dts;
          nalByteStream.push(packet);
        };
        nalByteStream.on("data", function(data) {
          var event = {
            trackId,
            pts: currentPts,
            dts: currentDts,
            data,
            nalUnitTypeCode: data[0] & 31
          };
          switch (event.nalUnitTypeCode) {
            case 5:
              event.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
              break;
            case 6:
              event.nalUnitType = "sei_rbsp";
              event.escapedRBSP = discardEmulationPreventionBytes2(data.subarray(1));
              break;
            case 7:
              event.nalUnitType = "seq_parameter_set_rbsp";
              event.escapedRBSP = discardEmulationPreventionBytes2(data.subarray(1));
              event.config = readSequenceParameterSet(event.escapedRBSP);
              break;
            case 8:
              event.nalUnitType = "pic_parameter_set_rbsp";
              break;
            case 9:
              event.nalUnitType = "access_unit_delimiter_rbsp";
              break;
          }
          self2.trigger("data", event);
        });
        nalByteStream.on("done", function() {
          self2.trigger("done");
        });
        nalByteStream.on("partialdone", function() {
          self2.trigger("partialdone");
        });
        nalByteStream.on("reset", function() {
          self2.trigger("reset");
        });
        nalByteStream.on("endedtimeline", function() {
          self2.trigger("endedtimeline");
        });
        this.flush = function() {
          nalByteStream.flush();
        };
        this.partialFlush = function() {
          nalByteStream.partialFlush();
        };
        this.reset = function() {
          nalByteStream.reset();
        };
        this.endTimeline = function() {
          nalByteStream.endTimeline();
        };
        skipScalingList = function skipScalingList2(count, expGolombDecoder) {
          var lastScale = 8, nextScale = 8, j, deltaScale;
          for (j = 0; j < count; j++) {
            if (nextScale !== 0) {
              deltaScale = expGolombDecoder.readExpGolomb();
              nextScale = (lastScale + deltaScale + 256) % 256;
            }
            lastScale = nextScale === 0 ? lastScale : nextScale;
          }
        };
        discardEmulationPreventionBytes2 = function discardEmulationPreventionBytes3(data) {
          var length = data.byteLength, emulationPreventionBytesPositions = [], i = 1, newLength, newData;
          while (i < length - 2) {
            if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 3) {
              emulationPreventionBytesPositions.push(i + 2);
              i += 2;
            } else {
              i++;
            }
          }
          if (emulationPreventionBytesPositions.length === 0) {
            return data;
          }
          newLength = length - emulationPreventionBytesPositions.length;
          newData = new Uint8Array(newLength);
          var sourceIndex = 0;
          for (i = 0; i < newLength; sourceIndex++, i++) {
            if (sourceIndex === emulationPreventionBytesPositions[0]) {
              sourceIndex++;
              emulationPreventionBytesPositions.shift();
            }
            newData[i] = data[sourceIndex];
          }
          return newData;
        };
        readSequenceParameterSet = function readSequenceParameterSet2(data) {
          var frameCropLeftOffset = 0, frameCropRightOffset = 0, frameCropTopOffset = 0, frameCropBottomOffset = 0, expGolombDecoder, profileIdc, levelIdc, profileCompatibility, chromaFormatIdc, picOrderCntType, numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1, picHeightInMapUnitsMinus1, frameMbsOnlyFlag, scalingListCount, sarRatio = [1, 1], aspectRatioIdc, i;
          expGolombDecoder = new expGolomb(data);
          profileIdc = expGolombDecoder.readUnsignedByte();
          profileCompatibility = expGolombDecoder.readUnsignedByte();
          levelIdc = expGolombDecoder.readUnsignedByte();
          expGolombDecoder.skipUnsignedExpGolomb();
          if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {
            chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();
            if (chromaFormatIdc === 3) {
              expGolombDecoder.skipBits(1);
            }
            expGolombDecoder.skipUnsignedExpGolomb();
            expGolombDecoder.skipUnsignedExpGolomb();
            expGolombDecoder.skipBits(1);
            if (expGolombDecoder.readBoolean()) {
              scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
              for (i = 0; i < scalingListCount; i++) {
                if (expGolombDecoder.readBoolean()) {
                  if (i < 6) {
                    skipScalingList(16, expGolombDecoder);
                  } else {
                    skipScalingList(64, expGolombDecoder);
                  }
                }
              }
            }
          }
          expGolombDecoder.skipUnsignedExpGolomb();
          picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();
          if (picOrderCntType === 0) {
            expGolombDecoder.readUnsignedExpGolomb();
          } else if (picOrderCntType === 1) {
            expGolombDecoder.skipBits(1);
            expGolombDecoder.skipExpGolomb();
            expGolombDecoder.skipExpGolomb();
            numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();
            for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
              expGolombDecoder.skipExpGolomb();
            }
          }
          expGolombDecoder.skipUnsignedExpGolomb();
          expGolombDecoder.skipBits(1);
          picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
          picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
          frameMbsOnlyFlag = expGolombDecoder.readBits(1);
          if (frameMbsOnlyFlag === 0) {
            expGolombDecoder.skipBits(1);
          }
          expGolombDecoder.skipBits(1);
          if (expGolombDecoder.readBoolean()) {
            frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();
            frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();
            frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();
            frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();
          }
          if (expGolombDecoder.readBoolean()) {
            if (expGolombDecoder.readBoolean()) {
              aspectRatioIdc = expGolombDecoder.readUnsignedByte();
              switch (aspectRatioIdc) {
                case 1:
                  sarRatio = [1, 1];
                  break;
                case 2:
                  sarRatio = [12, 11];
                  break;
                case 3:
                  sarRatio = [10, 11];
                  break;
                case 4:
                  sarRatio = [16, 11];
                  break;
                case 5:
                  sarRatio = [40, 33];
                  break;
                case 6:
                  sarRatio = [24, 11];
                  break;
                case 7:
                  sarRatio = [20, 11];
                  break;
                case 8:
                  sarRatio = [32, 11];
                  break;
                case 9:
                  sarRatio = [80, 33];
                  break;
                case 10:
                  sarRatio = [18, 11];
                  break;
                case 11:
                  sarRatio = [15, 11];
                  break;
                case 12:
                  sarRatio = [64, 33];
                  break;
                case 13:
                  sarRatio = [160, 99];
                  break;
                case 14:
                  sarRatio = [4, 3];
                  break;
                case 15:
                  sarRatio = [3, 2];
                  break;
                case 16:
                  sarRatio = [2, 1];
                  break;
                case 255: {
                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];
                  break;
                }
              }
              if (sarRatio) {
                sarRatio[0] / sarRatio[1];
              }
            }
          }
          return {
            profileIdc,
            levelIdc,
            profileCompatibility,
            width: (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2,
            height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2,
            // sar is sample aspect ratio
            sarRatio
          };
        };
      };
      _H264Stream.prototype = new stream();
      var h264 = {
        H264Stream: _H264Stream,
        NalByteStream: _NalByteStream
      };
      var codecs = {
        Adts: adts,
        h264
      };
      var UINT32_MAX = Math.pow(2, 32) - 1;
      var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun$1, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;
      (function() {
        var i;
        types = {
          avc1: [],
          // codingname
          avcC: [],
          btrt: [],
          dinf: [],
          dref: [],
          esds: [],
          ftyp: [],
          hdlr: [],
          mdat: [],
          mdhd: [],
          mdia: [],
          mfhd: [],
          minf: [],
          moof: [],
          moov: [],
          mp4a: [],
          // codingname
          mvex: [],
          mvhd: [],
          pasp: [],
          sdtp: [],
          smhd: [],
          stbl: [],
          stco: [],
          stsc: [],
          stsd: [],
          stsz: [],
          stts: [],
          styp: [],
          tfdt: [],
          tfhd: [],
          traf: [],
          trak: [],
          trun: [],
          trex: [],
          tkhd: [],
          vmhd: []
        };
        if (typeof Uint8Array === "undefined") {
          return;
        }
        for (i in types) {
          if (types.hasOwnProperty(i)) {
            types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
          }
        }
        MAJOR_BRAND = new Uint8Array(["i".charCodeAt(0), "s".charCodeAt(0), "o".charCodeAt(0), "m".charCodeAt(0)]);
        AVC1_BRAND = new Uint8Array(["a".charCodeAt(0), "v".charCodeAt(0), "c".charCodeAt(0), "1".charCodeAt(0)]);
        MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);
        VIDEO_HDLR = new Uint8Array([
          0,
          // version 0
          0,
          0,
          0,
          // flags
          0,
          0,
          0,
          0,
          // pre_defined
          118,
          105,
          100,
          101,
          // handler_type: 'vide'
          0,
          0,
          0,
          0,
          // reserved
          0,
          0,
          0,
          0,
          // reserved
          0,
          0,
          0,
          0,
          // reserved
          86,
          105,
          100,
          101,
          111,
          72,
          97,
          110,
          100,
          108,
          101,
          114,
          0
          // name: 'VideoHandler'
        ]);
        AUDIO_HDLR = new Uint8Array([
          0,
          // version 0
          0,
          0,
          0,
          // flags
          0,
          0,
          0,
          0,
          // pre_defined
          115,
          111,
          117,
          110,
          // handler_type: 'soun'
          0,
          0,
          0,
          0,
          // reserved
          0,
          0,
          0,
          0,
          // reserved
          0,
          0,
          0,
          0,
          // reserved
          83,
          111,
          117,
          110,
          100,
          72,
          97,
          110,
          100,
          108,
          101,
          114,
          0
          // name: 'SoundHandler'
        ]);
        HDLR_TYPES = {
          video: VIDEO_HDLR,
          audio: AUDIO_HDLR
        };
        DREF = new Uint8Array([
          0,
          // version 0
          0,
          0,
          0,
          // flags
          0,
          0,
          0,
          1,
          // entry_count
          0,
          0,
          0,
          12,
          // entry_size
          117,
          114,
          108,
          32,
          // 'url' type
          0,
          // version 0
          0,
          0,
          1
          // entry_flags
        ]);
        SMHD = new Uint8Array([
          0,
          // version
          0,
          0,
          0,
          // flags
          0,
          0,
          // balance, 0 means centered
          0,
          0
          // reserved
        ]);
        STCO = new Uint8Array([
          0,
          // version
          0,
          0,
          0,
          // flags
          0,
          0,
          0,
          0
          // entry_count
        ]);
        STSC = STCO;
        STSZ = new Uint8Array([
          0,
          // version
          0,
          0,
          0,
          // flags
          0,
          0,
          0,
          0,
          // sample_size
          0,
          0,
          0,
          0
          // sample_count
        ]);
        STTS = STCO;
        VMHD = new Uint8Array([
          0,
          // version
          0,
          0,
          1,
          // flags
          0,
          0,
          // graphicsmode
          0,
          0,
          0,
          0,
          0,
          0
          // opcolor
        ]);
      })();
      box = function box2(type2) {
        var payload = [], size = 0, i, result, view;
        for (i = 1; i < arguments.length; i++) {
          payload.push(arguments[i]);
        }
        i = payload.length;
        while (i--) {
          size += payload[i].byteLength;
        }
        result = new Uint8Array(size + 8);
        view = new DataView(result.buffer, result.byteOffset, result.byteLength);
        view.setUint32(0, result.byteLength);
        result.set(type2, 4);
        for (i = 0, size = 8; i < payload.length; i++) {
          result.set(payload[i], size);
          size += payload[i].byteLength;
        }
        return result;
      };
      dinf = function dinf2() {
        return box(types.dinf, box(types.dref, DREF));
      };
      esds = function esds2(track) {
        return box(types.esds, new Uint8Array([
          0,
          // version
          0,
          0,
          0,
          // flags
          // ES_Descriptor
          3,
          // tag, ES_DescrTag
          25,
          // length
          0,
          0,
          // ES_ID
          0,
          // streamDependenceFlag, URL_flag, reserved, streamPriority
          // DecoderConfigDescriptor
          4,
          // tag, DecoderConfigDescrTag
          17,
          // length
          64,
          // object type
          21,
          // streamType
          0,
          6,
          0,
          // bufferSizeDB
          0,
          0,
          218,
          192,
          // maxBitrate
          0,
          0,
          218,
          192,
          // avgBitrate
          // DecoderSpecificInfo
          5,
          // tag, DecoderSpecificInfoTag
          2,
          // length
          // ISO/IEC 14496-3, AudioSpecificConfig
          // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35
          track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1,
          track.samplingfrequencyindex << 7 | track.channelcount << 3,
          6,
          1,
          2
          // GASpecificConfig
        ]));
      };
      ftyp = function ftyp2() {
        return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);
      };
      hdlr = function hdlr2(type2) {
        return box(types.hdlr, HDLR_TYPES[type2]);
      };
      mdat = function mdat2(data) {
        return box(types.mdat, data);
      };
      mdhd = function mdhd2(track) {
        var result = new Uint8Array([
          0,
          // version 0
          0,
          0,
          0,
          // flags
          0,
          0,
          0,
          2,
          // creation_time
          0,
          0,
          0,
          3,
          // modification_time
          0,
          1,
          95,
          144,
          // timescale, 90,000 "ticks" per second
          track.duration >>> 24 & 255,
          track.duration >>> 16 & 255,
          track.duration >>> 8 & 255,
          track.duration & 255,
          // duration
          85,
          196,
          // 'und' language (undetermined)
          0,
          0
        ]);
        if (track.samplerate) {
          result[12] = track.samplerate >>> 24 & 255;
          result[13] = track.samplerate >>> 16 & 255;
          result[14] = track.samplerate >>> 8 & 255;
          result[15] = track.samplerate & 255;
        }
        return box(types.mdhd, result);
      };
      mdia = function mdia2(track) {
        return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));
      };
      mfhd = function mfhd2(sequenceNumber) {
        return box(types.mfhd, new Uint8Array([
          0,
          0,
          0,
          0,
          // flags
          (sequenceNumber & 4278190080) >> 24,
          (sequenceNumber & 16711680) >> 16,
          (sequenceNumber & 65280) >> 8,
          sequenceNumber & 255
          // sequence_number
        ]));
      };
      minf = function minf2(track) {
        return box(types.minf, track.type === "video" ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));
      };
      moof = function moof2(sequenceNumber, tracks) {
        var trackFragments = [], i = tracks.length;
        while (i--) {
          trackFragments[i] = traf(tracks[i]);
        }
        return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));
      };
      moov = function moov2(tracks) {
        var i = tracks.length, boxes = [];
        while (i--) {
          boxes[i] = trak(tracks[i]);
        }
        return box.apply(null, [types.moov, mvhd(4294967295)].concat(boxes).concat(mvex(tracks)));
      };
      mvex = function mvex2(tracks) {
        var i = tracks.length, boxes = [];
        while (i--) {
          boxes[i] = trex(tracks[i]);
        }
        return box.apply(null, [types.mvex].concat(boxes));
      };
      mvhd = function mvhd2(duration) {
        var bytes = new Uint8Array([
          0,
          // version 0
          0,
          0,
          0,
          // flags
          0,
          0,
          0,
          1,
          // creation_time
          0,
          0,
          0,
          2,
          // modification_time
          0,
          1,
          95,
          144,
          // timescale, 90,000 "ticks" per second
          (duration & 4278190080) >> 24,
          (duration & 16711680) >> 16,
          (duration & 65280) >> 8,
          duration & 255,
          // duration
          0,
          1,
          0,
          0,
          // 1.0 rate
          1,
          0,
          // 1.0 volume
          0,
          0,
          // reserved
          0,
          0,
          0,
          0,
          // reserved
          0,
          0,
          0,
          0,
          // reserved
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          64,
          0,
          0,
          0,
          // transformation: unity matrix
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          // pre_defined
          255,
          255,
          255,
          255
          // next_track_ID
        ]);
        return box(types.mvhd, bytes);
      };
      sdtp = function sdtp2(track) {
        var samples = track.samples || [], bytes = new Uint8Array(4 + samples.length), flags, i;
        for (i = 0; i < samples.length; i++) {
          flags = samples[i].flags;
          bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
        }
        return box(types.sdtp, bytes);
      };
      stbl = function stbl2(track) {
        return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));
      };
      (function() {
        var videoSample, audioSample;
        stsd = function stsd2(track) {
          return box(types.stsd, new Uint8Array([
            0,
            // version 0
            0,
            0,
            0,
            // flags
            0,
            0,
            0,
            1
          ]), track.type === "video" ? videoSample(track) : audioSample(track));
        };
        videoSample = function videoSample2(track) {
          var sps = track.sps || [], pps = track.pps || [], sequenceParameterSets = [], pictureParameterSets = [], i, avc1Box;
          for (i = 0; i < sps.length; i++) {
            sequenceParameterSets.push((sps[i].byteLength & 65280) >>> 8);
            sequenceParameterSets.push(sps[i].byteLength & 255);
            sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i]));
          }
          for (i = 0; i < pps.length; i++) {
            pictureParameterSets.push((pps[i].byteLength & 65280) >>> 8);
            pictureParameterSets.push(pps[i].byteLength & 255);
            pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));
          }
          avc1Box = [types.avc1, new Uint8Array([
            0,
            0,
            0,
            0,
            0,
            0,
            // reserved
            0,
            1,
            // data_reference_index
            0,
            0,
            // pre_defined
            0,
            0,
            // reserved
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            // pre_defined
            (track.width & 65280) >> 8,
            track.width & 255,
            // width
            (track.height & 65280) >> 8,
            track.height & 255,
            // height
            0,
            72,
            0,
            0,
            // horizresolution
            0,
            72,
            0,
            0,
            // vertresolution
            0,
            0,
            0,
            0,
            // reserved
            0,
            1,
            // frame_count
            19,
            118,
            105,
            100,
            101,
            111,
            106,
            115,
            45,
            99,
            111,
            110,
            116,
            114,
            105,
            98,
            45,
            104,
            108,
            115,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            // compressorname
            0,
            24,
            // depth = 24
            17,
            17
            // pre_defined = -1
          ]), box(types.avcC, new Uint8Array([
            1,
            // configurationVersion
            track.profileIdc,
            // AVCProfileIndication
            track.profileCompatibility,
            // profile_compatibility
            track.levelIdc,
            // AVCLevelIndication
            255
            // lengthSizeMinusOne, hard-coded to 4 bytes
          ].concat(
            [sps.length],
            // numOfSequenceParameterSets
            sequenceParameterSets,
            // "SPS"
            [pps.length],
            // numOfPictureParameterSets
            pictureParameterSets
            // "PPS"
          ))), box(types.btrt, new Uint8Array([
            0,
            28,
            156,
            128,
            // bufferSizeDB
            0,
            45,
            198,
            192,
            // maxBitrate
            0,
            45,
            198,
            192
            // avgBitrate
          ]))];
          if (track.sarRatio) {
            var hSpacing = track.sarRatio[0], vSpacing = track.sarRatio[1];
            avc1Box.push(box(types.pasp, new Uint8Array([(hSpacing & 4278190080) >> 24, (hSpacing & 16711680) >> 16, (hSpacing & 65280) >> 8, hSpacing & 255, (vSpacing & 4278190080) >> 24, (vSpacing & 16711680) >> 16, (vSpacing & 65280) >> 8, vSpacing & 255])));
          }
          return box.apply(null, avc1Box);
        };
        audioSample = function audioSample2(track) {
          return box(types.mp4a, new Uint8Array([
            // SampleEntry, ISO/IEC 14496-12
            0,
            0,
            0,
            0,
            0,
            0,
            // reserved
            0,
            1,
            // data_reference_index
            // AudioSampleEntry, ISO/IEC 14496-12
            0,
            0,
            0,
            0,
            // reserved
            0,
            0,
            0,
            0,
            // reserved
            (track.channelcount & 65280) >> 8,
            track.channelcount & 255,
            // channelcount
            (track.samplesize & 65280) >> 8,
            track.samplesize & 255,
            // samplesize
            0,
            0,
            // pre_defined
            0,
            0,
            // reserved
            (track.samplerate & 65280) >> 8,
            track.samplerate & 255,
            0,
            0
            // samplerate, 16.16
            // MP4AudioSampleEntry, ISO/IEC 14496-14
          ]), esds(track));
        };
      })();
      tkhd = function tkhd2(track) {
        var result = new Uint8Array([
          0,
          // version 0
          0,
          0,
          7,
          // flags
          0,
          0,
          0,
          0,
          // creation_time
          0,
          0,
          0,
          0,
          // modification_time
          (track.id & 4278190080) >> 24,
          (track.id & 16711680) >> 16,
          (track.id & 65280) >> 8,
          track.id & 255,
          // track_ID
          0,
          0,
          0,
          0,
          // reserved
          (track.duration & 4278190080) >> 24,
          (track.duration & 16711680) >> 16,
          (track.duration & 65280) >> 8,
          track.duration & 255,
          // duration
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          // reserved
          0,
          0,
          // layer
          0,
          0,
          // alternate_group
          1,
          0,
          // non-audio track volume
          0,
          0,
          // reserved
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          64,
          0,
          0,
          0,
          // transformation: unity matrix
          (track.width & 65280) >> 8,
          track.width & 255,
          0,
          0,
          // width
          (track.height & 65280) >> 8,
          track.height & 255,
          0,
          0
          // height
        ]);
        return box(types.tkhd, result);
      };
      traf = function traf2(track) {
        var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;
        trackFragmentHeader = box(types.tfhd, new Uint8Array([
          0,
          // version 0
          0,
          0,
          58,
          // flags
          (track.id & 4278190080) >> 24,
          (track.id & 16711680) >> 16,
          (track.id & 65280) >> 8,
          track.id & 255,
          // track_ID
          0,
          0,
          0,
          1,
          // sample_description_index
          0,
          0,
          0,
          0,
          // default_sample_duration
          0,
          0,
          0,
          0,
          // default_sample_size
          0,
          0,
          0,
          0
          // default_sample_flags
        ]));
        upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));
        lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));
        trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([
          1,
          // version 1
          0,
          0,
          0,
          // flags
          // baseMediaDecodeTime
          upperWordBaseMediaDecodeTime >>> 24 & 255,
          upperWordBaseMediaDecodeTime >>> 16 & 255,
          upperWordBaseMediaDecodeTime >>> 8 & 255,
          upperWordBaseMediaDecodeTime & 255,
          lowerWordBaseMediaDecodeTime >>> 24 & 255,
          lowerWordBaseMediaDecodeTime >>> 16 & 255,
          lowerWordBaseMediaDecodeTime >>> 8 & 255,
          lowerWordBaseMediaDecodeTime & 255
        ]));
        dataOffset = 32 + // tfhd
        20 + // tfdt
        8 + // traf header
        16 + // mfhd
        8 + // moof header
        8;
        if (track.type === "audio") {
          trackFragmentRun = trun$1(track, dataOffset);
          return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);
        }
        sampleDependencyTable = sdtp(track);
        trackFragmentRun = trun$1(track, sampleDependencyTable.length + dataOffset);
        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);
      };
      trak = function trak2(track) {
        track.duration = track.duration || 4294967295;
        return box(types.trak, tkhd(track), mdia(track));
      };
      trex = function trex2(track) {
        var result = new Uint8Array([
          0,
          // version 0
          0,
          0,
          0,
          // flags
          (track.id & 4278190080) >> 24,
          (track.id & 16711680) >> 16,
          (track.id & 65280) >> 8,
          track.id & 255,
          // track_ID
          0,
          0,
          0,
          1,
          // default_sample_description_index
          0,
          0,
          0,
          0,
          // default_sample_duration
          0,
          0,
          0,
          0,
          // default_sample_size
          0,
          1,
          0,
          1
          // default_sample_flags
        ]);
        if (track.type !== "video") {
          result[result.length - 1] = 0;
        }
        return box(types.trex, result);
      };
      (function() {
        var audioTrun, videoTrun, trunHeader;
        trunHeader = function trunHeader2(samples, offset) {
          var durationPresent = 0, sizePresent = 0, flagsPresent = 0, compositionTimeOffset = 0;
          if (samples.length) {
            if (samples[0].duration !== void 0) {
              durationPresent = 1;
            }
            if (samples[0].size !== void 0) {
              sizePresent = 2;
            }
            if (samples[0].flags !== void 0) {
              flagsPresent = 4;
            }
            if (samples[0].compositionTimeOffset !== void 0) {
              compositionTimeOffset = 8;
            }
          }
          return [
            0,
            // version 0
            0,
            durationPresent | sizePresent | flagsPresent | compositionTimeOffset,
            1,
            // flags
            (samples.length & 4278190080) >>> 24,
            (samples.length & 16711680) >>> 16,
            (samples.length & 65280) >>> 8,
            samples.length & 255,
            // sample_count
            (offset & 4278190080) >>> 24,
            (offset & 16711680) >>> 16,
            (offset & 65280) >>> 8,
            offset & 255
            // data_offset
          ];
        };
        videoTrun = function videoTrun2(track, offset) {
          var bytesOffest, bytes, header, samples, sample, i;
          samples = track.samples || [];
          offset += 8 + 12 + 16 * samples.length;
          header = trunHeader(samples, offset);
          bytes = new Uint8Array(header.length + samples.length * 16);
          bytes.set(header);
          bytesOffest = header.length;
          for (i = 0; i < samples.length; i++) {
            sample = samples[i];
            bytes[bytesOffest++] = (sample.duration & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.duration & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.duration & 65280) >>> 8;
            bytes[bytesOffest++] = sample.duration & 255;
            bytes[bytesOffest++] = (sample.size & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.size & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.size & 65280) >>> 8;
            bytes[bytesOffest++] = sample.size & 255;
            bytes[bytesOffest++] = sample.flags.isLeading << 2 | sample.flags.dependsOn;
            bytes[bytesOffest++] = sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample;
            bytes[bytesOffest++] = sample.flags.degradationPriority & 240 << 8;
            bytes[bytesOffest++] = sample.flags.degradationPriority & 15;
            bytes[bytesOffest++] = (sample.compositionTimeOffset & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.compositionTimeOffset & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.compositionTimeOffset & 65280) >>> 8;
            bytes[bytesOffest++] = sample.compositionTimeOffset & 255;
          }
          return box(types.trun, bytes);
        };
        audioTrun = function audioTrun2(track, offset) {
          var bytes, bytesOffest, header, samples, sample, i;
          samples = track.samples || [];
          offset += 8 + 12 + 8 * samples.length;
          header = trunHeader(samples, offset);
          bytes = new Uint8Array(header.length + samples.length * 8);
          bytes.set(header);
          bytesOffest = header.length;
          for (i = 0; i < samples.length; i++) {
            sample = samples[i];
            bytes[bytesOffest++] = (sample.duration & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.duration & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.duration & 65280) >>> 8;
            bytes[bytesOffest++] = sample.duration & 255;
            bytes[bytesOffest++] = (sample.size & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.size & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.size & 65280) >>> 8;
            bytes[bytesOffest++] = sample.size & 255;
          }
          return box(types.trun, bytes);
        };
        trun$1 = function trun2(track, offset) {
          if (track.type === "audio") {
            return audioTrun(track, offset);
          }
          return videoTrun(track, offset);
        };
      })();
      var mp4Generator = {
        ftyp,
        mdat,
        moof,
        moov,
        initSegment: function initSegment(tracks) {
          var fileType = ftyp(), movie = moov(tracks), result;
          result = new Uint8Array(fileType.byteLength + movie.byteLength);
          result.set(fileType);
          result.set(movie, fileType.byteLength);
          return result;
        }
      };
      var toUnsigned$3 = function toUnsigned2(value) {
        return value >>> 0;
      };
      var toHexString$1 = function toHexString2(value) {
        return ("00" + value.toString(16)).slice(-2);
      };
      var bin = {
        toUnsigned: toUnsigned$3,
        toHexString: toHexString$1
      };
      var parseType$2 = function parseType2(buffer) {
        var result = "";
        result += String.fromCharCode(buffer[0]);
        result += String.fromCharCode(buffer[1]);
        result += String.fromCharCode(buffer[2]);
        result += String.fromCharCode(buffer[3]);
        return result;
      };
      var parseType_1 = parseType$2;
      var toUnsigned$2 = bin.toUnsigned;
      var findBox = function findBox2(data, path) {
        var results = [], i, size, type2, end, subresults;
        if (!path.length) {
          return null;
        }
        for (i = 0; i < data.byteLength; ) {
          size = toUnsigned$2(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);
          type2 = parseType_1(data.subarray(i + 4, i + 8));
          end = size > 1 ? i + size : data.byteLength;
          if (type2 === path[0]) {
            if (path.length === 1) {
              results.push(data.subarray(i + 8, end));
            } else {
              subresults = findBox2(data.subarray(i + 8, end), path.slice(1));
              if (subresults.length) {
                results = results.concat(subresults);
              }
            }
          }
          i = end;
        }
        return results;
      };
      var findBox_1 = findBox;
      var tfhd = function tfhd2(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          trackId: view.getUint32(4)
        }, baseDataOffsetPresent = result.flags[2] & 1, sampleDescriptionIndexPresent = result.flags[2] & 2, defaultSampleDurationPresent = result.flags[2] & 8, defaultSampleSizePresent = result.flags[2] & 16, defaultSampleFlagsPresent = result.flags[2] & 32, durationIsEmpty = result.flags[0] & 65536, defaultBaseIsMoof = result.flags[0] & 131072, i;
        i = 8;
        if (baseDataOffsetPresent) {
          i += 4;
          result.baseDataOffset = view.getUint32(12);
          i += 4;
        }
        if (sampleDescriptionIndexPresent) {
          result.sampleDescriptionIndex = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleDurationPresent) {
          result.defaultSampleDuration = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleSizePresent) {
          result.defaultSampleSize = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleFlagsPresent) {
          result.defaultSampleFlags = view.getUint32(i);
        }
        if (durationIsEmpty) {
          result.durationIsEmpty = true;
        }
        if (!baseDataOffsetPresent && defaultBaseIsMoof) {
          result.baseDataOffsetIsMoof = true;
        }
        return result;
      };
      var parseTfhd = tfhd;
      var parseSampleFlags = function parseSampleFlags2(flags) {
        return {
          isLeading: (flags[0] & 12) >>> 2,
          dependsOn: flags[0] & 3,
          isDependedOn: (flags[1] & 192) >>> 6,
          hasRedundancy: (flags[1] & 48) >>> 4,
          paddingValue: (flags[1] & 14) >>> 1,
          isNonSyncSample: flags[1] & 1,
          degradationPriority: flags[2] << 8 | flags[3]
        };
      };
      var parseSampleFlags_1 = parseSampleFlags;
      var trun = function trun2(data) {
        var result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          samples: []
        }, view = new DataView(data.buffer, data.byteOffset, data.byteLength), dataOffsetPresent = result.flags[2] & 1, firstSampleFlagsPresent = result.flags[2] & 4, sampleDurationPresent = result.flags[1] & 1, sampleSizePresent = result.flags[1] & 2, sampleFlagsPresent = result.flags[1] & 4, sampleCompositionTimeOffsetPresent = result.flags[1] & 8, sampleCount = view.getUint32(4), offset = 8, sample;
        if (dataOffsetPresent) {
          result.dataOffset = view.getInt32(offset);
          offset += 4;
        }
        if (firstSampleFlagsPresent && sampleCount) {
          sample = {
            flags: parseSampleFlags_1(data.subarray(offset, offset + 4))
          };
          offset += 4;
          if (sampleDurationPresent) {
            sample.duration = view.getUint32(offset);
            offset += 4;
          }
          if (sampleSizePresent) {
            sample.size = view.getUint32(offset);
            offset += 4;
          }
          if (sampleCompositionTimeOffsetPresent) {
            if (result.version === 1) {
              sample.compositionTimeOffset = view.getInt32(offset);
            } else {
              sample.compositionTimeOffset = view.getUint32(offset);
            }
            offset += 4;
          }
          result.samples.push(sample);
          sampleCount--;
        }
        while (sampleCount--) {
          sample = {};
          if (sampleDurationPresent) {
            sample.duration = view.getUint32(offset);
            offset += 4;
          }
          if (sampleSizePresent) {
            sample.size = view.getUint32(offset);
            offset += 4;
          }
          if (sampleFlagsPresent) {
            sample.flags = parseSampleFlags_1(data.subarray(offset, offset + 4));
            offset += 4;
          }
          if (sampleCompositionTimeOffsetPresent) {
            if (result.version === 1) {
              sample.compositionTimeOffset = view.getInt32(offset);
            } else {
              sample.compositionTimeOffset = view.getUint32(offset);
            }
            offset += 4;
          }
          result.samples.push(sample);
        }
        return result;
      };
      var parseTrun = trun;
      var toUnsigned$1 = bin.toUnsigned;
      var tfdt = function tfdt2(data) {
        var result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          baseMediaDecodeTime: toUnsigned$1(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7])
        };
        if (result.version === 1) {
          result.baseMediaDecodeTime *= Math.pow(2, 32);
          result.baseMediaDecodeTime += toUnsigned$1(data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11]);
        }
        return result;
      };
      var parseTfdt = tfdt;
      var toUnsigned = bin.toUnsigned;
      var toHexString = bin.toHexString;
      var timescale, startTime, compositionStartTime, getVideoTrackIds, getTracks, getTimescaleFromMediaHeader;
      timescale = function timescale2(init) {
        var result = {}, traks = findBox_1(init, ["moov", "trak"]);
        return traks.reduce(function(result2, trak2) {
          var tkhd2, version, index, id, mdhd2;
          tkhd2 = findBox_1(trak2, ["tkhd"])[0];
          if (!tkhd2) {
            return null;
          }
          version = tkhd2[0];
          index = version === 0 ? 12 : 20;
          id = toUnsigned(tkhd2[index] << 24 | tkhd2[index + 1] << 16 | tkhd2[index + 2] << 8 | tkhd2[index + 3]);
          mdhd2 = findBox_1(trak2, ["mdia", "mdhd"])[0];
          if (!mdhd2) {
            return null;
          }
          version = mdhd2[0];
          index = version === 0 ? 12 : 20;
          result2[id] = toUnsigned(mdhd2[index] << 24 | mdhd2[index + 1] << 16 | mdhd2[index + 2] << 8 | mdhd2[index + 3]);
          return result2;
        }, result);
      };
      startTime = function startTime2(timescale2, fragment) {
        var trafs, baseTimes, result;
        trafs = findBox_1(fragment, ["moof", "traf"]);
        baseTimes = [].concat.apply([], trafs.map(function(traf2) {
          return findBox_1(traf2, ["tfhd"]).map(function(tfhd2) {
            var id, scale, baseTime;
            id = toUnsigned(tfhd2[4] << 24 | tfhd2[5] << 16 | tfhd2[6] << 8 | tfhd2[7]);
            scale = timescale2[id] || 9e4;
            baseTime = findBox_1(traf2, ["tfdt"]).map(function(tfdt2) {
              var version, result2;
              version = tfdt2[0];
              result2 = toUnsigned(tfdt2[4] << 24 | tfdt2[5] << 16 | tfdt2[6] << 8 | tfdt2[7]);
              if (version === 1) {
                result2 *= Math.pow(2, 32);
                result2 += toUnsigned(tfdt2[8] << 24 | tfdt2[9] << 16 | tfdt2[10] << 8 | tfdt2[11]);
              }
              return result2;
            })[0];
            baseTime = typeof baseTime === "number" && !isNaN(baseTime) ? baseTime : Infinity;
            return baseTime / scale;
          });
        }));
        result = Math.min.apply(null, baseTimes);
        return isFinite(result) ? result : 0;
      };
      compositionStartTime = function compositionStartTime2(timescales, fragment) {
        var trafBoxes = findBox_1(fragment, ["moof", "traf"]);
        var baseMediaDecodeTime = 0;
        var compositionTimeOffset = 0;
        var trackId;
        if (trafBoxes && trafBoxes.length) {
          var tfhd2 = findBox_1(trafBoxes[0], ["tfhd"])[0];
          var trun2 = findBox_1(trafBoxes[0], ["trun"])[0];
          var tfdt2 = findBox_1(trafBoxes[0], ["tfdt"])[0];
          if (tfhd2) {
            var parsedTfhd = parseTfhd(tfhd2);
            trackId = parsedTfhd.trackId;
          }
          if (tfdt2) {
            var parsedTfdt = parseTfdt(tfdt2);
            baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;
          }
          if (trun2) {
            var parsedTrun = parseTrun(trun2);
            if (parsedTrun.samples && parsedTrun.samples.length) {
              compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;
            }
          }
        }
        var timescale2 = timescales[trackId] || 9e4;
        return (baseMediaDecodeTime + compositionTimeOffset) / timescale2;
      };
      getVideoTrackIds = function getVideoTrackIds2(init) {
        var traks = findBox_1(init, ["moov", "trak"]);
        var videoTrackIds = [];
        traks.forEach(function(trak2) {
          var hdlrs = findBox_1(trak2, ["mdia", "hdlr"]);
          var tkhds = findBox_1(trak2, ["tkhd"]);
          hdlrs.forEach(function(hdlr2, index) {
            var handlerType = parseType_1(hdlr2.subarray(8, 12));
            var tkhd2 = tkhds[index];
            var view;
            var version;
            var trackId;
            if (handlerType === "vide") {
              view = new DataView(tkhd2.buffer, tkhd2.byteOffset, tkhd2.byteLength);
              version = view.getUint8(0);
              trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);
              videoTrackIds.push(trackId);
            }
          });
        });
        return videoTrackIds;
      };
      getTimescaleFromMediaHeader = function getTimescaleFromMediaHeader2(mdhd2) {
        var version = mdhd2[0];
        var index = version === 0 ? 12 : 20;
        return toUnsigned(mdhd2[index] << 24 | mdhd2[index + 1] << 16 | mdhd2[index + 2] << 8 | mdhd2[index + 3]);
      };
      getTracks = function getTracks2(init) {
        var traks = findBox_1(init, ["moov", "trak"]);
        var tracks = [];
        traks.forEach(function(trak2) {
          var track = {};
          var tkhd2 = findBox_1(trak2, ["tkhd"])[0];
          var view, tkhdVersion;
          if (tkhd2) {
            view = new DataView(tkhd2.buffer, tkhd2.byteOffset, tkhd2.byteLength);
            tkhdVersion = view.getUint8(0);
            track.id = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);
          }
          var hdlr2 = findBox_1(trak2, ["mdia", "hdlr"])[0];
          if (hdlr2) {
            var type2 = parseType_1(hdlr2.subarray(8, 12));
            if (type2 === "vide") {
              track.type = "video";
            } else if (type2 === "soun") {
              track.type = "audio";
            } else {
              track.type = type2;
            }
          }
          var stsd2 = findBox_1(trak2, ["mdia", "minf", "stbl", "stsd"])[0];
          if (stsd2) {
            var sampleDescriptions = stsd2.subarray(8);
            track.codec = parseType_1(sampleDescriptions.subarray(4, 8));
            var codecBox = findBox_1(sampleDescriptions, [track.codec])[0];
            var codecConfig, codecConfigType;
            if (codecBox) {
              if (/^[asm]vc[1-9]$/i.test(track.codec)) {
                codecConfig = codecBox.subarray(78);
                codecConfigType = parseType_1(codecConfig.subarray(4, 8));
                if (codecConfigType === "avcC" && codecConfig.length > 11) {
                  track.codec += ".";
                  track.codec += toHexString(codecConfig[9]);
                  track.codec += toHexString(codecConfig[10]);
                  track.codec += toHexString(codecConfig[11]);
                } else {
                  track.codec = "avc1.4d400d";
                }
              } else if (/^mp4[a,v]$/i.test(track.codec)) {
                codecConfig = codecBox.subarray(28);
                codecConfigType = parseType_1(codecConfig.subarray(4, 8));
                if (codecConfigType === "esds" && codecConfig.length > 20 && codecConfig[19] !== 0) {
                  track.codec += "." + toHexString(codecConfig[19]);
                  track.codec += "." + toHexString(codecConfig[20] >>> 2 & 63).replace(/^0/, "");
                } else {
                  track.codec = "mp4a.40.2";
                }
              } else {
                track.codec = track.codec.toLowerCase();
              }
            }
          }
          var mdhd2 = findBox_1(trak2, ["mdia", "mdhd"])[0];
          if (mdhd2) {
            track.timescale = getTimescaleFromMediaHeader(mdhd2);
          }
          tracks.push(track);
        });
        return tracks;
      };
      var probe$2 = {
        // export mp4 inspector's findBox and parseType for backwards compatibility
        findBox: findBox_1,
        parseType: parseType_1,
        timescale,
        startTime,
        compositionStartTime,
        videoTrackIds: getVideoTrackIds,
        tracks: getTracks,
        getTimescaleFromMediaHeader
      };
      var groupNalsIntoFrames = function groupNalsIntoFrames2(nalUnits) {
        var i, currentNal, currentFrame = [], frames = [];
        frames.byteLength = 0;
        frames.nalCount = 0;
        frames.duration = 0;
        currentFrame.byteLength = 0;
        for (i = 0; i < nalUnits.length; i++) {
          currentNal = nalUnits[i];
          if (currentNal.nalUnitType === "access_unit_delimiter_rbsp") {
            if (currentFrame.length) {
              currentFrame.duration = currentNal.dts - currentFrame.dts;
              frames.byteLength += currentFrame.byteLength;
              frames.nalCount += currentFrame.length;
              frames.duration += currentFrame.duration;
              frames.push(currentFrame);
            }
            currentFrame = [currentNal];
            currentFrame.byteLength = currentNal.data.byteLength;
            currentFrame.pts = currentNal.pts;
            currentFrame.dts = currentNal.dts;
          } else {
            if (currentNal.nalUnitType === "slice_layer_without_partitioning_rbsp_idr") {
              currentFrame.keyFrame = true;
            }
            currentFrame.duration = currentNal.dts - currentFrame.dts;
            currentFrame.byteLength += currentNal.data.byteLength;
            currentFrame.push(currentNal);
          }
        }
        if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {
          currentFrame.duration = frames[frames.length - 1].duration;
        }
        frames.byteLength += currentFrame.byteLength;
        frames.nalCount += currentFrame.length;
        frames.duration += currentFrame.duration;
        frames.push(currentFrame);
        return frames;
      };
      var groupFramesIntoGops = function groupFramesIntoGops2(frames) {
        var i, currentFrame, currentGop = [], gops = [];
        currentGop.byteLength = 0;
        currentGop.nalCount = 0;
        currentGop.duration = 0;
        currentGop.pts = frames[0].pts;
        currentGop.dts = frames[0].dts;
        gops.byteLength = 0;
        gops.nalCount = 0;
        gops.duration = 0;
        gops.pts = frames[0].pts;
        gops.dts = frames[0].dts;
        for (i = 0; i < frames.length; i++) {
          currentFrame = frames[i];
          if (currentFrame.keyFrame) {
            if (currentGop.length) {
              gops.push(currentGop);
              gops.byteLength += currentGop.byteLength;
              gops.nalCount += currentGop.nalCount;
              gops.duration += currentGop.duration;
            }
            currentGop = [currentFrame];
            currentGop.nalCount = currentFrame.length;
            currentGop.byteLength = currentFrame.byteLength;
            currentGop.pts = currentFrame.pts;
            currentGop.dts = currentFrame.dts;
            currentGop.duration = currentFrame.duration;
          } else {
            currentGop.duration += currentFrame.duration;
            currentGop.nalCount += currentFrame.length;
            currentGop.byteLength += currentFrame.byteLength;
            currentGop.push(currentFrame);
          }
        }
        if (gops.length && currentGop.duration <= 0) {
          currentGop.duration = gops[gops.length - 1].duration;
        }
        gops.byteLength += currentGop.byteLength;
        gops.nalCount += currentGop.nalCount;
        gops.duration += currentGop.duration;
        gops.push(currentGop);
        return gops;
      };
      var extendFirstKeyFrame = function extendFirstKeyFrame2(gops) {
        var currentGop;
        if (!gops[0][0].keyFrame && gops.length > 1) {
          currentGop = gops.shift();
          gops.byteLength -= currentGop.byteLength;
          gops.nalCount -= currentGop.nalCount;
          gops[0][0].dts = currentGop.dts;
          gops[0][0].pts = currentGop.pts;
          gops[0][0].duration += currentGop.duration;
        }
        return gops;
      };
      var createDefaultSample = function createDefaultSample2() {
        return {
          size: 0,
          flags: {
            isLeading: 0,
            dependsOn: 1,
            isDependedOn: 0,
            hasRedundancy: 0,
            degradationPriority: 0,
            isNonSyncSample: 1
          }
        };
      };
      var sampleForFrame = function sampleForFrame2(frame, dataOffset) {
        var sample = createDefaultSample();
        sample.dataOffset = dataOffset;
        sample.compositionTimeOffset = frame.pts - frame.dts;
        sample.duration = frame.duration;
        sample.size = 4 * frame.length;
        sample.size += frame.byteLength;
        if (frame.keyFrame) {
          sample.flags.dependsOn = 2;
          sample.flags.isNonSyncSample = 0;
        }
        return sample;
      };
      var generateSampleTable$1 = function generateSampleTable2(gops, baseDataOffset) {
        var h, i, sample, currentGop, currentFrame, dataOffset = baseDataOffset || 0, samples = [];
        for (h = 0; h < gops.length; h++) {
          currentGop = gops[h];
          for (i = 0; i < currentGop.length; i++) {
            currentFrame = currentGop[i];
            sample = sampleForFrame(currentFrame, dataOffset);
            dataOffset += sample.size;
            samples.push(sample);
          }
        }
        return samples;
      };
      var concatenateNalData = function concatenateNalData2(gops) {
        var h, i, j, currentGop, currentFrame, currentNal, dataOffset = 0, nalsByteLength = gops.byteLength, numberOfNals = gops.nalCount, totalByteLength = nalsByteLength + 4 * numberOfNals, data = new Uint8Array(totalByteLength), view = new DataView(data.buffer);
        for (h = 0; h < gops.length; h++) {
          currentGop = gops[h];
          for (i = 0; i < currentGop.length; i++) {
            currentFrame = currentGop[i];
            for (j = 0; j < currentFrame.length; j++) {
              currentNal = currentFrame[j];
              view.setUint32(dataOffset, currentNal.data.byteLength);
              dataOffset += 4;
              data.set(currentNal.data, dataOffset);
              dataOffset += currentNal.data.byteLength;
            }
          }
        }
        return data;
      };
      var generateSampleTableForFrame = function generateSampleTableForFrame2(frame, baseDataOffset) {
        var sample, dataOffset = baseDataOffset || 0, samples = [];
        sample = sampleForFrame(frame, dataOffset);
        samples.push(sample);
        return samples;
      };
      var concatenateNalDataForFrame = function concatenateNalDataForFrame2(frame) {
        var i, currentNal, dataOffset = 0, nalsByteLength = frame.byteLength, numberOfNals = frame.length, totalByteLength = nalsByteLength + 4 * numberOfNals, data = new Uint8Array(totalByteLength), view = new DataView(data.buffer);
        for (i = 0; i < frame.length; i++) {
          currentNal = frame[i];
          view.setUint32(dataOffset, currentNal.data.byteLength);
          dataOffset += 4;
          data.set(currentNal.data, dataOffset);
          dataOffset += currentNal.data.byteLength;
        }
        return data;
      };
      var frameUtils = {
        groupNalsIntoFrames,
        groupFramesIntoGops,
        extendFirstKeyFrame,
        generateSampleTable: generateSampleTable$1,
        concatenateNalData,
        generateSampleTableForFrame,
        concatenateNalDataForFrame
      };
      var highPrefix = [33, 16, 5, 32, 164, 27];
      var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];
      var zeroFill = function zeroFill2(count) {
        var a2 = [];
        while (count--) {
          a2.push(0);
        }
        return a2;
      };
      var makeTable = function makeTable2(metaTable) {
        return Object.keys(metaTable).reduce(function(obj, key) {
          obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {
            return arr.concat(part);
          }, []));
          return obj;
        }, {});
      };
      var silence;
      var silence_1 = function silence_12() {
        if (!silence) {
          var coneOfSilence = {
            96e3: [highPrefix, [227, 64], zeroFill(154), [56]],
            88200: [highPrefix, [231], zeroFill(170), [56]],
            64e3: [highPrefix, [248, 192], zeroFill(240), [56]],
            48e3: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],
            44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],
            32e3: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],
            24e3: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],
            16e3: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],
            12e3: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],
            11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],
            8e3: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]
          };
          silence = makeTable(coneOfSilence);
        }
        return silence;
      };
      var sumFrameByteLengths = function sumFrameByteLengths2(array) {
        var i, currentObj, sum = 0;
        for (i = 0; i < array.length; i++) {
          currentObj = array[i];
          sum += currentObj.data.byteLength;
        }
        return sum;
      };
      var prefixWithSilence = function prefixWithSilence2(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {
        var baseMediaDecodeTimeTs, frameDuration = 0, audioGapDuration = 0, audioFillFrameCount = 0, audioFillDuration = 0, silentFrame, i, firstFrame;
        if (!frames.length) {
          return;
        }
        baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);
        frameDuration = Math.ceil(clock.ONE_SECOND_IN_TS / (track.samplerate / 1024));
        if (audioAppendStartTs && videoBaseMediaDecodeTime) {
          audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);
          audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);
          audioFillDuration = audioFillFrameCount * frameDuration;
        }
        if (audioFillFrameCount < 1 || audioFillDuration > clock.ONE_SECOND_IN_TS / 2) {
          return;
        }
        silentFrame = silence_1()[track.samplerate];
        if (!silentFrame) {
          silentFrame = frames[0].data;
        }
        for (i = 0; i < audioFillFrameCount; i++) {
          firstFrame = frames[0];
          frames.splice(0, 0, {
            data: silentFrame,
            dts: firstFrame.dts - frameDuration,
            pts: firstFrame.pts - frameDuration
          });
        }
        track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));
        return audioFillDuration;
      };
      var trimAdtsFramesByEarliestDts = function trimAdtsFramesByEarliestDts2(adtsFrames, track, earliestAllowedDts) {
        if (track.minSegmentDts >= earliestAllowedDts) {
          return adtsFrames;
        }
        track.minSegmentDts = Infinity;
        return adtsFrames.filter(function(currentFrame) {
          if (currentFrame.dts >= earliestAllowedDts) {
            track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);
            track.minSegmentPts = track.minSegmentDts;
            return true;
          }
          return false;
        });
      };
      var generateSampleTable = function generateSampleTable2(frames) {
        var i, currentFrame, samples = [];
        for (i = 0; i < frames.length; i++) {
          currentFrame = frames[i];
          samples.push({
            size: currentFrame.data.byteLength,
            duration: 1024
            // For AAC audio, all samples contain 1024 samples
          });
        }
        return samples;
      };
      var concatenateFrameData = function concatenateFrameData2(frames) {
        var i, currentFrame, dataOffset = 0, data = new Uint8Array(sumFrameByteLengths(frames));
        for (i = 0; i < frames.length; i++) {
          currentFrame = frames[i];
          data.set(currentFrame.data, dataOffset);
          dataOffset += currentFrame.data.byteLength;
        }
        return data;
      };
      var audioFrameUtils = {
        prefixWithSilence,
        trimAdtsFramesByEarliestDts,
        generateSampleTable,
        concatenateFrameData
      };
      var ONE_SECOND_IN_TS$3 = clock.ONE_SECOND_IN_TS;
      var collectDtsInfo = function collectDtsInfo2(track, data) {
        if (typeof data.pts === "number") {
          if (track.timelineStartInfo.pts === void 0) {
            track.timelineStartInfo.pts = data.pts;
          }
          if (track.minSegmentPts === void 0) {
            track.minSegmentPts = data.pts;
          } else {
            track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);
          }
          if (track.maxSegmentPts === void 0) {
            track.maxSegmentPts = data.pts;
          } else {
            track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);
          }
        }
        if (typeof data.dts === "number") {
          if (track.timelineStartInfo.dts === void 0) {
            track.timelineStartInfo.dts = data.dts;
          }
          if (track.minSegmentDts === void 0) {
            track.minSegmentDts = data.dts;
          } else {
            track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);
          }
          if (track.maxSegmentDts === void 0) {
            track.maxSegmentDts = data.dts;
          } else {
            track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);
          }
        }
      };
      var clearDtsInfo = function clearDtsInfo2(track) {
        delete track.minSegmentDts;
        delete track.maxSegmentDts;
        delete track.minSegmentPts;
        delete track.maxSegmentPts;
      };
      var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime2(track, keepOriginalTimestamps) {
        var baseMediaDecodeTime, scale, minSegmentDts = track.minSegmentDts;
        if (!keepOriginalTimestamps) {
          minSegmentDts -= track.timelineStartInfo.dts;
        }
        baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;
        baseMediaDecodeTime += minSegmentDts;
        baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);
        if (track.type === "audio") {
          scale = track.samplerate / ONE_SECOND_IN_TS$3;
          baseMediaDecodeTime *= scale;
          baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);
        }
        return baseMediaDecodeTime;
      };
      var trackDecodeInfo = {
        clearDtsInfo,
        calculateTrackBaseMediaDecodeTime,
        collectDtsInfo
      };
      var USER_DATA_REGISTERED_ITU_T_T35 = 4, RBSP_TRAILING_BITS = 128;
      var parseSei = function parseSei2(bytes) {
        var i = 0, result = {
          payloadType: -1,
          payloadSize: 0
        }, payloadType = 0, payloadSize = 0;
        while (i < bytes.byteLength) {
          if (bytes[i] === RBSP_TRAILING_BITS) {
            break;
          }
          while (bytes[i] === 255) {
            payloadType += 255;
            i++;
          }
          payloadType += bytes[i++];
          while (bytes[i] === 255) {
            payloadSize += 255;
            i++;
          }
          payloadSize += bytes[i++];
          if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {
            var userIdentifier = String.fromCharCode(bytes[i + 3], bytes[i + 4], bytes[i + 5], bytes[i + 6]);
            if (userIdentifier === "GA94") {
              result.payloadType = payloadType;
              result.payloadSize = payloadSize;
              result.payload = bytes.subarray(i, i + payloadSize);
              break;
            } else {
              result.payload = void 0;
            }
          }
          i += payloadSize;
          payloadType = 0;
          payloadSize = 0;
        }
        return result;
      };
      var parseUserData = function parseUserData2(sei) {
        if (sei.payload[0] !== 181) {
          return null;
        }
        if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {
          return null;
        }
        if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== "GA94") {
          return null;
        }
        if (sei.payload[7] !== 3) {
          return null;
        }
        return sei.payload.subarray(8, sei.payload.length - 1);
      };
      var parseCaptionPackets = function parseCaptionPackets2(pts, userData) {
        var results = [], i, count, offset, data;
        if (!(userData[0] & 64)) {
          return results;
        }
        count = userData[0] & 31;
        for (i = 0; i < count; i++) {
          offset = i * 3;
          data = {
            type: userData[offset + 2] & 3,
            pts
          };
          if (userData[offset + 2] & 4) {
            data.ccData = userData[offset + 3] << 8 | userData[offset + 4];
            results.push(data);
          }
        }
        return results;
      };
      var discardEmulationPreventionBytes$1 = function discardEmulationPreventionBytes2(data) {
        var length = data.byteLength, emulationPreventionBytesPositions = [], i = 1, newLength, newData;
        while (i < length - 2) {
          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 3) {
            emulationPreventionBytesPositions.push(i + 2);
            i += 2;
          } else {
            i++;
          }
        }
        if (emulationPreventionBytesPositions.length === 0) {
          return data;
        }
        newLength = length - emulationPreventionBytesPositions.length;
        newData = new Uint8Array(newLength);
        var sourceIndex = 0;
        for (i = 0; i < newLength; sourceIndex++, i++) {
          if (sourceIndex === emulationPreventionBytesPositions[0]) {
            sourceIndex++;
            emulationPreventionBytesPositions.shift();
          }
          newData[i] = data[sourceIndex];
        }
        return newData;
      };
      var captionPacketParser = {
        parseSei,
        parseUserData,
        parseCaptionPackets,
        discardEmulationPreventionBytes: discardEmulationPreventionBytes$1,
        USER_DATA_REGISTERED_ITU_T_T35
      };
      var CaptionStream$1 = function CaptionStream2(options) {
        options = options || {};
        CaptionStream2.prototype.init.call(this);
        this.parse708captions_ = typeof options.parse708captions === "boolean" ? options.parse708captions : true;
        this.captionPackets_ = [];
        this.ccStreams_ = [
          new Cea608Stream(0, 0),
          // eslint-disable-line no-use-before-define
          new Cea608Stream(0, 1),
          // eslint-disable-line no-use-before-define
          new Cea608Stream(1, 0),
          // eslint-disable-line no-use-before-define
          new Cea608Stream(1, 1)
          // eslint-disable-line no-use-before-define
        ];
        if (this.parse708captions_) {
          this.cc708Stream_ = new Cea708Stream({
            captionServices: options.captionServices
          });
        }
        this.reset();
        this.ccStreams_.forEach(function(cc) {
          cc.on("data", this.trigger.bind(this, "data"));
          cc.on("partialdone", this.trigger.bind(this, "partialdone"));
          cc.on("done", this.trigger.bind(this, "done"));
        }, this);
        if (this.parse708captions_) {
          this.cc708Stream_.on("data", this.trigger.bind(this, "data"));
          this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone"));
          this.cc708Stream_.on("done", this.trigger.bind(this, "done"));
        }
      };
      CaptionStream$1.prototype = new stream();
      CaptionStream$1.prototype.push = function(event) {
        var sei, userData, newCaptionPackets;
        if (event.nalUnitType !== "sei_rbsp") {
          return;
        }
        sei = captionPacketParser.parseSei(event.escapedRBSP);
        if (!sei.payload) {
          return;
        }
        if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {
          return;
        }
        userData = captionPacketParser.parseUserData(sei);
        if (!userData) {
          return;
        }
        if (event.dts < this.latestDts_) {
          this.ignoreNextEqualDts_ = true;
          return;
        } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
          this.numSameDts_--;
          if (!this.numSameDts_) {
            this.ignoreNextEqualDts_ = false;
          }
          return;
        }
        newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);
        this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);
        if (this.latestDts_ !== event.dts) {
          this.numSameDts_ = 0;
        }
        this.numSameDts_++;
        this.latestDts_ = event.dts;
      };
      CaptionStream$1.prototype.flushCCStreams = function(flushType) {
        this.ccStreams_.forEach(function(cc) {
          return flushType === "flush" ? cc.flush() : cc.partialFlush();
        }, this);
      };
      CaptionStream$1.prototype.flushStream = function(flushType) {
        if (!this.captionPackets_.length) {
          this.flushCCStreams(flushType);
          return;
        }
        this.captionPackets_.forEach(function(elem, idx) {
          elem.presortIndex = idx;
        });
        this.captionPackets_.sort(function(a2, b2) {
          if (a2.pts === b2.pts) {
            return a2.presortIndex - b2.presortIndex;
          }
          return a2.pts - b2.pts;
        });
        this.captionPackets_.forEach(function(packet) {
          if (packet.type < 2) {
            this.dispatchCea608Packet(packet);
          } else {
            this.dispatchCea708Packet(packet);
          }
        }, this);
        this.captionPackets_.length = 0;
        this.flushCCStreams(flushType);
      };
      CaptionStream$1.prototype.flush = function() {
        return this.flushStream("flush");
      };
      CaptionStream$1.prototype.partialFlush = function() {
        return this.flushStream("partialFlush");
      };
      CaptionStream$1.prototype.reset = function() {
        this.latestDts_ = null;
        this.ignoreNextEqualDts_ = false;
        this.numSameDts_ = 0;
        this.activeCea608Channel_ = [null, null];
        this.ccStreams_.forEach(function(ccStream) {
          ccStream.reset();
        });
      };
      CaptionStream$1.prototype.dispatchCea608Packet = function(packet) {
        if (this.setsTextOrXDSActive(packet)) {
          this.activeCea608Channel_[packet.type] = null;
        } else if (this.setsChannel1Active(packet)) {
          this.activeCea608Channel_[packet.type] = 0;
        } else if (this.setsChannel2Active(packet)) {
          this.activeCea608Channel_[packet.type] = 1;
        }
        if (this.activeCea608Channel_[packet.type] === null) {
          return;
        }
        this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);
      };
      CaptionStream$1.prototype.setsChannel1Active = function(packet) {
        return (packet.ccData & 30720) === 4096;
      };
      CaptionStream$1.prototype.setsChannel2Active = function(packet) {
        return (packet.ccData & 30720) === 6144;
      };
      CaptionStream$1.prototype.setsTextOrXDSActive = function(packet) {
        return (packet.ccData & 28928) === 256 || (packet.ccData & 30974) === 4138 || (packet.ccData & 30974) === 6186;
      };
      CaptionStream$1.prototype.dispatchCea708Packet = function(packet) {
        if (this.parse708captions_) {
          this.cc708Stream_.push(packet);
        }
      };
      var CHARACTER_TRANSLATION_708 = {
        127: 9834,
        // ♪
        4128: 32,
        // Transparent Space
        4129: 160,
        // Nob-breaking Transparent Space
        4133: 8230,
        // …
        4138: 352,
        // Š
        4140: 338,
        // Œ
        4144: 9608,
        // █
        4145: 8216,
        // ‘
        4146: 8217,
        // ’
        4147: 8220,
        // “
        4148: 8221,
        // ”
        4149: 8226,
        // •
        4153: 8482,
        // ™
        4154: 353,
        // š
        4156: 339,
        // œ
        4157: 8480,
        // ℠
        4159: 376,
        // Ÿ
        4214: 8539,
        // ⅛
        4215: 8540,
        // ⅜
        4216: 8541,
        // ⅝
        4217: 8542,
        // ⅞
        4218: 9168,
        // ⏐
        4219: 9124,
        // ⎤
        4220: 9123,
        // ⎣
        4221: 9135,
        // ⎯
        4222: 9126,
        // ⎦
        4223: 9121,
        // ⎡
        4256: 12600
        // ㄸ (CC char)
      };
      var get708CharFromCode = function get708CharFromCode2(code) {
        var newCode = CHARACTER_TRANSLATION_708[code] || code;
        if (code & 4096 && code === newCode) {
          return "";
        }
        return String.fromCharCode(newCode);
      };
      var within708TextBlock = function within708TextBlock2(b2) {
        return 32 <= b2 && b2 <= 127 || 160 <= b2 && b2 <= 255;
      };
      var Cea708Window = function Cea708Window2(windowNum) {
        this.windowNum = windowNum;
        this.reset();
      };
      Cea708Window.prototype.reset = function() {
        this.clearText();
        this.pendingNewLine = false;
        this.winAttr = {};
        this.penAttr = {};
        this.penLoc = {};
        this.penColor = {};
        this.visible = 0;
        this.rowLock = 0;
        this.columnLock = 0;
        this.priority = 0;
        this.relativePositioning = 0;
        this.anchorVertical = 0;
        this.anchorHorizontal = 0;
        this.anchorPoint = 0;
        this.rowCount = 1;
        this.virtualRowCount = this.rowCount + 1;
        this.columnCount = 41;
        this.windowStyle = 0;
        this.penStyle = 0;
      };
      Cea708Window.prototype.getText = function() {
        return this.rows.join("\n");
      };
      Cea708Window.prototype.clearText = function() {
        this.rows = [""];
        this.rowIdx = 0;
      };
      Cea708Window.prototype.newLine = function(pts) {
        if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === "function") {
          this.beforeRowOverflow(pts);
        }
        if (this.rows.length > 0) {
          this.rows.push("");
          this.rowIdx++;
        }
        while (this.rows.length > this.virtualRowCount) {
          this.rows.shift();
          this.rowIdx--;
        }
      };
      Cea708Window.prototype.isEmpty = function() {
        if (this.rows.length === 0) {
          return true;
        } else if (this.rows.length === 1) {
          return this.rows[0] === "";
        }
        return false;
      };
      Cea708Window.prototype.addText = function(text) {
        this.rows[this.rowIdx] += text;
      };
      Cea708Window.prototype.backspace = function() {
        if (!this.isEmpty()) {
          var row = this.rows[this.rowIdx];
          this.rows[this.rowIdx] = row.substr(0, row.length - 1);
        }
      };
      var Cea708Service = function Cea708Service2(serviceNum, encoding, stream2) {
        this.serviceNum = serviceNum;
        this.text = "";
        this.currentWindow = new Cea708Window(-1);
        this.windows = [];
        this.stream = stream2;
        if (typeof encoding === "string") {
          this.createTextDecoder(encoding);
        }
      };
      Cea708Service.prototype.init = function(pts, beforeRowOverflow) {
        this.startPts = pts;
        for (var win = 0; win < 8; win++) {
          this.windows[win] = new Cea708Window(win);
          if (typeof beforeRowOverflow === "function") {
            this.windows[win].beforeRowOverflow = beforeRowOverflow;
          }
        }
      };
      Cea708Service.prototype.setCurrentWindow = function(windowNum) {
        this.currentWindow = this.windows[windowNum];
      };
      Cea708Service.prototype.createTextDecoder = function(encoding) {
        if (typeof TextDecoder === "undefined") {
          this.stream.trigger("log", {
            level: "warn",
            message: "The `encoding` option is unsupported without TextDecoder support"
          });
        } else {
          try {
            this.textDecoder_ = new TextDecoder(encoding);
          } catch (error) {
            this.stream.trigger("log", {
              level: "warn",
              message: "TextDecoder could not be created with " + encoding + " encoding. " + error
            });
          }
        }
      };
      var Cea708Stream = function Cea708Stream2(options) {
        options = options || {};
        Cea708Stream2.prototype.init.call(this);
        var self2 = this;
        var captionServices = options.captionServices || {};
        var captionServiceEncodings = {};
        var serviceProps;
        Object.keys(captionServices).forEach(function(serviceName) {
          serviceProps = captionServices[serviceName];
          if (/^SERVICE/.test(serviceName)) {
            captionServiceEncodings[serviceName] = serviceProps.encoding;
          }
        });
        this.serviceEncodings = captionServiceEncodings;
        this.current708Packet = null;
        this.services = {};
        this.push = function(packet) {
          if (packet.type === 3) {
            self2.new708Packet();
            self2.add708Bytes(packet);
          } else {
            if (self2.current708Packet === null) {
              self2.new708Packet();
            }
            self2.add708Bytes(packet);
          }
        };
      };
      Cea708Stream.prototype = new stream();
      Cea708Stream.prototype.new708Packet = function() {
        if (this.current708Packet !== null) {
          this.push708Packet();
        }
        this.current708Packet = {
          data: [],
          ptsVals: []
        };
      };
      Cea708Stream.prototype.add708Bytes = function(packet) {
        var data = packet.ccData;
        var byte0 = data >>> 8;
        var byte1 = data & 255;
        this.current708Packet.ptsVals.push(packet.pts);
        this.current708Packet.data.push(byte0);
        this.current708Packet.data.push(byte1);
      };
      Cea708Stream.prototype.push708Packet = function() {
        var packet708 = this.current708Packet;
        var packetData = packet708.data;
        var serviceNum = null;
        var blockSize = null;
        var i = 0;
        var b2 = packetData[i++];
        packet708.seq = b2 >> 6;
        packet708.sizeCode = b2 & 63;
        for (; i < packetData.length; i++) {
          b2 = packetData[i++];
          serviceNum = b2 >> 5;
          blockSize = b2 & 31;
          if (serviceNum === 7 && blockSize > 0) {
            b2 = packetData[i++];
            serviceNum = b2;
          }
          this.pushServiceBlock(serviceNum, i, blockSize);
          if (blockSize > 0) {
            i += blockSize - 1;
          }
        }
      };
      Cea708Stream.prototype.pushServiceBlock = function(serviceNum, start, size) {
        var b2;
        var i = start;
        var packetData = this.current708Packet.data;
        var service = this.services[serviceNum];
        if (!service) {
          service = this.initService(serviceNum, i);
        }
        for (; i < start + size && i < packetData.length; i++) {
          b2 = packetData[i];
          if (within708TextBlock(b2)) {
            i = this.handleText(i, service);
          } else if (b2 === 24) {
            i = this.multiByteCharacter(i, service);
          } else if (b2 === 16) {
            i = this.extendedCommands(i, service);
          } else if (128 <= b2 && b2 <= 135) {
            i = this.setCurrentWindow(i, service);
          } else if (152 <= b2 && b2 <= 159) {
            i = this.defineWindow(i, service);
          } else if (b2 === 136) {
            i = this.clearWindows(i, service);
          } else if (b2 === 140) {
            i = this.deleteWindows(i, service);
          } else if (b2 === 137) {
            i = this.displayWindows(i, service);
          } else if (b2 === 138) {
            i = this.hideWindows(i, service);
          } else if (b2 === 139) {
            i = this.toggleWindows(i, service);
          } else if (b2 === 151) {
            i = this.setWindowAttributes(i, service);
          } else if (b2 === 144) {
            i = this.setPenAttributes(i, service);
          } else if (b2 === 145) {
            i = this.setPenColor(i, service);
          } else if (b2 === 146) {
            i = this.setPenLocation(i, service);
          } else if (b2 === 143) {
            service = this.reset(i, service);
          } else if (b2 === 8) {
            service.currentWindow.backspace();
          } else if (b2 === 12) {
            service.currentWindow.clearText();
          } else if (b2 === 13) {
            service.currentWindow.pendingNewLine = true;
          } else if (b2 === 14) {
            service.currentWindow.clearText();
          } else if (b2 === 141) {
            i++;
          } else
            ;
        }
      };
      Cea708Stream.prototype.extendedCommands = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[++i];
        if (within708TextBlock(b2)) {
          i = this.handleText(i, service, {
            isExtended: true
          });
        }
        return i;
      };
      Cea708Stream.prototype.getPts = function(byteIndex) {
        return this.current708Packet.ptsVals[Math.floor(byteIndex / 2)];
      };
      Cea708Stream.prototype.initService = function(serviceNum, i) {
        var serviceName = "SERVICE" + serviceNum;
        var self2 = this;
        var serviceName;
        var encoding;
        if (serviceName in this.serviceEncodings) {
          encoding = this.serviceEncodings[serviceName];
        }
        this.services[serviceNum] = new Cea708Service(serviceNum, encoding, self2);
        this.services[serviceNum].init(this.getPts(i), function(pts) {
          self2.flushDisplayed(pts, self2.services[serviceNum]);
        });
        return this.services[serviceNum];
      };
      Cea708Stream.prototype.handleText = function(i, service, options) {
        var isExtended = options && options.isExtended;
        var isMultiByte = options && options.isMultiByte;
        var packetData = this.current708Packet.data;
        var extended = isExtended ? 4096 : 0;
        var currentByte = packetData[i];
        var nextByte = packetData[i + 1];
        var win = service.currentWindow;
        var char;
        var charCodeArray;
        if (service.textDecoder_ && !isExtended) {
          if (isMultiByte) {
            charCodeArray = [currentByte, nextByte];
            i++;
          } else {
            charCodeArray = [currentByte];
          }
          char = service.textDecoder_.decode(new Uint8Array(charCodeArray));
        } else {
          char = get708CharFromCode(extended | currentByte);
        }
        if (win.pendingNewLine && !win.isEmpty()) {
          win.newLine(this.getPts(i));
        }
        win.pendingNewLine = false;
        win.addText(char);
        return i;
      };
      Cea708Stream.prototype.multiByteCharacter = function(i, service) {
        var packetData = this.current708Packet.data;
        var firstByte = packetData[i + 1];
        var secondByte = packetData[i + 2];
        if (within708TextBlock(firstByte) && within708TextBlock(secondByte)) {
          i = this.handleText(++i, service, {
            isMultiByte: true
          });
        }
        return i;
      };
      Cea708Stream.prototype.setCurrentWindow = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[i];
        var windowNum = b2 & 7;
        service.setCurrentWindow(windowNum);
        return i;
      };
      Cea708Stream.prototype.defineWindow = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[i];
        var windowNum = b2 & 7;
        service.setCurrentWindow(windowNum);
        var win = service.currentWindow;
        b2 = packetData[++i];
        win.visible = (b2 & 32) >> 5;
        win.rowLock = (b2 & 16) >> 4;
        win.columnLock = (b2 & 8) >> 3;
        win.priority = b2 & 7;
        b2 = packetData[++i];
        win.relativePositioning = (b2 & 128) >> 7;
        win.anchorVertical = b2 & 127;
        b2 = packetData[++i];
        win.anchorHorizontal = b2;
        b2 = packetData[++i];
        win.anchorPoint = (b2 & 240) >> 4;
        win.rowCount = b2 & 15;
        b2 = packetData[++i];
        win.columnCount = b2 & 63;
        b2 = packetData[++i];
        win.windowStyle = (b2 & 56) >> 3;
        win.penStyle = b2 & 7;
        win.virtualRowCount = win.rowCount + 1;
        return i;
      };
      Cea708Stream.prototype.setWindowAttributes = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[i];
        var winAttr = service.currentWindow.winAttr;
        b2 = packetData[++i];
        winAttr.fillOpacity = (b2 & 192) >> 6;
        winAttr.fillRed = (b2 & 48) >> 4;
        winAttr.fillGreen = (b2 & 12) >> 2;
        winAttr.fillBlue = b2 & 3;
        b2 = packetData[++i];
        winAttr.borderType = (b2 & 192) >> 6;
        winAttr.borderRed = (b2 & 48) >> 4;
        winAttr.borderGreen = (b2 & 12) >> 2;
        winAttr.borderBlue = b2 & 3;
        b2 = packetData[++i];
        winAttr.borderType += (b2 & 128) >> 5;
        winAttr.wordWrap = (b2 & 64) >> 6;
        winAttr.printDirection = (b2 & 48) >> 4;
        winAttr.scrollDirection = (b2 & 12) >> 2;
        winAttr.justify = b2 & 3;
        b2 = packetData[++i];
        winAttr.effectSpeed = (b2 & 240) >> 4;
        winAttr.effectDirection = (b2 & 12) >> 2;
        winAttr.displayEffect = b2 & 3;
        return i;
      };
      Cea708Stream.prototype.flushDisplayed = function(pts, service) {
        var displayedText = [];
        for (var winId = 0; winId < 8; winId++) {
          if (service.windows[winId].visible && !service.windows[winId].isEmpty()) {
            displayedText.push(service.windows[winId].getText());
          }
        }
        service.endPts = pts;
        service.text = displayedText.join("\n\n");
        this.pushCaption(service);
        service.startPts = pts;
      };
      Cea708Stream.prototype.pushCaption = function(service) {
        if (service.text !== "") {
          this.trigger("data", {
            startPts: service.startPts,
            endPts: service.endPts,
            text: service.text,
            stream: "cc708_" + service.serviceNum
          });
          service.text = "";
          service.startPts = service.endPts;
        }
      };
      Cea708Stream.prototype.displayWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b2 & 1 << winId) {
            service.windows[winId].visible = 1;
          }
        }
        return i;
      };
      Cea708Stream.prototype.hideWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b2 & 1 << winId) {
            service.windows[winId].visible = 0;
          }
        }
        return i;
      };
      Cea708Stream.prototype.toggleWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b2 & 1 << winId) {
            service.windows[winId].visible ^= 1;
          }
        }
        return i;
      };
      Cea708Stream.prototype.clearWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b2 & 1 << winId) {
            service.windows[winId].clearText();
          }
        }
        return i;
      };
      Cea708Stream.prototype.deleteWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b2 & 1 << winId) {
            service.windows[winId].reset();
          }
        }
        return i;
      };
      Cea708Stream.prototype.setPenAttributes = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[i];
        var penAttr = service.currentWindow.penAttr;
        b2 = packetData[++i];
        penAttr.textTag = (b2 & 240) >> 4;
        penAttr.offset = (b2 & 12) >> 2;
        penAttr.penSize = b2 & 3;
        b2 = packetData[++i];
        penAttr.italics = (b2 & 128) >> 7;
        penAttr.underline = (b2 & 64) >> 6;
        penAttr.edgeType = (b2 & 56) >> 3;
        penAttr.fontStyle = b2 & 7;
        return i;
      };
      Cea708Stream.prototype.setPenColor = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[i];
        var penColor = service.currentWindow.penColor;
        b2 = packetData[++i];
        penColor.fgOpacity = (b2 & 192) >> 6;
        penColor.fgRed = (b2 & 48) >> 4;
        penColor.fgGreen = (b2 & 12) >> 2;
        penColor.fgBlue = b2 & 3;
        b2 = packetData[++i];
        penColor.bgOpacity = (b2 & 192) >> 6;
        penColor.bgRed = (b2 & 48) >> 4;
        penColor.bgGreen = (b2 & 12) >> 2;
        penColor.bgBlue = b2 & 3;
        b2 = packetData[++i];
        penColor.edgeRed = (b2 & 48) >> 4;
        penColor.edgeGreen = (b2 & 12) >> 2;
        penColor.edgeBlue = b2 & 3;
        return i;
      };
      Cea708Stream.prototype.setPenLocation = function(i, service) {
        var packetData = this.current708Packet.data;
        var b2 = packetData[i];
        var penLoc = service.currentWindow.penLoc;
        service.currentWindow.pendingNewLine = true;
        b2 = packetData[++i];
        penLoc.row = b2 & 15;
        b2 = packetData[++i];
        penLoc.column = b2 & 63;
        return i;
      };
      Cea708Stream.prototype.reset = function(i, service) {
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        return this.initService(service.serviceNum, i);
      };
      var CHARACTER_TRANSLATION = {
        42: 225,
        // á
        92: 233,
        // é
        94: 237,
        // í
        95: 243,
        // ó
        96: 250,
        // ú
        123: 231,
        // ç
        124: 247,
        // ÷
        125: 209,
        // Ñ
        126: 241,
        // ñ
        127: 9608,
        // █
        304: 174,
        // ®
        305: 176,
        // °
        306: 189,
        // ½
        307: 191,
        // ¿
        308: 8482,
        // ™
        309: 162,
        // ¢
        310: 163,
        // £
        311: 9834,
        // ♪
        312: 224,
        // à
        313: 160,
        //
        314: 232,
        // è
        315: 226,
        // â
        316: 234,
        // ê
        317: 238,
        // î
        318: 244,
        // ô
        319: 251,
        // û
        544: 193,
        // Á
        545: 201,
        // É
        546: 211,
        // Ó
        547: 218,
        // Ú
        548: 220,
        // Ü
        549: 252,
        // ü
        550: 8216,
        // ‘
        551: 161,
        // ¡
        552: 42,
        // *
        553: 39,
        // '
        554: 8212,
        // —
        555: 169,
        // ©
        556: 8480,
        // ℠
        557: 8226,
        // •
        558: 8220,
        // “
        559: 8221,
        // ”
        560: 192,
        // À
        561: 194,
        // Â
        562: 199,
        // Ç
        563: 200,
        // È
        564: 202,
        // Ê
        565: 203,
        // Ë
        566: 235,
        // ë
        567: 206,
        // Î
        568: 207,
        // Ï
        569: 239,
        // ï
        570: 212,
        // Ô
        571: 217,
        // Ù
        572: 249,
        // ù
        573: 219,
        // Û
        574: 171,
        // «
        575: 187,
        // »
        800: 195,
        // Ã
        801: 227,
        // ã
        802: 205,
        // Í
        803: 204,
        // Ì
        804: 236,
        // ì
        805: 210,
        // Ò
        806: 242,
        // ò
        807: 213,
        // Õ
        808: 245,
        // õ
        809: 123,
        // {
        810: 125,
        // }
        811: 92,
        // \
        812: 94,
        // ^
        813: 95,
        // _
        814: 124,
        // |
        815: 126,
        // ~
        816: 196,
        // Ä
        817: 228,
        // ä
        818: 214,
        // Ö
        819: 246,
        // ö
        820: 223,
        // ß
        821: 165,
        // ¥
        822: 164,
        // ¤
        823: 9474,
        // │
        824: 197,
        // Å
        825: 229,
        // å
        826: 216,
        // Ø
        827: 248,
        // ø
        828: 9484,
        // ┌
        829: 9488,
        // ┐
        830: 9492,
        // └
        831: 9496
        // ┘
      };
      var getCharFromCode = function getCharFromCode2(code) {
        if (code === null) {
          return "";
        }
        code = CHARACTER_TRANSLATION[code] || code;
        return String.fromCharCode(code);
      };
      var BOTTOM_ROW = 14;
      var ROWS = [4352, 4384, 4608, 4640, 5376, 5408, 5632, 5664, 5888, 5920, 4096, 4864, 4896, 5120, 5152];
      var createDisplayBuffer = function createDisplayBuffer2() {
        var result = [], i = BOTTOM_ROW + 1;
        while (i--) {
          result.push("");
        }
        return result;
      };
      var Cea608Stream = function Cea608Stream2(field, dataChannel) {
        Cea608Stream2.prototype.init.call(this);
        this.field_ = field || 0;
        this.dataChannel_ = dataChannel || 0;
        this.name_ = "CC" + ((this.field_ << 1 | this.dataChannel_) + 1);
        this.setConstants();
        this.reset();
        this.push = function(packet) {
          var data, swap, char0, char1, text;
          data = packet.ccData & 32639;
          if (data === this.lastControlCode_) {
            this.lastControlCode_ = null;
            return;
          }
          if ((data & 61440) === 4096) {
            this.lastControlCode_ = data;
          } else if (data !== this.PADDING_) {
            this.lastControlCode_ = null;
          }
          char0 = data >>> 8;
          char1 = data & 255;
          if (data === this.PADDING_) {
            return;
          } else if (data === this.RESUME_CAPTION_LOADING_) {
            this.mode_ = "popOn";
          } else if (data === this.END_OF_CAPTION_) {
            this.mode_ = "popOn";
            this.clearFormatting(packet.pts);
            this.flushDisplayed(packet.pts);
            swap = this.displayed_;
            this.displayed_ = this.nonDisplayed_;
            this.nonDisplayed_ = swap;
            this.startPts_ = packet.pts;
          } else if (data === this.ROLL_UP_2_ROWS_) {
            this.rollUpRows_ = 2;
            this.setRollUp(packet.pts);
          } else if (data === this.ROLL_UP_3_ROWS_) {
            this.rollUpRows_ = 3;
            this.setRollUp(packet.pts);
          } else if (data === this.ROLL_UP_4_ROWS_) {
            this.rollUpRows_ = 4;
            this.setRollUp(packet.pts);
          } else if (data === this.CARRIAGE_RETURN_) {
            this.clearFormatting(packet.pts);
            this.flushDisplayed(packet.pts);
            this.shiftRowsUp_();
            this.startPts_ = packet.pts;
          } else if (data === this.BACKSPACE_) {
            if (this.mode_ === "popOn") {
              this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
            } else {
              this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
            }
          } else if (data === this.ERASE_DISPLAYED_MEMORY_) {
            this.flushDisplayed(packet.pts);
            this.displayed_ = createDisplayBuffer();
          } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {
            this.nonDisplayed_ = createDisplayBuffer();
          } else if (data === this.RESUME_DIRECT_CAPTIONING_) {
            if (this.mode_ !== "paintOn") {
              this.flushDisplayed(packet.pts);
              this.displayed_ = createDisplayBuffer();
            }
            this.mode_ = "paintOn";
            this.startPts_ = packet.pts;
          } else if (this.isSpecialCharacter(char0, char1)) {
            char0 = (char0 & 3) << 8;
            text = getCharFromCode(char0 | char1);
            this[this.mode_](packet.pts, text);
            this.column_++;
          } else if (this.isExtCharacter(char0, char1)) {
            if (this.mode_ === "popOn") {
              this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
            } else {
              this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
            }
            char0 = (char0 & 3) << 8;
            text = getCharFromCode(char0 | char1);
            this[this.mode_](packet.pts, text);
            this.column_++;
          } else if (this.isMidRowCode(char0, char1)) {
            this.clearFormatting(packet.pts);
            this[this.mode_](packet.pts, " ");
            this.column_++;
            if ((char1 & 14) === 14) {
              this.addFormatting(packet.pts, ["i"]);
            }
            if ((char1 & 1) === 1) {
              this.addFormatting(packet.pts, ["u"]);
            }
          } else if (this.isOffsetControlCode(char0, char1)) {
            this.column_ += char1 & 3;
          } else if (this.isPAC(char0, char1)) {
            var row = ROWS.indexOf(data & 7968);
            if (this.mode_ === "rollUp") {
              if (row - this.rollUpRows_ + 1 < 0) {
                row = this.rollUpRows_ - 1;
              }
              this.setRollUp(packet.pts, row);
            }
            if (row !== this.row_) {
              this.clearFormatting(packet.pts);
              this.row_ = row;
            }
            if (char1 & 1 && this.formatting_.indexOf("u") === -1) {
              this.addFormatting(packet.pts, ["u"]);
            }
            if ((data & 16) === 16) {
              this.column_ = ((data & 14) >> 1) * 4;
            }
            if (this.isColorPAC(char1)) {
              if ((char1 & 14) === 14) {
                this.addFormatting(packet.pts, ["i"]);
              }
            }
          } else if (this.isNormalChar(char0)) {
            if (char1 === 0) {
              char1 = null;
            }
            text = getCharFromCode(char0);
            text += getCharFromCode(char1);
            this[this.mode_](packet.pts, text);
            this.column_ += text.length;
          }
        };
      };
      Cea608Stream.prototype = new stream();
      Cea608Stream.prototype.flushDisplayed = function(pts) {
        var content = this.displayed_.map(function(row, index) {
          try {
            return row.trim();
          } catch (e2) {
            this.trigger("log", {
              level: "warn",
              message: "Skipping a malformed 608 caption at index " + index + "."
            });
            return "";
          }
        }, this).join("\n").replace(/^\n+|\n+$/g, "");
        if (content.length) {
          this.trigger("data", {
            startPts: this.startPts_,
            endPts: pts,
            text: content,
            stream: this.name_
          });
        }
      };
      Cea608Stream.prototype.reset = function() {
        this.mode_ = "popOn";
        this.topRow_ = 0;
        this.startPts_ = 0;
        this.displayed_ = createDisplayBuffer();
        this.nonDisplayed_ = createDisplayBuffer();
        this.lastControlCode_ = null;
        this.column_ = 0;
        this.row_ = BOTTOM_ROW;
        this.rollUpRows_ = 2;
        this.formatting_ = [];
      };
      Cea608Stream.prototype.setConstants = function() {
        if (this.dataChannel_ === 0) {
          this.BASE_ = 16;
          this.EXT_ = 17;
          this.CONTROL_ = (20 | this.field_) << 8;
          this.OFFSET_ = 23;
        } else if (this.dataChannel_ === 1) {
          this.BASE_ = 24;
          this.EXT_ = 25;
          this.CONTROL_ = (28 | this.field_) << 8;
          this.OFFSET_ = 31;
        }
        this.PADDING_ = 0;
        this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 32;
        this.END_OF_CAPTION_ = this.CONTROL_ | 47;
        this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 37;
        this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 38;
        this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 39;
        this.CARRIAGE_RETURN_ = this.CONTROL_ | 45;
        this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 41;
        this.BACKSPACE_ = this.CONTROL_ | 33;
        this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 44;
        this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 46;
      };
      Cea608Stream.prototype.isSpecialCharacter = function(char0, char1) {
        return char0 === this.EXT_ && char1 >= 48 && char1 <= 63;
      };
      Cea608Stream.prototype.isExtCharacter = function(char0, char1) {
        return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 32 && char1 <= 63;
      };
      Cea608Stream.prototype.isMidRowCode = function(char0, char1) {
        return char0 === this.EXT_ && char1 >= 32 && char1 <= 47;
      };
      Cea608Stream.prototype.isOffsetControlCode = function(char0, char1) {
        return char0 === this.OFFSET_ && char1 >= 33 && char1 <= 35;
      };
      Cea608Stream.prototype.isPAC = function(char0, char1) {
        return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 64 && char1 <= 127;
      };
      Cea608Stream.prototype.isColorPAC = function(char1) {
        return char1 >= 64 && char1 <= 79 || char1 >= 96 && char1 <= 127;
      };
      Cea608Stream.prototype.isNormalChar = function(char) {
        return char >= 32 && char <= 127;
      };
      Cea608Stream.prototype.setRollUp = function(pts, newBaseRow) {
        if (this.mode_ !== "rollUp") {
          this.row_ = BOTTOM_ROW;
          this.mode_ = "rollUp";
          this.flushDisplayed(pts);
          this.nonDisplayed_ = createDisplayBuffer();
          this.displayed_ = createDisplayBuffer();
        }
        if (newBaseRow !== void 0 && newBaseRow !== this.row_) {
          for (var i = 0; i < this.rollUpRows_; i++) {
            this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];
            this.displayed_[this.row_ - i] = "";
          }
        }
        if (newBaseRow === void 0) {
          newBaseRow = this.row_;
        }
        this.topRow_ = newBaseRow - this.rollUpRows_ + 1;
      };
      Cea608Stream.prototype.addFormatting = function(pts, format) {
        this.formatting_ = this.formatting_.concat(format);
        var text = format.reduce(function(text2, format2) {
          return text2 + "<" + format2 + ">";
        }, "");
        this[this.mode_](pts, text);
      };
      Cea608Stream.prototype.clearFormatting = function(pts) {
        if (!this.formatting_.length) {
          return;
        }
        var text = this.formatting_.reverse().reduce(function(text2, format) {
          return text2 + "</" + format + ">";
        }, "");
        this.formatting_ = [];
        this[this.mode_](pts, text);
      };
      Cea608Stream.prototype.popOn = function(pts, text) {
        var baseRow = this.nonDisplayed_[this.row_];
        baseRow += text;
        this.nonDisplayed_[this.row_] = baseRow;
      };
      Cea608Stream.prototype.rollUp = function(pts, text) {
        var baseRow = this.displayed_[this.row_];
        baseRow += text;
        this.displayed_[this.row_] = baseRow;
      };
      Cea608Stream.prototype.shiftRowsUp_ = function() {
        var i;
        for (i = 0; i < this.topRow_; i++) {
          this.displayed_[i] = "";
        }
        for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {
          this.displayed_[i] = "";
        }
        for (i = this.topRow_; i < this.row_; i++) {
          this.displayed_[i] = this.displayed_[i + 1];
        }
        this.displayed_[this.row_] = "";
      };
      Cea608Stream.prototype.paintOn = function(pts, text) {
        var baseRow = this.displayed_[this.row_];
        baseRow += text;
        this.displayed_[this.row_] = baseRow;
      };
      var captionStream = {
        CaptionStream: CaptionStream$1,
        Cea608Stream,
        Cea708Stream
      };
      var streamTypes = {
        H264_STREAM_TYPE: 27,
        ADTS_STREAM_TYPE: 15,
        METADATA_STREAM_TYPE: 21
      };
      var MAX_TS = 8589934592;
      var RO_THRESH = 4294967296;
      var TYPE_SHARED = "shared";
      var handleRollover$1 = function handleRollover2(value, reference) {
        var direction = 1;
        if (value > reference) {
          direction = -1;
        }
        while (Math.abs(reference - value) > RO_THRESH) {
          value += direction * MAX_TS;
        }
        return value;
      };
      var TimestampRolloverStream$1 = function TimestampRolloverStream2(type2) {
        var lastDTS, referenceDTS;
        TimestampRolloverStream2.prototype.init.call(this);
        this.type_ = type2 || TYPE_SHARED;
        this.push = function(data) {
          if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {
            return;
          }
          if (referenceDTS === void 0) {
            referenceDTS = data.dts;
          }
          data.dts = handleRollover$1(data.dts, referenceDTS);
          data.pts = handleRollover$1(data.pts, referenceDTS);
          lastDTS = data.dts;
          this.trigger("data", data);
        };
        this.flush = function() {
          referenceDTS = lastDTS;
          this.trigger("done");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline");
        };
        this.discontinuity = function() {
          referenceDTS = void 0;
          lastDTS = void 0;
        };
        this.reset = function() {
          this.discontinuity();
          this.trigger("reset");
        };
      };
      TimestampRolloverStream$1.prototype = new stream();
      var timestampRolloverStream = {
        TimestampRolloverStream: TimestampRolloverStream$1,
        handleRollover: handleRollover$1
      };
      var percentEncode$1 = function percentEncode2(bytes, start, end) {
        var i, result = "";
        for (i = start; i < end; i++) {
          result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
        }
        return result;
      }, parseUtf8 = function parseUtf82(bytes, start, end) {
        return decodeURIComponent(percentEncode$1(bytes, start, end));
      }, parseIso88591$1 = function parseIso885912(bytes, start, end) {
        return unescape(percentEncode$1(bytes, start, end));
      }, parseSyncSafeInteger$1 = function parseSyncSafeInteger2(data) {
        return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
      }, tagParsers = {
        TXXX: function TXXX(tag) {
          var i;
          if (tag.data[0] !== 3) {
            return;
          }
          for (i = 1; i < tag.data.length; i++) {
            if (tag.data[i] === 0) {
              tag.description = parseUtf8(tag.data, 1, i);
              tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\0*$/, "");
              break;
            }
          }
          tag.data = tag.value;
        },
        WXXX: function WXXX(tag) {
          var i;
          if (tag.data[0] !== 3) {
            return;
          }
          for (i = 1; i < tag.data.length; i++) {
            if (tag.data[i] === 0) {
              tag.description = parseUtf8(tag.data, 1, i);
              tag.url = parseUtf8(tag.data, i + 1, tag.data.length);
              break;
            }
          }
        },
        PRIV: function PRIV(tag) {
          var i;
          for (i = 0; i < tag.data.length; i++) {
            if (tag.data[i] === 0) {
              tag.owner = parseIso88591$1(tag.data, 0, i);
              break;
            }
          }
          tag.privateData = tag.data.subarray(i + 1);
          tag.data = tag.privateData;
        }
      }, _MetadataStream;
      _MetadataStream = function MetadataStream(options) {
        var settings = {
          // the bytes of the program-level descriptor field in MP2T
          // see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and
          // program element descriptors"
          descriptor: options && options.descriptor
        }, tagSize = 0, buffer = [], bufferSize = 0, i;
        _MetadataStream.prototype.init.call(this);
        this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);
        if (settings.descriptor) {
          for (i = 0; i < settings.descriptor.length; i++) {
            this.dispatchType += ("00" + settings.descriptor[i].toString(16)).slice(-2);
          }
        }
        this.push = function(chunk) {
          var tag, frameStart, frameSize, frame, i2, frameHeader;
          if (chunk.type !== "timed-metadata") {
            return;
          }
          if (chunk.dataAlignmentIndicator) {
            bufferSize = 0;
            buffer.length = 0;
          }
          if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== "I".charCodeAt(0) || chunk.data[1] !== "D".charCodeAt(0) || chunk.data[2] !== "3".charCodeAt(0))) {
            this.trigger("log", {
              level: "warn",
              message: "Skipping unrecognized metadata packet"
            });
            return;
          }
          buffer.push(chunk);
          bufferSize += chunk.data.byteLength;
          if (buffer.length === 1) {
            tagSize = parseSyncSafeInteger$1(chunk.data.subarray(6, 10));
            tagSize += 10;
          }
          if (bufferSize < tagSize) {
            return;
          }
          tag = {
            data: new Uint8Array(tagSize),
            frames: [],
            pts: buffer[0].pts,
            dts: buffer[0].dts
          };
          for (i2 = 0; i2 < tagSize; ) {
            tag.data.set(buffer[0].data.subarray(0, tagSize - i2), i2);
            i2 += buffer[0].data.byteLength;
            bufferSize -= buffer[0].data.byteLength;
            buffer.shift();
          }
          frameStart = 10;
          if (tag.data[5] & 64) {
            frameStart += 4;
            frameStart += parseSyncSafeInteger$1(tag.data.subarray(10, 14));
            tagSize -= parseSyncSafeInteger$1(tag.data.subarray(16, 20));
          }
          do {
            frameSize = parseSyncSafeInteger$1(tag.data.subarray(frameStart + 4, frameStart + 8));
            if (frameSize < 1) {
              this.trigger("log", {
                level: "warn",
                message: "Malformed ID3 frame encountered. Skipping metadata parsing."
              });
              return;
            }
            frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);
            frame = {
              id: frameHeader,
              data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)
            };
            frame.key = frame.id;
            if (tagParsers[frame.id]) {
              tagParsers[frame.id](frame);
              if (frame.owner === "com.apple.streaming.transportStreamTimestamp") {
                var d2 = frame.data, size = (d2[3] & 1) << 30 | d2[4] << 22 | d2[5] << 14 | d2[6] << 6 | d2[7] >>> 2;
                size *= 4;
                size += d2[7] & 3;
                frame.timeStamp = size;
                if (tag.pts === void 0 && tag.dts === void 0) {
                  tag.pts = frame.timeStamp;
                  tag.dts = frame.timeStamp;
                }
                this.trigger("timestamp", frame);
              }
            }
            tag.frames.push(frame);
            frameStart += 10;
            frameStart += frameSize;
          } while (frameStart < tagSize);
          this.trigger("data", tag);
        };
      };
      _MetadataStream.prototype = new stream();
      var metadataStream = _MetadataStream;
      var TimestampRolloverStream = timestampRolloverStream.TimestampRolloverStream;
      var _TransportPacketStream, _TransportParseStream, _ElementaryStream;
      var MP2T_PACKET_LENGTH$1 = 188, SYNC_BYTE$1 = 71;
      _TransportPacketStream = function TransportPacketStream() {
        var buffer = new Uint8Array(MP2T_PACKET_LENGTH$1), bytesInBuffer = 0;
        _TransportPacketStream.prototype.init.call(this);
        this.push = function(bytes) {
          var startIndex = 0, endIndex = MP2T_PACKET_LENGTH$1, everything;
          if (bytesInBuffer) {
            everything = new Uint8Array(bytes.byteLength + bytesInBuffer);
            everything.set(buffer.subarray(0, bytesInBuffer));
            everything.set(bytes, bytesInBuffer);
            bytesInBuffer = 0;
          } else {
            everything = bytes;
          }
          while (endIndex < everything.byteLength) {
            if (everything[startIndex] === SYNC_BYTE$1 && everything[endIndex] === SYNC_BYTE$1) {
              this.trigger("data", everything.subarray(startIndex, endIndex));
              startIndex += MP2T_PACKET_LENGTH$1;
              endIndex += MP2T_PACKET_LENGTH$1;
              continue;
            }
            startIndex++;
            endIndex++;
          }
          if (startIndex < everything.byteLength) {
            buffer.set(everything.subarray(startIndex), 0);
            bytesInBuffer = everything.byteLength - startIndex;
          }
        };
        this.flush = function() {
          if (bytesInBuffer === MP2T_PACKET_LENGTH$1 && buffer[0] === SYNC_BYTE$1) {
            this.trigger("data", buffer);
            bytesInBuffer = 0;
          }
          this.trigger("done");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline");
        };
        this.reset = function() {
          bytesInBuffer = 0;
          this.trigger("reset");
        };
      };
      _TransportPacketStream.prototype = new stream();
      _TransportParseStream = function TransportParseStream() {
        var parsePsi, parsePat2, parsePmt2, self2;
        _TransportParseStream.prototype.init.call(this);
        self2 = this;
        this.packetsWaitingForPmt = [];
        this.programMapTable = void 0;
        parsePsi = function parsePsi2(payload, psi) {
          var offset = 0;
          if (psi.payloadUnitStartIndicator) {
            offset += payload[offset] + 1;
          }
          if (psi.type === "pat") {
            parsePat2(payload.subarray(offset), psi);
          } else {
            parsePmt2(payload.subarray(offset), psi);
          }
        };
        parsePat2 = function parsePat3(payload, pat) {
          pat.section_number = payload[7];
          pat.last_section_number = payload[8];
          self2.pmtPid = (payload[10] & 31) << 8 | payload[11];
          pat.pmtPid = self2.pmtPid;
        };
        parsePmt2 = function parsePmt3(payload, pmt) {
          var sectionLength, tableEnd, programInfoLength, offset;
          if (!(payload[5] & 1)) {
            return;
          }
          self2.programMapTable = {
            video: null,
            audio: null,
            "timed-metadata": {}
          };
          sectionLength = (payload[1] & 15) << 8 | payload[2];
          tableEnd = 3 + sectionLength - 4;
          programInfoLength = (payload[10] & 15) << 8 | payload[11];
          offset = 12 + programInfoLength;
          while (offset < tableEnd) {
            var streamType = payload[offset];
            var pid = (payload[offset + 1] & 31) << 8 | payload[offset + 2];
            if (streamType === streamTypes.H264_STREAM_TYPE && self2.programMapTable.video === null) {
              self2.programMapTable.video = pid;
            } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self2.programMapTable.audio === null) {
              self2.programMapTable.audio = pid;
            } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {
              self2.programMapTable["timed-metadata"][pid] = streamType;
            }
            offset += ((payload[offset + 3] & 15) << 8 | payload[offset + 4]) + 5;
          }
          pmt.programMapTable = self2.programMapTable;
        };
        this.push = function(packet) {
          var result = {}, offset = 4;
          result.payloadUnitStartIndicator = !!(packet[1] & 64);
          result.pid = packet[1] & 31;
          result.pid <<= 8;
          result.pid |= packet[2];
          if ((packet[3] & 48) >>> 4 > 1) {
            offset += packet[offset] + 1;
          }
          if (result.pid === 0) {
            result.type = "pat";
            parsePsi(packet.subarray(offset), result);
            this.trigger("data", result);
          } else if (result.pid === this.pmtPid) {
            result.type = "pmt";
            parsePsi(packet.subarray(offset), result);
            this.trigger("data", result);
            while (this.packetsWaitingForPmt.length) {
              this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
            }
          } else if (this.programMapTable === void 0) {
            this.packetsWaitingForPmt.push([packet, offset, result]);
          } else {
            this.processPes_(packet, offset, result);
          }
        };
        this.processPes_ = function(packet, offset, result) {
          if (result.pid === this.programMapTable.video) {
            result.streamType = streamTypes.H264_STREAM_TYPE;
          } else if (result.pid === this.programMapTable.audio) {
            result.streamType = streamTypes.ADTS_STREAM_TYPE;
          } else {
            result.streamType = this.programMapTable["timed-metadata"][result.pid];
          }
          result.type = "pes";
          result.data = packet.subarray(offset);
          this.trigger("data", result);
        };
      };
      _TransportParseStream.prototype = new stream();
      _TransportParseStream.STREAM_TYPES = {
        h264: 27,
        adts: 15
      };
      _ElementaryStream = function ElementaryStream() {
        var self2 = this, segmentHadPmt = false, video = {
          data: [],
          size: 0
        }, audio = {
          data: [],
          size: 0
        }, timedMetadata = {
          data: [],
          size: 0
        }, programMapTable, parsePes = function parsePes2(payload, pes) {
          var ptsDtsFlags;
          var startPrefix = payload[0] << 16 | payload[1] << 8 | payload[2];
          pes.data = new Uint8Array();
          if (startPrefix !== 1) {
            return;
          }
          pes.packetLength = 6 + (payload[4] << 8 | payload[5]);
          pes.dataAlignmentIndicator = (payload[6] & 4) !== 0;
          ptsDtsFlags = payload[7];
          if (ptsDtsFlags & 192) {
            pes.pts = (payload[9] & 14) << 27 | (payload[10] & 255) << 20 | (payload[11] & 254) << 12 | (payload[12] & 255) << 5 | (payload[13] & 254) >>> 3;
            pes.pts *= 4;
            pes.pts += (payload[13] & 6) >>> 1;
            pes.dts = pes.pts;
            if (ptsDtsFlags & 64) {
              pes.dts = (payload[14] & 14) << 27 | (payload[15] & 255) << 20 | (payload[16] & 254) << 12 | (payload[17] & 255) << 5 | (payload[18] & 254) >>> 3;
              pes.dts *= 4;
              pes.dts += (payload[18] & 6) >>> 1;
            }
          }
          pes.data = payload.subarray(9 + payload[8]);
        }, flushStream = function flushStream2(stream2, type2, forceFlush) {
          var packetData = new Uint8Array(stream2.size), event = {
            type: type2
          }, i = 0, offset = 0, packetFlushable = false, fragment;
          if (!stream2.data.length || stream2.size < 9) {
            return;
          }
          event.trackId = stream2.data[0].pid;
          for (i = 0; i < stream2.data.length; i++) {
            fragment = stream2.data[i];
            packetData.set(fragment.data, offset);
            offset += fragment.data.byteLength;
          }
          parsePes(packetData, event);
          packetFlushable = type2 === "video" || event.packetLength <= stream2.size;
          if (forceFlush || packetFlushable) {
            stream2.size = 0;
            stream2.data.length = 0;
          }
          if (packetFlushable) {
            self2.trigger("data", event);
          }
        };
        _ElementaryStream.prototype.init.call(this);
        this.push = function(data) {
          ({
            pat: function pat() {
            },
            pes: function pes() {
              var stream2, streamType;
              switch (data.streamType) {
                case streamTypes.H264_STREAM_TYPE:
                  stream2 = video;
                  streamType = "video";
                  break;
                case streamTypes.ADTS_STREAM_TYPE:
                  stream2 = audio;
                  streamType = "audio";
                  break;
                case streamTypes.METADATA_STREAM_TYPE:
                  stream2 = timedMetadata;
                  streamType = "timed-metadata";
                  break;
                default:
                  return;
              }
              if (data.payloadUnitStartIndicator) {
                flushStream(stream2, streamType, true);
              }
              stream2.data.push(data);
              stream2.size += data.data.byteLength;
            },
            pmt: function pmt() {
              var event = {
                type: "metadata",
                tracks: []
              };
              programMapTable = data.programMapTable;
              if (programMapTable.video !== null) {
                event.tracks.push({
                  timelineStartInfo: {
                    baseMediaDecodeTime: 0
                  },
                  id: +programMapTable.video,
                  codec: "avc",
                  type: "video"
                });
              }
              if (programMapTable.audio !== null) {
                event.tracks.push({
                  timelineStartInfo: {
                    baseMediaDecodeTime: 0
                  },
                  id: +programMapTable.audio,
                  codec: "adts",
                  type: "audio"
                });
              }
              segmentHadPmt = true;
              self2.trigger("data", event);
            }
          })[data.type]();
        };
        this.reset = function() {
          video.size = 0;
          video.data.length = 0;
          audio.size = 0;
          audio.data.length = 0;
          this.trigger("reset");
        };
        this.flushStreams_ = function() {
          flushStream(video, "video");
          flushStream(audio, "audio");
          flushStream(timedMetadata, "timed-metadata");
        };
        this.flush = function() {
          if (!segmentHadPmt && programMapTable) {
            var pmt = {
              type: "metadata",
              tracks: []
            };
            if (programMapTable.video !== null) {
              pmt.tracks.push({
                timelineStartInfo: {
                  baseMediaDecodeTime: 0
                },
                id: +programMapTable.video,
                codec: "avc",
                type: "video"
              });
            }
            if (programMapTable.audio !== null) {
              pmt.tracks.push({
                timelineStartInfo: {
                  baseMediaDecodeTime: 0
                },
                id: +programMapTable.audio,
                codec: "adts",
                type: "audio"
              });
            }
            self2.trigger("data", pmt);
          }
          segmentHadPmt = false;
          this.flushStreams_();
          this.trigger("done");
        };
      };
      _ElementaryStream.prototype = new stream();
      var m2ts$1 = {
        PAT_PID: 0,
        MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH$1,
        TransportPacketStream: _TransportPacketStream,
        TransportParseStream: _TransportParseStream,
        ElementaryStream: _ElementaryStream,
        TimestampRolloverStream,
        CaptionStream: captionStream.CaptionStream,
        Cea608Stream: captionStream.Cea608Stream,
        Cea708Stream: captionStream.Cea708Stream,
        MetadataStream: metadataStream
      };
      for (var type in streamTypes) {
        if (streamTypes.hasOwnProperty(type)) {
          m2ts$1[type] = streamTypes[type];
        }
      }
      var m2ts_1 = m2ts$1;
      var ADTS_SAMPLING_FREQUENCIES = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
      var parseId3TagSize = function parseId3TagSize2(header, byteIndex) {
        var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9], flags = header[byteIndex + 5], footerPresent = (flags & 16) >> 4;
        returnSize = returnSize >= 0 ? returnSize : 0;
        if (footerPresent) {
          return returnSize + 20;
        }
        return returnSize + 10;
      };
      var getId3Offset = function getId3Offset2(data, offset) {
        if (data.length - offset < 10 || data[offset] !== "I".charCodeAt(0) || data[offset + 1] !== "D".charCodeAt(0) || data[offset + 2] !== "3".charCodeAt(0)) {
          return offset;
        }
        offset += parseId3TagSize(data, offset);
        return getId3Offset2(data, offset);
      };
      var isLikelyAacData$2 = function isLikelyAacData2(data) {
        var offset = getId3Offset(data, 0);
        return data.length >= offset + 2 && (data[offset] & 255) === 255 && (data[offset + 1] & 240) === 240 && // verify that the 2 layer bits are 0, aka this
        // is not mp3 data but aac data.
        (data[offset + 1] & 22) === 16;
      };
      var parseSyncSafeInteger = function parseSyncSafeInteger2(data) {
        return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
      };
      var percentEncode = function percentEncode2(bytes, start, end) {
        var i, result = "";
        for (i = start; i < end; i++) {
          result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
        }
        return result;
      };
      var parseIso88591 = function parseIso885912(bytes, start, end) {
        return unescape(percentEncode(bytes, start, end));
      };
      var parseAdtsSize = function parseAdtsSize2(header, byteIndex) {
        var lowThree = (header[byteIndex + 5] & 224) >> 5, middle = header[byteIndex + 4] << 3, highTwo = header[byteIndex + 3] & 3 << 11;
        return highTwo | middle | lowThree;
      };
      var parseType$1 = function parseType2(header, byteIndex) {
        if (header[byteIndex] === "I".charCodeAt(0) && header[byteIndex + 1] === "D".charCodeAt(0) && header[byteIndex + 2] === "3".charCodeAt(0)) {
          return "timed-metadata";
        } else if (header[byteIndex] & true && (header[byteIndex + 1] & 240) === 240) {
          return "audio";
        }
        return null;
      };
      var parseSampleRate = function parseSampleRate2(packet) {
        var i = 0;
        while (i + 5 < packet.length) {
          if (packet[i] !== 255 || (packet[i + 1] & 246) !== 240) {
            i++;
            continue;
          }
          return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 60) >>> 2];
        }
        return null;
      };
      var parseAacTimestamp = function parseAacTimestamp2(packet) {
        var frameStart, frameSize, frame, frameHeader;
        frameStart = 10;
        if (packet[5] & 64) {
          frameStart += 4;
          frameStart += parseSyncSafeInteger(packet.subarray(10, 14));
        }
        do {
          frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));
          if (frameSize < 1) {
            return null;
          }
          frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);
          if (frameHeader === "PRIV") {
            frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);
            for (var i = 0; i < frame.byteLength; i++) {
              if (frame[i] === 0) {
                var owner = parseIso88591(frame, 0, i);
                if (owner === "com.apple.streaming.transportStreamTimestamp") {
                  var d2 = frame.subarray(i + 1);
                  var size = (d2[3] & 1) << 30 | d2[4] << 22 | d2[5] << 14 | d2[6] << 6 | d2[7] >>> 2;
                  size *= 4;
                  size += d2[7] & 3;
                  return size;
                }
                break;
              }
            }
          }
          frameStart += 10;
          frameStart += frameSize;
        } while (frameStart < packet.byteLength);
        return null;
      };
      var utils = {
        isLikelyAacData: isLikelyAacData$2,
        parseId3TagSize,
        parseAdtsSize,
        parseType: parseType$1,
        parseSampleRate,
        parseAacTimestamp
      };
      var _AacStream;
      _AacStream = function AacStream() {
        var everything = new Uint8Array(), timeStamp = 0;
        _AacStream.prototype.init.call(this);
        this.setTimestamp = function(timestamp) {
          timeStamp = timestamp;
        };
        this.push = function(bytes) {
          var frameSize = 0, byteIndex = 0, bytesLeft, chunk, packet, tempLength;
          if (everything.length) {
            tempLength = everything.length;
            everything = new Uint8Array(bytes.byteLength + tempLength);
            everything.set(everything.subarray(0, tempLength));
            everything.set(bytes, tempLength);
          } else {
            everything = bytes;
          }
          while (everything.length - byteIndex >= 3) {
            if (everything[byteIndex] === "I".charCodeAt(0) && everything[byteIndex + 1] === "D".charCodeAt(0) && everything[byteIndex + 2] === "3".charCodeAt(0)) {
              if (everything.length - byteIndex < 10) {
                break;
              }
              frameSize = utils.parseId3TagSize(everything, byteIndex);
              if (byteIndex + frameSize > everything.length) {
                break;
              }
              chunk = {
                type: "timed-metadata",
                data: everything.subarray(byteIndex, byteIndex + frameSize)
              };
              this.trigger("data", chunk);
              byteIndex += frameSize;
              continue;
            } else if ((everything[byteIndex] & 255) === 255 && (everything[byteIndex + 1] & 240) === 240) {
              if (everything.length - byteIndex < 7) {
                break;
              }
              frameSize = utils.parseAdtsSize(everything, byteIndex);
              if (byteIndex + frameSize > everything.length) {
                break;
              }
              packet = {
                type: "audio",
                data: everything.subarray(byteIndex, byteIndex + frameSize),
                pts: timeStamp,
                dts: timeStamp
              };
              this.trigger("data", packet);
              byteIndex += frameSize;
              continue;
            }
            byteIndex++;
          }
          bytesLeft = everything.length - byteIndex;
          if (bytesLeft > 0) {
            everything = everything.subarray(byteIndex);
          } else {
            everything = new Uint8Array();
          }
        };
        this.reset = function() {
          everything = new Uint8Array();
          this.trigger("reset");
        };
        this.endTimeline = function() {
          everything = new Uint8Array();
          this.trigger("endedtimeline");
        };
      };
      _AacStream.prototype = new stream();
      var aac = _AacStream;
      var AUDIO_PROPERTIES = ["audioobjecttype", "channelcount", "samplerate", "samplingfrequencyindex", "samplesize"];
      var audioProperties = AUDIO_PROPERTIES;
      var VIDEO_PROPERTIES = ["width", "height", "profileIdc", "levelIdc", "profileCompatibility", "sarRatio"];
      var videoProperties = VIDEO_PROPERTIES;
      var H264Stream$1 = h264.H264Stream;
      var isLikelyAacData$1 = utils.isLikelyAacData;
      var ONE_SECOND_IN_TS$2 = clock.ONE_SECOND_IN_TS;
      var _VideoSegmentStream$1, _AudioSegmentStream$1, _Transmuxer$1, _CoalesceStream;
      var retriggerForStream = function retriggerForStream2(key, event) {
        event.stream = key;
        this.trigger("log", event);
      };
      var addPipelineLogRetriggers = function addPipelineLogRetriggers2(transmuxer2, pipeline) {
        var keys = Object.keys(pipeline);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key === "headOfPipeline" || !pipeline[key].on) {
            continue;
          }
          pipeline[key].on("log", retriggerForStream.bind(transmuxer2, key));
        }
      };
      var arrayEquals = function arrayEquals2(a2, b2) {
        var i;
        if (a2.length !== b2.length) {
          return false;
        }
        for (i = 0; i < a2.length; i++) {
          if (a2[i] !== b2[i]) {
            return false;
          }
        }
        return true;
      };
      var generateSegmentTimingInfo = function generateSegmentTimingInfo2(baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {
        var ptsOffsetFromDts = startPts - startDts, decodeDuration = endDts - startDts, presentationDuration = endPts - startPts;
        return {
          start: {
            dts: baseMediaDecodeTime,
            pts: baseMediaDecodeTime + ptsOffsetFromDts
          },
          end: {
            dts: baseMediaDecodeTime + decodeDuration,
            pts: baseMediaDecodeTime + presentationDuration
          },
          prependedContentDuration,
          baseMediaDecodeTime
        };
      };
      _AudioSegmentStream$1 = function AudioSegmentStream2(track, options) {
        var adtsFrames = [], sequenceNumber, earliestAllowedDts = 0, audioAppendStartTs = 0, videoBaseMediaDecodeTime = Infinity;
        options = options || {};
        sequenceNumber = options.firstSequenceNumber || 0;
        _AudioSegmentStream$1.prototype.init.call(this);
        this.push = function(data) {
          trackDecodeInfo.collectDtsInfo(track, data);
          if (track) {
            audioProperties.forEach(function(prop) {
              track[prop] = data[prop];
            });
          }
          adtsFrames.push(data);
        };
        this.setEarliestDts = function(earliestDts) {
          earliestAllowedDts = earliestDts;
        };
        this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {
          videoBaseMediaDecodeTime = baseMediaDecodeTime;
        };
        this.setAudioAppendStart = function(timestamp) {
          audioAppendStartTs = timestamp;
        };
        this.flush = function() {
          var frames, moof2, mdat2, boxes, frameDuration, segmentDuration, videoClockCyclesOfSilencePrefixed;
          if (adtsFrames.length === 0) {
            this.trigger("done", "AudioSegmentStream");
            return;
          }
          frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);
          track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
          videoClockCyclesOfSilencePrefixed = audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime);
          track.samples = audioFrameUtils.generateSampleTable(frames);
          mdat2 = mp4Generator.mdat(audioFrameUtils.concatenateFrameData(frames));
          adtsFrames = [];
          moof2 = mp4Generator.moof(sequenceNumber, [track]);
          boxes = new Uint8Array(moof2.byteLength + mdat2.byteLength);
          sequenceNumber++;
          boxes.set(moof2);
          boxes.set(mdat2, moof2.byteLength);
          trackDecodeInfo.clearDtsInfo(track);
          frameDuration = Math.ceil(ONE_SECOND_IN_TS$2 * 1024 / track.samplerate);
          if (frames.length) {
            segmentDuration = frames.length * frameDuration;
            this.trigger("segmentTimingInfo", generateSegmentTimingInfo(
              // The audio track's baseMediaDecodeTime is in audio clock cycles, but the
              // frame info is in video clock cycles. Convert to match expectation of
              // listeners (that all timestamps will be based on video clock cycles).
              clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate),
              // frame times are already in video clock, as is segment duration
              frames[0].dts,
              frames[0].pts,
              frames[0].dts + segmentDuration,
              frames[0].pts + segmentDuration,
              videoClockCyclesOfSilencePrefixed || 0
            ));
            this.trigger("timingInfo", {
              start: frames[0].pts,
              end: frames[0].pts + segmentDuration
            });
          }
          this.trigger("data", {
            track,
            boxes
          });
          this.trigger("done", "AudioSegmentStream");
        };
        this.reset = function() {
          trackDecodeInfo.clearDtsInfo(track);
          adtsFrames = [];
          this.trigger("reset");
        };
      };
      _AudioSegmentStream$1.prototype = new stream();
      _VideoSegmentStream$1 = function VideoSegmentStream2(track, options) {
        var sequenceNumber, nalUnits = [], gopsToAlignWith = [], config, pps;
        options = options || {};
        sequenceNumber = options.firstSequenceNumber || 0;
        _VideoSegmentStream$1.prototype.init.call(this);
        delete track.minPTS;
        this.gopCache_ = [];
        this.push = function(nalUnit) {
          trackDecodeInfo.collectDtsInfo(track, nalUnit);
          if (nalUnit.nalUnitType === "seq_parameter_set_rbsp" && !config) {
            config = nalUnit.config;
            track.sps = [nalUnit.data];
            videoProperties.forEach(function(prop) {
              track[prop] = config[prop];
            }, this);
          }
          if (nalUnit.nalUnitType === "pic_parameter_set_rbsp" && !pps) {
            pps = nalUnit.data;
            track.pps = [nalUnit.data];
          }
          nalUnits.push(nalUnit);
        };
        this.flush = function() {
          var frames, gopForFusion, gops, moof2, mdat2, boxes, prependedContentDuration = 0, firstGop, lastGop;
          while (nalUnits.length) {
            if (nalUnits[0].nalUnitType === "access_unit_delimiter_rbsp") {
              break;
            }
            nalUnits.shift();
          }
          if (nalUnits.length === 0) {
            this.resetStream_();
            this.trigger("done", "VideoSegmentStream");
            return;
          }
          frames = frameUtils.groupNalsIntoFrames(nalUnits);
          gops = frameUtils.groupFramesIntoGops(frames);
          if (!gops[0][0].keyFrame) {
            gopForFusion = this.getGopForFusion_(nalUnits[0], track);
            if (gopForFusion) {
              prependedContentDuration = gopForFusion.duration;
              gops.unshift(gopForFusion);
              gops.byteLength += gopForFusion.byteLength;
              gops.nalCount += gopForFusion.nalCount;
              gops.pts = gopForFusion.pts;
              gops.dts = gopForFusion.dts;
              gops.duration += gopForFusion.duration;
            } else {
              gops = frameUtils.extendFirstKeyFrame(gops);
            }
          }
          if (gopsToAlignWith.length) {
            var alignedGops;
            if (options.alignGopsAtEnd) {
              alignedGops = this.alignGopsAtEnd_(gops);
            } else {
              alignedGops = this.alignGopsAtStart_(gops);
            }
            if (!alignedGops) {
              this.gopCache_.unshift({
                gop: gops.pop(),
                pps: track.pps,
                sps: track.sps
              });
              this.gopCache_.length = Math.min(6, this.gopCache_.length);
              nalUnits = [];
              this.resetStream_();
              this.trigger("done", "VideoSegmentStream");
              return;
            }
            trackDecodeInfo.clearDtsInfo(track);
            gops = alignedGops;
          }
          trackDecodeInfo.collectDtsInfo(track, gops);
          track.samples = frameUtils.generateSampleTable(gops);
          mdat2 = mp4Generator.mdat(frameUtils.concatenateNalData(gops));
          track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
          this.trigger("processedGopsInfo", gops.map(function(gop) {
            return {
              pts: gop.pts,
              dts: gop.dts,
              byteLength: gop.byteLength
            };
          }));
          firstGop = gops[0];
          lastGop = gops[gops.length - 1];
          this.trigger("segmentTimingInfo", generateSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration));
          this.trigger("timingInfo", {
            start: gops[0].pts,
            end: gops[gops.length - 1].pts + gops[gops.length - 1].duration
          });
          this.gopCache_.unshift({
            gop: gops.pop(),
            pps: track.pps,
            sps: track.sps
          });
          this.gopCache_.length = Math.min(6, this.gopCache_.length);
          nalUnits = [];
          this.trigger("baseMediaDecodeTime", track.baseMediaDecodeTime);
          this.trigger("timelineStartInfo", track.timelineStartInfo);
          moof2 = mp4Generator.moof(sequenceNumber, [track]);
          boxes = new Uint8Array(moof2.byteLength + mdat2.byteLength);
          sequenceNumber++;
          boxes.set(moof2);
          boxes.set(mdat2, moof2.byteLength);
          this.trigger("data", {
            track,
            boxes
          });
          this.resetStream_();
          this.trigger("done", "VideoSegmentStream");
        };
        this.reset = function() {
          this.resetStream_();
          nalUnits = [];
          this.gopCache_.length = 0;
          gopsToAlignWith.length = 0;
          this.trigger("reset");
        };
        this.resetStream_ = function() {
          trackDecodeInfo.clearDtsInfo(track);
          config = void 0;
          pps = void 0;
        };
        this.getGopForFusion_ = function(nalUnit) {
          var halfSecond = 45e3, allowableOverlap = 1e4, nearestDistance = Infinity, dtsDistance, nearestGopObj, currentGop, currentGopObj, i;
          for (i = 0; i < this.gopCache_.length; i++) {
            currentGopObj = this.gopCache_[i];
            currentGop = currentGopObj.gop;
            if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {
              continue;
            }
            if (currentGop.dts < track.timelineStartInfo.dts) {
              continue;
            }
            dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration;
            if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {
              if (!nearestGopObj || nearestDistance > dtsDistance) {
                nearestGopObj = currentGopObj;
                nearestDistance = dtsDistance;
              }
            }
          }
          if (nearestGopObj) {
            return nearestGopObj.gop;
          }
          return null;
        };
        this.alignGopsAtStart_ = function(gops) {
          var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;
          byteLength = gops.byteLength;
          nalCount = gops.nalCount;
          duration = gops.duration;
          alignIndex = gopIndex = 0;
          while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {
            align = gopsToAlignWith[alignIndex];
            gop = gops[gopIndex];
            if (align.pts === gop.pts) {
              break;
            }
            if (gop.pts > align.pts) {
              alignIndex++;
              continue;
            }
            gopIndex++;
            byteLength -= gop.byteLength;
            nalCount -= gop.nalCount;
            duration -= gop.duration;
          }
          if (gopIndex === 0) {
            return gops;
          }
          if (gopIndex === gops.length) {
            return null;
          }
          alignedGops = gops.slice(gopIndex);
          alignedGops.byteLength = byteLength;
          alignedGops.duration = duration;
          alignedGops.nalCount = nalCount;
          alignedGops.pts = alignedGops[0].pts;
          alignedGops.dts = alignedGops[0].dts;
          return alignedGops;
        };
        this.alignGopsAtEnd_ = function(gops) {
          var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;
          alignIndex = gopsToAlignWith.length - 1;
          gopIndex = gops.length - 1;
          alignEndIndex = null;
          matchFound = false;
          while (alignIndex >= 0 && gopIndex >= 0) {
            align = gopsToAlignWith[alignIndex];
            gop = gops[gopIndex];
            if (align.pts === gop.pts) {
              matchFound = true;
              break;
            }
            if (align.pts > gop.pts) {
              alignIndex--;
              continue;
            }
            if (alignIndex === gopsToAlignWith.length - 1) {
              alignEndIndex = gopIndex;
            }
            gopIndex--;
          }
          if (!matchFound && alignEndIndex === null) {
            return null;
          }
          var trimIndex;
          if (matchFound) {
            trimIndex = gopIndex;
          } else {
            trimIndex = alignEndIndex;
          }
          if (trimIndex === 0) {
            return gops;
          }
          var alignedGops = gops.slice(trimIndex);
          var metadata = alignedGops.reduce(function(total, gop2) {
            total.byteLength += gop2.byteLength;
            total.duration += gop2.duration;
            total.nalCount += gop2.nalCount;
            return total;
          }, {
            byteLength: 0,
            duration: 0,
            nalCount: 0
          });
          alignedGops.byteLength = metadata.byteLength;
          alignedGops.duration = metadata.duration;
          alignedGops.nalCount = metadata.nalCount;
          alignedGops.pts = alignedGops[0].pts;
          alignedGops.dts = alignedGops[0].dts;
          return alignedGops;
        };
        this.alignGopsWith = function(newGopsToAlignWith) {
          gopsToAlignWith = newGopsToAlignWith;
        };
      };
      _VideoSegmentStream$1.prototype = new stream();
      _CoalesceStream = function CoalesceStream2(options, metadataStream2) {
        this.numberOfTracks = 0;
        this.metadataStream = metadataStream2;
        options = options || {};
        if (typeof options.remux !== "undefined") {
          this.remuxTracks = !!options.remux;
        } else {
          this.remuxTracks = true;
        }
        if (typeof options.keepOriginalTimestamps === "boolean") {
          this.keepOriginalTimestamps = options.keepOriginalTimestamps;
        } else {
          this.keepOriginalTimestamps = false;
        }
        this.pendingTracks = [];
        this.videoTrack = null;
        this.pendingBoxes = [];
        this.pendingCaptions = [];
        this.pendingMetadata = [];
        this.pendingBytes = 0;
        this.emittedTracks = 0;
        _CoalesceStream.prototype.init.call(this);
        this.push = function(output) {
          if (output.text) {
            return this.pendingCaptions.push(output);
          }
          if (output.frames) {
            return this.pendingMetadata.push(output);
          }
          this.pendingTracks.push(output.track);
          this.pendingBytes += output.boxes.byteLength;
          if (output.track.type === "video") {
            this.videoTrack = output.track;
            this.pendingBoxes.push(output.boxes);
          }
          if (output.track.type === "audio") {
            this.audioTrack = output.track;
            this.pendingBoxes.unshift(output.boxes);
          }
        };
      };
      _CoalesceStream.prototype = new stream();
      _CoalesceStream.prototype.flush = function(flushSource) {
        var offset = 0, event = {
          captions: [],
          captionStreams: {},
          metadata: [],
          info: {}
        }, caption, id3, initSegment, timelineStartPts = 0, i;
        if (this.pendingTracks.length < this.numberOfTracks) {
          if (flushSource !== "VideoSegmentStream" && flushSource !== "AudioSegmentStream") {
            return;
          } else if (this.remuxTracks) {
            return;
          } else if (this.pendingTracks.length === 0) {
            this.emittedTracks++;
            if (this.emittedTracks >= this.numberOfTracks) {
              this.trigger("done");
              this.emittedTracks = 0;
            }
            return;
          }
        }
        if (this.videoTrack) {
          timelineStartPts = this.videoTrack.timelineStartInfo.pts;
          videoProperties.forEach(function(prop) {
            event.info[prop] = this.videoTrack[prop];
          }, this);
        } else if (this.audioTrack) {
          timelineStartPts = this.audioTrack.timelineStartInfo.pts;
          audioProperties.forEach(function(prop) {
            event.info[prop] = this.audioTrack[prop];
          }, this);
        }
        if (this.videoTrack || this.audioTrack) {
          if (this.pendingTracks.length === 1) {
            event.type = this.pendingTracks[0].type;
          } else {
            event.type = "combined";
          }
          this.emittedTracks += this.pendingTracks.length;
          initSegment = mp4Generator.initSegment(this.pendingTracks);
          event.initSegment = new Uint8Array(initSegment.byteLength);
          event.initSegment.set(initSegment);
          event.data = new Uint8Array(this.pendingBytes);
          for (i = 0; i < this.pendingBoxes.length; i++) {
            event.data.set(this.pendingBoxes[i], offset);
            offset += this.pendingBoxes[i].byteLength;
          }
          for (i = 0; i < this.pendingCaptions.length; i++) {
            caption = this.pendingCaptions[i];
            caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, this.keepOriginalTimestamps);
            caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, this.keepOriginalTimestamps);
            event.captionStreams[caption.stream] = true;
            event.captions.push(caption);
          }
          for (i = 0; i < this.pendingMetadata.length; i++) {
            id3 = this.pendingMetadata[i];
            id3.cueTime = clock.metadataTsToSeconds(id3.pts, timelineStartPts, this.keepOriginalTimestamps);
            event.metadata.push(id3);
          }
          event.metadata.dispatchType = this.metadataStream.dispatchType;
          this.pendingTracks.length = 0;
          this.videoTrack = null;
          this.pendingBoxes.length = 0;
          this.pendingCaptions.length = 0;
          this.pendingBytes = 0;
          this.pendingMetadata.length = 0;
          this.trigger("data", event);
          for (i = 0; i < event.captions.length; i++) {
            caption = event.captions[i];
            this.trigger("caption", caption);
          }
          for (i = 0; i < event.metadata.length; i++) {
            id3 = event.metadata[i];
            this.trigger("id3Frame", id3);
          }
        }
        if (this.emittedTracks >= this.numberOfTracks) {
          this.trigger("done");
          this.emittedTracks = 0;
        }
      };
      _CoalesceStream.prototype.setRemux = function(val) {
        this.remuxTracks = val;
      };
      _Transmuxer$1 = function Transmuxer2(options) {
        var self2 = this, hasFlushed = true, videoTrack, audioTrack;
        _Transmuxer$1.prototype.init.call(this);
        options = options || {};
        this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;
        this.transmuxPipeline_ = {};
        this.setupAacPipeline = function() {
          var pipeline = {};
          this.transmuxPipeline_ = pipeline;
          pipeline.type = "aac";
          pipeline.metadataStream = new m2ts_1.MetadataStream();
          pipeline.aacStream = new aac();
          pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream("audio");
          pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream("timed-metadata");
          pipeline.adtsStream = new adts();
          pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
          pipeline.headOfPipeline = pipeline.aacStream;
          pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);
          pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);
          pipeline.metadataStream.on("timestamp", function(frame) {
            pipeline.aacStream.setTimestamp(frame.timeStamp);
          });
          pipeline.aacStream.on("data", function(data) {
            if (data.type !== "timed-metadata" && data.type !== "audio" || pipeline.audioSegmentStream) {
              return;
            }
            audioTrack = audioTrack || {
              timelineStartInfo: {
                baseMediaDecodeTime: self2.baseMediaDecodeTime
              },
              codec: "adts",
              type: "audio"
            };
            pipeline.coalesceStream.numberOfTracks++;
            pipeline.audioSegmentStream = new _AudioSegmentStream$1(audioTrack, options);
            pipeline.audioSegmentStream.on("log", self2.getLogTrigger_("audioSegmentStream"));
            pipeline.audioSegmentStream.on("timingInfo", self2.trigger.bind(self2, "audioTimingInfo"));
            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
            self2.trigger("trackinfo", {
              hasAudio: !!audioTrack,
              hasVideo: !!videoTrack
            });
          });
          pipeline.coalesceStream.on("data", this.trigger.bind(this, "data"));
          pipeline.coalesceStream.on("done", this.trigger.bind(this, "done"));
          addPipelineLogRetriggers(this, pipeline);
        };
        this.setupTsPipeline = function() {
          var pipeline = {};
          this.transmuxPipeline_ = pipeline;
          pipeline.type = "ts";
          pipeline.metadataStream = new m2ts_1.MetadataStream();
          pipeline.packetStream = new m2ts_1.TransportPacketStream();
          pipeline.parseStream = new m2ts_1.TransportParseStream();
          pipeline.elementaryStream = new m2ts_1.ElementaryStream();
          pipeline.timestampRolloverStream = new m2ts_1.TimestampRolloverStream();
          pipeline.adtsStream = new adts();
          pipeline.h264Stream = new H264Stream$1();
          pipeline.captionStream = new m2ts_1.CaptionStream(options);
          pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
          pipeline.headOfPipeline = pipeline.packetStream;
          pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream);
          pipeline.timestampRolloverStream.pipe(pipeline.h264Stream);
          pipeline.timestampRolloverStream.pipe(pipeline.adtsStream);
          pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);
          pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);
          pipeline.elementaryStream.on("data", function(data) {
            var i;
            if (data.type === "metadata") {
              i = data.tracks.length;
              while (i--) {
                if (!videoTrack && data.tracks[i].type === "video") {
                  videoTrack = data.tracks[i];
                  videoTrack.timelineStartInfo.baseMediaDecodeTime = self2.baseMediaDecodeTime;
                } else if (!audioTrack && data.tracks[i].type === "audio") {
                  audioTrack = data.tracks[i];
                  audioTrack.timelineStartInfo.baseMediaDecodeTime = self2.baseMediaDecodeTime;
                }
              }
              if (videoTrack && !pipeline.videoSegmentStream) {
                pipeline.coalesceStream.numberOfTracks++;
                pipeline.videoSegmentStream = new _VideoSegmentStream$1(videoTrack, options);
                pipeline.videoSegmentStream.on("log", self2.getLogTrigger_("videoSegmentStream"));
                pipeline.videoSegmentStream.on("timelineStartInfo", function(timelineStartInfo) {
                  if (audioTrack && !options.keepOriginalTimestamps) {
                    audioTrack.timelineStartInfo = timelineStartInfo;
                    pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - self2.baseMediaDecodeTime);
                  }
                });
                pipeline.videoSegmentStream.on("processedGopsInfo", self2.trigger.bind(self2, "gopInfo"));
                pipeline.videoSegmentStream.on("segmentTimingInfo", self2.trigger.bind(self2, "videoSegmentTimingInfo"));
                pipeline.videoSegmentStream.on("baseMediaDecodeTime", function(baseMediaDecodeTime) {
                  if (audioTrack) {
                    pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);
                  }
                });
                pipeline.videoSegmentStream.on("timingInfo", self2.trigger.bind(self2, "videoTimingInfo"));
                pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);
              }
              if (audioTrack && !pipeline.audioSegmentStream) {
                pipeline.coalesceStream.numberOfTracks++;
                pipeline.audioSegmentStream = new _AudioSegmentStream$1(audioTrack, options);
                pipeline.audioSegmentStream.on("log", self2.getLogTrigger_("audioSegmentStream"));
                pipeline.audioSegmentStream.on("timingInfo", self2.trigger.bind(self2, "audioTimingInfo"));
                pipeline.audioSegmentStream.on("segmentTimingInfo", self2.trigger.bind(self2, "audioSegmentTimingInfo"));
                pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
              }
              self2.trigger("trackinfo", {
                hasAudio: !!audioTrack,
                hasVideo: !!videoTrack
              });
            }
          });
          pipeline.coalesceStream.on("data", this.trigger.bind(this, "data"));
          pipeline.coalesceStream.on("id3Frame", function(id3Frame) {
            id3Frame.dispatchType = pipeline.metadataStream.dispatchType;
            self2.trigger("id3Frame", id3Frame);
          });
          pipeline.coalesceStream.on("caption", this.trigger.bind(this, "caption"));
          pipeline.coalesceStream.on("done", this.trigger.bind(this, "done"));
          addPipelineLogRetriggers(this, pipeline);
        };
        this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {
          var pipeline = this.transmuxPipeline_;
          if (!options.keepOriginalTimestamps) {
            this.baseMediaDecodeTime = baseMediaDecodeTime;
          }
          if (audioTrack) {
            audioTrack.timelineStartInfo.dts = void 0;
            audioTrack.timelineStartInfo.pts = void 0;
            trackDecodeInfo.clearDtsInfo(audioTrack);
            if (pipeline.audioTimestampRolloverStream) {
              pipeline.audioTimestampRolloverStream.discontinuity();
            }
          }
          if (videoTrack) {
            if (pipeline.videoSegmentStream) {
              pipeline.videoSegmentStream.gopCache_ = [];
            }
            videoTrack.timelineStartInfo.dts = void 0;
            videoTrack.timelineStartInfo.pts = void 0;
            trackDecodeInfo.clearDtsInfo(videoTrack);
            pipeline.captionStream.reset();
          }
          if (pipeline.timestampRolloverStream) {
            pipeline.timestampRolloverStream.discontinuity();
          }
        };
        this.setAudioAppendStart = function(timestamp) {
          if (audioTrack) {
            this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);
          }
        };
        this.setRemux = function(val) {
          var pipeline = this.transmuxPipeline_;
          options.remux = val;
          if (pipeline && pipeline.coalesceStream) {
            pipeline.coalesceStream.setRemux(val);
          }
        };
        this.alignGopsWith = function(gopsToAlignWith) {
          if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {
            this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);
          }
        };
        this.getLogTrigger_ = function(key) {
          var self3 = this;
          return function(event) {
            event.stream = key;
            self3.trigger("log", event);
          };
        };
        this.push = function(data) {
          if (hasFlushed) {
            var isAac = isLikelyAacData$1(data);
            if (isAac && this.transmuxPipeline_.type !== "aac") {
              this.setupAacPipeline();
            } else if (!isAac && this.transmuxPipeline_.type !== "ts") {
              this.setupTsPipeline();
            }
            hasFlushed = false;
          }
          this.transmuxPipeline_.headOfPipeline.push(data);
        };
        this.flush = function() {
          hasFlushed = true;
          this.transmuxPipeline_.headOfPipeline.flush();
        };
        this.endTimeline = function() {
          this.transmuxPipeline_.headOfPipeline.endTimeline();
        };
        this.reset = function() {
          if (this.transmuxPipeline_.headOfPipeline) {
            this.transmuxPipeline_.headOfPipeline.reset();
          }
        };
        this.resetCaptions = function() {
          if (this.transmuxPipeline_.captionStream) {
            this.transmuxPipeline_.captionStream.reset();
          }
        };
      };
      _Transmuxer$1.prototype = new stream();
      var transmuxer$2 = {
        Transmuxer: _Transmuxer$1,
        VideoSegmentStream: _VideoSegmentStream$1,
        AudioSegmentStream: _AudioSegmentStream$1,
        AUDIO_PROPERTIES: audioProperties,
        VIDEO_PROPERTIES: videoProperties,
        // exported for testing
        generateSegmentTimingInfo
      };
      var discardEmulationPreventionBytes = captionPacketParser.discardEmulationPreventionBytes;
      var CaptionStream = captionStream.CaptionStream;
      var mapToSample = function mapToSample2(offset, samples) {
        var approximateOffset = offset;
        for (var i = 0; i < samples.length; i++) {
          var sample = samples[i];
          if (approximateOffset < sample.size) {
            return sample;
          }
          approximateOffset -= sample.size;
        }
        return null;
      };
      var findSeiNals = function findSeiNals2(avcStream, samples, trackId) {
        var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength), result = {
          logs: [],
          seiNals: []
        }, seiNal, i, length, lastMatchedSample;
        for (i = 0; i + 4 < avcStream.length; i += length) {
          length = avcView.getUint32(i);
          i += 4;
          if (length <= 0) {
            continue;
          }
          switch (avcStream[i] & 31) {
            case 6:
              var data = avcStream.subarray(i + 1, i + 1 + length);
              var matchingSample = mapToSample(i, samples);
              seiNal = {
                nalUnitType: "sei_rbsp",
                size: length,
                data,
                escapedRBSP: discardEmulationPreventionBytes(data),
                trackId
              };
              if (matchingSample) {
                seiNal.pts = matchingSample.pts;
                seiNal.dts = matchingSample.dts;
                lastMatchedSample = matchingSample;
              } else if (lastMatchedSample) {
                seiNal.pts = lastMatchedSample.pts;
                seiNal.dts = lastMatchedSample.dts;
              } else {
                result.logs.push({
                  level: "warn",
                  message: "We've encountered a nal unit without data at " + i + " for trackId " + trackId + ". See mux.js#223."
                });
                break;
              }
              result.seiNals.push(seiNal);
              break;
          }
        }
        return result;
      };
      var parseSamples = function parseSamples2(truns, baseMediaDecodeTime, tfhd2) {
        var currentDts = baseMediaDecodeTime;
        var defaultSampleDuration = tfhd2.defaultSampleDuration || 0;
        var defaultSampleSize = tfhd2.defaultSampleSize || 0;
        var trackId = tfhd2.trackId;
        var allSamples = [];
        truns.forEach(function(trun2) {
          var trackRun = parseTrun(trun2);
          var samples = trackRun.samples;
          samples.forEach(function(sample) {
            if (sample.duration === void 0) {
              sample.duration = defaultSampleDuration;
            }
            if (sample.size === void 0) {
              sample.size = defaultSampleSize;
            }
            sample.trackId = trackId;
            sample.dts = currentDts;
            if (sample.compositionTimeOffset === void 0) {
              sample.compositionTimeOffset = 0;
            }
            sample.pts = currentDts + sample.compositionTimeOffset;
            currentDts += sample.duration;
          });
          allSamples = allSamples.concat(samples);
        });
        return allSamples;
      };
      var parseCaptionNals = function parseCaptionNals2(segment, videoTrackId) {
        var trafs = findBox_1(segment, ["moof", "traf"]);
        var mdats = findBox_1(segment, ["mdat"]);
        var captionNals = {};
        var mdatTrafPairs = [];
        mdats.forEach(function(mdat2, index) {
          var matchingTraf = trafs[index];
          mdatTrafPairs.push({
            mdat: mdat2,
            traf: matchingTraf
          });
        });
        mdatTrafPairs.forEach(function(pair) {
          var mdat2 = pair.mdat;
          var traf2 = pair.traf;
          var tfhd2 = findBox_1(traf2, ["tfhd"]);
          var headerInfo = parseTfhd(tfhd2[0]);
          var trackId = headerInfo.trackId;
          var tfdt2 = findBox_1(traf2, ["tfdt"]);
          var baseMediaDecodeTime = tfdt2.length > 0 ? parseTfdt(tfdt2[0]).baseMediaDecodeTime : 0;
          var truns = findBox_1(traf2, ["trun"]);
          var samples;
          var result;
          if (videoTrackId === trackId && truns.length > 0) {
            samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);
            result = findSeiNals(mdat2, samples, trackId);
            if (!captionNals[trackId]) {
              captionNals[trackId] = {
                seiNals: [],
                logs: []
              };
            }
            captionNals[trackId].seiNals = captionNals[trackId].seiNals.concat(result.seiNals);
            captionNals[trackId].logs = captionNals[trackId].logs.concat(result.logs);
          }
        });
        return captionNals;
      };
      var parseEmbeddedCaptions = function parseEmbeddedCaptions2(segment, trackId, timescale2) {
        var captionNals;
        if (trackId === null) {
          return null;
        }
        captionNals = parseCaptionNals(segment, trackId);
        var trackNals = captionNals[trackId] || {};
        return {
          seiNals: trackNals.seiNals,
          logs: trackNals.logs,
          timescale: timescale2
        };
      };
      var CaptionParser = function CaptionParser2() {
        var isInitialized = false;
        var captionStream2;
        var segmentCache;
        var trackId;
        var timescale2;
        var parsedCaptions;
        var parsingPartial;
        this.isInitialized = function() {
          return isInitialized;
        };
        this.init = function(options) {
          captionStream2 = new CaptionStream();
          isInitialized = true;
          parsingPartial = options ? options.isPartial : false;
          captionStream2.on("data", function(event) {
            event.startTime = event.startPts / timescale2;
            event.endTime = event.endPts / timescale2;
            parsedCaptions.captions.push(event);
            parsedCaptions.captionStreams[event.stream] = true;
          });
          captionStream2.on("log", function(log) {
            parsedCaptions.logs.push(log);
          });
        };
        this.isNewInit = function(videoTrackIds, timescales) {
          if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === "object" && Object.keys(timescales).length === 0) {
            return false;
          }
          return trackId !== videoTrackIds[0] || timescale2 !== timescales[trackId];
        };
        this.parse = function(segment, videoTrackIds, timescales) {
          var parsedData;
          if (!this.isInitialized()) {
            return null;
          } else if (!videoTrackIds || !timescales) {
            return null;
          } else if (this.isNewInit(videoTrackIds, timescales)) {
            trackId = videoTrackIds[0];
            timescale2 = timescales[trackId];
          } else if (trackId === null || !timescale2) {
            segmentCache.push(segment);
            return null;
          }
          while (segmentCache.length > 0) {
            var cachedSegment = segmentCache.shift();
            this.parse(cachedSegment, videoTrackIds, timescales);
          }
          parsedData = parseEmbeddedCaptions(segment, trackId, timescale2);
          if (parsedData && parsedData.logs) {
            parsedCaptions.logs = parsedCaptions.logs.concat(parsedData.logs);
          }
          if (parsedData === null || !parsedData.seiNals) {
            if (parsedCaptions.logs.length) {
              return {
                logs: parsedCaptions.logs,
                captions: [],
                captionStreams: []
              };
            }
            return null;
          }
          this.pushNals(parsedData.seiNals);
          this.flushStream();
          return parsedCaptions;
        };
        this.pushNals = function(nals) {
          if (!this.isInitialized() || !nals || nals.length === 0) {
            return null;
          }
          nals.forEach(function(nal) {
            captionStream2.push(nal);
          });
        };
        this.flushStream = function() {
          if (!this.isInitialized()) {
            return null;
          }
          if (!parsingPartial) {
            captionStream2.flush();
          } else {
            captionStream2.partialFlush();
          }
        };
        this.clearParsedCaptions = function() {
          parsedCaptions.captions = [];
          parsedCaptions.captionStreams = {};
          parsedCaptions.logs = [];
        };
        this.resetCaptionStream = function() {
          if (!this.isInitialized()) {
            return null;
          }
          captionStream2.reset();
        };
        this.clearAllCaptions = function() {
          this.clearParsedCaptions();
          this.resetCaptionStream();
        };
        this.reset = function() {
          segmentCache = [];
          trackId = null;
          timescale2 = null;
          if (!parsedCaptions) {
            parsedCaptions = {
              captions: [],
              // CC1, CC2, CC3, CC4
              captionStreams: {},
              logs: []
            };
          } else {
            this.clearParsedCaptions();
          }
          this.resetCaptionStream();
        };
        this.reset();
      };
      var captionParser = CaptionParser;
      var mp4 = {
        generator: mp4Generator,
        probe: probe$2,
        Transmuxer: transmuxer$2.Transmuxer,
        AudioSegmentStream: transmuxer$2.AudioSegmentStream,
        VideoSegmentStream: transmuxer$2.VideoSegmentStream,
        CaptionParser: captionParser
      };
      var _FlvTag;
      _FlvTag = function FlvTag(type2, extraData) {
        var adHoc = 0, bufferStartSize = 16384, prepareWrite = function prepareWrite2(flv2, count) {
          var bytes, minLength = flv2.position + count;
          if (minLength < flv2.bytes.byteLength) {
            return;
          }
          bytes = new Uint8Array(minLength * 2);
          bytes.set(flv2.bytes.subarray(0, flv2.position), 0);
          flv2.bytes = bytes;
          flv2.view = new DataView(flv2.bytes.buffer);
        }, widthBytes = _FlvTag.widthBytes || new Uint8Array("width".length), heightBytes = _FlvTag.heightBytes || new Uint8Array("height".length), videocodecidBytes = _FlvTag.videocodecidBytes || new Uint8Array("videocodecid".length), i;
        if (!_FlvTag.widthBytes) {
          for (i = 0; i < "width".length; i++) {
            widthBytes[i] = "width".charCodeAt(i);
          }
          for (i = 0; i < "height".length; i++) {
            heightBytes[i] = "height".charCodeAt(i);
          }
          for (i = 0; i < "videocodecid".length; i++) {
            videocodecidBytes[i] = "videocodecid".charCodeAt(i);
          }
          _FlvTag.widthBytes = widthBytes;
          _FlvTag.heightBytes = heightBytes;
          _FlvTag.videocodecidBytes = videocodecidBytes;
        }
        this.keyFrame = false;
        switch (type2) {
          case _FlvTag.VIDEO_TAG:
            this.length = 16;
            bufferStartSize *= 6;
            break;
          case _FlvTag.AUDIO_TAG:
            this.length = 13;
            this.keyFrame = true;
            break;
          case _FlvTag.METADATA_TAG:
            this.length = 29;
            this.keyFrame = true;
            break;
          default:
            throw new Error("Unknown FLV tag type");
        }
        this.bytes = new Uint8Array(bufferStartSize);
        this.view = new DataView(this.bytes.buffer);
        this.bytes[0] = type2;
        this.position = this.length;
        this.keyFrame = extraData;
        this.pts = 0;
        this.dts = 0;
        this.writeBytes = function(bytes, offset, length) {
          var start = offset || 0, end;
          length = length || bytes.byteLength;
          end = start + length;
          prepareWrite(this, length);
          this.bytes.set(bytes.subarray(start, end), this.position);
          this.position += length;
          this.length = Math.max(this.length, this.position);
        };
        this.writeByte = function(byte) {
          prepareWrite(this, 1);
          this.bytes[this.position] = byte;
          this.position++;
          this.length = Math.max(this.length, this.position);
        };
        this.writeShort = function(short) {
          prepareWrite(this, 2);
          this.view.setUint16(this.position, short);
          this.position += 2;
          this.length = Math.max(this.length, this.position);
        };
        this.negIndex = function(pos) {
          return this.bytes[this.length - pos];
        };
        this.nalUnitSize = function() {
          if (adHoc === 0) {
            return 0;
          }
          return this.length - (adHoc + 4);
        };
        this.startNalUnit = function() {
          if (adHoc > 0) {
            throw new Error("Attempted to create new NAL wihout closing the old one");
          }
          adHoc = this.length;
          this.length += 4;
          this.position = this.length;
        };
        this.endNalUnit = function(nalContainer) {
          var nalStart, nalLength;
          if (this.length === adHoc + 4) {
            this.length -= 4;
          } else if (adHoc > 0) {
            nalStart = adHoc + 4;
            nalLength = this.length - nalStart;
            this.position = adHoc;
            this.view.setUint32(this.position, nalLength);
            this.position = this.length;
            if (nalContainer) {
              nalContainer.push(this.bytes.subarray(nalStart, nalStart + nalLength));
            }
          }
          adHoc = 0;
        };
        this.writeMetaDataDouble = function(key, val) {
          var i2;
          prepareWrite(this, 2 + key.length + 9);
          this.view.setUint16(this.position, key.length);
          this.position += 2;
          if (key === "width") {
            this.bytes.set(widthBytes, this.position);
            this.position += 5;
          } else if (key === "height") {
            this.bytes.set(heightBytes, this.position);
            this.position += 6;
          } else if (key === "videocodecid") {
            this.bytes.set(videocodecidBytes, this.position);
            this.position += 12;
          } else {
            for (i2 = 0; i2 < key.length; i2++) {
              this.bytes[this.position] = key.charCodeAt(i2);
              this.position++;
            }
          }
          this.position++;
          this.view.setFloat64(this.position, val);
          this.position += 8;
          this.length = Math.max(this.length, this.position);
          ++adHoc;
        };
        this.writeMetaDataBoolean = function(key, val) {
          var i2;
          prepareWrite(this, 2);
          this.view.setUint16(this.position, key.length);
          this.position += 2;
          for (i2 = 0; i2 < key.length; i2++) {
            prepareWrite(this, 1);
            this.bytes[this.position] = key.charCodeAt(i2);
            this.position++;
          }
          prepareWrite(this, 2);
          this.view.setUint8(this.position, 1);
          this.position++;
          this.view.setUint8(this.position, val ? 1 : 0);
          this.position++;
          this.length = Math.max(this.length, this.position);
          ++adHoc;
        };
        this.finalize = function() {
          var dtsDelta, len;
          switch (this.bytes[0]) {
            case _FlvTag.VIDEO_TAG:
              this.bytes[11] = (this.keyFrame || extraData ? 16 : 32) | 7;
              this.bytes[12] = extraData ? 0 : 1;
              dtsDelta = this.pts - this.dts;
              this.bytes[13] = (dtsDelta & 16711680) >>> 16;
              this.bytes[14] = (dtsDelta & 65280) >>> 8;
              this.bytes[15] = (dtsDelta & 255) >>> 0;
              break;
            case _FlvTag.AUDIO_TAG:
              this.bytes[11] = 175;
              this.bytes[12] = extraData ? 0 : 1;
              break;
            case _FlvTag.METADATA_TAG:
              this.position = 11;
              this.view.setUint8(this.position, 2);
              this.position++;
              this.view.setUint16(this.position, 10);
              this.position += 2;
              this.bytes.set([111, 110, 77, 101, 116, 97, 68, 97, 116, 97], this.position);
              this.position += 10;
              this.bytes[this.position] = 8;
              this.position++;
              this.view.setUint32(this.position, adHoc);
              this.position = this.length;
              this.bytes.set([0, 0, 9], this.position);
              this.position += 3;
              this.length = this.position;
              break;
          }
          len = this.length - 11;
          this.bytes[1] = (len & 16711680) >>> 16;
          this.bytes[2] = (len & 65280) >>> 8;
          this.bytes[3] = (len & 255) >>> 0;
          this.bytes[4] = (this.dts & 16711680) >>> 16;
          this.bytes[5] = (this.dts & 65280) >>> 8;
          this.bytes[6] = (this.dts & 255) >>> 0;
          this.bytes[7] = (this.dts & 4278190080) >>> 24;
          this.bytes[8] = 0;
          this.bytes[9] = 0;
          this.bytes[10] = 0;
          prepareWrite(this, 4);
          this.view.setUint32(this.length, this.length);
          this.length += 4;
          this.position += 4;
          this.bytes = this.bytes.subarray(0, this.length);
          this.frameTime = _FlvTag.frameTime(this.bytes);
          return this;
        };
      };
      _FlvTag.AUDIO_TAG = 8;
      _FlvTag.VIDEO_TAG = 9;
      _FlvTag.METADATA_TAG = 18;
      _FlvTag.isAudioFrame = function(tag) {
        return _FlvTag.AUDIO_TAG === tag[0];
      };
      _FlvTag.isVideoFrame = function(tag) {
        return _FlvTag.VIDEO_TAG === tag[0];
      };
      _FlvTag.isMetaData = function(tag) {
        return _FlvTag.METADATA_TAG === tag[0];
      };
      _FlvTag.isKeyFrame = function(tag) {
        if (_FlvTag.isVideoFrame(tag)) {
          return tag[11] === 23;
        }
        if (_FlvTag.isAudioFrame(tag)) {
          return true;
        }
        if (_FlvTag.isMetaData(tag)) {
          return true;
        }
        return false;
      };
      _FlvTag.frameTime = function(tag) {
        var pts = tag[4] << 16;
        pts |= tag[5] << 8;
        pts |= tag[6] << 0;
        pts |= tag[7] << 24;
        return pts;
      };
      var flvTag = _FlvTag;
      var CoalesceStream = function CoalesceStream2(options) {
        this.numberOfTracks = 0;
        this.metadataStream = options.metadataStream;
        this.videoTags = [];
        this.audioTags = [];
        this.videoTrack = null;
        this.audioTrack = null;
        this.pendingCaptions = [];
        this.pendingMetadata = [];
        this.pendingTracks = 0;
        this.processedTracks = 0;
        CoalesceStream2.prototype.init.call(this);
        this.push = function(output) {
          if (output.text) {
            return this.pendingCaptions.push(output);
          }
          if (output.frames) {
            return this.pendingMetadata.push(output);
          }
          if (output.track.type === "video") {
            this.videoTrack = output.track;
            this.videoTags = output.tags;
            this.pendingTracks++;
          }
          if (output.track.type === "audio") {
            this.audioTrack = output.track;
            this.audioTags = output.tags;
            this.pendingTracks++;
          }
        };
      };
      CoalesceStream.prototype = new stream();
      CoalesceStream.prototype.flush = function(flushSource) {
        var id3, caption, i, timelineStartPts, event = {
          tags: {},
          captions: [],
          captionStreams: {},
          metadata: []
        };
        if (this.pendingTracks < this.numberOfTracks) {
          if (flushSource !== "VideoSegmentStream" && flushSource !== "AudioSegmentStream") {
            return;
          } else if (this.pendingTracks === 0) {
            this.processedTracks++;
            if (this.processedTracks < this.numberOfTracks) {
              return;
            }
          }
        }
        this.processedTracks += this.pendingTracks;
        this.pendingTracks = 0;
        if (this.processedTracks < this.numberOfTracks) {
          return;
        }
        if (this.videoTrack) {
          timelineStartPts = this.videoTrack.timelineStartInfo.pts;
        } else if (this.audioTrack) {
          timelineStartPts = this.audioTrack.timelineStartInfo.pts;
        }
        event.tags.videoTags = this.videoTags;
        event.tags.audioTags = this.audioTags;
        for (i = 0; i < this.pendingCaptions.length; i++) {
          caption = this.pendingCaptions[i];
          caption.startTime = caption.startPts - timelineStartPts;
          caption.startTime /= 9e4;
          caption.endTime = caption.endPts - timelineStartPts;
          caption.endTime /= 9e4;
          event.captionStreams[caption.stream] = true;
          event.captions.push(caption);
        }
        for (i = 0; i < this.pendingMetadata.length; i++) {
          id3 = this.pendingMetadata[i];
          id3.cueTime = id3.pts - timelineStartPts;
          id3.cueTime /= 9e4;
          event.metadata.push(id3);
        }
        event.metadata.dispatchType = this.metadataStream.dispatchType;
        this.videoTrack = null;
        this.audioTrack = null;
        this.videoTags = [];
        this.audioTags = [];
        this.pendingCaptions.length = 0;
        this.pendingMetadata.length = 0;
        this.pendingTracks = 0;
        this.processedTracks = 0;
        this.trigger("data", event);
        this.trigger("done");
      };
      var coalesceStream = CoalesceStream;
      var TagList = function TagList2() {
        var self2 = this;
        this.list = [];
        this.push = function(tag) {
          this.list.push({
            bytes: tag.bytes,
            dts: tag.dts,
            pts: tag.pts,
            keyFrame: tag.keyFrame,
            metaDataTag: tag.metaDataTag
          });
        };
        Object.defineProperty(this, "length", {
          get: function get() {
            return self2.list.length;
          }
        });
      };
      var tagList = TagList;
      var H264Stream = h264.H264Stream;
      var _Transmuxer, _VideoSegmentStream, _AudioSegmentStream, collectTimelineInfo, metaDataTag, extraDataTag;
      collectTimelineInfo = function collectTimelineInfo2(track, data) {
        if (typeof data.pts === "number") {
          if (track.timelineStartInfo.pts === void 0) {
            track.timelineStartInfo.pts = data.pts;
          } else {
            track.timelineStartInfo.pts = Math.min(track.timelineStartInfo.pts, data.pts);
          }
        }
        if (typeof data.dts === "number") {
          if (track.timelineStartInfo.dts === void 0) {
            track.timelineStartInfo.dts = data.dts;
          } else {
            track.timelineStartInfo.dts = Math.min(track.timelineStartInfo.dts, data.dts);
          }
        }
      };
      metaDataTag = function metaDataTag2(track, pts) {
        var tag = new flvTag(flvTag.METADATA_TAG);
        tag.dts = pts;
        tag.pts = pts;
        tag.writeMetaDataDouble("videocodecid", 7);
        tag.writeMetaDataDouble("width", track.width);
        tag.writeMetaDataDouble("height", track.height);
        return tag;
      };
      extraDataTag = function extraDataTag2(track, pts) {
        var i, tag = new flvTag(flvTag.VIDEO_TAG, true);
        tag.dts = pts;
        tag.pts = pts;
        tag.writeByte(1);
        tag.writeByte(track.profileIdc);
        tag.writeByte(track.profileCompatibility);
        tag.writeByte(track.levelIdc);
        tag.writeByte(252 | 3);
        tag.writeByte(224 | 1);
        tag.writeShort(track.sps[0].length);
        tag.writeBytes(track.sps[0]);
        tag.writeByte(track.pps.length);
        for (i = 0; i < track.pps.length; ++i) {
          tag.writeShort(track.pps[i].length);
          tag.writeBytes(track.pps[i]);
        }
        return tag;
      };
      _AudioSegmentStream = function AudioSegmentStream2(track) {
        var adtsFrames = [], videoKeyFrames = [], oldExtraData;
        _AudioSegmentStream.prototype.init.call(this);
        this.push = function(data) {
          collectTimelineInfo(track, data);
          if (track) {
            track.audioobjecttype = data.audioobjecttype;
            track.channelcount = data.channelcount;
            track.samplerate = data.samplerate;
            track.samplingfrequencyindex = data.samplingfrequencyindex;
            track.samplesize = data.samplesize;
            track.extraData = track.audioobjecttype << 11 | track.samplingfrequencyindex << 7 | track.channelcount << 3;
          }
          data.pts = Math.round(data.pts / 90);
          data.dts = Math.round(data.dts / 90);
          adtsFrames.push(data);
        };
        this.flush = function() {
          var currentFrame, adtsFrame, lastMetaPts, tags = new tagList();
          if (adtsFrames.length === 0) {
            this.trigger("done", "AudioSegmentStream");
            return;
          }
          lastMetaPts = -Infinity;
          while (adtsFrames.length) {
            currentFrame = adtsFrames.shift();
            if (videoKeyFrames.length && currentFrame.pts >= videoKeyFrames[0]) {
              lastMetaPts = videoKeyFrames.shift();
              this.writeMetaDataTags(tags, lastMetaPts);
            }
            if (track.extraData !== oldExtraData || currentFrame.pts - lastMetaPts >= 1e3) {
              this.writeMetaDataTags(tags, currentFrame.pts);
              oldExtraData = track.extraData;
              lastMetaPts = currentFrame.pts;
            }
            adtsFrame = new flvTag(flvTag.AUDIO_TAG);
            adtsFrame.pts = currentFrame.pts;
            adtsFrame.dts = currentFrame.dts;
            adtsFrame.writeBytes(currentFrame.data);
            tags.push(adtsFrame.finalize());
          }
          videoKeyFrames.length = 0;
          oldExtraData = null;
          this.trigger("data", {
            track,
            tags: tags.list
          });
          this.trigger("done", "AudioSegmentStream");
        };
        this.writeMetaDataTags = function(tags, pts) {
          var adtsFrame;
          adtsFrame = new flvTag(flvTag.METADATA_TAG);
          adtsFrame.pts = pts;
          adtsFrame.dts = pts;
          adtsFrame.writeMetaDataDouble("audiocodecid", 10);
          adtsFrame.writeMetaDataBoolean("stereo", track.channelcount === 2);
          adtsFrame.writeMetaDataDouble("audiosamplerate", track.samplerate);
          adtsFrame.writeMetaDataDouble("audiosamplesize", 16);
          tags.push(adtsFrame.finalize());
          adtsFrame = new flvTag(flvTag.AUDIO_TAG, true);
          adtsFrame.pts = pts;
          adtsFrame.dts = pts;
          adtsFrame.view.setUint16(adtsFrame.position, track.extraData);
          adtsFrame.position += 2;
          adtsFrame.length = Math.max(adtsFrame.length, adtsFrame.position);
          tags.push(adtsFrame.finalize());
        };
        this.onVideoKeyFrame = function(pts) {
          videoKeyFrames.push(pts);
        };
      };
      _AudioSegmentStream.prototype = new stream();
      _VideoSegmentStream = function VideoSegmentStream2(track) {
        var nalUnits = [], config, h264Frame;
        _VideoSegmentStream.prototype.init.call(this);
        this.finishFrame = function(tags, frame) {
          if (!frame) {
            return;
          }
          if (config && track && track.newMetadata && (frame.keyFrame || tags.length === 0)) {
            var metaTag = metaDataTag(config, frame.dts).finalize();
            var extraTag = extraDataTag(track, frame.dts).finalize();
            metaTag.metaDataTag = extraTag.metaDataTag = true;
            tags.push(metaTag);
            tags.push(extraTag);
            track.newMetadata = false;
            this.trigger("keyframe", frame.dts);
          }
          frame.endNalUnit();
          tags.push(frame.finalize());
          h264Frame = null;
        };
        this.push = function(data) {
          collectTimelineInfo(track, data);
          data.pts = Math.round(data.pts / 90);
          data.dts = Math.round(data.dts / 90);
          nalUnits.push(data);
        };
        this.flush = function() {
          var currentNal, tags = new tagList();
          while (nalUnits.length) {
            if (nalUnits[0].nalUnitType === "access_unit_delimiter_rbsp") {
              break;
            }
            nalUnits.shift();
          }
          if (nalUnits.length === 0) {
            this.trigger("done", "VideoSegmentStream");
            return;
          }
          while (nalUnits.length) {
            currentNal = nalUnits.shift();
            if (currentNal.nalUnitType === "seq_parameter_set_rbsp") {
              track.newMetadata = true;
              config = currentNal.config;
              track.width = config.width;
              track.height = config.height;
              track.sps = [currentNal.data];
              track.profileIdc = config.profileIdc;
              track.levelIdc = config.levelIdc;
              track.profileCompatibility = config.profileCompatibility;
              h264Frame.endNalUnit();
            } else if (currentNal.nalUnitType === "pic_parameter_set_rbsp") {
              track.newMetadata = true;
              track.pps = [currentNal.data];
              h264Frame.endNalUnit();
            } else if (currentNal.nalUnitType === "access_unit_delimiter_rbsp") {
              if (h264Frame) {
                this.finishFrame(tags, h264Frame);
              }
              h264Frame = new flvTag(flvTag.VIDEO_TAG);
              h264Frame.pts = currentNal.pts;
              h264Frame.dts = currentNal.dts;
            } else {
              if (currentNal.nalUnitType === "slice_layer_without_partitioning_rbsp_idr") {
                h264Frame.keyFrame = true;
              }
              h264Frame.endNalUnit();
            }
            h264Frame.startNalUnit();
            h264Frame.writeBytes(currentNal.data);
          }
          if (h264Frame) {
            this.finishFrame(tags, h264Frame);
          }
          this.trigger("data", {
            track,
            tags: tags.list
          });
          this.trigger("done", "VideoSegmentStream");
        };
      };
      _VideoSegmentStream.prototype = new stream();
      _Transmuxer = function Transmuxer2(options) {
        var self2 = this, packetStream, parseStream, elementaryStream, videoTimestampRolloverStream, audioTimestampRolloverStream, timedMetadataTimestampRolloverStream, adtsStream, h264Stream, videoSegmentStream2, audioSegmentStream2, captionStream2, coalesceStream$1;
        _Transmuxer.prototype.init.call(this);
        options = options || {};
        this.metadataStream = new m2ts_1.MetadataStream();
        options.metadataStream = this.metadataStream;
        packetStream = new m2ts_1.TransportPacketStream();
        parseStream = new m2ts_1.TransportParseStream();
        elementaryStream = new m2ts_1.ElementaryStream();
        videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream("video");
        audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream("audio");
        timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream("timed-metadata");
        adtsStream = new adts();
        h264Stream = new H264Stream();
        coalesceStream$1 = new coalesceStream(options);
        packetStream.pipe(parseStream).pipe(elementaryStream);
        elementaryStream.pipe(videoTimestampRolloverStream).pipe(h264Stream);
        elementaryStream.pipe(audioTimestampRolloverStream).pipe(adtsStream);
        elementaryStream.pipe(timedMetadataTimestampRolloverStream).pipe(this.metadataStream).pipe(coalesceStream$1);
        captionStream2 = new m2ts_1.CaptionStream(options);
        h264Stream.pipe(captionStream2).pipe(coalesceStream$1);
        elementaryStream.on("data", function(data) {
          var i, videoTrack, audioTrack;
          if (data.type === "metadata") {
            i = data.tracks.length;
            while (i--) {
              if (data.tracks[i].type === "video") {
                videoTrack = data.tracks[i];
              } else if (data.tracks[i].type === "audio") {
                audioTrack = data.tracks[i];
              }
            }
            if (videoTrack && !videoSegmentStream2) {
              coalesceStream$1.numberOfTracks++;
              videoSegmentStream2 = new _VideoSegmentStream(videoTrack);
              h264Stream.pipe(videoSegmentStream2).pipe(coalesceStream$1);
            }
            if (audioTrack && !audioSegmentStream2) {
              coalesceStream$1.numberOfTracks++;
              audioSegmentStream2 = new _AudioSegmentStream(audioTrack);
              adtsStream.pipe(audioSegmentStream2).pipe(coalesceStream$1);
              if (videoSegmentStream2) {
                videoSegmentStream2.on("keyframe", audioSegmentStream2.onVideoKeyFrame);
              }
            }
          }
        });
        this.push = function(data) {
          packetStream.push(data);
        };
        this.flush = function() {
          packetStream.flush();
        };
        this.resetCaptions = function() {
          captionStream2.reset();
        };
        coalesceStream$1.on("data", function(event) {
          self2.trigger("data", event);
        });
        coalesceStream$1.on("done", function() {
          self2.trigger("done");
        });
      };
      _Transmuxer.prototype = new stream();
      var transmuxer$1 = _Transmuxer;
      var getFlvHeader = function getFlvHeader2(duration, audio, video) {
        var headBytes = new Uint8Array(3 + 1 + 1 + 4), head = new DataView(headBytes.buffer), metadata, result, metadataLength;
        duration = duration || 0;
        audio = audio === void 0 ? true : audio;
        video = video === void 0 ? true : video;
        head.setUint8(0, 70);
        head.setUint8(1, 76);
        head.setUint8(2, 86);
        head.setUint8(3, 1);
        head.setUint8(4, (audio ? 4 : 0) | (video ? 1 : 0));
        head.setUint32(5, headBytes.byteLength);
        if (duration <= 0) {
          result = new Uint8Array(headBytes.byteLength + 4);
          result.set(headBytes);
          result.set([0, 0, 0, 0], headBytes.byteLength);
          return result;
        }
        metadata = new flvTag(flvTag.METADATA_TAG);
        metadata.pts = metadata.dts = 0;
        metadata.writeMetaDataDouble("duration", duration);
        metadataLength = metadata.finalize().length;
        result = new Uint8Array(headBytes.byteLength + metadataLength);
        result.set(headBytes);
        result.set(head.byteLength, metadataLength);
        return result;
      };
      var flvHeader = getFlvHeader;
      var flv = {
        tag: flvTag,
        Transmuxer: transmuxer$1,
        getFlvHeader: flvHeader
      };
      var m2ts = m2ts_1;
      var ONE_SECOND_IN_TS$1 = clock.ONE_SECOND_IN_TS;
      var AudioSegmentStream = function AudioSegmentStream2(track, options) {
        var adtsFrames = [], sequenceNumber = 0, earliestAllowedDts = 0, audioAppendStartTs = 0, videoBaseMediaDecodeTime = Infinity, segmentStartPts = null, segmentEndPts = null;
        options = options || {};
        AudioSegmentStream2.prototype.init.call(this);
        this.push = function(data) {
          trackDecodeInfo.collectDtsInfo(track, data);
          if (track) {
            audioProperties.forEach(function(prop) {
              track[prop] = data[prop];
            });
          }
          adtsFrames.push(data);
        };
        this.setEarliestDts = function(earliestDts) {
          earliestAllowedDts = earliestDts;
        };
        this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {
          videoBaseMediaDecodeTime = baseMediaDecodeTime;
        };
        this.setAudioAppendStart = function(timestamp) {
          audioAppendStartTs = timestamp;
        };
        this.processFrames_ = function() {
          var frames, moof2, mdat2, boxes, timingInfo;
          if (adtsFrames.length === 0) {
            return;
          }
          frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);
          if (frames.length === 0) {
            return;
          }
          track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
          audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime);
          track.samples = audioFrameUtils.generateSampleTable(frames);
          mdat2 = mp4Generator.mdat(audioFrameUtils.concatenateFrameData(frames));
          adtsFrames = [];
          moof2 = mp4Generator.moof(sequenceNumber, [track]);
          sequenceNumber++;
          track.initSegment = mp4Generator.initSegment([track]);
          boxes = new Uint8Array(moof2.byteLength + mdat2.byteLength);
          boxes.set(moof2);
          boxes.set(mdat2, moof2.byteLength);
          trackDecodeInfo.clearDtsInfo(track);
          if (segmentStartPts === null) {
            segmentEndPts = segmentStartPts = frames[0].pts;
          }
          segmentEndPts += frames.length * (ONE_SECOND_IN_TS$1 * 1024 / track.samplerate);
          timingInfo = {
            start: segmentStartPts
          };
          this.trigger("timingInfo", timingInfo);
          this.trigger("data", {
            track,
            boxes
          });
        };
        this.flush = function() {
          this.processFrames_();
          this.trigger("timingInfo", {
            start: segmentStartPts,
            end: segmentEndPts
          });
          this.resetTiming_();
          this.trigger("done", "AudioSegmentStream");
        };
        this.partialFlush = function() {
          this.processFrames_();
          this.trigger("partialdone", "AudioSegmentStream");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline", "AudioSegmentStream");
        };
        this.resetTiming_ = function() {
          trackDecodeInfo.clearDtsInfo(track);
          segmentStartPts = null;
          segmentEndPts = null;
        };
        this.reset = function() {
          this.resetTiming_();
          adtsFrames = [];
          this.trigger("reset");
        };
      };
      AudioSegmentStream.prototype = new stream();
      var audioSegmentStream = AudioSegmentStream;
      var VideoSegmentStream = function VideoSegmentStream2(track, options) {
        var sequenceNumber = 0, nalUnits = [], frameCache = [], config, pps, segmentStartPts = null, segmentEndPts = null, gops, ensureNextFrameIsKeyFrame = true;
        options = options || {};
        VideoSegmentStream2.prototype.init.call(this);
        this.push = function(nalUnit) {
          trackDecodeInfo.collectDtsInfo(track, nalUnit);
          if (typeof track.timelineStartInfo.dts === "undefined") {
            track.timelineStartInfo.dts = nalUnit.dts;
          }
          if (nalUnit.nalUnitType === "seq_parameter_set_rbsp" && !config) {
            config = nalUnit.config;
            track.sps = [nalUnit.data];
            videoProperties.forEach(function(prop) {
              track[prop] = config[prop];
            }, this);
          }
          if (nalUnit.nalUnitType === "pic_parameter_set_rbsp" && !pps) {
            pps = nalUnit.data;
            track.pps = [nalUnit.data];
          }
          nalUnits.push(nalUnit);
        };
        this.processNals_ = function(cacheLastFrame) {
          var i;
          nalUnits = frameCache.concat(nalUnits);
          while (nalUnits.length) {
            if (nalUnits[0].nalUnitType === "access_unit_delimiter_rbsp") {
              break;
            }
            nalUnits.shift();
          }
          if (nalUnits.length === 0) {
            return;
          }
          var frames = frameUtils.groupNalsIntoFrames(nalUnits);
          if (!frames.length) {
            return;
          }
          frameCache = frames[frames.length - 1];
          if (cacheLastFrame) {
            frames.pop();
            frames.duration -= frameCache.duration;
            frames.nalCount -= frameCache.length;
            frames.byteLength -= frameCache.byteLength;
          }
          if (!frames.length) {
            nalUnits = [];
            return;
          }
          this.trigger("timelineStartInfo", track.timelineStartInfo);
          if (ensureNextFrameIsKeyFrame) {
            gops = frameUtils.groupFramesIntoGops(frames);
            if (!gops[0][0].keyFrame) {
              gops = frameUtils.extendFirstKeyFrame(gops);
              if (!gops[0][0].keyFrame) {
                nalUnits = [].concat.apply([], frames).concat(frameCache);
                frameCache = [];
                return;
              }
              frames = [].concat.apply([], gops);
              frames.duration = gops.duration;
            }
            ensureNextFrameIsKeyFrame = false;
          }
          if (segmentStartPts === null) {
            segmentStartPts = frames[0].pts;
            segmentEndPts = segmentStartPts;
          }
          segmentEndPts += frames.duration;
          this.trigger("timingInfo", {
            start: segmentStartPts,
            end: segmentEndPts
          });
          for (i = 0; i < frames.length; i++) {
            var frame = frames[i];
            track.samples = frameUtils.generateSampleTableForFrame(frame);
            var mdat2 = mp4Generator.mdat(frameUtils.concatenateNalDataForFrame(frame));
            trackDecodeInfo.clearDtsInfo(track);
            trackDecodeInfo.collectDtsInfo(track, frame);
            track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
            var moof2 = mp4Generator.moof(sequenceNumber, [track]);
            sequenceNumber++;
            track.initSegment = mp4Generator.initSegment([track]);
            var boxes = new Uint8Array(moof2.byteLength + mdat2.byteLength);
            boxes.set(moof2);
            boxes.set(mdat2, moof2.byteLength);
            this.trigger("data", {
              track,
              boxes,
              sequence: sequenceNumber,
              videoFrameDts: frame.dts,
              videoFramePts: frame.pts
            });
          }
          nalUnits = [];
        };
        this.resetTimingAndConfig_ = function() {
          config = void 0;
          pps = void 0;
          segmentStartPts = null;
          segmentEndPts = null;
        };
        this.partialFlush = function() {
          this.processNals_(true);
          this.trigger("partialdone", "VideoSegmentStream");
        };
        this.flush = function() {
          this.processNals_(false);
          this.resetTimingAndConfig_();
          this.trigger("done", "VideoSegmentStream");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline", "VideoSegmentStream");
        };
        this.reset = function() {
          this.resetTimingAndConfig_();
          frameCache = [];
          nalUnits = [];
          ensureNextFrameIsKeyFrame = true;
          this.trigger("reset");
        };
      };
      VideoSegmentStream.prototype = new stream();
      var videoSegmentStream = VideoSegmentStream;
      var isLikelyAacData = utils.isLikelyAacData;
      var createPipeline = function createPipeline2(object) {
        object.prototype = new stream();
        object.prototype.init.call(object);
        return object;
      };
      var tsPipeline = function tsPipeline2(options) {
        var pipeline = {
          type: "ts",
          tracks: {
            audio: null,
            video: null
          },
          packet: new m2ts_1.TransportPacketStream(),
          parse: new m2ts_1.TransportParseStream(),
          elementary: new m2ts_1.ElementaryStream(),
          timestampRollover: new m2ts_1.TimestampRolloverStream(),
          adts: new codecs.Adts(),
          h264: new codecs.h264.H264Stream(),
          captionStream: new m2ts_1.CaptionStream(options),
          metadataStream: new m2ts_1.MetadataStream()
        };
        pipeline.headOfPipeline = pipeline.packet;
        pipeline.packet.pipe(pipeline.parse).pipe(pipeline.elementary).pipe(pipeline.timestampRollover);
        pipeline.timestampRollover.pipe(pipeline.h264);
        pipeline.h264.pipe(pipeline.captionStream);
        pipeline.timestampRollover.pipe(pipeline.metadataStream);
        pipeline.timestampRollover.pipe(pipeline.adts);
        pipeline.elementary.on("data", function(data) {
          if (data.type !== "metadata") {
            return;
          }
          for (var i = 0; i < data.tracks.length; i++) {
            if (!pipeline.tracks[data.tracks[i].type]) {
              pipeline.tracks[data.tracks[i].type] = data.tracks[i];
              pipeline.tracks[data.tracks[i].type].timelineStartInfo.baseMediaDecodeTime = options.baseMediaDecodeTime;
            }
          }
          if (pipeline.tracks.video && !pipeline.videoSegmentStream) {
            pipeline.videoSegmentStream = new videoSegmentStream(pipeline.tracks.video, options);
            pipeline.videoSegmentStream.on("timelineStartInfo", function(timelineStartInfo) {
              if (pipeline.tracks.audio && !options.keepOriginalTimestamps) {
                pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - options.baseMediaDecodeTime);
              }
            });
            pipeline.videoSegmentStream.on("timingInfo", pipeline.trigger.bind(pipeline, "videoTimingInfo"));
            pipeline.videoSegmentStream.on("data", function(data2) {
              pipeline.trigger("data", {
                type: "video",
                data: data2
              });
            });
            pipeline.videoSegmentStream.on("done", pipeline.trigger.bind(pipeline, "done"));
            pipeline.videoSegmentStream.on("partialdone", pipeline.trigger.bind(pipeline, "partialdone"));
            pipeline.videoSegmentStream.on("endedtimeline", pipeline.trigger.bind(pipeline, "endedtimeline"));
            pipeline.h264.pipe(pipeline.videoSegmentStream);
          }
          if (pipeline.tracks.audio && !pipeline.audioSegmentStream) {
            pipeline.audioSegmentStream = new audioSegmentStream(pipeline.tracks.audio, options);
            pipeline.audioSegmentStream.on("data", function(data2) {
              pipeline.trigger("data", {
                type: "audio",
                data: data2
              });
            });
            pipeline.audioSegmentStream.on("done", pipeline.trigger.bind(pipeline, "done"));
            pipeline.audioSegmentStream.on("partialdone", pipeline.trigger.bind(pipeline, "partialdone"));
            pipeline.audioSegmentStream.on("endedtimeline", pipeline.trigger.bind(pipeline, "endedtimeline"));
            pipeline.audioSegmentStream.on("timingInfo", pipeline.trigger.bind(pipeline, "audioTimingInfo"));
            pipeline.adts.pipe(pipeline.audioSegmentStream);
          }
          pipeline.trigger("trackinfo", {
            hasAudio: !!pipeline.tracks.audio,
            hasVideo: !!pipeline.tracks.video
          });
        });
        pipeline.captionStream.on("data", function(caption) {
          var timelineStartPts;
          if (pipeline.tracks.video) {
            timelineStartPts = pipeline.tracks.video.timelineStartInfo.pts || 0;
          } else {
            timelineStartPts = 0;
          }
          caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, options.keepOriginalTimestamps);
          caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, options.keepOriginalTimestamps);
          pipeline.trigger("caption", caption);
        });
        pipeline = createPipeline(pipeline);
        pipeline.metadataStream.on("data", pipeline.trigger.bind(pipeline, "id3Frame"));
        return pipeline;
      };
      var aacPipeline = function aacPipeline2(options) {
        var pipeline = {
          type: "aac",
          tracks: {
            audio: null
          },
          metadataStream: new m2ts_1.MetadataStream(),
          aacStream: new aac(),
          audioRollover: new m2ts_1.TimestampRolloverStream("audio"),
          timedMetadataRollover: new m2ts_1.TimestampRolloverStream("timed-metadata"),
          adtsStream: new adts(true)
        };
        pipeline.headOfPipeline = pipeline.aacStream;
        pipeline.aacStream.pipe(pipeline.audioRollover).pipe(pipeline.adtsStream);
        pipeline.aacStream.pipe(pipeline.timedMetadataRollover).pipe(pipeline.metadataStream);
        pipeline.metadataStream.on("timestamp", function(frame) {
          pipeline.aacStream.setTimestamp(frame.timeStamp);
        });
        pipeline.aacStream.on("data", function(data) {
          if (data.type !== "timed-metadata" && data.type !== "audio" || pipeline.audioSegmentStream) {
            return;
          }
          pipeline.tracks.audio = pipeline.tracks.audio || {
            timelineStartInfo: {
              baseMediaDecodeTime: options.baseMediaDecodeTime
            },
            codec: "adts",
            type: "audio"
          };
          pipeline.audioSegmentStream = new audioSegmentStream(pipeline.tracks.audio, options);
          pipeline.audioSegmentStream.on("data", function(data2) {
            pipeline.trigger("data", {
              type: "audio",
              data: data2
            });
          });
          pipeline.audioSegmentStream.on("partialdone", pipeline.trigger.bind(pipeline, "partialdone"));
          pipeline.audioSegmentStream.on("done", pipeline.trigger.bind(pipeline, "done"));
          pipeline.audioSegmentStream.on("endedtimeline", pipeline.trigger.bind(pipeline, "endedtimeline"));
          pipeline.audioSegmentStream.on("timingInfo", pipeline.trigger.bind(pipeline, "audioTimingInfo"));
          pipeline.adtsStream.pipe(pipeline.audioSegmentStream);
          pipeline.trigger("trackinfo", {
            hasAudio: !!pipeline.tracks.audio,
            hasVideo: !!pipeline.tracks.video
          });
        });
        pipeline = createPipeline(pipeline);
        pipeline.metadataStream.on("data", pipeline.trigger.bind(pipeline, "id3Frame"));
        return pipeline;
      };
      var setupPipelineListeners = function setupPipelineListeners2(pipeline, transmuxer2) {
        pipeline.on("data", transmuxer2.trigger.bind(transmuxer2, "data"));
        pipeline.on("done", transmuxer2.trigger.bind(transmuxer2, "done"));
        pipeline.on("partialdone", transmuxer2.trigger.bind(transmuxer2, "partialdone"));
        pipeline.on("endedtimeline", transmuxer2.trigger.bind(transmuxer2, "endedtimeline"));
        pipeline.on("audioTimingInfo", transmuxer2.trigger.bind(transmuxer2, "audioTimingInfo"));
        pipeline.on("videoTimingInfo", transmuxer2.trigger.bind(transmuxer2, "videoTimingInfo"));
        pipeline.on("trackinfo", transmuxer2.trigger.bind(transmuxer2, "trackinfo"));
        pipeline.on("id3Frame", function(event) {
          event.dispatchType = pipeline.metadataStream.dispatchType;
          event.cueTime = clock.videoTsToSeconds(event.pts);
          transmuxer2.trigger("id3Frame", event);
        });
        pipeline.on("caption", function(event) {
          transmuxer2.trigger("caption", event);
        });
      };
      var Transmuxer = function Transmuxer2(options) {
        var pipeline = null, hasFlushed = true;
        options = options || {};
        Transmuxer2.prototype.init.call(this);
        options.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;
        this.push = function(bytes) {
          if (hasFlushed) {
            var isAac = isLikelyAacData(bytes);
            if (isAac && (!pipeline || pipeline.type !== "aac")) {
              pipeline = aacPipeline(options);
              setupPipelineListeners(pipeline, this);
            } else if (!isAac && (!pipeline || pipeline.type !== "ts")) {
              pipeline = tsPipeline(options);
              setupPipelineListeners(pipeline, this);
            }
            hasFlushed = false;
          }
          pipeline.headOfPipeline.push(bytes);
        };
        this.flush = function() {
          if (!pipeline) {
            return;
          }
          hasFlushed = true;
          pipeline.headOfPipeline.flush();
        };
        this.partialFlush = function() {
          if (!pipeline) {
            return;
          }
          pipeline.headOfPipeline.partialFlush();
        };
        this.endTimeline = function() {
          if (!pipeline) {
            return;
          }
          pipeline.headOfPipeline.endTimeline();
        };
        this.reset = function() {
          if (!pipeline) {
            return;
          }
          pipeline.headOfPipeline.reset();
        };
        this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {
          if (!options.keepOriginalTimestamps) {
            options.baseMediaDecodeTime = baseMediaDecodeTime;
          }
          if (!pipeline) {
            return;
          }
          if (pipeline.tracks.audio) {
            pipeline.tracks.audio.timelineStartInfo.dts = void 0;
            pipeline.tracks.audio.timelineStartInfo.pts = void 0;
            trackDecodeInfo.clearDtsInfo(pipeline.tracks.audio);
            if (pipeline.audioRollover) {
              pipeline.audioRollover.discontinuity();
            }
          }
          if (pipeline.tracks.video) {
            if (pipeline.videoSegmentStream) {
              pipeline.videoSegmentStream.gopCache_ = [];
            }
            pipeline.tracks.video.timelineStartInfo.dts = void 0;
            pipeline.tracks.video.timelineStartInfo.pts = void 0;
            trackDecodeInfo.clearDtsInfo(pipeline.tracks.video);
          }
          if (pipeline.timestampRollover) {
            pipeline.timestampRollover.discontinuity();
          }
        };
        this.setRemux = function(val) {
          options.remux = val;
          if (pipeline && pipeline.coalesceStream) {
            pipeline.coalesceStream.setRemux(val);
          }
        };
        this.setAudioAppendStart = function(audioAppendStart) {
          if (!pipeline || !pipeline.tracks.audio || !pipeline.audioSegmentStream) {
            return;
          }
          pipeline.audioSegmentStream.setAudioAppendStart(audioAppendStart);
        };
        this.alignGopsWith = function(gopsToAlignWith) {
          return;
        };
      };
      Transmuxer.prototype = new stream();
      var transmuxer = Transmuxer;
      var partial = {
        Transmuxer: transmuxer
      };
      var MAX_UINT32$1 = Math.pow(2, 32);
      var parseSidx = function parseSidx2(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          references: [],
          referenceId: view.getUint32(4),
          timescale: view.getUint32(8)
        }, i = 12;
        if (result.version === 0) {
          result.earliestPresentationTime = view.getUint32(i);
          result.firstOffset = view.getUint32(i + 4);
          i += 8;
        } else {
          result.earliestPresentationTime = view.getUint32(i) * MAX_UINT32$1 + view.getUint32(i + 4);
          result.firstOffset = view.getUint32(i + 8) * MAX_UINT32$1 + view.getUint32(i + 12);
          i += 16;
        }
        i += 2;
        var referenceCount = view.getUint16(i);
        i += 2;
        for (; referenceCount > 0; i += 12, referenceCount--) {
          result.references.push({
            referenceType: (data[i] & 128) >>> 7,
            referencedSize: view.getUint32(i) & 2147483647,
            subsegmentDuration: view.getUint32(i + 4),
            startsWithSap: !!(data[i + 8] & 128),
            sapType: (data[i + 8] & 112) >>> 4,
            sapDeltaTime: view.getUint32(i + 8) & 268435455
          });
        }
        return result;
      };
      var parseSidx_1 = parseSidx;
      var MAX_UINT32 = Math.pow(2, 32);
      var inspectMp4, _textifyMp, parseMp4Date = function parseMp4Date2(seconds) {
        return new Date(seconds * 1e3 - 20828448e5);
      }, nalParse = function nalParse2(avcStream) {
        var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength), result = [], i, length;
        for (i = 0; i + 4 < avcStream.length; i += length) {
          length = avcView.getUint32(i);
          i += 4;
          if (length <= 0) {
            result.push("<span style='color:red;'>MALFORMED DATA</span>");
            continue;
          }
          switch (avcStream[i] & 31) {
            case 1:
              result.push("slice_layer_without_partitioning_rbsp");
              break;
            case 5:
              result.push("slice_layer_without_partitioning_rbsp_idr");
              break;
            case 6:
              result.push("sei_rbsp");
              break;
            case 7:
              result.push("seq_parameter_set_rbsp");
              break;
            case 8:
              result.push("pic_parameter_set_rbsp");
              break;
            case 9:
              result.push("access_unit_delimiter_rbsp");
              break;
            default:
              result.push("UNKNOWN NAL - " + avcStream[i] & 31);
              break;
          }
        }
        return result;
      }, parse = {
        // codingname, not a first-class box type. stsd entries share the
        // same format as real boxes so the parsing infrastructure can be
        // shared
        avc1: function avc1(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
          return {
            dataReferenceIndex: view.getUint16(6),
            width: view.getUint16(24),
            height: view.getUint16(26),
            horizresolution: view.getUint16(28) + view.getUint16(30) / 16,
            vertresolution: view.getUint16(32) + view.getUint16(34) / 16,
            frameCount: view.getUint16(40),
            depth: view.getUint16(74),
            config: inspectMp4(data.subarray(78, data.byteLength))
          };
        },
        avcC: function avcC(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            configurationVersion: data[0],
            avcProfileIndication: data[1],
            profileCompatibility: data[2],
            avcLevelIndication: data[3],
            lengthSizeMinusOne: data[4] & 3,
            sps: [],
            pps: []
          }, numOfSequenceParameterSets = data[5] & 31, numOfPictureParameterSets, nalSize, offset, i;
          offset = 6;
          for (i = 0; i < numOfSequenceParameterSets; i++) {
            nalSize = view.getUint16(offset);
            offset += 2;
            result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));
            offset += nalSize;
          }
          numOfPictureParameterSets = data[offset];
          offset++;
          for (i = 0; i < numOfPictureParameterSets; i++) {
            nalSize = view.getUint16(offset);
            offset += 2;
            result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));
            offset += nalSize;
          }
          return result;
        },
        btrt: function btrt(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
          return {
            bufferSizeDB: view.getUint32(0),
            maxBitrate: view.getUint32(4),
            avgBitrate: view.getUint32(8)
          };
        },
        edts: function edts(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        elst: function elst(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            version: view.getUint8(0),
            flags: new Uint8Array(data.subarray(1, 4)),
            edits: []
          }, entryCount = view.getUint32(4), i;
          for (i = 8; entryCount; entryCount--) {
            if (result.version === 0) {
              result.edits.push({
                segmentDuration: view.getUint32(i),
                mediaTime: view.getInt32(i + 4),
                mediaRate: view.getUint16(i + 8) + view.getUint16(i + 10) / (256 * 256)
              });
              i += 12;
            } else {
              result.edits.push({
                segmentDuration: view.getUint32(i) * MAX_UINT32 + view.getUint32(i + 4),
                mediaTime: view.getUint32(i + 8) * MAX_UINT32 + view.getUint32(i + 12),
                mediaRate: view.getUint16(i + 16) + view.getUint16(i + 18) / (256 * 256)
              });
              i += 20;
            }
          }
          return result;
        },
        esds: function esds2(data) {
          return {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            esId: data[6] << 8 | data[7],
            streamPriority: data[8] & 31,
            decoderConfig: {
              objectProfileIndication: data[11],
              streamType: data[12] >>> 2 & 63,
              bufferSize: data[13] << 16 | data[14] << 8 | data[15],
              maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],
              avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],
              decoderConfigDescriptor: {
                tag: data[24],
                length: data[25],
                audioObjectType: data[26] >>> 3 & 31,
                samplingFrequencyIndex: (data[26] & 7) << 1 | data[27] >>> 7 & 1,
                channelConfiguration: data[27] >>> 3 & 15
              }
            }
          };
        },
        ftyp: function ftyp2(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            majorBrand: parseType_1(data.subarray(0, 4)),
            minorVersion: view.getUint32(4),
            compatibleBrands: []
          }, i = 8;
          while (i < data.byteLength) {
            result.compatibleBrands.push(parseType_1(data.subarray(i, i + 4)));
            i += 4;
          }
          return result;
        },
        dinf: function dinf2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        dref: function dref(data) {
          return {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            dataReferences: inspectMp4(data.subarray(8))
          };
        },
        hdlr: function hdlr2(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            version: view.getUint8(0),
            flags: new Uint8Array(data.subarray(1, 4)),
            handlerType: parseType_1(data.subarray(8, 12)),
            name: ""
          }, i = 8;
          for (i = 24; i < data.byteLength; i++) {
            if (data[i] === 0) {
              i++;
              break;
            }
            result.name += String.fromCharCode(data[i]);
          }
          result.name = decodeURIComponent(escape(result.name));
          return result;
        },
        mdat: function mdat2(data) {
          return {
            byteLength: data.byteLength,
            nals: nalParse(data)
          };
        },
        mdhd: function mdhd2(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), i = 4, language, result = {
            version: view.getUint8(0),
            flags: new Uint8Array(data.subarray(1, 4)),
            language: ""
          };
          if (result.version === 1) {
            i += 4;
            result.creationTime = parseMp4Date(view.getUint32(i));
            i += 8;
            result.modificationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.timescale = view.getUint32(i);
            i += 8;
            result.duration = view.getUint32(i);
          } else {
            result.creationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.modificationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.timescale = view.getUint32(i);
            i += 4;
            result.duration = view.getUint32(i);
          }
          i += 4;
          language = view.getUint16(i);
          result.language += String.fromCharCode((language >> 10) + 96);
          result.language += String.fromCharCode(((language & 992) >> 5) + 96);
          result.language += String.fromCharCode((language & 31) + 96);
          return result;
        },
        mdia: function mdia2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        mfhd: function mfhd2(data) {
          return {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]
          };
        },
        minf: function minf2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        // codingname, not a first-class box type. stsd entries share the
        // same format as real boxes so the parsing infrastructure can be
        // shared
        mp4a: function mp4a(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            // 6 bytes reserved
            dataReferenceIndex: view.getUint16(6),
            // 4 + 4 bytes reserved
            channelcount: view.getUint16(16),
            samplesize: view.getUint16(18),
            // 2 bytes pre_defined
            // 2 bytes reserved
            samplerate: view.getUint16(24) + view.getUint16(26) / 65536
          };
          if (data.byteLength > 28) {
            result.streamDescriptor = inspectMp4(data.subarray(28))[0];
          }
          return result;
        },
        moof: function moof2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        moov: function moov2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        mvex: function mvex2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        mvhd: function mvhd2(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), i = 4, result = {
            version: view.getUint8(0),
            flags: new Uint8Array(data.subarray(1, 4))
          };
          if (result.version === 1) {
            i += 4;
            result.creationTime = parseMp4Date(view.getUint32(i));
            i += 8;
            result.modificationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.timescale = view.getUint32(i);
            i += 8;
            result.duration = view.getUint32(i);
          } else {
            result.creationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.modificationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.timescale = view.getUint32(i);
            i += 4;
            result.duration = view.getUint32(i);
          }
          i += 4;
          result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;
          i += 4;
          result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;
          i += 2;
          i += 2;
          i += 2 * 4;
          result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));
          i += 9 * 4;
          i += 6 * 4;
          result.nextTrackId = view.getUint32(i);
          return result;
        },
        pdin: function pdin(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
          return {
            version: view.getUint8(0),
            flags: new Uint8Array(data.subarray(1, 4)),
            rate: view.getUint32(4),
            initialDelay: view.getUint32(8)
          };
        },
        sdtp: function sdtp2(data) {
          var result = {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            samples: []
          }, i;
          for (i = 4; i < data.byteLength; i++) {
            result.samples.push({
              dependsOn: (data[i] & 48) >> 4,
              isDependedOn: (data[i] & 12) >> 2,
              hasRedundancy: data[i] & 3
            });
          }
          return result;
        },
        sidx: parseSidx_1,
        smhd: function smhd(data) {
          return {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            balance: data[4] + data[5] / 256
          };
        },
        stbl: function stbl2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        ctts: function ctts(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            version: view.getUint8(0),
            flags: new Uint8Array(data.subarray(1, 4)),
            compositionOffsets: []
          }, entryCount = view.getUint32(4), i;
          for (i = 8; entryCount; i += 8, entryCount--) {
            result.compositionOffsets.push({
              sampleCount: view.getUint32(i),
              sampleOffset: view[result.version === 0 ? "getUint32" : "getInt32"](i + 4)
            });
          }
          return result;
        },
        stss: function stss(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            version: view.getUint8(0),
            flags: new Uint8Array(data.subarray(1, 4)),
            syncSamples: []
          }, entryCount = view.getUint32(4), i;
          for (i = 8; entryCount; i += 4, entryCount--) {
            result.syncSamples.push(view.getUint32(i));
          }
          return result;
        },
        stco: function stco(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            chunkOffsets: []
          }, entryCount = view.getUint32(4), i;
          for (i = 8; entryCount; i += 4, entryCount--) {
            result.chunkOffsets.push(view.getUint32(i));
          }
          return result;
        },
        stsc: function stsc(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), entryCount = view.getUint32(4), result = {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            sampleToChunks: []
          }, i;
          for (i = 8; entryCount; i += 12, entryCount--) {
            result.sampleToChunks.push({
              firstChunk: view.getUint32(i),
              samplesPerChunk: view.getUint32(i + 4),
              sampleDescriptionIndex: view.getUint32(i + 8)
            });
          }
          return result;
        },
        stsd: function stsd2(data) {
          return {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            sampleDescriptions: inspectMp4(data.subarray(8))
          };
        },
        stsz: function stsz(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            sampleSize: view.getUint32(4),
            entries: []
          }, i;
          for (i = 12; i < data.byteLength; i += 4) {
            result.entries.push(view.getUint32(i));
          }
          return result;
        },
        stts: function stts(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            timeToSamples: []
          }, entryCount = view.getUint32(4), i;
          for (i = 8; entryCount; i += 8, entryCount--) {
            result.timeToSamples.push({
              sampleCount: view.getUint32(i),
              sampleDelta: view.getUint32(i + 4)
            });
          }
          return result;
        },
        styp: function styp(data) {
          return parse.ftyp(data);
        },
        tfdt: parseTfdt,
        tfhd: parseTfhd,
        tkhd: function tkhd2(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength), i = 4, result = {
            version: view.getUint8(0),
            flags: new Uint8Array(data.subarray(1, 4))
          };
          if (result.version === 1) {
            i += 4;
            result.creationTime = parseMp4Date(view.getUint32(i));
            i += 8;
            result.modificationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.trackId = view.getUint32(i);
            i += 4;
            i += 8;
            result.duration = view.getUint32(i);
          } else {
            result.creationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.modificationTime = parseMp4Date(view.getUint32(i));
            i += 4;
            result.trackId = view.getUint32(i);
            i += 4;
            i += 4;
            result.duration = view.getUint32(i);
          }
          i += 4;
          i += 2 * 4;
          result.layer = view.getUint16(i);
          i += 2;
          result.alternateGroup = view.getUint16(i);
          i += 2;
          result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;
          i += 2;
          i += 2;
          result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));
          i += 9 * 4;
          result.width = view.getUint16(i) + view.getUint16(i + 2) / 65536;
          i += 4;
          result.height = view.getUint16(i) + view.getUint16(i + 2) / 65536;
          return result;
        },
        traf: function traf2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        trak: function trak2(data) {
          return {
            boxes: inspectMp4(data)
          };
        },
        trex: function trex2(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
          return {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            trackId: view.getUint32(4),
            defaultSampleDescriptionIndex: view.getUint32(8),
            defaultSampleDuration: view.getUint32(12),
            defaultSampleSize: view.getUint32(16),
            sampleDependsOn: data[20] & 3,
            sampleIsDependedOn: (data[21] & 192) >> 6,
            sampleHasRedundancy: (data[21] & 48) >> 4,
            samplePaddingValue: (data[21] & 14) >> 1,
            sampleIsDifferenceSample: !!(data[21] & 1),
            sampleDegradationPriority: view.getUint16(22)
          };
        },
        trun: parseTrun,
        "url ": function url(data) {
          return {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4))
          };
        },
        vmhd: function vmhd(data) {
          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
          return {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            graphicsmode: view.getUint16(4),
            opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])
          };
        }
      };
      inspectMp4 = function inspectMp42(data) {
        var i = 0, result = [], view, size, type2, end, box2;
        var ab = new ArrayBuffer(data.length);
        var v = new Uint8Array(ab);
        for (var z = 0; z < data.length; ++z) {
          v[z] = data[z];
        }
        view = new DataView(ab);
        while (i < data.byteLength) {
          size = view.getUint32(i);
          type2 = parseType_1(data.subarray(i + 4, i + 8));
          end = size > 1 ? i + size : data.byteLength;
          box2 = (parse[type2] || function(data2) {
            return {
              data: data2
            };
          })(data.subarray(i + 8, end));
          box2.size = size;
          box2.type = type2;
          result.push(box2);
          i = end;
        }
        return result;
      };
      _textifyMp = function textifyMp4(inspectedMp4, depth) {
        var indent;
        depth = depth || 0;
        indent = new Array(depth * 2 + 1).join(" ");
        return inspectedMp4.map(function(box2, index) {
          return indent + box2.type + "\n" + // the type is already included and handle child boxes separately
          Object.keys(box2).filter(function(key) {
            return key !== "type" && key !== "boxes";
          }).map(function(key) {
            var prefix = indent + "  " + key + ": ", value = box2[key];
            if (value instanceof Uint8Array || value instanceof Uint32Array) {
              var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function(byte) {
                return " " + ("00" + byte.toString(16)).slice(-2);
              }).join("").match(/.{1,24}/g);
              if (!bytes) {
                return prefix + "<>";
              }
              if (bytes.length === 1) {
                return prefix + "<" + bytes.join("").slice(1) + ">";
              }
              return prefix + "<\n" + bytes.map(function(line) {
                return indent + "  " + line;
              }).join("\n") + "\n" + indent + "  >";
            }
            return prefix + JSON.stringify(value, null, 2).split("\n").map(function(line, index2) {
              if (index2 === 0) {
                return line;
              }
              return indent + "  " + line;
            }).join("\n");
          }).join("\n") + // recursively textify the child boxes
          (box2.boxes ? "\n" + _textifyMp(box2.boxes, depth + 1) : "");
        }).join("\n");
      };
      var mp4Inspector = {
        inspect: inspectMp4,
        textify: _textifyMp,
        parseType: parseType_1,
        findBox: findBox_1,
        parseTraf: parse.traf,
        parseTfdt: parse.tfdt,
        parseHdlr: parse.hdlr,
        parseTfhd: parse.tfhd,
        parseTrun: parse.trun,
        parseSidx: parse.sidx
      };
      var tagTypes = {
        8: "audio",
        9: "video",
        18: "metadata"
      }, hex = function hex2(val) {
        return "0x" + ("00" + val.toString(16)).slice(-2).toUpperCase();
      }, hexStringList = function hexStringList2(data) {
        var arr = [], i;
        while (data.byteLength > 0) {
          i = 0;
          arr.push(hex(data[i++]));
          data = data.subarray(i);
        }
        return arr.join(" ");
      }, parseAVCTag = function parseAVCTag2(tag, obj) {
        var avcPacketTypes = ["AVC Sequence Header", "AVC NALU", "AVC End-of-Sequence"], compositionTime = tag[1] & parseInt("01111111", 2) << 16 | tag[2] << 8 | tag[3];
        obj = obj || {};
        obj.avcPacketType = avcPacketTypes[tag[0]];
        obj.CompositionTime = tag[1] & parseInt("10000000", 2) ? -compositionTime : compositionTime;
        if (tag[0] === 1) {
          obj.nalUnitTypeRaw = hexStringList(tag.subarray(4, 100));
        } else {
          obj.data = hexStringList(tag.subarray(4));
        }
        return obj;
      }, parseVideoTag = function parseVideoTag2(tag, obj) {
        var frameTypes = ["Unknown", "Keyframe (for AVC, a seekable frame)", "Inter frame (for AVC, a nonseekable frame)", "Disposable inter frame (H.263 only)", "Generated keyframe (reserved for server use only)", "Video info/command frame"], codecID = tag[0] & parseInt("00001111", 2);
        obj = obj || {};
        obj.frameType = frameTypes[(tag[0] & parseInt("11110000", 2)) >>> 4];
        obj.codecID = codecID;
        if (codecID === 7) {
          return parseAVCTag(tag.subarray(1), obj);
        }
        return obj;
      }, parseAACTag = function parseAACTag2(tag, obj) {
        var packetTypes = ["AAC Sequence Header", "AAC Raw"];
        obj = obj || {};
        obj.aacPacketType = packetTypes[tag[0]];
        obj.data = hexStringList(tag.subarray(1));
        return obj;
      }, parseAudioTag = function parseAudioTag2(tag, obj) {
        var formatTable = ["Linear PCM, platform endian", "ADPCM", "MP3", "Linear PCM, little endian", "Nellymoser 16-kHz mono", "Nellymoser 8-kHz mono", "Nellymoser", "G.711 A-law logarithmic PCM", "G.711 mu-law logarithmic PCM", "reserved", "AAC", "Speex", "MP3 8-Khz", "Device-specific sound"], samplingRateTable = ["5.5-kHz", "11-kHz", "22-kHz", "44-kHz"], soundFormat = (tag[0] & parseInt("11110000", 2)) >>> 4;
        obj = obj || {};
        obj.soundFormat = formatTable[soundFormat];
        obj.soundRate = samplingRateTable[(tag[0] & parseInt("00001100", 2)) >>> 2];
        obj.soundSize = (tag[0] & parseInt("00000010", 2)) >>> 1 ? "16-bit" : "8-bit";
        obj.soundType = tag[0] & parseInt("00000001", 2) ? "Stereo" : "Mono";
        if (soundFormat === 10) {
          return parseAACTag(tag.subarray(1), obj);
        }
        return obj;
      }, parseGenericTag = function parseGenericTag2(tag) {
        return {
          tagType: tagTypes[tag[0]],
          dataSize: tag[1] << 16 | tag[2] << 8 | tag[3],
          timestamp: tag[7] << 24 | tag[4] << 16 | tag[5] << 8 | tag[6],
          streamID: tag[8] << 16 | tag[9] << 8 | tag[10]
        };
      }, inspectFlvTag = function inspectFlvTag2(tag) {
        var header = parseGenericTag(tag);
        switch (tag[0]) {
          case 8:
            parseAudioTag(tag.subarray(11), header);
            break;
          case 9:
            parseVideoTag(tag.subarray(11), header);
            break;
        }
        return header;
      }, inspectFlv = function inspectFlv2(bytes) {
        var i = 9, dataSize, parsedResults = [], tag;
        i += 4;
        while (i < bytes.byteLength) {
          dataSize = bytes[i + 1] << 16;
          dataSize |= bytes[i + 2] << 8;
          dataSize |= bytes[i + 3];
          dataSize += 11;
          tag = bytes.subarray(i, i + dataSize);
          parsedResults.push(inspectFlvTag(tag));
          i += dataSize + 4;
        }
        return parsedResults;
      }, textifyFlv = function textifyFlv2(flvTagArray) {
        return JSON.stringify(flvTagArray, null, 2);
      };
      var flvInspector = {
        inspectTag: inspectFlvTag,
        inspect: inspectFlv,
        textify: textifyFlv
      };
      var parsePid = function parsePid2(packet) {
        var pid = packet[1] & 31;
        pid <<= 8;
        pid |= packet[2];
        return pid;
      };
      var parsePayloadUnitStartIndicator = function parsePayloadUnitStartIndicator2(packet) {
        return !!(packet[1] & 64);
      };
      var parseAdaptionField = function parseAdaptionField2(packet) {
        var offset = 0;
        if ((packet[3] & 48) >>> 4 > 1) {
          offset += packet[4] + 1;
        }
        return offset;
      };
      var parseType = function parseType2(packet, pmtPid) {
        var pid = parsePid(packet);
        if (pid === 0) {
          return "pat";
        } else if (pid === pmtPid) {
          return "pmt";
        } else if (pmtPid) {
          return "pes";
        }
        return null;
      };
      var parsePat = function parsePat2(packet) {
        var pusi = parsePayloadUnitStartIndicator(packet);
        var offset = 4 + parseAdaptionField(packet);
        if (pusi) {
          offset += packet[offset] + 1;
        }
        return (packet[offset + 10] & 31) << 8 | packet[offset + 11];
      };
      var parsePmt = function parsePmt2(packet) {
        var programMapTable = {};
        var pusi = parsePayloadUnitStartIndicator(packet);
        var payloadOffset = 4 + parseAdaptionField(packet);
        if (pusi) {
          payloadOffset += packet[payloadOffset] + 1;
        }
        if (!(packet[payloadOffset + 5] & 1)) {
          return;
        }
        var sectionLength, tableEnd, programInfoLength;
        sectionLength = (packet[payloadOffset + 1] & 15) << 8 | packet[payloadOffset + 2];
        tableEnd = 3 + sectionLength - 4;
        programInfoLength = (packet[payloadOffset + 10] & 15) << 8 | packet[payloadOffset + 11];
        var offset = 12 + programInfoLength;
        while (offset < tableEnd) {
          var i = payloadOffset + offset;
          programMapTable[(packet[i + 1] & 31) << 8 | packet[i + 2]] = packet[i];
          offset += ((packet[i + 3] & 15) << 8 | packet[i + 4]) + 5;
        }
        return programMapTable;
      };
      var parsePesType = function parsePesType2(packet, programMapTable) {
        var pid = parsePid(packet);
        var type2 = programMapTable[pid];
        switch (type2) {
          case streamTypes.H264_STREAM_TYPE:
            return "video";
          case streamTypes.ADTS_STREAM_TYPE:
            return "audio";
          case streamTypes.METADATA_STREAM_TYPE:
            return "timed-metadata";
          default:
            return null;
        }
      };
      var parsePesTime = function parsePesTime2(packet) {
        var pusi = parsePayloadUnitStartIndicator(packet);
        if (!pusi) {
          return null;
        }
        var offset = 4 + parseAdaptionField(packet);
        if (offset >= packet.byteLength) {
          return null;
        }
        var pes = null;
        var ptsDtsFlags;
        ptsDtsFlags = packet[offset + 7];
        if (ptsDtsFlags & 192) {
          pes = {};
          pes.pts = (packet[offset + 9] & 14) << 27 | (packet[offset + 10] & 255) << 20 | (packet[offset + 11] & 254) << 12 | (packet[offset + 12] & 255) << 5 | (packet[offset + 13] & 254) >>> 3;
          pes.pts *= 4;
          pes.pts += (packet[offset + 13] & 6) >>> 1;
          pes.dts = pes.pts;
          if (ptsDtsFlags & 64) {
            pes.dts = (packet[offset + 14] & 14) << 27 | (packet[offset + 15] & 255) << 20 | (packet[offset + 16] & 254) << 12 | (packet[offset + 17] & 255) << 5 | (packet[offset + 18] & 254) >>> 3;
            pes.dts *= 4;
            pes.dts += (packet[offset + 18] & 6) >>> 1;
          }
        }
        return pes;
      };
      var parseNalUnitType = function parseNalUnitType2(type2) {
        switch (type2) {
          case 5:
            return "slice_layer_without_partitioning_rbsp_idr";
          case 6:
            return "sei_rbsp";
          case 7:
            return "seq_parameter_set_rbsp";
          case 8:
            return "pic_parameter_set_rbsp";
          case 9:
            return "access_unit_delimiter_rbsp";
          default:
            return null;
        }
      };
      var videoPacketContainsKeyFrame = function videoPacketContainsKeyFrame2(packet) {
        var offset = 4 + parseAdaptionField(packet);
        var frameBuffer = packet.subarray(offset);
        var frameI = 0;
        var frameSyncPoint = 0;
        var foundKeyFrame = false;
        var nalType;
        for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {
          if (frameBuffer[frameSyncPoint + 2] === 1) {
            frameI = frameSyncPoint + 5;
            break;
          }
        }
        while (frameI < frameBuffer.byteLength) {
          switch (frameBuffer[frameI]) {
            case 0:
              if (frameBuffer[frameI - 1] !== 0) {
                frameI += 2;
                break;
              } else if (frameBuffer[frameI - 2] !== 0) {
                frameI++;
                break;
              }
              if (frameSyncPoint + 3 !== frameI - 2) {
                nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 31);
                if (nalType === "slice_layer_without_partitioning_rbsp_idr") {
                  foundKeyFrame = true;
                }
              }
              do {
                frameI++;
              } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);
              frameSyncPoint = frameI - 2;
              frameI += 3;
              break;
            case 1:
              if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {
                frameI += 3;
                break;
              }
              nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 31);
              if (nalType === "slice_layer_without_partitioning_rbsp_idr") {
                foundKeyFrame = true;
              }
              frameSyncPoint = frameI - 2;
              frameI += 3;
              break;
            default:
              frameI += 3;
              break;
          }
        }
        frameBuffer = frameBuffer.subarray(frameSyncPoint);
        frameI -= frameSyncPoint;
        frameSyncPoint = 0;
        if (frameBuffer && frameBuffer.byteLength > 3) {
          nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 31);
          if (nalType === "slice_layer_without_partitioning_rbsp_idr") {
            foundKeyFrame = true;
          }
        }
        return foundKeyFrame;
      };
      var probe$1 = {
        parseType,
        parsePat,
        parsePmt,
        parsePayloadUnitStartIndicator,
        parsePesType,
        parsePesTime,
        videoPacketContainsKeyFrame
      };
      var handleRollover = timestampRolloverStream.handleRollover;
      var probe = {};
      probe.ts = probe$1;
      probe.aac = utils;
      var ONE_SECOND_IN_TS = clock.ONE_SECOND_IN_TS;
      var MP2T_PACKET_LENGTH = 188, SYNC_BYTE = 71;
      var parsePsi_ = function parsePsi_2(bytes, pmt) {
        var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type2;
        while (endIndex < bytes.byteLength) {
          if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
            packet = bytes.subarray(startIndex, endIndex);
            type2 = probe.ts.parseType(packet, pmt.pid);
            switch (type2) {
              case "pat":
                pmt.pid = probe.ts.parsePat(packet);
                break;
              case "pmt":
                var table = probe.ts.parsePmt(packet);
                pmt.table = pmt.table || {};
                Object.keys(table).forEach(function(key) {
                  pmt.table[key] = table[key];
                });
                break;
            }
            startIndex += MP2T_PACKET_LENGTH;
            endIndex += MP2T_PACKET_LENGTH;
            continue;
          }
          startIndex++;
          endIndex++;
        }
      };
      var parseAudioPes_ = function parseAudioPes_2(bytes, pmt, result) {
        var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type2, pesType, pusi, parsed;
        var endLoop = false;
        while (endIndex <= bytes.byteLength) {
          if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {
            packet = bytes.subarray(startIndex, endIndex);
            type2 = probe.ts.parseType(packet, pmt.pid);
            switch (type2) {
              case "pes":
                pesType = probe.ts.parsePesType(packet, pmt.table);
                pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
                if (pesType === "audio" && pusi) {
                  parsed = probe.ts.parsePesTime(packet);
                  if (parsed) {
                    parsed.type = "audio";
                    result.audio.push(parsed);
                    endLoop = true;
                  }
                }
                break;
            }
            if (endLoop) {
              break;
            }
            startIndex += MP2T_PACKET_LENGTH;
            endIndex += MP2T_PACKET_LENGTH;
            continue;
          }
          startIndex++;
          endIndex++;
        }
        endIndex = bytes.byteLength;
        startIndex = endIndex - MP2T_PACKET_LENGTH;
        endLoop = false;
        while (startIndex >= 0) {
          if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {
            packet = bytes.subarray(startIndex, endIndex);
            type2 = probe.ts.parseType(packet, pmt.pid);
            switch (type2) {
              case "pes":
                pesType = probe.ts.parsePesType(packet, pmt.table);
                pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
                if (pesType === "audio" && pusi) {
                  parsed = probe.ts.parsePesTime(packet);
                  if (parsed) {
                    parsed.type = "audio";
                    result.audio.push(parsed);
                    endLoop = true;
                  }
                }
                break;
            }
            if (endLoop) {
              break;
            }
            startIndex -= MP2T_PACKET_LENGTH;
            endIndex -= MP2T_PACKET_LENGTH;
            continue;
          }
          startIndex--;
          endIndex--;
        }
      };
      var parseVideoPes_ = function parseVideoPes_2(bytes, pmt, result) {
        var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type2, pesType, pusi, parsed, frame, i, pes;
        var endLoop = false;
        var currentFrame = {
          data: [],
          size: 0
        };
        while (endIndex < bytes.byteLength) {
          if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
            packet = bytes.subarray(startIndex, endIndex);
            type2 = probe.ts.parseType(packet, pmt.pid);
            switch (type2) {
              case "pes":
                pesType = probe.ts.parsePesType(packet, pmt.table);
                pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
                if (pesType === "video") {
                  if (pusi && !endLoop) {
                    parsed = probe.ts.parsePesTime(packet);
                    if (parsed) {
                      parsed.type = "video";
                      result.video.push(parsed);
                      endLoop = true;
                    }
                  }
                  if (!result.firstKeyFrame) {
                    if (pusi) {
                      if (currentFrame.size !== 0) {
                        frame = new Uint8Array(currentFrame.size);
                        i = 0;
                        while (currentFrame.data.length) {
                          pes = currentFrame.data.shift();
                          frame.set(pes, i);
                          i += pes.byteLength;
                        }
                        if (probe.ts.videoPacketContainsKeyFrame(frame)) {
                          var firstKeyFrame = probe.ts.parsePesTime(frame);
                          if (firstKeyFrame) {
                            result.firstKeyFrame = firstKeyFrame;
                            result.firstKeyFrame.type = "video";
                          } else {
                            console.warn("Failed to extract PTS/DTS from PES at first keyframe. This could be an unusual TS segment, or else mux.js did not parse your TS segment correctly. If you know your TS segments do contain PTS/DTS on keyframes please file a bug report! You can try ffprobe to double check for yourself.");
                          }
                        }
                        currentFrame.size = 0;
                      }
                    }
                    currentFrame.data.push(packet);
                    currentFrame.size += packet.byteLength;
                  }
                }
                break;
            }
            if (endLoop && result.firstKeyFrame) {
              break;
            }
            startIndex += MP2T_PACKET_LENGTH;
            endIndex += MP2T_PACKET_LENGTH;
            continue;
          }
          startIndex++;
          endIndex++;
        }
        endIndex = bytes.byteLength;
        startIndex = endIndex - MP2T_PACKET_LENGTH;
        endLoop = false;
        while (startIndex >= 0) {
          if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
            packet = bytes.subarray(startIndex, endIndex);
            type2 = probe.ts.parseType(packet, pmt.pid);
            switch (type2) {
              case "pes":
                pesType = probe.ts.parsePesType(packet, pmt.table);
                pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
                if (pesType === "video" && pusi) {
                  parsed = probe.ts.parsePesTime(packet);
                  if (parsed) {
                    parsed.type = "video";
                    result.video.push(parsed);
                    endLoop = true;
                  }
                }
                break;
            }
            if (endLoop) {
              break;
            }
            startIndex -= MP2T_PACKET_LENGTH;
            endIndex -= MP2T_PACKET_LENGTH;
            continue;
          }
          startIndex--;
          endIndex--;
        }
      };
      var adjustTimestamp_ = function adjustTimestamp_2(segmentInfo, baseTimestamp) {
        if (segmentInfo.audio && segmentInfo.audio.length) {
          var audioBaseTimestamp = baseTimestamp;
          if (typeof audioBaseTimestamp === "undefined" || isNaN(audioBaseTimestamp)) {
            audioBaseTimestamp = segmentInfo.audio[0].dts;
          }
          segmentInfo.audio.forEach(function(info) {
            info.dts = handleRollover(info.dts, audioBaseTimestamp);
            info.pts = handleRollover(info.pts, audioBaseTimestamp);
            info.dtsTime = info.dts / ONE_SECOND_IN_TS;
            info.ptsTime = info.pts / ONE_SECOND_IN_TS;
          });
        }
        if (segmentInfo.video && segmentInfo.video.length) {
          var videoBaseTimestamp = baseTimestamp;
          if (typeof videoBaseTimestamp === "undefined" || isNaN(videoBaseTimestamp)) {
            videoBaseTimestamp = segmentInfo.video[0].dts;
          }
          segmentInfo.video.forEach(function(info) {
            info.dts = handleRollover(info.dts, videoBaseTimestamp);
            info.pts = handleRollover(info.pts, videoBaseTimestamp);
            info.dtsTime = info.dts / ONE_SECOND_IN_TS;
            info.ptsTime = info.pts / ONE_SECOND_IN_TS;
          });
          if (segmentInfo.firstKeyFrame) {
            var frame = segmentInfo.firstKeyFrame;
            frame.dts = handleRollover(frame.dts, videoBaseTimestamp);
            frame.pts = handleRollover(frame.pts, videoBaseTimestamp);
            frame.dtsTime = frame.dts / ONE_SECOND_IN_TS;
            frame.ptsTime = frame.pts / ONE_SECOND_IN_TS;
          }
        }
      };
      var inspectAac_ = function inspectAac_2(bytes) {
        var endLoop = false, audioCount = 0, sampleRate = null, timestamp = null, frameSize = 0, byteIndex = 0, packet;
        while (bytes.length - byteIndex >= 3) {
          var type2 = probe.aac.parseType(bytes, byteIndex);
          switch (type2) {
            case "timed-metadata":
              if (bytes.length - byteIndex < 10) {
                endLoop = true;
                break;
              }
              frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);
              if (frameSize > bytes.length) {
                endLoop = true;
                break;
              }
              if (timestamp === null) {
                packet = bytes.subarray(byteIndex, byteIndex + frameSize);
                timestamp = probe.aac.parseAacTimestamp(packet);
              }
              byteIndex += frameSize;
              break;
            case "audio":
              if (bytes.length - byteIndex < 7) {
                endLoop = true;
                break;
              }
              frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);
              if (frameSize > bytes.length) {
                endLoop = true;
                break;
              }
              if (sampleRate === null) {
                packet = bytes.subarray(byteIndex, byteIndex + frameSize);
                sampleRate = probe.aac.parseSampleRate(packet);
              }
              audioCount++;
              byteIndex += frameSize;
              break;
            default:
              byteIndex++;
              break;
          }
          if (endLoop) {
            return null;
          }
        }
        if (sampleRate === null || timestamp === null) {
          return null;
        }
        var audioTimescale = ONE_SECOND_IN_TS / sampleRate;
        var result = {
          audio: [{
            type: "audio",
            dts: timestamp,
            pts: timestamp
          }, {
            type: "audio",
            dts: timestamp + audioCount * 1024 * audioTimescale,
            pts: timestamp + audioCount * 1024 * audioTimescale
          }]
        };
        return result;
      };
      var inspectTs_ = function inspectTs_2(bytes) {
        var pmt = {
          pid: null,
          table: null
        };
        var result = {};
        parsePsi_(bytes, pmt);
        for (var pid in pmt.table) {
          if (pmt.table.hasOwnProperty(pid)) {
            var type2 = pmt.table[pid];
            switch (type2) {
              case streamTypes.H264_STREAM_TYPE:
                result.video = [];
                parseVideoPes_(bytes, pmt, result);
                if (result.video.length === 0) {
                  delete result.video;
                }
                break;
              case streamTypes.ADTS_STREAM_TYPE:
                result.audio = [];
                parseAudioPes_(bytes, pmt, result);
                if (result.audio.length === 0) {
                  delete result.audio;
                }
                break;
            }
          }
        }
        return result;
      };
      var inspect = function inspect2(bytes, baseTimestamp) {
        var isAacData = probe.aac.isLikelyAacData(bytes);
        var result;
        if (isAacData) {
          result = inspectAac_(bytes);
        } else {
          result = inspectTs_(bytes);
        }
        if (!result || !result.audio && !result.video) {
          return null;
        }
        adjustTimestamp_(result, baseTimestamp);
        return result;
      };
      var tsInspector = {
        inspect,
        parseAudioPes_
      };
      var muxjs2 = {
        codecs,
        mp4,
        flv,
        mp2t: m2ts,
        partial
      };
      muxjs2.mp4.tools = mp4Inspector;
      muxjs2.flv.tools = flvInspector;
      muxjs2.mp2t.tools = tsInspector;
      var lib = muxjs2;
      return lib;
    });
  }
});

// node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/dist/object_hash.js
var require_object_hash = __commonJS({
  "node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/dist/object_hash.js"(exports2, module2) {
    !function(e2) {
      var t;
      "object" == typeof exports2 ? module2.exports = e2() : "function" == typeof define && define.amd ? define(e2) : ("undefined" != typeof window ? t = window : "undefined" != typeof global ? t = global : "undefined" != typeof self && (t = self), t.objectHash = e2());
    }(function() {
      return function r(o, i, u) {
        function s(n, e3) {
          if (!i[n]) {
            if (!o[n]) {
              var t = "function" == typeof __require && __require;
              if (!e3 && t)
                return t(n, true);
              if (a2)
                return a2(n, true);
              throw new Error("Cannot find module '" + n + "'");
            }
            e3 = i[n] = { exports: {} };
            o[n][0].call(e3.exports, function(e4) {
              var t2 = o[n][1][e4];
              return s(t2 || e4);
            }, e3, e3.exports, r, o, i, u);
          }
          return i[n].exports;
        }
        for (var a2 = "function" == typeof __require && __require, e2 = 0; e2 < u.length; e2++)
          s(u[e2]);
        return s;
      }({ 1: [function(w, b2, m) {
        !function(e2, n, s, c2, d2, h, p, g, y) {
          "use strict";
          var r = w("crypto");
          function t(e3, t2) {
            t2 = u(e3, t2);
            var n2;
            return void 0 === (n2 = "passthrough" !== t2.algorithm ? r.createHash(t2.algorithm) : new l()).write && (n2.write = n2.update, n2.end = n2.update), f2(t2, n2).dispatch(e3), n2.update || n2.end(""), n2.digest ? n2.digest("buffer" === t2.encoding ? void 0 : t2.encoding) : (e3 = n2.read(), "buffer" !== t2.encoding ? e3.toString(t2.encoding) : e3);
          }
          (m = b2.exports = t).sha1 = function(e3) {
            return t(e3);
          }, m.keys = function(e3) {
            return t(e3, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
          }, m.MD5 = function(e3) {
            return t(e3, { algorithm: "md5", encoding: "hex" });
          }, m.keysMD5 = function(e3) {
            return t(e3, { algorithm: "md5", encoding: "hex", excludeValues: true });
          };
          var o = r.getHashes ? r.getHashes().slice() : ["sha1", "md5"], i = (o.push("passthrough"), ["buffer", "hex", "binary", "base64"]);
          function u(e3, t2) {
            var n2 = {};
            if (n2.algorithm = (t2 = t2 || {}).algorithm || "sha1", n2.encoding = t2.encoding || "hex", n2.excludeValues = !!t2.excludeValues, n2.algorithm = n2.algorithm.toLowerCase(), n2.encoding = n2.encoding.toLowerCase(), n2.ignoreUnknown = true === t2.ignoreUnknown, n2.respectType = false !== t2.respectType, n2.respectFunctionNames = false !== t2.respectFunctionNames, n2.respectFunctionProperties = false !== t2.respectFunctionProperties, n2.unorderedArrays = true === t2.unorderedArrays, n2.unorderedSets = false !== t2.unorderedSets, n2.unorderedObjects = false !== t2.unorderedObjects, n2.replacer = t2.replacer || void 0, n2.excludeKeys = t2.excludeKeys || void 0, void 0 === e3)
              throw new Error("Object argument required.");
            for (var r2 = 0; r2 < o.length; ++r2)
              o[r2].toLowerCase() === n2.algorithm.toLowerCase() && (n2.algorithm = o[r2]);
            if (-1 === o.indexOf(n2.algorithm))
              throw new Error('Algorithm "' + n2.algorithm + '"  not supported. supported values: ' + o.join(", "));
            if (-1 === i.indexOf(n2.encoding) && "passthrough" !== n2.algorithm)
              throw new Error('Encoding "' + n2.encoding + '"  not supported. supported values: ' + i.join(", "));
            return n2;
          }
          function a2(e3) {
            if ("function" == typeof e3)
              return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(e3));
          }
          function f2(o2, t2, i2) {
            i2 = i2 || [];
            function u2(e3) {
              return t2.update ? t2.update(e3, "utf8") : t2.write(e3, "utf8");
            }
            return { dispatch: function(e3) {
              return this["_" + (null === (e3 = o2.replacer ? o2.replacer(e3) : e3) ? "null" : typeof e3)](e3);
            }, _object: function(t3) {
              var n2, e3 = Object.prototype.toString.call(t3), r2 = /\[object (.*)\]/i.exec(e3);
              r2 = (r2 = r2 ? r2[1] : "unknown:[" + e3 + "]").toLowerCase();
              if (0 <= (e3 = i2.indexOf(t3)))
                return this.dispatch("[CIRCULAR:" + e3 + "]");
              if (i2.push(t3), void 0 !== s && s.isBuffer && s.isBuffer(t3))
                return u2("buffer:"), u2(t3);
              if ("object" === r2 || "function" === r2 || "asyncfunction" === r2)
                return e3 = Object.keys(t3), o2.unorderedObjects && (e3 = e3.sort()), false === o2.respectType || a2(t3) || e3.splice(0, 0, "prototype", "__proto__", "constructor"), o2.excludeKeys && (e3 = e3.filter(function(e4) {
                  return !o2.excludeKeys(e4);
                })), u2("object:" + e3.length + ":"), n2 = this, e3.forEach(function(e4) {
                  n2.dispatch(e4), u2(":"), o2.excludeValues || n2.dispatch(t3[e4]), u2(",");
                });
              if (!this["_" + r2]) {
                if (o2.ignoreUnknown)
                  return u2("[" + r2 + "]");
                throw new Error('Unknown object type "' + r2 + '"');
              }
              this["_" + r2](t3);
            }, _array: function(e3, t3) {
              t3 = void 0 !== t3 ? t3 : false !== o2.unorderedArrays;
              var n2 = this;
              if (u2("array:" + e3.length + ":"), !t3 || e3.length <= 1)
                return e3.forEach(function(e4) {
                  return n2.dispatch(e4);
                });
              var r2 = [], t3 = e3.map(function(e4) {
                var t4 = new l(), n3 = i2.slice();
                return f2(o2, t4, n3).dispatch(e4), r2 = r2.concat(n3.slice(i2.length)), t4.read().toString();
              });
              return i2 = i2.concat(r2), t3.sort(), this._array(t3, false);
            }, _date: function(e3) {
              return u2("date:" + e3.toJSON());
            }, _symbol: function(e3) {
              return u2("symbol:" + e3.toString());
            }, _error: function(e3) {
              return u2("error:" + e3.toString());
            }, _boolean: function(e3) {
              return u2("bool:" + e3.toString());
            }, _string: function(e3) {
              u2("string:" + e3.length + ":"), u2(e3.toString());
            }, _function: function(e3) {
              u2("fn:"), a2(e3) ? this.dispatch("[native]") : this.dispatch(e3.toString()), false !== o2.respectFunctionNames && this.dispatch("function-name:" + String(e3.name)), o2.respectFunctionProperties && this._object(e3);
            }, _number: function(e3) {
              return u2("number:" + e3.toString());
            }, _xml: function(e3) {
              return u2("xml:" + e3.toString());
            }, _null: function() {
              return u2("Null");
            }, _undefined: function() {
              return u2("Undefined");
            }, _regexp: function(e3) {
              return u2("regex:" + e3.toString());
            }, _uint8array: function(e3) {
              return u2("uint8array:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _uint8clampedarray: function(e3) {
              return u2("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _int8array: function(e3) {
              return u2("int8array:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _uint16array: function(e3) {
              return u2("uint16array:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _int16array: function(e3) {
              return u2("int16array:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _uint32array: function(e3) {
              return u2("uint32array:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _int32array: function(e3) {
              return u2("int32array:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _float32array: function(e3) {
              return u2("float32array:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _float64array: function(e3) {
              return u2("float64array:"), this.dispatch(Array.prototype.slice.call(e3));
            }, _arraybuffer: function(e3) {
              return u2("arraybuffer:"), this.dispatch(new Uint8Array(e3));
            }, _url: function(e3) {
              return u2("url:" + e3.toString());
            }, _map: function(e3) {
              u2("map:");
              e3 = Array.from(e3);
              return this._array(e3, false !== o2.unorderedSets);
            }, _set: function(e3) {
              u2("set:");
              e3 = Array.from(e3);
              return this._array(e3, false !== o2.unorderedSets);
            }, _file: function(e3) {
              return u2("file:"), this.dispatch([e3.name, e3.size, e3.type, e3.lastModfied]);
            }, _blob: function() {
              if (o2.ignoreUnknown)
                return u2("[blob]");
              throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
            }, _domwindow: function() {
              return u2("domwindow");
            }, _bigint: function(e3) {
              return u2("bigint:" + e3.toString());
            }, _process: function() {
              return u2("process");
            }, _timer: function() {
              return u2("timer");
            }, _pipe: function() {
              return u2("pipe");
            }, _tcp: function() {
              return u2("tcp");
            }, _udp: function() {
              return u2("udp");
            }, _tty: function() {
              return u2("tty");
            }, _statwatcher: function() {
              return u2("statwatcher");
            }, _securecontext: function() {
              return u2("securecontext");
            }, _connection: function() {
              return u2("connection");
            }, _zlib: function() {
              return u2("zlib");
            }, _context: function() {
              return u2("context");
            }, _nodescript: function() {
              return u2("nodescript");
            }, _httpparser: function() {
              return u2("httpparser");
            }, _dataview: function() {
              return u2("dataview");
            }, _signal: function() {
              return u2("signal");
            }, _fsevent: function() {
              return u2("fsevent");
            }, _tlswrap: function() {
              return u2("tlswrap");
            } };
          }
          function l() {
            return { buf: "", write: function(e3) {
              this.buf += e3;
            }, end: function(e3) {
              this.buf += e3;
            }, read: function() {
              return this.buf;
            } };
          }
          m.writeToStream = function(e3, t2, n2) {
            return void 0 === n2 && (n2 = t2, t2 = {}), f2(t2 = u(e3, t2), n2).dispatch(e3);
          };
        }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_9a5aa49d.js", "/");
      }, { buffer: 3, crypto: 5, lYpoI2: 11 }], 2: [function(e2, t, f2) {
        !function(e3, t2, n, r, o, i, u, s, a2) {
          !function(e4) {
            "use strict";
            var a3 = "undefined" != typeof Uint8Array ? Uint8Array : Array, t3 = "+".charCodeAt(0), n2 = "/".charCodeAt(0), r2 = "0".charCodeAt(0), o2 = "a".charCodeAt(0), i2 = "A".charCodeAt(0), u2 = "-".charCodeAt(0), s2 = "_".charCodeAt(0);
            function f3(e5) {
              e5 = e5.charCodeAt(0);
              return e5 === t3 || e5 === u2 ? 62 : e5 === n2 || e5 === s2 ? 63 : e5 < r2 ? -1 : e5 < r2 + 10 ? e5 - r2 + 26 + 26 : e5 < i2 + 26 ? e5 - i2 : e5 < o2 + 26 ? e5 - o2 + 26 : void 0;
            }
            e4.toByteArray = function(e5) {
              var t4, n3;
              if (0 < e5.length % 4)
                throw new Error("Invalid string. Length must be a multiple of 4");
              var r3 = e5.length, r3 = "=" === e5.charAt(r3 - 2) ? 2 : "=" === e5.charAt(r3 - 1) ? 1 : 0, o3 = new a3(3 * e5.length / 4 - r3), i3 = 0 < r3 ? e5.length - 4 : e5.length, u3 = 0;
              function s3(e6) {
                o3[u3++] = e6;
              }
              for (t4 = 0; t4 < i3; t4 += 4, 0)
                s3((16711680 & (n3 = f3(e5.charAt(t4)) << 18 | f3(e5.charAt(t4 + 1)) << 12 | f3(e5.charAt(t4 + 2)) << 6 | f3(e5.charAt(t4 + 3)))) >> 16), s3((65280 & n3) >> 8), s3(255 & n3);
              return 2 == r3 ? s3(255 & (n3 = f3(e5.charAt(t4)) << 2 | f3(e5.charAt(t4 + 1)) >> 4)) : 1 == r3 && (s3((n3 = f3(e5.charAt(t4)) << 10 | f3(e5.charAt(t4 + 1)) << 4 | f3(e5.charAt(t4 + 2)) >> 2) >> 8 & 255), s3(255 & n3)), o3;
            }, e4.fromByteArray = function(e5) {
              var t4, n3, r3, o3, i3 = e5.length % 3, u3 = "";
              function s3(e6) {
                return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e6);
              }
              for (t4 = 0, r3 = e5.length - i3; t4 < r3; t4 += 3)
                n3 = (e5[t4] << 16) + (e5[t4 + 1] << 8) + e5[t4 + 2], u3 += s3((o3 = n3) >> 18 & 63) + s3(o3 >> 12 & 63) + s3(o3 >> 6 & 63) + s3(63 & o3);
              switch (i3) {
                case 1:
                  u3 = (u3 += s3((n3 = e5[e5.length - 1]) >> 2)) + s3(n3 << 4 & 63) + "==";
                  break;
                case 2:
                  u3 = (u3 = (u3 += s3((n3 = (e5[e5.length - 2] << 8) + e5[e5.length - 1]) >> 10)) + s3(n3 >> 4 & 63)) + s3(n3 << 2 & 63) + "=";
              }
              return u3;
            };
          }(void 0 === f2 ? this.base64js = {} : f2);
        }.call(this, e2("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e2("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js", "/node_modules/gulp-browserify/node_modules/base64-js/lib");
      }, { buffer: 3, lYpoI2: 11 }], 3: [function(O, e2, H) {
        !function(e3, n, f2, r, h, p, g, y, w) {
          var a2 = O("base64-js"), i = O("ieee754");
          function f2(e4, t2, n2) {
            if (!(this instanceof f2))
              return new f2(e4, t2, n2);
            var r2, o2, i2, u2, s2 = typeof e4;
            if ("base64" === t2 && "string" == s2)
              for (e4 = (u2 = e4).trim ? u2.trim() : u2.replace(/^\s+|\s+$/g, ""); e4.length % 4 != 0; )
                e4 += "=";
            if ("number" == s2)
              r2 = j(e4);
            else if ("string" == s2)
              r2 = f2.byteLength(e4, t2);
            else {
              if ("object" != s2)
                throw new Error("First argument needs to be a number, array or string.");
              r2 = j(e4.length);
            }
            if (f2._useTypedArrays ? o2 = f2._augment(new Uint8Array(r2)) : ((o2 = this).length = r2, o2._isBuffer = true), f2._useTypedArrays && "number" == typeof e4.byteLength)
              o2._set(e4);
            else if (C(u2 = e4) || f2.isBuffer(u2) || u2 && "object" == typeof u2 && "number" == typeof u2.length)
              for (i2 = 0; i2 < r2; i2++)
                f2.isBuffer(e4) ? o2[i2] = e4.readUInt8(i2) : o2[i2] = e4[i2];
            else if ("string" == s2)
              o2.write(e4, 0, t2);
            else if ("number" == s2 && !f2._useTypedArrays && !n2)
              for (i2 = 0; i2 < r2; i2++)
                o2[i2] = 0;
            return o2;
          }
          function b2(e4, t2, n2, r2) {
            return f2._charsWritten = c2(function(e5) {
              for (var t3 = [], n3 = 0; n3 < e5.length; n3++)
                t3.push(255 & e5.charCodeAt(n3));
              return t3;
            }(t2), e4, n2, r2);
          }
          function m(e4, t2, n2, r2) {
            return f2._charsWritten = c2(function(e5) {
              for (var t3, n3, r3 = [], o2 = 0; o2 < e5.length; o2++)
                n3 = e5.charCodeAt(o2), t3 = n3 >> 8, n3 = n3 % 256, r3.push(n3), r3.push(t3);
              return r3;
            }(t2), e4, n2, r2);
          }
          function v(e4, t2, n2) {
            var r2 = "";
            n2 = Math.min(e4.length, n2);
            for (var o2 = t2; o2 < n2; o2++)
              r2 += String.fromCharCode(e4[o2]);
            return r2;
          }
          function o(e4, t2, n2, r2) {
            r2 || (d2("boolean" == typeof n2, "missing or invalid endian"), d2(null != t2, "missing offset"), d2(t2 + 1 < e4.length, "Trying to read beyond buffer length"));
            var o2, r2 = e4.length;
            if (!(r2 <= t2))
              return n2 ? (o2 = e4[t2], t2 + 1 < r2 && (o2 |= e4[t2 + 1] << 8)) : (o2 = e4[t2] << 8, t2 + 1 < r2 && (o2 |= e4[t2 + 1])), o2;
          }
          function u(e4, t2, n2, r2) {
            r2 || (d2("boolean" == typeof n2, "missing or invalid endian"), d2(null != t2, "missing offset"), d2(t2 + 3 < e4.length, "Trying to read beyond buffer length"));
            var o2, r2 = e4.length;
            if (!(r2 <= t2))
              return n2 ? (t2 + 2 < r2 && (o2 = e4[t2 + 2] << 16), t2 + 1 < r2 && (o2 |= e4[t2 + 1] << 8), o2 |= e4[t2], t2 + 3 < r2 && (o2 += e4[t2 + 3] << 24 >>> 0)) : (t2 + 1 < r2 && (o2 = e4[t2 + 1] << 16), t2 + 2 < r2 && (o2 |= e4[t2 + 2] << 8), t2 + 3 < r2 && (o2 |= e4[t2 + 3]), o2 += e4[t2] << 24 >>> 0), o2;
          }
          function _(e4, t2, n2, r2) {
            if (r2 || (d2("boolean" == typeof n2, "missing or invalid endian"), d2(null != t2, "missing offset"), d2(t2 + 1 < e4.length, "Trying to read beyond buffer length")), !(e4.length <= t2))
              return r2 = o(e4, t2, n2, true), 32768 & r2 ? -1 * (65535 - r2 + 1) : r2;
          }
          function E(e4, t2, n2, r2) {
            if (r2 || (d2("boolean" == typeof n2, "missing or invalid endian"), d2(null != t2, "missing offset"), d2(t2 + 3 < e4.length, "Trying to read beyond buffer length")), !(e4.length <= t2))
              return r2 = u(e4, t2, n2, true), 2147483648 & r2 ? -1 * (4294967295 - r2 + 1) : r2;
          }
          function I(e4, t2, n2, r2) {
            return r2 || (d2("boolean" == typeof n2, "missing or invalid endian"), d2(t2 + 3 < e4.length, "Trying to read beyond buffer length")), i.read(e4, t2, n2, 23, 4);
          }
          function A(e4, t2, n2, r2) {
            return r2 || (d2("boolean" == typeof n2, "missing or invalid endian"), d2(t2 + 7 < e4.length, "Trying to read beyond buffer length")), i.read(e4, t2, n2, 52, 8);
          }
          function s(e4, t2, n2, r2, o2) {
            o2 || (d2(null != t2, "missing value"), d2("boolean" == typeof r2, "missing or invalid endian"), d2(null != n2, "missing offset"), d2(n2 + 1 < e4.length, "trying to write beyond buffer length"), Y(t2, 65535));
            o2 = e4.length;
            if (!(o2 <= n2))
              for (var i2 = 0, u2 = Math.min(o2 - n2, 2); i2 < u2; i2++)
                e4[n2 + i2] = (t2 & 255 << 8 * (r2 ? i2 : 1 - i2)) >>> 8 * (r2 ? i2 : 1 - i2);
          }
          function l(e4, t2, n2, r2, o2) {
            o2 || (d2(null != t2, "missing value"), d2("boolean" == typeof r2, "missing or invalid endian"), d2(null != n2, "missing offset"), d2(n2 + 3 < e4.length, "trying to write beyond buffer length"), Y(t2, 4294967295));
            o2 = e4.length;
            if (!(o2 <= n2))
              for (var i2 = 0, u2 = Math.min(o2 - n2, 4); i2 < u2; i2++)
                e4[n2 + i2] = t2 >>> 8 * (r2 ? i2 : 3 - i2) & 255;
          }
          function B(e4, t2, n2, r2, o2) {
            o2 || (d2(null != t2, "missing value"), d2("boolean" == typeof r2, "missing or invalid endian"), d2(null != n2, "missing offset"), d2(n2 + 1 < e4.length, "Trying to write beyond buffer length"), F(t2, 32767, -32768)), e4.length <= n2 || s(e4, 0 <= t2 ? t2 : 65535 + t2 + 1, n2, r2, o2);
          }
          function L(e4, t2, n2, r2, o2) {
            o2 || (d2(null != t2, "missing value"), d2("boolean" == typeof r2, "missing or invalid endian"), d2(null != n2, "missing offset"), d2(n2 + 3 < e4.length, "Trying to write beyond buffer length"), F(t2, 2147483647, -2147483648)), e4.length <= n2 || l(e4, 0 <= t2 ? t2 : 4294967295 + t2 + 1, n2, r2, o2);
          }
          function U(e4, t2, n2, r2, o2) {
            o2 || (d2(null != t2, "missing value"), d2("boolean" == typeof r2, "missing or invalid endian"), d2(null != n2, "missing offset"), d2(n2 + 3 < e4.length, "Trying to write beyond buffer length"), D(t2, 34028234663852886e22, -34028234663852886e22)), e4.length <= n2 || i.write(e4, t2, n2, r2, 23, 4);
          }
          function x(e4, t2, n2, r2, o2) {
            o2 || (d2(null != t2, "missing value"), d2("boolean" == typeof r2, "missing or invalid endian"), d2(null != n2, "missing offset"), d2(n2 + 7 < e4.length, "Trying to write beyond buffer length"), D(t2, 17976931348623157e292, -17976931348623157e292)), e4.length <= n2 || i.write(e4, t2, n2, r2, 52, 8);
          }
          H.Buffer = f2, H.SlowBuffer = f2, H.INSPECT_MAX_BYTES = 50, f2.poolSize = 8192, f2._useTypedArrays = function() {
            try {
              var e4 = new ArrayBuffer(0), t2 = new Uint8Array(e4);
              return t2.foo = function() {
                return 42;
              }, 42 === t2.foo() && "function" == typeof t2.subarray;
            } catch (e5) {
              return false;
            }
          }(), f2.isEncoding = function(e4) {
            switch (String(e4).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "raw":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, f2.isBuffer = function(e4) {
            return !(null == e4 || !e4._isBuffer);
          }, f2.byteLength = function(e4, t2) {
            var n2;
            switch (e4 += "", t2 || "utf8") {
              case "hex":
                n2 = e4.length / 2;
                break;
              case "utf8":
              case "utf-8":
                n2 = T(e4).length;
                break;
              case "ascii":
              case "binary":
              case "raw":
                n2 = e4.length;
                break;
              case "base64":
                n2 = M(e4).length;
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                n2 = 2 * e4.length;
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return n2;
          }, f2.concat = function(e4, t2) {
            if (d2(C(e4), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."), 0 === e4.length)
              return new f2(0);
            if (1 === e4.length)
              return e4[0];
            if ("number" != typeof t2)
              for (o2 = t2 = 0; o2 < e4.length; o2++)
                t2 += e4[o2].length;
            for (var n2 = new f2(t2), r2 = 0, o2 = 0; o2 < e4.length; o2++) {
              var i2 = e4[o2];
              i2.copy(n2, r2), r2 += i2.length;
            }
            return n2;
          }, f2.prototype.write = function(e4, t2, n2, r2) {
            isFinite(t2) ? isFinite(n2) || (r2 = n2, n2 = void 0) : (a3 = r2, r2 = t2, t2 = n2, n2 = a3), t2 = Number(t2) || 0;
            var o2, i2, u2, s2, a3 = this.length - t2;
            switch ((!n2 || a3 < (n2 = Number(n2))) && (n2 = a3), r2 = String(r2 || "utf8").toLowerCase()) {
              case "hex":
                o2 = function(e5, t3, n3, r3) {
                  n3 = Number(n3) || 0;
                  var o3 = e5.length - n3;
                  (!r3 || o3 < (r3 = Number(r3))) && (r3 = o3), d2((o3 = t3.length) % 2 == 0, "Invalid hex string"), o3 / 2 < r3 && (r3 = o3 / 2);
                  for (var i3 = 0; i3 < r3; i3++) {
                    var u3 = parseInt(t3.substr(2 * i3, 2), 16);
                    d2(!isNaN(u3), "Invalid hex string"), e5[n3 + i3] = u3;
                  }
                  return f2._charsWritten = 2 * i3, i3;
                }(this, e4, t2, n2);
                break;
              case "utf8":
              case "utf-8":
                i2 = this, u2 = t2, s2 = n2, o2 = f2._charsWritten = c2(T(e4), i2, u2, s2);
                break;
              case "ascii":
              case "binary":
                o2 = b2(this, e4, t2, n2);
                break;
              case "base64":
                i2 = this, u2 = t2, s2 = n2, o2 = f2._charsWritten = c2(M(e4), i2, u2, s2);
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                o2 = m(this, e4, t2, n2);
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return o2;
          }, f2.prototype.toString = function(e4, t2, n2) {
            var r2, o2, i2, u2, s2 = this;
            if (e4 = String(e4 || "utf8").toLowerCase(), t2 = Number(t2) || 0, (n2 = void 0 !== n2 ? Number(n2) : s2.length) === t2)
              return "";
            switch (e4) {
              case "hex":
                r2 = function(e5, t3, n3) {
                  var r3 = e5.length;
                  (!t3 || t3 < 0) && (t3 = 0);
                  (!n3 || n3 < 0 || r3 < n3) && (n3 = r3);
                  for (var o3 = "", i3 = t3; i3 < n3; i3++)
                    o3 += k2(e5[i3]);
                  return o3;
                }(s2, t2, n2);
                break;
              case "utf8":
              case "utf-8":
                r2 = function(e5, t3, n3) {
                  var r3 = "", o3 = "";
                  n3 = Math.min(e5.length, n3);
                  for (var i3 = t3; i3 < n3; i3++)
                    e5[i3] <= 127 ? (r3 += N(o3) + String.fromCharCode(e5[i3]), o3 = "") : o3 += "%" + e5[i3].toString(16);
                  return r3 + N(o3);
                }(s2, t2, n2);
                break;
              case "ascii":
              case "binary":
                r2 = v(s2, t2, n2);
                break;
              case "base64":
                o2 = s2, u2 = n2, r2 = 0 === (i2 = t2) && u2 === o2.length ? a2.fromByteArray(o2) : a2.fromByteArray(o2.slice(i2, u2));
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                r2 = function(e5, t3, n3) {
                  for (var r3 = e5.slice(t3, n3), o3 = "", i3 = 0; i3 < r3.length; i3 += 2)
                    o3 += String.fromCharCode(r3[i3] + 256 * r3[i3 + 1]);
                  return o3;
                }(s2, t2, n2);
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return r2;
          }, f2.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          }, f2.prototype.copy = function(e4, t2, n2, r2) {
            if (t2 = t2 || 0, (r2 = r2 || 0 === r2 ? r2 : this.length) !== (n2 = n2 || 0) && 0 !== e4.length && 0 !== this.length) {
              d2(n2 <= r2, "sourceEnd < sourceStart"), d2(0 <= t2 && t2 < e4.length, "targetStart out of bounds"), d2(0 <= n2 && n2 < this.length, "sourceStart out of bounds"), d2(0 <= r2 && r2 <= this.length, "sourceEnd out of bounds"), r2 > this.length && (r2 = this.length);
              var o2 = (r2 = e4.length - t2 < r2 - n2 ? e4.length - t2 + n2 : r2) - n2;
              if (o2 < 100 || !f2._useTypedArrays)
                for (var i2 = 0; i2 < o2; i2++)
                  e4[i2 + t2] = this[i2 + n2];
              else
                e4._set(this.subarray(n2, n2 + o2), t2);
            }
          }, f2.prototype.slice = function(e4, t2) {
            var n2 = this.length;
            if (e4 = S(e4, n2, 0), t2 = S(t2, n2, n2), f2._useTypedArrays)
              return f2._augment(this.subarray(e4, t2));
            for (var r2 = t2 - e4, o2 = new f2(r2, void 0, true), i2 = 0; i2 < r2; i2++)
              o2[i2] = this[i2 + e4];
            return o2;
          }, f2.prototype.get = function(e4) {
            return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(e4);
          }, f2.prototype.set = function(e4, t2) {
            return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(e4, t2);
          }, f2.prototype.readUInt8 = function(e4, t2) {
            if (t2 || (d2(null != e4, "missing offset"), d2(e4 < this.length, "Trying to read beyond buffer length")), !(e4 >= this.length))
              return this[e4];
          }, f2.prototype.readUInt16LE = function(e4, t2) {
            return o(this, e4, true, t2);
          }, f2.prototype.readUInt16BE = function(e4, t2) {
            return o(this, e4, false, t2);
          }, f2.prototype.readUInt32LE = function(e4, t2) {
            return u(this, e4, true, t2);
          }, f2.prototype.readUInt32BE = function(e4, t2) {
            return u(this, e4, false, t2);
          }, f2.prototype.readInt8 = function(e4, t2) {
            if (t2 || (d2(null != e4, "missing offset"), d2(e4 < this.length, "Trying to read beyond buffer length")), !(e4 >= this.length))
              return 128 & this[e4] ? -1 * (255 - this[e4] + 1) : this[e4];
          }, f2.prototype.readInt16LE = function(e4, t2) {
            return _(this, e4, true, t2);
          }, f2.prototype.readInt16BE = function(e4, t2) {
            return _(this, e4, false, t2);
          }, f2.prototype.readInt32LE = function(e4, t2) {
            return E(this, e4, true, t2);
          }, f2.prototype.readInt32BE = function(e4, t2) {
            return E(this, e4, false, t2);
          }, f2.prototype.readFloatLE = function(e4, t2) {
            return I(this, e4, true, t2);
          }, f2.prototype.readFloatBE = function(e4, t2) {
            return I(this, e4, false, t2);
          }, f2.prototype.readDoubleLE = function(e4, t2) {
            return A(this, e4, true, t2);
          }, f2.prototype.readDoubleBE = function(e4, t2) {
            return A(this, e4, false, t2);
          }, f2.prototype.writeUInt8 = function(e4, t2, n2) {
            n2 || (d2(null != e4, "missing value"), d2(null != t2, "missing offset"), d2(t2 < this.length, "trying to write beyond buffer length"), Y(e4, 255)), t2 >= this.length || (this[t2] = e4);
          }, f2.prototype.writeUInt16LE = function(e4, t2, n2) {
            s(this, e4, t2, true, n2);
          }, f2.prototype.writeUInt16BE = function(e4, t2, n2) {
            s(this, e4, t2, false, n2);
          }, f2.prototype.writeUInt32LE = function(e4, t2, n2) {
            l(this, e4, t2, true, n2);
          }, f2.prototype.writeUInt32BE = function(e4, t2, n2) {
            l(this, e4, t2, false, n2);
          }, f2.prototype.writeInt8 = function(e4, t2, n2) {
            n2 || (d2(null != e4, "missing value"), d2(null != t2, "missing offset"), d2(t2 < this.length, "Trying to write beyond buffer length"), F(e4, 127, -128)), t2 >= this.length || (0 <= e4 ? this.writeUInt8(e4, t2, n2) : this.writeUInt8(255 + e4 + 1, t2, n2));
          }, f2.prototype.writeInt16LE = function(e4, t2, n2) {
            B(this, e4, t2, true, n2);
          }, f2.prototype.writeInt16BE = function(e4, t2, n2) {
            B(this, e4, t2, false, n2);
          }, f2.prototype.writeInt32LE = function(e4, t2, n2) {
            L(this, e4, t2, true, n2);
          }, f2.prototype.writeInt32BE = function(e4, t2, n2) {
            L(this, e4, t2, false, n2);
          }, f2.prototype.writeFloatLE = function(e4, t2, n2) {
            U(this, e4, t2, true, n2);
          }, f2.prototype.writeFloatBE = function(e4, t2, n2) {
            U(this, e4, t2, false, n2);
          }, f2.prototype.writeDoubleLE = function(e4, t2, n2) {
            x(this, e4, t2, true, n2);
          }, f2.prototype.writeDoubleBE = function(e4, t2, n2) {
            x(this, e4, t2, false, n2);
          }, f2.prototype.fill = function(e4, t2, n2) {
            if (t2 = t2 || 0, n2 = n2 || this.length, d2("number" == typeof (e4 = "string" == typeof (e4 = e4 || 0) ? e4.charCodeAt(0) : e4) && !isNaN(e4), "value is not a number"), d2(t2 <= n2, "end < start"), n2 !== t2 && 0 !== this.length) {
              d2(0 <= t2 && t2 < this.length, "start out of bounds"), d2(0 <= n2 && n2 <= this.length, "end out of bounds");
              for (var r2 = t2; r2 < n2; r2++)
                this[r2] = e4;
            }
          }, f2.prototype.inspect = function() {
            for (var e4 = [], t2 = this.length, n2 = 0; n2 < t2; n2++)
              if (e4[n2] = k2(this[n2]), n2 === H.INSPECT_MAX_BYTES) {
                e4[n2 + 1] = "...";
                break;
              }
            return "<Buffer " + e4.join(" ") + ">";
          }, f2.prototype.toArrayBuffer = function() {
            if ("undefined" == typeof Uint8Array)
              throw new Error("Buffer.toArrayBuffer not supported in this browser");
            if (f2._useTypedArrays)
              return new f2(this).buffer;
            for (var e4 = new Uint8Array(this.length), t2 = 0, n2 = e4.length; t2 < n2; t2 += 1)
              e4[t2] = this[t2];
            return e4.buffer;
          };
          var t = f2.prototype;
          function S(e4, t2, n2) {
            return "number" != typeof e4 ? n2 : t2 <= (e4 = ~~e4) ? t2 : 0 <= e4 || 0 <= (e4 += t2) ? e4 : 0;
          }
          function j(e4) {
            return (e4 = ~~Math.ceil(+e4)) < 0 ? 0 : e4;
          }
          function C(e4) {
            return (Array.isArray || function(e5) {
              return "[object Array]" === Object.prototype.toString.call(e5);
            })(e4);
          }
          function k2(e4) {
            return e4 < 16 ? "0" + e4.toString(16) : e4.toString(16);
          }
          function T(e4) {
            for (var t2 = [], n2 = 0; n2 < e4.length; n2++) {
              var r2 = e4.charCodeAt(n2);
              if (r2 <= 127)
                t2.push(e4.charCodeAt(n2));
              else
                for (var o2 = n2, i2 = (55296 <= r2 && r2 <= 57343 && n2++, encodeURIComponent(e4.slice(o2, n2 + 1)).substr(1).split("%")), u2 = 0; u2 < i2.length; u2++)
                  t2.push(parseInt(i2[u2], 16));
            }
            return t2;
          }
          function M(e4) {
            return a2.toByteArray(e4);
          }
          function c2(e4, t2, n2, r2) {
            for (var o2 = 0; o2 < r2 && !(o2 + n2 >= t2.length || o2 >= e4.length); o2++)
              t2[o2 + n2] = e4[o2];
            return o2;
          }
          function N(e4) {
            try {
              return decodeURIComponent(e4);
            } catch (e5) {
              return String.fromCharCode(65533);
            }
          }
          function Y(e4, t2) {
            d2("number" == typeof e4, "cannot write a non-number as a number"), d2(0 <= e4, "specified a negative value for writing an unsigned value"), d2(e4 <= t2, "value is larger than maximum value for type"), d2(Math.floor(e4) === e4, "value has a fractional component");
          }
          function F(e4, t2, n2) {
            d2("number" == typeof e4, "cannot write a non-number as a number"), d2(e4 <= t2, "value larger than maximum allowed value"), d2(n2 <= e4, "value smaller than minimum allowed value"), d2(Math.floor(e4) === e4, "value has a fractional component");
          }
          function D(e4, t2, n2) {
            d2("number" == typeof e4, "cannot write a non-number as a number"), d2(e4 <= t2, "value larger than maximum allowed value"), d2(n2 <= e4, "value smaller than minimum allowed value");
          }
          function d2(e4, t2) {
            if (!e4)
              throw new Error(t2 || "Failed assertion");
          }
          f2._augment = function(e4) {
            return e4._isBuffer = true, e4._get = e4.get, e4._set = e4.set, e4.get = t.get, e4.set = t.set, e4.write = t.write, e4.toString = t.toString, e4.toLocaleString = t.toString, e4.toJSON = t.toJSON, e4.copy = t.copy, e4.slice = t.slice, e4.readUInt8 = t.readUInt8, e4.readUInt16LE = t.readUInt16LE, e4.readUInt16BE = t.readUInt16BE, e4.readUInt32LE = t.readUInt32LE, e4.readUInt32BE = t.readUInt32BE, e4.readInt8 = t.readInt8, e4.readInt16LE = t.readInt16LE, e4.readInt16BE = t.readInt16BE, e4.readInt32LE = t.readInt32LE, e4.readInt32BE = t.readInt32BE, e4.readFloatLE = t.readFloatLE, e4.readFloatBE = t.readFloatBE, e4.readDoubleLE = t.readDoubleLE, e4.readDoubleBE = t.readDoubleBE, e4.writeUInt8 = t.writeUInt8, e4.writeUInt16LE = t.writeUInt16LE, e4.writeUInt16BE = t.writeUInt16BE, e4.writeUInt32LE = t.writeUInt32LE, e4.writeUInt32BE = t.writeUInt32BE, e4.writeInt8 = t.writeInt8, e4.writeInt16LE = t.writeInt16LE, e4.writeInt16BE = t.writeInt16BE, e4.writeInt32LE = t.writeInt32LE, e4.writeInt32BE = t.writeInt32BE, e4.writeFloatLE = t.writeFloatLE, e4.writeFloatBE = t.writeFloatBE, e4.writeDoubleLE = t.writeDoubleLE, e4.writeDoubleBE = t.writeDoubleBE, e4.fill = t.fill, e4.inspect = t.inspect, e4.toArrayBuffer = t.toArrayBuffer, e4;
          };
        }.call(this, O("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, O("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/buffer/index.js", "/node_modules/gulp-browserify/node_modules/buffer");
      }, { "base64-js": 2, buffer: 3, ieee754: 10, lYpoI2: 11 }], 4: [function(c2, d2, e2) {
        !function(e3, t, a2, n, r, o, i, u, s) {
          var a2 = c2("buffer").Buffer, f2 = 4, l = new a2(f2);
          l.fill(0);
          d2.exports = { hash: function(e4, t2, n2, r2) {
            for (var o2 = t2(function(e5, t3) {
              e5.length % f2 != 0 && (n3 = e5.length + (f2 - e5.length % f2), e5 = a2.concat([e5, l], n3));
              for (var n3, r3 = [], o3 = t3 ? e5.readInt32BE : e5.readInt32LE, i3 = 0; i3 < e5.length; i3 += f2)
                r3.push(o3.call(e5, i3));
              return r3;
            }(e4 = a2.isBuffer(e4) ? e4 : new a2(e4), r2), 8 * e4.length), t2 = r2, i2 = new a2(n2), u2 = t2 ? i2.writeInt32BE : i2.writeInt32LE, s2 = 0; s2 < o2.length; s2++)
              u2.call(i2, o2[s2], 4 * s2, true);
            return i2;
          } };
        }.call(this, c2("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c2("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { buffer: 3, lYpoI2: 11 }], 5: [function(v, e2, _) {
        !function(l, c2, u, d2, h, p, g, y, w) {
          var u = v("buffer").Buffer, e3 = v("./sha"), t = v("./sha256"), n = v("./rng"), b2 = { sha1: e3, sha256: t, md5: v("./md5") }, s = 64, a2 = new u(s);
          function r(e4, n2) {
            var r2 = b2[e4 = e4 || "sha1"], o2 = [];
            return r2 || i("algorithm:", e4, "is not yet supported"), { update: function(e5) {
              return u.isBuffer(e5) || (e5 = new u(e5)), o2.push(e5), e5.length, this;
            }, digest: function(e5) {
              var t2 = u.concat(o2), t2 = n2 ? function(e6, t3, n3) {
                u.isBuffer(t3) || (t3 = new u(t3)), u.isBuffer(n3) || (n3 = new u(n3)), t3.length > s ? t3 = e6(t3) : t3.length < s && (t3 = u.concat([t3, a2], s));
                for (var r3 = new u(s), o3 = new u(s), i2 = 0; i2 < s; i2++)
                  r3[i2] = 54 ^ t3[i2], o3[i2] = 92 ^ t3[i2];
                return n3 = e6(u.concat([r3, n3])), e6(u.concat([o3, n3]));
              }(r2, n2, t2) : r2(t2);
              return o2 = null, e5 ? t2.toString(e5) : t2;
            } };
          }
          function i() {
            var e4 = [].slice.call(arguments).join(" ");
            throw new Error([e4, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join("\n"));
          }
          a2.fill(0), _.createHash = function(e4) {
            return r(e4);
          }, _.createHmac = r, _.randomBytes = function(e4, t2) {
            if (!t2 || !t2.call)
              return new u(n(e4));
            try {
              t2.call(this, void 0, new u(n(e4)));
            } catch (e5) {
              t2(e5);
            }
          };
          var o, f2 = ["createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman", "pbkdf2"], m = function(e4) {
            _[e4] = function() {
              i("sorry,", e4, "is not implemented yet");
            };
          };
          for (o in f2)
            m(f2[o], o);
        }.call(this, v("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, v("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./md5": 6, "./rng": 7, "./sha": 8, "./sha256": 9, buffer: 3, lYpoI2: 11 }], 6: [function(w, b2, e2) {
        !function(e3, r, o, i, u, a2, f2, l, y) {
          var t = w("./helpers");
          function n(e4, t2) {
            e4[t2 >> 5] |= 128 << t2 % 32, e4[14 + (t2 + 64 >>> 9 << 4)] = t2;
            for (var n2 = 1732584193, r2 = -271733879, o2 = -1732584194, i2 = 271733878, u2 = 0; u2 < e4.length; u2 += 16) {
              var s2 = n2, a3 = r2, f3 = o2, l2 = i2, n2 = c2(n2, r2, o2, i2, e4[u2 + 0], 7, -680876936), i2 = c2(i2, n2, r2, o2, e4[u2 + 1], 12, -389564586), o2 = c2(o2, i2, n2, r2, e4[u2 + 2], 17, 606105819), r2 = c2(r2, o2, i2, n2, e4[u2 + 3], 22, -1044525330);
              n2 = c2(n2, r2, o2, i2, e4[u2 + 4], 7, -176418897), i2 = c2(i2, n2, r2, o2, e4[u2 + 5], 12, 1200080426), o2 = c2(o2, i2, n2, r2, e4[u2 + 6], 17, -1473231341), r2 = c2(r2, o2, i2, n2, e4[u2 + 7], 22, -45705983), n2 = c2(n2, r2, o2, i2, e4[u2 + 8], 7, 1770035416), i2 = c2(i2, n2, r2, o2, e4[u2 + 9], 12, -1958414417), o2 = c2(o2, i2, n2, r2, e4[u2 + 10], 17, -42063), r2 = c2(r2, o2, i2, n2, e4[u2 + 11], 22, -1990404162), n2 = c2(n2, r2, o2, i2, e4[u2 + 12], 7, 1804603682), i2 = c2(i2, n2, r2, o2, e4[u2 + 13], 12, -40341101), o2 = c2(o2, i2, n2, r2, e4[u2 + 14], 17, -1502002290), n2 = d2(n2, r2 = c2(r2, o2, i2, n2, e4[u2 + 15], 22, 1236535329), o2, i2, e4[u2 + 1], 5, -165796510), i2 = d2(i2, n2, r2, o2, e4[u2 + 6], 9, -1069501632), o2 = d2(o2, i2, n2, r2, e4[u2 + 11], 14, 643717713), r2 = d2(r2, o2, i2, n2, e4[u2 + 0], 20, -373897302), n2 = d2(n2, r2, o2, i2, e4[u2 + 5], 5, -701558691), i2 = d2(i2, n2, r2, o2, e4[u2 + 10], 9, 38016083), o2 = d2(o2, i2, n2, r2, e4[u2 + 15], 14, -660478335), r2 = d2(r2, o2, i2, n2, e4[u2 + 4], 20, -405537848), n2 = d2(n2, r2, o2, i2, e4[u2 + 9], 5, 568446438), i2 = d2(i2, n2, r2, o2, e4[u2 + 14], 9, -1019803690), o2 = d2(o2, i2, n2, r2, e4[u2 + 3], 14, -187363961), r2 = d2(r2, o2, i2, n2, e4[u2 + 8], 20, 1163531501), n2 = d2(n2, r2, o2, i2, e4[u2 + 13], 5, -1444681467), i2 = d2(i2, n2, r2, o2, e4[u2 + 2], 9, -51403784), o2 = d2(o2, i2, n2, r2, e4[u2 + 7], 14, 1735328473), n2 = h(n2, r2 = d2(r2, o2, i2, n2, e4[u2 + 12], 20, -1926607734), o2, i2, e4[u2 + 5], 4, -378558), i2 = h(i2, n2, r2, o2, e4[u2 + 8], 11, -2022574463), o2 = h(o2, i2, n2, r2, e4[u2 + 11], 16, 1839030562), r2 = h(r2, o2, i2, n2, e4[u2 + 14], 23, -35309556), n2 = h(n2, r2, o2, i2, e4[u2 + 1], 4, -1530992060), i2 = h(i2, n2, r2, o2, e4[u2 + 4], 11, 1272893353), o2 = h(o2, i2, n2, r2, e4[u2 + 7], 16, -155497632), r2 = h(r2, o2, i2, n2, e4[u2 + 10], 23, -1094730640), n2 = h(n2, r2, o2, i2, e4[u2 + 13], 4, 681279174), i2 = h(i2, n2, r2, o2, e4[u2 + 0], 11, -358537222), o2 = h(o2, i2, n2, r2, e4[u2 + 3], 16, -722521979), r2 = h(r2, o2, i2, n2, e4[u2 + 6], 23, 76029189), n2 = h(n2, r2, o2, i2, e4[u2 + 9], 4, -640364487), i2 = h(i2, n2, r2, o2, e4[u2 + 12], 11, -421815835), o2 = h(o2, i2, n2, r2, e4[u2 + 15], 16, 530742520), n2 = p(n2, r2 = h(r2, o2, i2, n2, e4[u2 + 2], 23, -995338651), o2, i2, e4[u2 + 0], 6, -198630844), i2 = p(i2, n2, r2, o2, e4[u2 + 7], 10, 1126891415), o2 = p(o2, i2, n2, r2, e4[u2 + 14], 15, -1416354905), r2 = p(r2, o2, i2, n2, e4[u2 + 5], 21, -57434055), n2 = p(n2, r2, o2, i2, e4[u2 + 12], 6, 1700485571), i2 = p(i2, n2, r2, o2, e4[u2 + 3], 10, -1894986606), o2 = p(o2, i2, n2, r2, e4[u2 + 10], 15, -1051523), r2 = p(r2, o2, i2, n2, e4[u2 + 1], 21, -2054922799), n2 = p(n2, r2, o2, i2, e4[u2 + 8], 6, 1873313359), i2 = p(i2, n2, r2, o2, e4[u2 + 15], 10, -30611744), o2 = p(o2, i2, n2, r2, e4[u2 + 6], 15, -1560198380), r2 = p(r2, o2, i2, n2, e4[u2 + 13], 21, 1309151649), n2 = p(n2, r2, o2, i2, e4[u2 + 4], 6, -145523070), i2 = p(i2, n2, r2, o2, e4[u2 + 11], 10, -1120210379), o2 = p(o2, i2, n2, r2, e4[u2 + 2], 15, 718787259), r2 = p(r2, o2, i2, n2, e4[u2 + 9], 21, -343485551), n2 = g(n2, s2), r2 = g(r2, a3), o2 = g(o2, f3), i2 = g(i2, l2);
            }
            return Array(n2, r2, o2, i2);
          }
          function s(e4, t2, n2, r2, o2, i2) {
            return g((t2 = g(g(t2, e4), g(r2, i2))) << o2 | t2 >>> 32 - o2, n2);
          }
          function c2(e4, t2, n2, r2, o2, i2, u2) {
            return s(t2 & n2 | ~t2 & r2, e4, t2, o2, i2, u2);
          }
          function d2(e4, t2, n2, r2, o2, i2, u2) {
            return s(t2 & r2 | n2 & ~r2, e4, t2, o2, i2, u2);
          }
          function h(e4, t2, n2, r2, o2, i2, u2) {
            return s(t2 ^ n2 ^ r2, e4, t2, o2, i2, u2);
          }
          function p(e4, t2, n2, r2, o2, i2, u2) {
            return s(n2 ^ (t2 | ~r2), e4, t2, o2, i2, u2);
          }
          function g(e4, t2) {
            var n2 = (65535 & e4) + (65535 & t2);
            return (e4 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          b2.exports = function(e4) {
            return t.hash(e4, n, 16);
          };
        }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 7: [function(e2, l, t) {
        !function(e3, t2, n, r, o, i, u, s, f2) {
          var a2;
          l.exports = a2 || function(e4) {
            for (var t3, n2 = new Array(e4), r2 = 0; r2 < e4; r2++)
              0 == (3 & r2) && (t3 = 4294967296 * Math.random()), n2[r2] = t3 >>> ((3 & r2) << 3) & 255;
            return n2;
          };
        }.call(this, e2("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e2("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { buffer: 3, lYpoI2: 11 }], 8: [function(c2, d2, e2) {
        !function(e3, t, n, r, o, s, a2, f2, l) {
          var i = c2("./helpers");
          function u(l2, c3) {
            l2[c3 >> 5] |= 128 << 24 - c3 % 32, l2[15 + (c3 + 64 >> 9 << 4)] = c3;
            for (var e4, t2, n2, r2 = Array(80), o2 = 1732584193, i2 = -271733879, u2 = -1732584194, s2 = 271733878, d3 = -1009589776, h = 0; h < l2.length; h += 16) {
              for (var p = o2, g = i2, y = u2, w = s2, b2 = d3, a3 = 0; a3 < 80; a3++) {
                r2[a3] = a3 < 16 ? l2[h + a3] : v(r2[a3 - 3] ^ r2[a3 - 8] ^ r2[a3 - 14] ^ r2[a3 - 16], 1);
                var f3 = m(m(v(o2, 5), (f3 = i2, t2 = u2, n2 = s2, (e4 = a3) < 20 ? f3 & t2 | ~f3 & n2 : !(e4 < 40) && e4 < 60 ? f3 & t2 | f3 & n2 | t2 & n2 : f3 ^ t2 ^ n2)), m(m(d3, r2[a3]), (e4 = a3) < 20 ? 1518500249 : e4 < 40 ? 1859775393 : e4 < 60 ? -1894007588 : -899497514)), d3 = s2, s2 = u2, u2 = v(i2, 30), i2 = o2, o2 = f3;
              }
              o2 = m(o2, p), i2 = m(i2, g), u2 = m(u2, y), s2 = m(s2, w), d3 = m(d3, b2);
            }
            return Array(o2, i2, u2, s2, d3);
          }
          function m(e4, t2) {
            var n2 = (65535 & e4) + (65535 & t2);
            return (e4 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          function v(e4, t2) {
            return e4 << t2 | e4 >>> 32 - t2;
          }
          d2.exports = function(e4) {
            return i.hash(e4, u, 20, true);
          };
        }.call(this, c2("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c2("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 9: [function(c2, d2, e2) {
        !function(e3, t, n, r, u, s, a2, f2, l) {
          function b2(e4, t2) {
            var n2 = (65535 & e4) + (65535 & t2);
            return (e4 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          function o(e4, l2) {
            var c3, d3 = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), t2 = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), n2 = new Array(64);
            e4[l2 >> 5] |= 128 << 24 - l2 % 32, e4[15 + (l2 + 64 >> 9 << 4)] = l2;
            for (var r2, o2, h = 0; h < e4.length; h += 16) {
              for (var i2 = t2[0], u2 = t2[1], s2 = t2[2], p = t2[3], a3 = t2[4], g = t2[5], y = t2[6], w = t2[7], f3 = 0; f3 < 64; f3++)
                n2[f3] = f3 < 16 ? e4[f3 + h] : b2(b2(b2((o2 = n2[f3 - 2], m(o2, 17) ^ m(o2, 19) ^ v(o2, 10)), n2[f3 - 7]), (o2 = n2[f3 - 15], m(o2, 7) ^ m(o2, 18) ^ v(o2, 3))), n2[f3 - 16]), c3 = b2(b2(b2(b2(w, m(o2 = a3, 6) ^ m(o2, 11) ^ m(o2, 25)), a3 & g ^ ~a3 & y), d3[f3]), n2[f3]), r2 = b2(m(r2 = i2, 2) ^ m(r2, 13) ^ m(r2, 22), i2 & u2 ^ i2 & s2 ^ u2 & s2), w = y, y = g, g = a3, a3 = b2(p, c3), p = s2, s2 = u2, u2 = i2, i2 = b2(c3, r2);
              t2[0] = b2(i2, t2[0]), t2[1] = b2(u2, t2[1]), t2[2] = b2(s2, t2[2]), t2[3] = b2(p, t2[3]), t2[4] = b2(a3, t2[4]), t2[5] = b2(g, t2[5]), t2[6] = b2(y, t2[6]), t2[7] = b2(w, t2[7]);
            }
            return t2;
          }
          var i = c2("./helpers"), m = function(e4, t2) {
            return e4 >>> t2 | e4 << 32 - t2;
          }, v = function(e4, t2) {
            return e4 >>> t2;
          };
          d2.exports = function(e4) {
            return i.hash(e4, o, 32, true);
          };
        }.call(this, c2("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c2("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 10: [function(e2, t, f2) {
        !function(e3, t2, n, r, o, i, u, s, a2) {
          f2.read = function(e4, t3, n2, r2, o2) {
            var i2, u2, l = 8 * o2 - r2 - 1, c2 = (1 << l) - 1, d2 = c2 >> 1, s2 = -7, a3 = n2 ? o2 - 1 : 0, f3 = n2 ? -1 : 1, o2 = e4[t3 + a3];
            for (a3 += f3, i2 = o2 & (1 << -s2) - 1, o2 >>= -s2, s2 += l; 0 < s2; i2 = 256 * i2 + e4[t3 + a3], a3 += f3, s2 -= 8)
              ;
            for (u2 = i2 & (1 << -s2) - 1, i2 >>= -s2, s2 += r2; 0 < s2; u2 = 256 * u2 + e4[t3 + a3], a3 += f3, s2 -= 8)
              ;
            if (0 === i2)
              i2 = 1 - d2;
            else {
              if (i2 === c2)
                return u2 ? NaN : 1 / 0 * (o2 ? -1 : 1);
              u2 += Math.pow(2, r2), i2 -= d2;
            }
            return (o2 ? -1 : 1) * u2 * Math.pow(2, i2 - r2);
          }, f2.write = function(e4, t3, l, n2, r2, c2) {
            var o2, i2, u2 = 8 * c2 - r2 - 1, s2 = (1 << u2) - 1, a3 = s2 >> 1, d2 = 23 === r2 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f3 = n2 ? 0 : c2 - 1, h = n2 ? 1 : -1, c2 = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
            for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (i2 = isNaN(t3) ? 1 : 0, o2 = s2) : (o2 = Math.floor(Math.log(t3) / Math.LN2), t3 * (n2 = Math.pow(2, -o2)) < 1 && (o2--, n2 *= 2), 2 <= (t3 += 1 <= o2 + a3 ? d2 / n2 : d2 * Math.pow(2, 1 - a3)) * n2 && (o2++, n2 /= 2), s2 <= o2 + a3 ? (i2 = 0, o2 = s2) : 1 <= o2 + a3 ? (i2 = (t3 * n2 - 1) * Math.pow(2, r2), o2 += a3) : (i2 = t3 * Math.pow(2, a3 - 1) * Math.pow(2, r2), o2 = 0)); 8 <= r2; e4[l + f3] = 255 & i2, f3 += h, i2 /= 256, r2 -= 8)
              ;
            for (o2 = o2 << r2 | i2, u2 += r2; 0 < u2; e4[l + f3] = 255 & o2, f3 += h, o2 /= 256, u2 -= 8)
              ;
            e4[l + f3 - h] |= 128 * c2;
          };
        }.call(this, e2("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e2("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/ieee754/index.js", "/node_modules/gulp-browserify/node_modules/ieee754");
      }, { buffer: 3, lYpoI2: 11 }], 11: [function(e2, h, t) {
        !function(e3, t2, n, r, o, f2, l, c2, d2) {
          var i, u, s;
          function a2() {
          }
          (e3 = h.exports = {}).nextTick = (u = "undefined" != typeof window && window.setImmediate, s = "undefined" != typeof window && window.postMessage && window.addEventListener, u ? function(e4) {
            return window.setImmediate(e4);
          } : s ? (i = [], window.addEventListener("message", function(e4) {
            var t3 = e4.source;
            t3 !== window && null !== t3 || "process-tick" !== e4.data || (e4.stopPropagation(), 0 < i.length && i.shift()());
          }, true), function(e4) {
            i.push(e4), window.postMessage("process-tick", "*");
          }) : function(e4) {
            setTimeout(e4, 0);
          }), e3.title = "browser", e3.browser = true, e3.env = {}, e3.argv = [], e3.on = a2, e3.addListener = a2, e3.once = a2, e3.off = a2, e3.removeListener = a2, e3.removeAllListeners = a2, e3.emit = a2, e3.binding = function(e4) {
            throw new Error("process.binding is not supported");
          }, e3.cwd = function() {
            return "/";
          }, e3.chdir = function(e4) {
            throw new Error("process.chdir is not supported");
          };
        }.call(this, e2("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e2("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/process/browser.js", "/node_modules/gulp-browserify/node_modules/process");
      }, { buffer: 3, lYpoI2: 11 }] }, {}, [1])(1);
    });
  }
});

// node_modules/.pnpm/hls.js@1.2.9/node_modules/hls.js/dist/hls.min.js
var require_hls_min = __commonJS({
  "node_modules/.pnpm/hls.js@1.2.9/node_modules/hls.js/dist/hls.min.js"(exports2, module2) {
    "undefined" != typeof window && function(t, e2) {
      "object" == typeof exports2 && "object" == typeof module2 ? module2.exports = e2() : "function" == typeof define && define.amd ? define([], e2) : "object" == typeof exports2 ? exports2.Hls = e2() : t.Hls = e2();
    }(exports2, () => (() => {
      var t = { 21: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { default: () => u });
        var i2 = function() {
          function t3(t4, e4) {
            this.subtle = void 0, this.aesIV = void 0, this.subtle = t4, this.aesIV = e4;
          }
          return t3.prototype.decrypt = function(t4, e4) {
            return this.subtle.decrypt({ name: "AES-CBC", iv: this.aesIV }, e4, t4);
          }, t3;
        }(), n = function() {
          function t3(t4, e4) {
            this.subtle = void 0, this.key = void 0, this.subtle = t4, this.key = e4;
          }
          return t3.prototype.expandKey = function() {
            return this.subtle.importKey("raw", this.key, { name: "AES-CBC" }, false, ["encrypt", "decrypt"]);
          }, t3;
        }(), a2 = r2(145), s = function() {
          function t3() {
            this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.sBox = new Uint32Array(256), this.invSBox = new Uint32Array(256), this.key = new Uint32Array(0), this.ksRows = 0, this.keySize = 0, this.keySchedule = void 0, this.invKeySchedule = void 0, this.initTable();
          }
          var e4 = t3.prototype;
          return e4.uint8ArrayToUint32Array_ = function(t4) {
            for (var e5 = new DataView(t4), r3 = new Uint32Array(4), i3 = 0; i3 < 4; i3++)
              r3[i3] = e5.getUint32(4 * i3);
            return r3;
          }, e4.initTable = function() {
            var t4 = this.sBox, e5 = this.invSBox, r3 = this.subMix, i3 = r3[0], n2 = r3[1], a3 = r3[2], s2 = r3[3], o2 = this.invSubMix, l2 = o2[0], u2 = o2[1], d2 = o2[2], h = o2[3], c2 = new Uint32Array(256), f2 = 0, g = 0, v = 0;
            for (v = 0; v < 256; v++)
              c2[v] = v < 128 ? v << 1 : v << 1 ^ 283;
            for (v = 0; v < 256; v++) {
              var p = g ^ g << 1 ^ g << 2 ^ g << 3 ^ g << 4;
              p = p >>> 8 ^ 255 & p ^ 99, t4[f2] = p, e5[p] = f2;
              var m = c2[f2], y = c2[m], E = c2[y], T = 257 * c2[p] ^ 16843008 * p;
              i3[f2] = T << 24 | T >>> 8, n2[f2] = T << 16 | T >>> 16, a3[f2] = T << 8 | T >>> 24, s2[f2] = T, T = 16843009 * E ^ 65537 * y ^ 257 * m ^ 16843008 * f2, l2[p] = T << 24 | T >>> 8, u2[p] = T << 16 | T >>> 16, d2[p] = T << 8 | T >>> 24, h[p] = T, f2 ? (f2 = m ^ c2[c2[c2[E ^ m]]], g ^= c2[c2[g]]) : f2 = g = 1;
            }
          }, e4.expandKey = function(t4) {
            for (var e5 = this.uint8ArrayToUint32Array_(t4), r3 = true, i3 = 0; i3 < e5.length && r3; )
              r3 = e5[i3] === this.key[i3], i3++;
            if (!r3) {
              this.key = e5;
              var n2 = this.keySize = e5.length;
              if (4 !== n2 && 6 !== n2 && 8 !== n2)
                throw new Error("Invalid aes key size=" + n2);
              var a3, s2, o2, l2, u2 = this.ksRows = 4 * (n2 + 6 + 1), d2 = this.keySchedule = new Uint32Array(u2), h = this.invKeySchedule = new Uint32Array(u2), c2 = this.sBox, f2 = this.rcon, g = this.invSubMix, v = g[0], p = g[1], m = g[2], y = g[3];
              for (a3 = 0; a3 < u2; a3++)
                a3 < n2 ? o2 = d2[a3] = e5[a3] : (l2 = o2, a3 % n2 == 0 ? (l2 = c2[(l2 = l2 << 8 | l2 >>> 24) >>> 24] << 24 | c2[l2 >>> 16 & 255] << 16 | c2[l2 >>> 8 & 255] << 8 | c2[255 & l2], l2 ^= f2[a3 / n2 | 0] << 24) : n2 > 6 && a3 % n2 == 4 && (l2 = c2[l2 >>> 24] << 24 | c2[l2 >>> 16 & 255] << 16 | c2[l2 >>> 8 & 255] << 8 | c2[255 & l2]), d2[a3] = o2 = (d2[a3 - n2] ^ l2) >>> 0);
              for (s2 = 0; s2 < u2; s2++)
                a3 = u2 - s2, l2 = 3 & s2 ? d2[a3] : d2[a3 - 4], h[s2] = s2 < 4 || a3 <= 4 ? l2 : v[c2[l2 >>> 24]] ^ p[c2[l2 >>> 16 & 255]] ^ m[c2[l2 >>> 8 & 255]] ^ y[c2[255 & l2]], h[s2] = h[s2] >>> 0;
            }
          }, e4.networkToHostOrderSwap = function(t4) {
            return t4 << 24 | (65280 & t4) << 8 | (16711680 & t4) >> 8 | t4 >>> 24;
          }, e4.decrypt = function(t4, e5, r3) {
            for (var i3, n2, a3, s2, o2, l2, u2, d2, h, c2, f2, g, v, p, m = this.keySize + 6, y = this.invKeySchedule, E = this.invSBox, T = this.invSubMix, S = T[0], b2 = T[1], L = T[2], D = T[3], A = this.uint8ArrayToUint32Array_(r3), R = A[0], k2 = A[1], I = A[2], _ = A[3], C = new Int32Array(t4), w = new Int32Array(C.length), O = this.networkToHostOrderSwap; e5 < C.length; ) {
              for (h = O(C[e5]), c2 = O(C[e5 + 1]), f2 = O(C[e5 + 2]), g = O(C[e5 + 3]), o2 = h ^ y[0], l2 = g ^ y[1], u2 = f2 ^ y[2], d2 = c2 ^ y[3], v = 4, p = 1; p < m; p++)
                i3 = S[o2 >>> 24] ^ b2[l2 >> 16 & 255] ^ L[u2 >> 8 & 255] ^ D[255 & d2] ^ y[v], n2 = S[l2 >>> 24] ^ b2[u2 >> 16 & 255] ^ L[d2 >> 8 & 255] ^ D[255 & o2] ^ y[v + 1], a3 = S[u2 >>> 24] ^ b2[d2 >> 16 & 255] ^ L[o2 >> 8 & 255] ^ D[255 & l2] ^ y[v + 2], s2 = S[d2 >>> 24] ^ b2[o2 >> 16 & 255] ^ L[l2 >> 8 & 255] ^ D[255 & u2] ^ y[v + 3], o2 = i3, l2 = n2, u2 = a3, d2 = s2, v += 4;
              i3 = E[o2 >>> 24] << 24 ^ E[l2 >> 16 & 255] << 16 ^ E[u2 >> 8 & 255] << 8 ^ E[255 & d2] ^ y[v], n2 = E[l2 >>> 24] << 24 ^ E[u2 >> 16 & 255] << 16 ^ E[d2 >> 8 & 255] << 8 ^ E[255 & o2] ^ y[v + 1], a3 = E[u2 >>> 24] << 24 ^ E[d2 >> 16 & 255] << 16 ^ E[o2 >> 8 & 255] << 8 ^ E[255 & l2] ^ y[v + 2], s2 = E[d2 >>> 24] << 24 ^ E[o2 >> 16 & 255] << 16 ^ E[l2 >> 8 & 255] << 8 ^ E[255 & u2] ^ y[v + 3], w[e5] = O(i3 ^ R), w[e5 + 1] = O(s2 ^ k2), w[e5 + 2] = O(a3 ^ I), w[e5 + 3] = O(n2 ^ _), R = h, k2 = c2, I = f2, _ = g, e5 += 4;
            }
            return w.buffer;
          }, t3;
        }(), o = r2(93), l = r2(63), u = function() {
          function t3(t4, e5, r3) {
            var i3 = (void 0 === r3 ? {} : r3).removePKCS7Padding, n2 = void 0 === i3 || i3;
            if (this.logEnabled = true, this.observer = void 0, this.config = void 0, this.removePKCS7Padding = void 0, this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null, this.observer = t4, this.config = e5, this.removePKCS7Padding = n2, n2)
              try {
                var a3 = self.crypto;
                a3 && (this.subtle = a3.subtle || a3.webkitSubtle);
              } catch (t5) {
              }
            null === this.subtle && (this.config.enableSoftwareAES = true);
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            this.observer = null;
          }, e4.isSync = function() {
            return this.config.enableSoftwareAES;
          }, e4.flush = function() {
            var t4 = this.currentResult;
            if (t4) {
              var e5, r3, i3, n2 = new Uint8Array(t4);
              return this.reset(), this.removePKCS7Padding ? (i3 = (r3 = (e5 = n2).byteLength) && new DataView(e5.buffer).getUint8(r3 - 1)) ? (0, a2.sliceUint8)(e5, 0, r3 - i3) : e5 : n2;
            }
            this.reset();
          }, e4.reset = function() {
            this.currentResult = null, this.currentIV = null, this.remainderData = null, this.softwareDecrypter && (this.softwareDecrypter = null);
          }, e4.decrypt = function(t4, e5, r3, i3) {
            if (this.config.enableSoftwareAES) {
              this.softwareDecrypt(new Uint8Array(t4), e5, r3);
              var n2 = this.flush();
              n2 && i3(n2.buffer);
            } else
              this.webCryptoDecrypt(new Uint8Array(t4), e5, r3).then(i3);
          }, e4.softwareDecrypt = function(t4, e5, r3) {
            var i3 = this.currentIV, n2 = this.currentResult, o2 = this.remainderData;
            this.logOnce("JS AES decrypt"), o2 && (t4 = (0, l.appendUint8Array)(o2, t4), this.remainderData = null);
            var u2 = this.getValidChunk(t4);
            if (!u2.length)
              return null;
            i3 && (r3 = i3);
            var d2 = this.softwareDecrypter;
            d2 || (d2 = this.softwareDecrypter = new s()), d2.expandKey(e5);
            var h = n2;
            return this.currentResult = d2.decrypt(u2.buffer, 0, r3), this.currentIV = (0, a2.sliceUint8)(u2, -16).buffer, h || null;
          }, e4.webCryptoDecrypt = function(t4, e5, r3) {
            var a3 = this, s2 = this.subtle;
            return this.key === e5 && this.fastAesKey || (this.key = e5, this.fastAesKey = new n(s2, e5)), this.fastAesKey.expandKey().then(function(e6) {
              return s2 ? new i2(s2, r3).decrypt(t4.buffer, e6) : Promise.reject(new Error("web crypto not initialized"));
            }).catch(function(i3) {
              return a3.onWebCryptoError(i3, t4, e5, r3);
            });
          }, e4.onWebCryptoError = function(t4, e5, r3, i3) {
            return o.logger.warn("[decrypter.ts]: WebCrypto Error, disable WebCrypto API:", t4), this.config.enableSoftwareAES = true, this.logEnabled = true, this.softwareDecrypt(e5, r3, i3);
          }, e4.getValidChunk = function(t4) {
            var e5 = t4, r3 = t4.length - t4.length % 16;
            return r3 !== t4.length && (e5 = (0, a2.sliceUint8)(t4, 0, r3), this.remainderData = (0, a2.sliceUint8)(t4, r3)), e5;
          }, e4.logOnce = function(t4) {
            this.logEnabled && (o.logger.log("[decrypter.ts]: " + t4), this.logEnabled = false);
          }, t3;
        }();
      }, 181: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { canParse: () => l, decodeFrame: () => f2, getID3Data: () => s, getID3Frames: () => c2, getTimeStamp: () => u, isFooter: () => a2, isHeader: () => n, isTimeStampFrame: () => d2, testables: () => E, utf8ArrayToStr: () => y });
        var i2, n = function(t3, e4) {
          return e4 + 10 <= t3.length && 73 === t3[e4] && 68 === t3[e4 + 1] && 51 === t3[e4 + 2] && t3[e4 + 3] < 255 && t3[e4 + 4] < 255 && t3[e4 + 6] < 128 && t3[e4 + 7] < 128 && t3[e4 + 8] < 128 && t3[e4 + 9] < 128;
        }, a2 = function(t3, e4) {
          return e4 + 10 <= t3.length && 51 === t3[e4] && 68 === t3[e4 + 1] && 73 === t3[e4 + 2] && t3[e4 + 3] < 255 && t3[e4 + 4] < 255 && t3[e4 + 6] < 128 && t3[e4 + 7] < 128 && t3[e4 + 8] < 128 && t3[e4 + 9] < 128;
        }, s = function(t3, e4) {
          for (var r3 = e4, i3 = 0; n(t3, e4); )
            i3 += 10, i3 += o(t3, e4 + 6), a2(t3, e4 + 10) && (i3 += 10), e4 += i3;
          if (i3 > 0)
            return t3.subarray(r3, r3 + i3);
        }, o = function(t3, e4) {
          var r3 = 0;
          return r3 = (127 & t3[e4]) << 21, r3 |= (127 & t3[e4 + 1]) << 14, (r3 |= (127 & t3[e4 + 2]) << 7) | 127 & t3[e4 + 3];
        }, l = function(t3, e4) {
          return n(t3, e4) && o(t3, e4 + 6) + 10 <= t3.length - e4;
        }, u = function(t3) {
          for (var e4 = c2(t3), r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            if (d2(i3))
              return m(i3);
          }
        }, d2 = function(t3) {
          return t3 && "PRIV" === t3.key && "com.apple.streaming.transportStreamTimestamp" === t3.info;
        }, h = function(t3) {
          var e4 = String.fromCharCode(t3[0], t3[1], t3[2], t3[3]), r3 = o(t3, 4);
          return { type: e4, size: r3, data: t3.subarray(10, 10 + r3) };
        }, c2 = function(t3) {
          for (var e4 = 0, r3 = []; n(t3, e4); ) {
            for (var i3 = o(t3, e4 + 6), s2 = (e4 += 10) + i3; e4 + 8 < s2; ) {
              var l2 = h(t3.subarray(e4)), u2 = f2(l2);
              u2 && r3.push(u2), e4 += l2.size + 10;
            }
            a2(t3, e4) && (e4 += 10);
          }
          return r3;
        }, f2 = function(t3) {
          return "PRIV" === t3.type ? g(t3) : "W" === t3.type[0] ? p(t3) : v(t3);
        }, g = function(t3) {
          if (!(t3.size < 2)) {
            var e4 = y(t3.data, true), r3 = new Uint8Array(t3.data.subarray(e4.length + 1));
            return { key: t3.type, info: e4, data: r3.buffer };
          }
        }, v = function(t3) {
          if (!(t3.size < 2)) {
            if ("TXXX" === t3.type) {
              var e4 = 1, r3 = y(t3.data.subarray(e4), true);
              e4 += r3.length + 1;
              var i3 = y(t3.data.subarray(e4));
              return { key: t3.type, info: r3, data: i3 };
            }
            var n2 = y(t3.data.subarray(1));
            return { key: t3.type, data: n2 };
          }
        }, p = function(t3) {
          if ("WXXX" === t3.type) {
            if (t3.size < 2)
              return;
            var e4 = 1, r3 = y(t3.data.subarray(e4), true);
            e4 += r3.length + 1;
            var i3 = y(t3.data.subarray(e4));
            return { key: t3.type, info: r3, data: i3 };
          }
          var n2 = y(t3.data);
          return { key: t3.type, data: n2 };
        }, m = function(t3) {
          if (8 === t3.data.byteLength) {
            var e4 = new Uint8Array(t3.data), r3 = 1 & e4[3], i3 = (e4[4] << 23) + (e4[5] << 15) + (e4[6] << 7) + e4[7];
            return i3 /= 45, r3 && (i3 += 4772185884e-2), Math.round(i3);
          }
        }, y = function(t3, e4) {
          void 0 === e4 && (e4 = false);
          var r3 = T();
          if (r3) {
            var i3 = r3.decode(t3);
            if (e4) {
              var n2 = i3.indexOf("\0");
              return -1 !== n2 ? i3.substring(0, n2) : i3;
            }
            return i3.replace(/\0/g, "");
          }
          for (var a3, s2, o2, l2 = t3.length, u2 = "", d3 = 0; d3 < l2; ) {
            if (0 === (a3 = t3[d3++]) && e4)
              return u2;
            if (0 !== a3 && 3 !== a3)
              switch (a3 >> 4) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                  u2 += String.fromCharCode(a3);
                  break;
                case 12:
                case 13:
                  s2 = t3[d3++], u2 += String.fromCharCode((31 & a3) << 6 | 63 & s2);
                  break;
                case 14:
                  s2 = t3[d3++], o2 = t3[d3++], u2 += String.fromCharCode((15 & a3) << 12 | (63 & s2) << 6 | (63 & o2) << 0);
              }
          }
          return u2;
        }, E = { decodeTextFrame: v };
        function T() {
          return i2 || void 0 === self.TextDecoder || (i2 = new self.TextDecoder("utf-8")), i2;
        }
      }, 182: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { default: () => o });
        var i2 = r2(544), n = r2(851), a2 = r2(93), s = r2(729);
        function o(t3) {
          var e4 = new s.EventEmitter(), r3 = function(e5, r4) {
            t3.postMessage({ event: e5, data: r4 });
          };
          e4.on(n.Events.FRAG_DECRYPTED, r3), e4.on(n.Events.ERROR, r3), t3.addEventListener("message", function(n2) {
            var s2 = n2.data;
            switch (s2.cmd) {
              case "init":
                var o2 = JSON.parse(s2.config);
                t3.transmuxer = new i2.default(e4, s2.typeSupported, o2, s2.vendor, s2.id), (0, a2.enableLogs)(o2.debug, s2.id), function() {
                  var t4 = function(t5) {
                    a2.logger[t5] = function(e6) {
                      r3("workerLog", { logType: t5, message: e6 });
                    };
                  };
                  for (var e5 in a2.logger)
                    t4(e5);
                }(), r3("init", null);
                break;
              case "configure":
                t3.transmuxer.configure(s2.config);
                break;
              case "demux":
                var u2 = t3.transmuxer.push(s2.data, s2.decryptdata, s2.chunkMeta, s2.state);
                (0, i2.isPromise)(u2) ? u2.then(function(e5) {
                  l(t3, e5);
                }) : l(t3, u2);
                break;
              case "flush":
                var h = s2.chunkMeta, c2 = t3.transmuxer.flush(h);
                (0, i2.isPromise)(c2) ? c2.then(function(e5) {
                  d2(t3, e5, h);
                }) : d2(t3, c2, h);
            }
          });
        }
        function l(t3, e4) {
          if (!((r3 = e4.remuxResult).audio || r3.video || r3.text || r3.id3 || r3.initSegment))
            return false;
          var r3, i3 = [], n2 = e4.remuxResult, a3 = n2.audio, s2 = n2.video;
          return a3 && u(i3, a3), s2 && u(i3, s2), t3.postMessage({ event: "transmuxComplete", data: e4 }, i3), true;
        }
        function u(t3, e4) {
          e4.data1 && t3.push(e4.data1.buffer), e4.data2 && t3.push(e4.data2.buffer);
        }
        function d2(t3, e4, r3) {
          e4.reduce(function(e5, r4) {
            return l(t3, r4) || e5;
          }, false) || t3.postMessage({ event: "transmuxComplete", data: e4[0] }), t3.postMessage({ event: "flush", data: r3 });
        }
      }, 544: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { TransmuxConfig: () => at, TransmuxState: () => st, default: () => rt, isPromise: () => nt });
        var i2 = r2(851), n = r2(973), a2 = r2(21), s = r2(965), o = r2(181), l = r2(856);
        function u(t3, e4) {
          return void 0 === t3 && (t3 = ""), void 0 === e4 && (e4 = 9e4), { type: t3, id: -1, pid: -1, inputTimeScale: e4, sequenceNumber: -1, samples: [], dropped: 0 };
        }
        var d2 = r2(63), h = r2(145), c2 = function() {
          function t3() {
            this._audioTrack = void 0, this._id3Track = void 0, this.frameIndex = 0, this.cachedData = null, this.basePTS = null, this.initPTS = null, this.lastPTS = null;
          }
          var e4 = t3.prototype;
          return e4.resetInitSegment = function(t4, e5, r3, i3) {
            this._id3Track = { type: "id3", id: 3, pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0 };
          }, e4.resetTimeStamp = function(t4) {
            this.initPTS = t4, this.resetContiguity();
          }, e4.resetContiguity = function() {
            this.basePTS = null, this.lastPTS = null, this.frameIndex = 0;
          }, e4.canParse = function(t4, e5) {
            return false;
          }, e4.appendFrame = function(t4, e5, r3) {
          }, e4.demux = function(t4, e5) {
            this.cachedData && (t4 = (0, d2.appendUint8Array)(this.cachedData, t4), this.cachedData = null);
            var r3, i3 = o.getID3Data(t4, 0), n2 = i3 ? i3.length : 0, a3 = this._audioTrack, c3 = this._id3Track, g2 = i3 ? o.getTimeStamp(i3) : void 0, v2 = t4.length;
            for ((null === this.basePTS || 0 === this.frameIndex && (0, s.isFiniteNumber)(g2)) && (this.basePTS = f2(g2, e5, this.initPTS), this.lastPTS = this.basePTS), null === this.lastPTS && (this.lastPTS = this.basePTS), i3 && i3.length > 0 && c3.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i3, type: l.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY }); n2 < v2; ) {
              if (this.canParse(t4, n2)) {
                var p2 = this.appendFrame(a3, t4, n2);
                p2 ? (this.frameIndex++, this.lastPTS = p2.sample.pts, r3 = n2 += p2.length) : n2 = v2;
              } else
                o.canParse(t4, n2) ? (i3 = o.getID3Data(t4, n2), c3.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i3, type: l.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY }), r3 = n2 += i3.length) : n2++;
              if (n2 === v2 && r3 !== v2) {
                var m2 = (0, h.sliceUint8)(t4, r3);
                this.cachedData ? this.cachedData = (0, d2.appendUint8Array)(this.cachedData, m2) : this.cachedData = m2;
              }
            }
            return { audioTrack: a3, videoTrack: u(), id3Track: c3, textTrack: u() };
          }, e4.demuxSampleAes = function(t4, e5, r3) {
            return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"));
          }, e4.flush = function(t4) {
            var e5 = this.cachedData;
            return e5 && (this.cachedData = null, this.demux(e5, 0)), { audioTrack: this._audioTrack, videoTrack: u(), id3Track: this._id3Track, textTrack: u() };
          }, e4.destroy = function() {
          }, t3;
        }(), f2 = function(t3, e4, r3) {
          return (0, s.isFiniteNumber)(t3) ? 90 * t3 : 9e4 * e4 + (r3 || 0);
        };
        const g = c2;
        var v = r2(93);
        function p(t3, e4) {
          return 255 === t3[e4] && 240 == (246 & t3[e4 + 1]);
        }
        function m(t3, e4) {
          return 1 & t3[e4 + 1] ? 7 : 9;
        }
        function y(t3, e4) {
          return (3 & t3[e4 + 3]) << 11 | t3[e4 + 4] << 3 | (224 & t3[e4 + 5]) >>> 5;
        }
        function E(t3, e4) {
          return e4 + 1 < t3.length && p(t3, e4);
        }
        function T(t3, e4) {
          if (E(t3, e4)) {
            var r3 = m(t3, e4);
            if (e4 + r3 >= t3.length)
              return false;
            var i3 = y(t3, e4);
            if (i3 <= r3)
              return false;
            var n2 = e4 + i3;
            return n2 === t3.length || E(t3, n2);
          }
          return false;
        }
        function S(t3, e4, r3, a3, s2) {
          if (!t3.samplerate) {
            var o2 = function(t4, e5, r4, a4) {
              var s3, o3, l2, u2, d3 = navigator.userAgent.toLowerCase(), h2 = a4, c3 = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
              s3 = 1 + ((192 & e5[r4 + 2]) >>> 6);
              var f3 = (60 & e5[r4 + 2]) >>> 2;
              if (!(f3 > c3.length - 1))
                return l2 = (1 & e5[r4 + 2]) << 2, l2 |= (192 & e5[r4 + 3]) >>> 6, v.logger.log("manifest codec:" + a4 + ", ADTS type:" + s3 + ", samplingIndex:" + f3), /firefox/i.test(d3) ? f3 >= 6 ? (s3 = 5, u2 = new Array(4), o3 = f3 - 3) : (s3 = 2, u2 = new Array(2), o3 = f3) : -1 !== d3.indexOf("android") ? (s3 = 2, u2 = new Array(2), o3 = f3) : (s3 = 5, u2 = new Array(4), a4 && (-1 !== a4.indexOf("mp4a.40.29") || -1 !== a4.indexOf("mp4a.40.5")) || !a4 && f3 >= 6 ? o3 = f3 - 3 : ((a4 && -1 !== a4.indexOf("mp4a.40.2") && (f3 >= 6 && 1 === l2 || /vivaldi/i.test(d3)) || !a4 && 1 === l2) && (s3 = 2, u2 = new Array(2)), o3 = f3)), u2[0] = s3 << 3, u2[0] |= (14 & f3) >> 1, u2[1] |= (1 & f3) << 7, u2[1] |= l2 << 3, 5 === s3 && (u2[1] |= (14 & o3) >> 1, u2[2] = (1 & o3) << 7, u2[2] |= 8, u2[3] = 0), { config: u2, samplerate: c3[f3], channelCount: l2, codec: "mp4a.40." + s3, manifestCodec: h2 };
              t4.trigger(i2.Events.ERROR, { type: n.ErrorTypes.MEDIA_ERROR, details: n.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: "invalid ADTS sampling index:" + f3 });
            }(e4, r3, a3, s2);
            if (!o2)
              return;
            t3.config = o2.config, t3.samplerate = o2.samplerate, t3.channelCount = o2.channelCount, t3.codec = o2.codec, t3.manifestCodec = o2.manifestCodec, v.logger.log("parsed codec:" + t3.codec + ", rate:" + o2.samplerate + ", channels:" + o2.channelCount);
          }
        }
        function b2(t3) {
          return 9216e4 / t3;
        }
        function L(t3, e4, r3, i3, n2) {
          var a3, s2 = i3 + n2 * b2(t3.samplerate), o2 = function(t4, e5) {
            var r4 = m(t4, e5);
            if (e5 + r4 <= t4.length) {
              var i4 = y(t4, e5) - r4;
              if (i4 > 0)
                return { headerLength: r4, frameLength: i4 };
            }
          }(e4, r3);
          if (o2) {
            var l2 = o2.frameLength, u2 = o2.headerLength, d3 = u2 + l2, h2 = Math.max(0, r3 + d3 - e4.length);
            h2 ? (a3 = new Uint8Array(d3 - u2)).set(e4.subarray(r3 + u2, e4.length), 0) : a3 = e4.subarray(r3 + u2, r3 + d3);
            var c3 = { unit: a3, pts: s2 };
            return h2 || t3.samples.push(c3), { sample: c3, length: d3, missing: h2 };
          }
          var f3 = e4.length - r3;
          return (a3 = new Uint8Array(f3)).set(e4.subarray(r3, e4.length), 0), { sample: { unit: a3, pts: s2 }, length: f3, missing: -1 };
        }
        function D(t3, e4) {
          return D = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, D(t3, e4);
        }
        const A = function(t3) {
          var e4, r3;
          function i3(e5, r4) {
            var i4;
            return (i4 = t3.call(this) || this).observer = void 0, i4.config = void 0, i4.observer = e5, i4.config = r4, i4;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, D(e4, r3);
          var n2 = i3.prototype;
          return n2.resetInitSegment = function(e5, r4, i4, n3) {
            t3.prototype.resetInitSegment.call(this, e5, r4, i4, n3), this._audioTrack = { container: "audio/adts", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "aac", samples: [], manifestCodec: r4, duration: n3, inputTimeScale: 9e4, dropped: 0 };
          }, i3.probe = function(t4) {
            if (!t4)
              return false;
            for (var e5 = (o.getID3Data(t4, 0) || []).length, r4 = t4.length; e5 < r4; e5++)
              if (T(t4, e5))
                return v.logger.log("ADTS sync word found !"), true;
            return false;
          }, n2.canParse = function(t4, e5) {
            return function(t5, e6) {
              return function(t6, e7) {
                return e7 + 5 < t6.length;
              }(t5, e6) && p(t5, e6) && y(t5, e6) <= t5.length - e6;
            }(t4, e5);
          }, n2.appendFrame = function(t4, e5, r4) {
            S(t4, this.observer, e5, r4, t4.manifestCodec);
            var i4 = L(t4, e5, r4, this.basePTS, this.frameIndex);
            if (i4 && 0 === i4.missing)
              return i4;
          }, i3;
        }(g);
        var R = /\/emsg[-/]ID3/i;
        const k2 = function() {
          function t3(t4, e5) {
            this.remainderData = null, this.timeOffset = 0, this.config = void 0, this.videoTrack = void 0, this.audioTrack = void 0, this.id3Track = void 0, this.txtTrack = void 0, this.config = e5;
          }
          var e4 = t3.prototype;
          return e4.resetTimeStamp = function() {
          }, e4.resetInitSegment = function(t4, e5, r3, i3) {
            var n2 = (0, d2.parseInitSegment)(t4), a3 = this.videoTrack = u("video", 1), s2 = this.audioTrack = u("audio", 1), o2 = this.txtTrack = u("text", 1);
            if (this.id3Track = u("id3", 1), this.timeOffset = 0, n2.video) {
              var l2 = n2.video, h2 = l2.id, c3 = l2.timescale, f3 = l2.codec;
              a3.id = h2, a3.timescale = o2.timescale = c3, a3.codec = f3;
            }
            if (n2.audio) {
              var g2 = n2.audio, v2 = g2.id, p2 = g2.timescale, m2 = g2.codec;
              s2.id = v2, s2.timescale = p2, s2.codec = m2;
            }
            o2.id = d2.RemuxerTrackIdConfig.text, a3.sampleDuration = 0, a3.duration = s2.duration = i3;
          }, e4.resetContiguity = function() {
          }, t3.probe = function(t4) {
            return t4 = t4.length > 16384 ? t4.subarray(0, 16384) : t4, (0, d2.findBox)(t4, ["moof"]).length > 0;
          }, e4.demux = function(t4, e5) {
            this.timeOffset = e5;
            var r3 = t4, i3 = this.videoTrack, n2 = this.txtTrack;
            if (this.config.progressive) {
              this.remainderData && (r3 = (0, d2.appendUint8Array)(this.remainderData, t4));
              var a3 = (0, d2.segmentValidRange)(r3);
              this.remainderData = a3.remainder, i3.samples = a3.valid || new Uint8Array();
            } else
              i3.samples = r3;
            var s2 = this.extractID3Track(i3, e5);
            return n2.samples = (0, d2.parseSamples)(e5, i3), { videoTrack: i3, audioTrack: this.audioTrack, id3Track: s2, textTrack: this.txtTrack };
          }, e4.flush = function() {
            var t4 = this.timeOffset, e5 = this.videoTrack, r3 = this.txtTrack;
            e5.samples = this.remainderData || new Uint8Array(), this.remainderData = null;
            var i3 = this.extractID3Track(e5, this.timeOffset);
            return r3.samples = (0, d2.parseSamples)(t4, e5), { videoTrack: e5, audioTrack: u(), id3Track: i3, textTrack: u() };
          }, e4.extractID3Track = function(t4, e5) {
            var r3 = this.id3Track;
            if (t4.samples.length) {
              var i3 = (0, d2.findBox)(t4.samples, ["emsg"]);
              i3 && i3.forEach(function(t5) {
                var i4 = (0, d2.parseEmsg)(t5);
                if (R.test(i4.schemeIdUri)) {
                  var n2 = (0, s.isFiniteNumber)(i4.presentationTime) ? i4.presentationTime / i4.timeScale : e5 + i4.presentationTimeDelta / i4.timeScale, a3 = 4294967295 === i4.eventDuration ? Number.POSITIVE_INFINITY : i4.eventDuration / i4.timeScale;
                  a3 <= 1e-3 && (a3 = Number.POSITIVE_INFINITY);
                  var o2 = i4.payload;
                  r3.samples.push({ data: o2, len: o2.byteLength, dts: n2, pts: n2, type: l.MetadataSchema.emsg, duration: a3 });
                }
              });
            }
            return r3;
          }, e4.demuxSampleAes = function(t4, e5, r3) {
            return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"));
          }, e4.destroy = function() {
          }, t3;
        }();
        var I = null, _ = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160], C = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3], w = [[0, 72, 144, 12], [0, 0, 0, 0], [0, 72, 144, 12], [0, 144, 144, 12]], O = [0, 1, 1, 4];
        function x(t3, e4, r3, i3, n2) {
          if (!(r3 + 24 > e4.length)) {
            var a3 = P(e4, r3);
            if (a3 && r3 + a3.frameLength <= e4.length) {
              var s2 = i3 + n2 * (9e4 * a3.samplesPerFrame / a3.sampleRate), o2 = { unit: e4.subarray(r3, r3 + a3.frameLength), pts: s2, dts: s2 };
              return t3.config = [], t3.channelCount = a3.channelCount, t3.samplerate = a3.sampleRate, t3.samples.push(o2), { sample: o2, length: a3.frameLength, missing: 0 };
            }
          }
        }
        function P(t3, e4) {
          var r3 = t3[e4 + 1] >> 3 & 3, i3 = t3[e4 + 1] >> 1 & 3, n2 = t3[e4 + 2] >> 4 & 15, a3 = t3[e4 + 2] >> 2 & 3;
          if (1 !== r3 && 0 !== n2 && 15 !== n2 && 3 !== a3) {
            var s2 = t3[e4 + 2] >> 1 & 1, o2 = t3[e4 + 3] >> 6, l2 = 1e3 * _[14 * (3 === r3 ? 3 - i3 : 3 === i3 ? 3 : 4) + n2 - 1], u2 = C[3 * (3 === r3 ? 0 : 2 === r3 ? 1 : 2) + a3], d3 = 3 === o2 ? 1 : 2, h2 = w[r3][i3], c3 = O[i3], f3 = 8 * h2 * c3, g2 = Math.floor(h2 * l2 / u2 + s2) * c3;
            if (null === I) {
              var v2 = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
              I = v2 ? parseInt(v2[1]) : 0;
            }
            return !!I && I <= 87 && 2 === i3 && l2 >= 224e3 && 0 === o2 && (t3[e4 + 3] = 128 | t3[e4 + 3]), { sampleRate: u2, channelCount: d3, frameLength: g2, samplesPerFrame: f3 };
          }
        }
        function F(t3, e4) {
          return 255 === t3[e4] && 224 == (224 & t3[e4 + 1]) && 0 != (6 & t3[e4 + 1]);
        }
        function M(t3, e4) {
          return e4 + 1 < t3.length && F(t3, e4);
        }
        function N(t3, e4) {
          if (e4 + 1 < t3.length && F(t3, e4)) {
            var r3 = P(t3, e4), i3 = 4;
            null != r3 && r3.frameLength && (i3 = r3.frameLength);
            var n2 = e4 + i3;
            return n2 === t3.length || M(t3, n2);
          }
          return false;
        }
        const U = function() {
          function t3(t4) {
            this.data = void 0, this.bytesAvailable = void 0, this.word = void 0, this.bitsAvailable = void 0, this.data = t4, this.bytesAvailable = t4.byteLength, this.word = 0, this.bitsAvailable = 0;
          }
          var e4 = t3.prototype;
          return e4.loadWord = function() {
            var t4 = this.data, e5 = this.bytesAvailable, r3 = t4.byteLength - e5, i3 = new Uint8Array(4), n2 = Math.min(4, e5);
            if (0 === n2)
              throw new Error("no bytes available");
            i3.set(t4.subarray(r3, r3 + n2)), this.word = new DataView(i3.buffer).getUint32(0), this.bitsAvailable = 8 * n2, this.bytesAvailable -= n2;
          }, e4.skipBits = function(t4) {
            var e5;
            this.bitsAvailable > t4 ? (this.word <<= t4, this.bitsAvailable -= t4) : (t4 -= this.bitsAvailable, t4 -= (e5 = t4 >> 3) >> 3, this.bytesAvailable -= e5, this.loadWord(), this.word <<= t4, this.bitsAvailable -= t4);
          }, e4.readBits = function(t4) {
            var e5 = Math.min(this.bitsAvailable, t4), r3 = this.word >>> 32 - e5;
            return t4 > 32 && v.logger.error("Cannot read more than 32 bits at a time"), this.bitsAvailable -= e5, this.bitsAvailable > 0 ? this.word <<= e5 : this.bytesAvailable > 0 && this.loadWord(), (e5 = t4 - e5) > 0 && this.bitsAvailable ? r3 << e5 | this.readBits(e5) : r3;
          }, e4.skipLZ = function() {
            var t4;
            for (t4 = 0; t4 < this.bitsAvailable; ++t4)
              if (0 != (this.word & 2147483648 >>> t4))
                return this.word <<= t4, this.bitsAvailable -= t4, t4;
            return this.loadWord(), t4 + this.skipLZ();
          }, e4.skipUEG = function() {
            this.skipBits(1 + this.skipLZ());
          }, e4.skipEG = function() {
            this.skipBits(1 + this.skipLZ());
          }, e4.readUEG = function() {
            var t4 = this.skipLZ();
            return this.readBits(t4 + 1) - 1;
          }, e4.readEG = function() {
            var t4 = this.readUEG();
            return 1 & t4 ? 1 + t4 >>> 1 : -1 * (t4 >>> 1);
          }, e4.readBoolean = function() {
            return 1 === this.readBits(1);
          }, e4.readUByte = function() {
            return this.readBits(8);
          }, e4.readUShort = function() {
            return this.readBits(16);
          }, e4.readUInt = function() {
            return this.readBits(32);
          }, e4.skipScalingList = function(t4) {
            for (var e5 = 8, r3 = 8, i3 = 0; i3 < t4; i3++)
              0 !== r3 && (r3 = (e5 + this.readEG() + 256) % 256), e5 = 0 === r3 ? e5 : r3;
          }, e4.readSPS = function() {
            var t4, e5, r3, i3 = 0, n2 = 0, a3 = 0, s2 = 0, o2 = this.readUByte.bind(this), l2 = this.readBits.bind(this), u2 = this.readUEG.bind(this), d3 = this.readBoolean.bind(this), h2 = this.skipBits.bind(this), c3 = this.skipEG.bind(this), f3 = this.skipUEG.bind(this), g2 = this.skipScalingList.bind(this);
            o2();
            var v2 = o2();
            if (l2(5), h2(3), o2(), f3(), 100 === v2 || 110 === v2 || 122 === v2 || 244 === v2 || 44 === v2 || 83 === v2 || 86 === v2 || 118 === v2 || 128 === v2) {
              var p2 = u2();
              if (3 === p2 && h2(1), f3(), f3(), h2(1), d3())
                for (e5 = 3 !== p2 ? 8 : 12, r3 = 0; r3 < e5; r3++)
                  d3() && g2(r3 < 6 ? 16 : 64);
            }
            f3();
            var m2 = u2();
            if (0 === m2)
              u2();
            else if (1 === m2)
              for (h2(1), c3(), c3(), t4 = u2(), r3 = 0; r3 < t4; r3++)
                c3();
            f3(), h2(1);
            var y2 = u2(), E2 = u2(), T2 = l2(1);
            0 === T2 && h2(1), h2(1), d3() && (i3 = u2(), n2 = u2(), a3 = u2(), s2 = u2());
            var S2 = [1, 1];
            if (d3() && d3())
              switch (o2()) {
                case 1:
                  S2 = [1, 1];
                  break;
                case 2:
                  S2 = [12, 11];
                  break;
                case 3:
                  S2 = [10, 11];
                  break;
                case 4:
                  S2 = [16, 11];
                  break;
                case 5:
                  S2 = [40, 33];
                  break;
                case 6:
                  S2 = [24, 11];
                  break;
                case 7:
                  S2 = [20, 11];
                  break;
                case 8:
                  S2 = [32, 11];
                  break;
                case 9:
                  S2 = [80, 33];
                  break;
                case 10:
                  S2 = [18, 11];
                  break;
                case 11:
                  S2 = [15, 11];
                  break;
                case 12:
                  S2 = [64, 33];
                  break;
                case 13:
                  S2 = [160, 99];
                  break;
                case 14:
                  S2 = [4, 3];
                  break;
                case 15:
                  S2 = [3, 2];
                  break;
                case 16:
                  S2 = [2, 1];
                  break;
                case 255:
                  S2 = [o2() << 8 | o2(), o2() << 8 | o2()];
              }
            return { width: Math.ceil(16 * (y2 + 1) - 2 * i3 - 2 * n2), height: (2 - T2) * (E2 + 1) * 16 - (T2 ? 2 : 4) * (a3 + s2), pixelRatio: S2 };
          }, e4.readSliceType = function() {
            return this.readUByte(), this.readUEG(), this.readUEG();
          }, t3;
        }(), B = function() {
          function t3(t4, e5, r3) {
            this.keyData = void 0, this.decrypter = void 0, this.keyData = r3, this.decrypter = new a2.default(t4, e5, { removePKCS7Padding: false });
          }
          var e4 = t3.prototype;
          return e4.decryptBuffer = function(t4, e5) {
            this.decrypter.decrypt(t4, this.keyData.key.buffer, this.keyData.iv.buffer, e5);
          }, e4.decryptAacSample = function(t4, e5, r3, i3) {
            var n2 = t4[e5].unit;
            if (!(n2.length <= 16)) {
              var a3 = n2.subarray(16, n2.length - n2.length % 16), s2 = a3.buffer.slice(a3.byteOffset, a3.byteOffset + a3.length), o2 = this;
              this.decryptBuffer(s2, function(a4) {
                var s3 = new Uint8Array(a4);
                n2.set(s3, 16), i3 || o2.decryptAacSamples(t4, e5 + 1, r3);
              });
            }
          }, e4.decryptAacSamples = function(t4, e5, r3) {
            for (; ; e5++) {
              if (e5 >= t4.length)
                return void r3();
              if (!(t4[e5].unit.length < 32)) {
                var i3 = this.decrypter.isSync();
                if (this.decryptAacSample(t4, e5, r3, i3), !i3)
                  return;
              }
            }
          }, e4.getAvcEncryptedData = function(t4) {
            for (var e5 = 16 * Math.floor((t4.length - 48) / 160) + 16, r3 = new Int8Array(e5), i3 = 0, n2 = 32; n2 < t4.length - 16; n2 += 160, i3 += 16)
              r3.set(t4.subarray(n2, n2 + 16), i3);
            return r3;
          }, e4.getAvcDecryptedUnit = function(t4, e5) {
            for (var r3 = new Uint8Array(e5), i3 = 0, n2 = 32; n2 < t4.length - 16; n2 += 160, i3 += 16)
              t4.set(r3.subarray(i3, i3 + 16), n2);
            return t4;
          }, e4.decryptAvcSample = function(t4, e5, r3, i3, n2, a3) {
            var s2 = (0, d2.discardEPB)(n2.data), o2 = this.getAvcEncryptedData(s2), l2 = this;
            this.decryptBuffer(o2.buffer, function(o3) {
              n2.data = l2.getAvcDecryptedUnit(s2, o3), a3 || l2.decryptAvcSamples(t4, e5, r3 + 1, i3);
            });
          }, e4.decryptAvcSamples = function(t4, e5, r3, i3) {
            if (t4 instanceof Uint8Array)
              throw new Error("Cannot decrypt samples of type Uint8Array");
            for (; ; e5++, r3 = 0) {
              if (e5 >= t4.length)
                return void i3();
              for (var n2 = t4[e5].units; !(r3 >= n2.length); r3++) {
                var a3 = n2[r3];
                if (!(a3.data.length <= 48 || 1 !== a3.type && 5 !== a3.type)) {
                  var s2 = this.decrypter.isSync();
                  if (this.decryptAvcSample(t4, e5, r3, i3, a3, s2), !s2)
                    return;
                }
              }
            }
          }, t3;
        }();
        function G() {
          return G = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, G.apply(this, arguments);
        }
        var K = 188;
        function H(t3, e4, r3, i3) {
          return { key: t3, frame: false, pts: e4, dts: r3, units: [], debug: i3, length: 0 };
        }
        function j(t3, e4) {
          return (31 & t3[e4 + 10]) << 8 | t3[e4 + 11];
        }
        function V(t3, e4, r3, i3) {
          var n2 = { audio: -1, avc: -1, id3: -1, segmentCodec: "aac" }, a3 = e4 + 3 + ((15 & t3[e4 + 1]) << 8 | t3[e4 + 2]) - 4;
          for (e4 += 12 + ((15 & t3[e4 + 10]) << 8 | t3[e4 + 11]); e4 < a3; ) {
            var s2 = (31 & t3[e4 + 1]) << 8 | t3[e4 + 2];
            switch (t3[e4]) {
              case 207:
                if (!i3) {
                  v.logger.log("ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream");
                  break;
                }
              case 15:
                -1 === n2.audio && (n2.audio = s2);
                break;
              case 21:
                -1 === n2.id3 && (n2.id3 = s2);
                break;
              case 219:
                if (!i3) {
                  v.logger.log("H.264 with AES-128-CBC slice encryption found in unencrypted stream");
                  break;
                }
              case 27:
                -1 === n2.avc && (n2.avc = s2);
                break;
              case 3:
              case 4:
                true !== r3.mpeg && true !== r3.mp3 ? v.logger.log("MPEG audio found, not supported in this browser") : -1 === n2.audio && (n2.audio = s2, n2.segmentCodec = "mp3");
                break;
              case 36:
                v.logger.warn("Unsupported HEVC stream type found");
            }
            e4 += 5 + ((15 & t3[e4 + 3]) << 8 | t3[e4 + 4]);
          }
          return n2;
        }
        function W(t3) {
          var e4, r3, i3, n2, a3, s2 = 0, o2 = t3.data;
          if (!t3 || 0 === t3.size)
            return null;
          for (; o2[0].length < 19 && o2.length > 1; ) {
            var l2 = new Uint8Array(o2[0].length + o2[1].length);
            l2.set(o2[0]), l2.set(o2[1], o2[0].length), o2[0] = l2, o2.splice(1, 1);
          }
          if (1 === ((e4 = o2[0])[0] << 16) + (e4[1] << 8) + e4[2]) {
            if ((r3 = (e4[4] << 8) + e4[5]) && r3 > t3.size - 6)
              return null;
            var u2 = e4[7];
            192 & u2 && (n2 = 536870912 * (14 & e4[9]) + 4194304 * (255 & e4[10]) + 16384 * (254 & e4[11]) + 128 * (255 & e4[12]) + (254 & e4[13]) / 2, 64 & u2 ? n2 - (a3 = 536870912 * (14 & e4[14]) + 4194304 * (255 & e4[15]) + 16384 * (254 & e4[16]) + 128 * (255 & e4[17]) + (254 & e4[18]) / 2) > 54e5 && (v.logger.warn(Math.round((n2 - a3) / 9e4) + "s delta between PTS and DTS, align them"), n2 = a3) : a3 = n2);
            var d3 = (i3 = e4[8]) + 9;
            if (t3.size <= d3)
              return null;
            t3.size -= d3;
            for (var h2 = new Uint8Array(t3.size), c3 = 0, f3 = o2.length; c3 < f3; c3++) {
              var g2 = (e4 = o2[c3]).byteLength;
              if (d3) {
                if (d3 > g2) {
                  d3 -= g2;
                  continue;
                }
                e4 = e4.subarray(d3), g2 -= d3, d3 = 0;
              }
              h2.set(e4, s2), s2 += g2;
            }
            return r3 && (r3 -= i3 + 3), { data: h2, pts: n2, dts: a3, len: r3 };
          }
          return null;
        }
        function Y(t3, e4) {
          if (t3.units.length && t3.frame) {
            if (void 0 === t3.pts) {
              var r3 = e4.samples, i3 = r3.length;
              if (!i3)
                return void e4.dropped++;
              var n2 = r3[i3 - 1];
              t3.pts = n2.pts, t3.dts = n2.dts;
            }
            e4.samples.push(t3);
          }
          t3.debug.length && v.logger.log(t3.pts + "/" + t3.dts + ":" + t3.debug);
        }
        const q = function() {
          function t3(t4, e5, r3) {
            this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.sampleAes = null, this.pmtParsed = false, this.audioCodec = void 0, this.videoCodec = void 0, this._duration = 0, this._pmtId = -1, this._avcTrack = void 0, this._audioTrack = void 0, this._id3Track = void 0, this._txtTrack = void 0, this.aacOverFlow = null, this.avcSample = null, this.remainderData = null, this.observer = t4, this.config = e5, this.typeSupported = r3;
          }
          t3.probe = function(e5) {
            var r3 = t3.syncOffset(e5);
            return r3 > 0 && v.logger.warn("MPEG2-TS detected but first sync word found @ offset " + r3), -1 !== r3;
          }, t3.syncOffset = function(t4) {
            for (var e5 = Math.min(940, t4.length - 376) + 1, r3 = 0; r3 < e5; ) {
              if (71 === t4[r3] && 71 === t4[r3 + K])
                return r3;
              r3++;
            }
            return -1;
          }, t3.createTrack = function(t4, e5) {
            return { container: "video" === t4 || "audio" === t4 ? "video/mp2t" : void 0, type: t4, id: d2.RemuxerTrackIdConfig[t4], pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0, duration: "audio" === t4 ? e5 : void 0 };
          };
          var e4 = t3.prototype;
          return e4.resetInitSegment = function(e5, r3, i3, n2) {
            this.pmtParsed = false, this._pmtId = -1, this._avcTrack = t3.createTrack("video"), this._audioTrack = t3.createTrack("audio", n2), this._id3Track = t3.createTrack("id3"), this._txtTrack = t3.createTrack("text"), this._audioTrack.segmentCodec = "aac", this.aacOverFlow = null, this.avcSample = null, this.remainderData = null, this.audioCodec = r3, this.videoCodec = i3, this._duration = n2;
          }, e4.resetTimeStamp = function() {
          }, e4.resetContiguity = function() {
            var t4 = this._audioTrack, e5 = this._avcTrack, r3 = this._id3Track;
            t4 && (t4.pesData = null), e5 && (e5.pesData = null), r3 && (r3.pesData = null), this.aacOverFlow = null, this.avcSample = null, this.remainderData = null;
          }, e4.demux = function(e5, r3, a3, s2) {
            var o2;
            void 0 === a3 && (a3 = false), void 0 === s2 && (s2 = false), a3 || (this.sampleAes = null);
            var l2 = this._avcTrack, u2 = this._audioTrack, h2 = this._id3Track, c3 = this._txtTrack, f3 = l2.pid, g2 = l2.pesData, p2 = u2.pid, m2 = h2.pid, y2 = u2.pesData, E2 = h2.pesData, T2 = null, S2 = this.pmtParsed, b3 = this._pmtId, L2 = e5.length;
            if (this.remainderData && (L2 = (e5 = (0, d2.appendUint8Array)(this.remainderData, e5)).length, this.remainderData = null), L2 < K && !s2)
              return this.remainderData = e5, { audioTrack: u2, videoTrack: l2, id3Track: h2, textTrack: c3 };
            var D2 = Math.max(0, t3.syncOffset(e5));
            (L2 -= (L2 - D2) % K) < e5.byteLength && !s2 && (this.remainderData = new Uint8Array(e5.buffer, L2, e5.buffer.byteLength - L2));
            for (var A2 = 0, R2 = D2; R2 < L2; R2 += K)
              if (71 === e5[R2]) {
                var k3 = !!(64 & e5[R2 + 1]), I2 = ((31 & e5[R2 + 1]) << 8) + e5[R2 + 2], _2 = void 0;
                if ((48 & e5[R2 + 3]) >> 4 > 1) {
                  if ((_2 = R2 + 5 + e5[R2 + 4]) === R2 + K)
                    continue;
                } else
                  _2 = R2 + 4;
                switch (I2) {
                  case f3:
                    k3 && (g2 && (o2 = W(g2)) && this.parseAVCPES(l2, c3, o2, false), g2 = { data: [], size: 0 }), g2 && (g2.data.push(e5.subarray(_2, R2 + K)), g2.size += R2 + K - _2);
                    break;
                  case p2:
                    if (k3) {
                      if (y2 && (o2 = W(y2)))
                        switch (u2.segmentCodec) {
                          case "aac":
                            this.parseAACPES(u2, o2);
                            break;
                          case "mp3":
                            this.parseMPEGPES(u2, o2);
                        }
                      y2 = { data: [], size: 0 };
                    }
                    y2 && (y2.data.push(e5.subarray(_2, R2 + K)), y2.size += R2 + K - _2);
                    break;
                  case m2:
                    k3 && (E2 && (o2 = W(E2)) && this.parseID3PES(h2, o2), E2 = { data: [], size: 0 }), E2 && (E2.data.push(e5.subarray(_2, R2 + K)), E2.size += R2 + K - _2);
                    break;
                  case 0:
                    k3 && (_2 += e5[_2] + 1), b3 = this._pmtId = j(e5, _2);
                    break;
                  case b3:
                    k3 && (_2 += e5[_2] + 1);
                    var C2 = V(e5, _2, this.typeSupported, a3);
                    (f3 = C2.avc) > 0 && (l2.pid = f3), (p2 = C2.audio) > 0 && (u2.pid = p2, u2.segmentCodec = C2.segmentCodec), (m2 = C2.id3) > 0 && (h2.pid = m2), null === T2 || S2 || (v.logger.log("unknown PID '" + T2 + "' in TS found"), T2 = null, R2 = D2 - 188), S2 = this.pmtParsed = true;
                    break;
                  case 17:
                  case 8191:
                    break;
                  default:
                    T2 = I2;
                }
              } else
                A2++;
            A2 > 0 && this.observer.emit(i2.Events.ERROR, i2.Events.ERROR, { type: n.ErrorTypes.MEDIA_ERROR, details: n.ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: "Found " + A2 + " TS packet/s that do not start with 0x47" }), l2.pesData = g2, u2.pesData = y2, h2.pesData = E2;
            var w2 = { audioTrack: u2, videoTrack: l2, id3Track: h2, textTrack: c3 };
            return s2 && this.extractRemainingSamples(w2), w2;
          }, e4.flush = function() {
            var t4, e5 = this.remainderData;
            return this.remainderData = null, t4 = e5 ? this.demux(e5, -1, false, true) : { videoTrack: this._avcTrack, audioTrack: this._audioTrack, id3Track: this._id3Track, textTrack: this._txtTrack }, this.extractRemainingSamples(t4), this.sampleAes ? this.decrypt(t4, this.sampleAes) : t4;
          }, e4.extractRemainingSamples = function(t4) {
            var e5, r3 = t4.audioTrack, i3 = t4.videoTrack, n2 = t4.id3Track, a3 = t4.textTrack, s2 = i3.pesData, o2 = r3.pesData, l2 = n2.pesData;
            if (s2 && (e5 = W(s2)) ? (this.parseAVCPES(i3, a3, e5, true), i3.pesData = null) : i3.pesData = s2, o2 && (e5 = W(o2))) {
              switch (r3.segmentCodec) {
                case "aac":
                  this.parseAACPES(r3, e5);
                  break;
                case "mp3":
                  this.parseMPEGPES(r3, e5);
              }
              r3.pesData = null;
            } else
              null != o2 && o2.size && v.logger.log("last AAC PES packet truncated,might overlap between fragments"), r3.pesData = o2;
            l2 && (e5 = W(l2)) ? (this.parseID3PES(n2, e5), n2.pesData = null) : n2.pesData = l2;
          }, e4.demuxSampleAes = function(t4, e5, r3) {
            var i3 = this.demux(t4, r3, true, !this.config.progressive), n2 = this.sampleAes = new B(this.observer, this.config, e5);
            return this.decrypt(i3, n2);
          }, e4.decrypt = function(t4, e5) {
            return new Promise(function(r3) {
              var i3 = t4.audioTrack, n2 = t4.videoTrack;
              i3.samples && "aac" === i3.segmentCodec ? e5.decryptAacSamples(i3.samples, 0, function() {
                n2.samples ? e5.decryptAvcSamples(n2.samples, 0, 0, function() {
                  r3(t4);
                }) : r3(t4);
              }) : n2.samples && e5.decryptAvcSamples(n2.samples, 0, 0, function() {
                r3(t4);
              });
            });
          }, e4.destroy = function() {
            this._duration = 0;
          }, e4.parseAVCPES = function(t4, e5, r3, i3) {
            var n2, a3 = this, s2 = this.parseAVCNALu(t4, r3.data), o2 = this.avcSample, l2 = false;
            r3.data = null, o2 && s2.length && !t4.audFound && (Y(o2, t4), o2 = this.avcSample = H(false, r3.pts, r3.dts, "")), s2.forEach(function(i4) {
              switch (i4.type) {
                case 1:
                  n2 = true, o2 || (o2 = a3.avcSample = H(true, r3.pts, r3.dts, "")), o2.frame = true;
                  var s3 = i4.data;
                  if (l2 && s3.length > 4) {
                    var u2 = new U(s3).readSliceType();
                    2 !== u2 && 4 !== u2 && 7 !== u2 && 9 !== u2 || (o2.key = true);
                  }
                  break;
                case 5:
                  n2 = true, o2 || (o2 = a3.avcSample = H(true, r3.pts, r3.dts, "")), o2.key = true, o2.frame = true;
                  break;
                case 6:
                  n2 = true, (0, d2.parseSEIMessageFromNALu)(i4.data, 1, r3.pts, e5.samples);
                  break;
                case 7:
                  if (n2 = true, l2 = true, !t4.sps) {
                    var h2 = new U(i4.data).readSPS();
                    t4.width = h2.width, t4.height = h2.height, t4.pixelRatio = h2.pixelRatio, t4.sps = [i4.data], t4.duration = a3._duration;
                    for (var c3 = i4.data.subarray(1, 4), f3 = "avc1.", g2 = 0; g2 < 3; g2++) {
                      var v2 = c3[g2].toString(16);
                      v2.length < 2 && (v2 = "0" + v2), f3 += v2;
                    }
                    t4.codec = f3;
                  }
                  break;
                case 8:
                  n2 = true, t4.pps || (t4.pps = [i4.data]);
                  break;
                case 9:
                  n2 = false, t4.audFound = true, o2 && Y(o2, t4), o2 = a3.avcSample = H(false, r3.pts, r3.dts, "");
                  break;
                case 12:
                  n2 = true;
                  break;
                default:
                  n2 = false, o2 && (o2.debug += "unknown NAL " + i4.type + " ");
              }
              o2 && n2 && o2.units.push(i4);
            }), i3 && o2 && (Y(o2, t4), this.avcSample = null);
          }, e4.getLastNalUnit = function(t4) {
            var e5, r3, i3 = this.avcSample;
            if (i3 && 0 !== i3.units.length || (i3 = t4[t4.length - 1]), null !== (e5 = i3) && void 0 !== e5 && e5.units) {
              var n2 = i3.units;
              r3 = n2[n2.length - 1];
            }
            return r3;
          }, e4.parseAVCNALu = function(t4, e5) {
            var r3, i3, n2 = e5.byteLength, a3 = t4.naluState || 0, s2 = a3, o2 = [], l2 = 0, u2 = -1, d3 = 0;
            for (-1 === a3 && (u2 = 0, d3 = 31 & e5[0], a3 = 0, l2 = 1); l2 < n2; )
              if (r3 = e5[l2++], a3)
                if (1 !== a3)
                  if (r3)
                    if (1 === r3) {
                      if (u2 >= 0) {
                        var h2 = { data: e5.subarray(u2, l2 - a3 - 1), type: d3 };
                        o2.push(h2);
                      } else {
                        var c3 = this.getLastNalUnit(t4.samples);
                        if (c3 && (s2 && l2 <= 4 - s2 && c3.state && (c3.data = c3.data.subarray(0, c3.data.byteLength - s2)), (i3 = l2 - a3 - 1) > 0)) {
                          var f3 = new Uint8Array(c3.data.byteLength + i3);
                          f3.set(c3.data, 0), f3.set(e5.subarray(0, i3), c3.data.byteLength), c3.data = f3, c3.state = 0;
                        }
                      }
                      l2 < n2 ? (u2 = l2, d3 = 31 & e5[l2], a3 = 0) : a3 = -1;
                    } else
                      a3 = 0;
                  else
                    a3 = 3;
                else
                  a3 = r3 ? 0 : 2;
              else
                a3 = r3 ? 0 : 1;
            if (u2 >= 0 && a3 >= 0) {
              var g2 = { data: e5.subarray(u2, n2), type: d3, state: a3 };
              o2.push(g2);
            }
            if (0 === o2.length) {
              var v2 = this.getLastNalUnit(t4.samples);
              if (v2) {
                var p2 = new Uint8Array(v2.data.byteLength + e5.byteLength);
                p2.set(v2.data, 0), p2.set(e5, v2.data.byteLength), v2.data = p2;
              }
            }
            return t4.naluState = a3, o2;
          }, e4.parseAACPES = function(t4, e5) {
            var r3, a3, s2, o2, l2, u2 = 0, d3 = this.aacOverFlow, h2 = e5.data;
            if (d3) {
              this.aacOverFlow = null;
              var c3 = d3.missing, f3 = d3.sample.unit.byteLength;
              if (-1 === c3) {
                var g2 = new Uint8Array(f3 + h2.byteLength);
                g2.set(d3.sample.unit, 0), g2.set(h2, f3), h2 = g2;
              } else {
                var p2 = f3 - c3;
                d3.sample.unit.set(h2.subarray(0, c3), p2), t4.samples.push(d3.sample), u2 = d3.missing;
              }
            }
            for (r3 = u2, a3 = h2.length; r3 < a3 - 1 && !E(h2, r3); r3++)
              ;
            if (r3 === u2 || (r3 < a3 - 1 ? (s2 = "AAC PES did not start with ADTS header,offset:" + r3, o2 = false) : (s2 = "no ADTS header found in AAC PES", o2 = true), v.logger.warn("parsing error:" + s2), this.observer.emit(i2.Events.ERROR, i2.Events.ERROR, { type: n.ErrorTypes.MEDIA_ERROR, details: n.ErrorDetails.FRAG_PARSING_ERROR, fatal: o2, reason: s2 }), !o2)) {
              if (S(t4, this.observer, h2, r3, this.audioCodec), void 0 !== e5.pts)
                l2 = e5.pts;
              else {
                if (!d3)
                  return void v.logger.warn("[tsdemuxer]: AAC PES unknown PTS");
                var m2 = b2(t4.samplerate);
                l2 = d3.sample.pts + m2;
              }
              for (var y2, T2 = 0; r3 < a3; ) {
                if (r3 += (y2 = L(t4, h2, r3, l2, T2)).length, y2.missing) {
                  this.aacOverFlow = y2;
                  break;
                }
                for (T2++; r3 < a3 - 1 && !E(h2, r3); r3++)
                  ;
              }
            }
          }, e4.parseMPEGPES = function(t4, e5) {
            var r3 = e5.data, i3 = r3.length, n2 = 0, a3 = 0, s2 = e5.pts;
            if (void 0 !== s2)
              for (; a3 < i3; )
                if (M(r3, a3)) {
                  var o2 = x(t4, r3, a3, s2, n2);
                  if (!o2)
                    break;
                  a3 += o2.length, n2++;
                } else
                  a3++;
            else
              v.logger.warn("[tsdemuxer]: MPEG PES unknown PTS");
          }, e4.parseID3PES = function(t4, e5) {
            if (void 0 !== e5.pts) {
              var r3 = G({}, e5, { type: this._avcTrack ? l.MetadataSchema.emsg : l.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY });
              t4.samples.push(r3);
            } else
              v.logger.warn("[tsdemuxer]: ID3 PES unknown PTS");
          }, t3;
        }();
        function z(t3, e4) {
          return z = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, z(t3, e4);
        }
        const X = function(t3) {
          var e4, r3;
          function i3() {
            return t3.apply(this, arguments) || this;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, z(e4, r3);
          var n2 = i3.prototype;
          return n2.resetInitSegment = function(e5, r4, i4, n3) {
            t3.prototype.resetInitSegment.call(this, e5, r4, i4, n3), this._audioTrack = { container: "audio/mpeg", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "mp3", samples: [], manifestCodec: r4, duration: n3, inputTimeScale: 9e4, dropped: 0 };
          }, i3.probe = function(t4) {
            if (!t4)
              return false;
            for (var e5 = (o.getID3Data(t4, 0) || []).length, r4 = t4.length; e5 < r4; e5++)
              if (N(t4, e5))
                return v.logger.log("MPEG Audio sync word found !"), true;
            return false;
          }, n2.canParse = function(t4, e5) {
            return function(t5, e6) {
              return F(t5, e6) && 4 <= t5.length - e6;
            }(t4, e5);
          }, n2.appendFrame = function(t4, e5, r4) {
            if (null !== this.basePTS)
              return x(t4, e5, r4, this.basePTS, this.frameIndex);
          }, i3;
        }(g);
        var Q = r2(524), $ = r2(923);
        function Z(t3, e4) {
          var r3 = null == t3 ? void 0 : t3.codec;
          return r3 && r3.length > 4 ? r3 : "hvc1" === r3 || "hev1" === r3 ? "hvc1.1.c.L120.90" : "av01" === r3 ? "av01.0.04M.08" : "avc1" === r3 || e4 === $.ElementaryStreamTypes.VIDEO ? "avc1.42e01e" : "mp4a.40.5";
        }
        const J = function() {
          function t3() {
            this.emitInitSegment = false, this.audioCodec = void 0, this.videoCodec = void 0, this.initData = void 0, this.initPTS = void 0, this.initTracks = void 0, this.lastEndTime = null;
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
          }, e4.resetTimeStamp = function(t4) {
            this.initPTS = t4, this.lastEndTime = null;
          }, e4.resetNextTimestamp = function() {
            this.lastEndTime = null;
          }, e4.resetInitSegment = function(t4, e5, r3) {
            this.audioCodec = e5, this.videoCodec = r3, this.generateInitSegment(t4), this.emitInitSegment = true;
          }, e4.generateInitSegment = function(t4) {
            var e5 = this.audioCodec, r3 = this.videoCodec;
            if (!t4 || !t4.byteLength)
              return this.initTracks = void 0, void (this.initData = void 0);
            var i3 = this.initData = (0, d2.parseInitSegment)(t4);
            e5 || (e5 = Z(i3.audio, $.ElementaryStreamTypes.AUDIO)), r3 || (r3 = Z(i3.video, $.ElementaryStreamTypes.VIDEO));
            var n2 = {};
            i3.audio && i3.video ? n2.audiovideo = { container: "video/mp4", codec: e5 + "," + r3, initSegment: t4, id: "main" } : i3.audio ? n2.audio = { container: "audio/mp4", codec: e5, initSegment: t4, id: "audio" } : i3.video ? n2.video = { container: "video/mp4", codec: r3, initSegment: t4, id: "main" } : v.logger.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes."), this.initTracks = n2;
          }, e4.remux = function(t4, e5, r3, i3, n2) {
            var a3, o2 = this.initPTS, l2 = this.lastEndTime, u2 = { audio: void 0, video: void 0, text: i3, id3: r3, initSegment: void 0 };
            (0, s.isFiniteNumber)(l2) || (l2 = this.lastEndTime = n2 || 0);
            var h2 = e5.samples;
            if (!h2 || !h2.length)
              return u2;
            var c3 = { initPTS: void 0, timescale: 1 }, f3 = this.initData;
            if (f3 && f3.length || (this.generateInitSegment(h2), f3 = this.initData), !f3 || !f3.length)
              return v.logger.warn("[passthrough-remuxer.ts]: Failed to generate initSegment."), u2;
            this.emitInitSegment && (c3.tracks = this.initTracks, this.emitInitSegment = false);
            var g2 = (0, d2.getStartDTS)(f3, h2);
            (0, s.isFiniteNumber)(o2) || (this.initPTS = c3.initPTS = o2 = g2 - n2);
            var p2 = (0, d2.getDuration)(h2, f3), m2 = t4 ? g2 - o2 : l2, y2 = m2 + p2;
            (0, d2.offsetStartDTS)(f3, h2, o2), p2 > 0 ? this.lastEndTime = y2 : (v.logger.warn("Duration parsed from mp4 should be greater than zero"), this.resetNextTimestamp());
            var E2 = !!f3.audio, T2 = !!f3.video, S2 = "";
            E2 && (S2 += "audio"), T2 && (S2 += "video");
            var b3 = { data1: h2, startPTS: m2, startDTS: m2, endPTS: y2, endDTS: y2, type: S2, hasAudio: E2, hasVideo: T2, nb: 1, dropped: 0 };
            u2.audio = "audio" === b3.type ? b3 : void 0, u2.video = "audio" !== b3.type ? b3 : void 0, u2.initSegment = c3;
            var L2 = null != (a3 = this.initPTS) ? a3 : 0;
            return u2.id3 = (0, Q.flushTextTrackMetadataCueSamples)(r3, n2, L2, L2), i3.samples.length && (u2.text = (0, Q.flushTextTrackUserdataCueSamples)(i3, n2, L2)), u2;
          }, t3;
        }();
        var tt;
        try {
          tt = self.performance.now.bind(self.performance);
        } catch (t3) {
          v.logger.debug("Unable to use Performance API on this environment"), tt = self.Date.now;
        }
        var et = [{ demux: q, remux: Q.default }, { demux: k2, remux: J }, { demux: A, remux: Q.default }, { demux: X, remux: Q.default }], rt = function() {
          function t3(t4, e5, r3, i3, n2) {
            this.observer = void 0, this.typeSupported = void 0, this.config = void 0, this.vendor = void 0, this.id = void 0, this.demuxer = void 0, this.remuxer = void 0, this.decrypter = void 0, this.probe = void 0, this.decryptionPromise = null, this.transmuxConfig = void 0, this.currentTransmuxState = void 0, this.observer = t4, this.typeSupported = e5, this.config = r3, this.vendor = i3, this.id = n2;
          }
          var e4 = t3.prototype;
          return e4.configure = function(t4) {
            this.transmuxConfig = t4, this.decrypter && this.decrypter.reset();
          }, e4.push = function(t4, e5, r3, i3) {
            var n2 = this, a3 = r3.transmuxing;
            a3.executeStart = tt();
            var s2 = new Uint8Array(t4), o2 = this.config, l2 = this.currentTransmuxState, u2 = this.transmuxConfig;
            i3 && (this.currentTransmuxState = i3);
            var d3 = i3 || l2, h2 = d3.contiguous, c3 = d3.discontinuity, f3 = d3.trackSwitch, g2 = d3.accurateTimeOffset, v2 = d3.timeOffset, p2 = d3.initSegmentChange, m2 = u2.audioCodec, y2 = u2.videoCodec, E2 = u2.defaultInitPts, T2 = u2.duration, S2 = u2.initSegmentData;
            (c3 || f3 || p2) && this.resetInitSegment(S2, m2, y2, T2), (c3 || p2) && this.resetInitialTimestamp(E2), h2 || this.resetContiguity();
            var b3 = function(t5, e6) {
              var r4 = null;
              return t5.byteLength > 0 && null != e6 && null != e6.key && null !== e6.iv && null != e6.method && (r4 = e6), r4;
            }(s2, e5);
            if (b3 && "AES-128" === b3.method) {
              var L2 = this.getDecrypter();
              if (!o2.enableSoftwareAES)
                return this.decryptionPromise = L2.webCryptoDecrypt(s2, b3.key.buffer, b3.iv.buffer).then(function(t5) {
                  var e6 = n2.push(t5, null, r3);
                  return n2.decryptionPromise = null, e6;
                }), this.decryptionPromise;
              var D2 = L2.softwareDecrypt(s2, b3.key.buffer, b3.iv.buffer);
              if (!D2)
                return a3.executeEnd = tt(), it(r3);
              s2 = new Uint8Array(D2);
            }
            this.needsProbing(s2, c3, f3) && this.configureTransmuxer(s2, u2);
            var A2 = this.transmux(s2, b3, v2, g2, r3), R2 = this.currentTransmuxState;
            return R2.contiguous = true, R2.discontinuity = false, R2.trackSwitch = false, a3.executeEnd = tt(), A2;
          }, e4.flush = function(t4) {
            var e5 = this, r3 = t4.transmuxing;
            r3.executeStart = tt();
            var a3 = this.decrypter, s2 = this.currentTransmuxState, o2 = this.decryptionPromise;
            if (o2)
              return o2.then(function() {
                return e5.flush(t4);
              });
            var l2 = [], u2 = s2.timeOffset;
            if (a3) {
              var d3 = a3.flush();
              d3 && l2.push(this.push(d3, null, t4));
            }
            var h2 = this.demuxer, c3 = this.remuxer;
            if (!h2 || !c3)
              return this.observer.emit(i2.Events.ERROR, i2.Events.ERROR, { type: n.ErrorTypes.MEDIA_ERROR, details: n.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: "no demux matching with content found" }), r3.executeEnd = tt(), [it(t4)];
            var f3 = h2.flush(u2);
            return nt(f3) ? f3.then(function(r4) {
              return e5.flushRemux(l2, r4, t4), l2;
            }) : (this.flushRemux(l2, f3, t4), l2);
          }, e4.flushRemux = function(t4, e5, r3) {
            var i3 = e5.audioTrack, n2 = e5.videoTrack, a3 = e5.id3Track, s2 = e5.textTrack, o2 = this.currentTransmuxState, l2 = o2.accurateTimeOffset, u2 = o2.timeOffset;
            v.logger.log("[transmuxer.ts]: Flushed fragment " + r3.sn + (r3.part > -1 ? " p: " + r3.part : "") + " of level " + r3.level);
            var d3 = this.remuxer.remux(i3, n2, a3, s2, u2, l2, true, this.id);
            t4.push({ remuxResult: d3, chunkMeta: r3 }), r3.transmuxing.executeEnd = tt();
          }, e4.resetInitialTimestamp = function(t4) {
            var e5 = this.demuxer, r3 = this.remuxer;
            e5 && r3 && (e5.resetTimeStamp(t4), r3.resetTimeStamp(t4));
          }, e4.resetContiguity = function() {
            var t4 = this.demuxer, e5 = this.remuxer;
            t4 && e5 && (t4.resetContiguity(), e5.resetNextTimestamp());
          }, e4.resetInitSegment = function(t4, e5, r3, i3) {
            var n2 = this.demuxer, a3 = this.remuxer;
            n2 && a3 && (n2.resetInitSegment(t4, e5, r3, i3), a3.resetInitSegment(t4, e5, r3));
          }, e4.destroy = function() {
            this.demuxer && (this.demuxer.destroy(), this.demuxer = void 0), this.remuxer && (this.remuxer.destroy(), this.remuxer = void 0);
          }, e4.transmux = function(t4, e5, r3, i3, n2) {
            return e5 && "SAMPLE-AES" === e5.method ? this.transmuxSampleAes(t4, e5, r3, i3, n2) : this.transmuxUnencrypted(t4, r3, i3, n2);
          }, e4.transmuxUnencrypted = function(t4, e5, r3, i3) {
            var n2 = this.demuxer.demux(t4, e5, false, !this.config.progressive), a3 = n2.audioTrack, s2 = n2.videoTrack, o2 = n2.id3Track, l2 = n2.textTrack;
            return { remuxResult: this.remuxer.remux(a3, s2, o2, l2, e5, r3, false, this.id), chunkMeta: i3 };
          }, e4.transmuxSampleAes = function(t4, e5, r3, i3, n2) {
            var a3 = this;
            return this.demuxer.demuxSampleAes(t4, e5, r3).then(function(t5) {
              return { remuxResult: a3.remuxer.remux(t5.audioTrack, t5.videoTrack, t5.id3Track, t5.textTrack, r3, i3, false, a3.id), chunkMeta: n2 };
            });
          }, e4.configureTransmuxer = function(t4, e5) {
            for (var r3, i3 = this.config, n2 = this.observer, a3 = this.typeSupported, s2 = this.vendor, o2 = e5.audioCodec, l2 = e5.defaultInitPts, u2 = e5.duration, d3 = e5.initSegmentData, h2 = e5.videoCodec, c3 = 0, f3 = et.length; c3 < f3; c3++)
              if (et[c3].demux.probe(t4)) {
                r3 = et[c3];
                break;
              }
            r3 || (v.logger.warn("Failed to find demuxer by probing frag, treating as mp4 passthrough"), r3 = { demux: k2, remux: J });
            var g2 = this.demuxer, p2 = this.remuxer, m2 = r3.remux, y2 = r3.demux;
            p2 && p2 instanceof m2 || (this.remuxer = new m2(n2, i3, a3, s2)), g2 && g2 instanceof y2 || (this.demuxer = new y2(n2, i3, a3), this.probe = y2.probe), this.resetInitSegment(d3, o2, h2, u2), this.resetInitialTimestamp(l2);
          }, e4.needsProbing = function(t4, e5, r3) {
            return !this.demuxer || !this.remuxer || e5 || r3;
          }, e4.getDecrypter = function() {
            var t4 = this.decrypter;
            return t4 || (t4 = this.decrypter = new a2.default(this.observer, this.config)), t4;
          }, t3;
        }(), it = function(t3) {
          return { remuxResult: {}, chunkMeta: t3 };
        };
        function nt(t3) {
          return "then" in t3 && t3.then instanceof Function;
        }
        var at = function(t3, e4, r3, i3, n2) {
          this.audioCodec = void 0, this.videoCodec = void 0, this.initSegmentData = void 0, this.duration = void 0, this.defaultInitPts = void 0, this.audioCodec = t3, this.videoCodec = e4, this.initSegmentData = r3, this.duration = i3, this.defaultInitPts = n2;
        }, st = function(t3, e4, r3, i3, n2, a3) {
          this.discontinuity = void 0, this.contiguous = void 0, this.accurateTimeOffset = void 0, this.trackSwitch = void 0, this.timeOffset = void 0, this.initSegmentChange = void 0, this.discontinuity = t3, this.contiguous = e4, this.accurateTimeOffset = r3, this.trackSwitch = i3, this.timeOffset = n2, this.initSegmentChange = a3;
        };
      }, 973: (t2, e3, r2) => {
        "use strict";
        var i2, n;
        r2.r(e3), r2.d(e3, { ErrorDetails: () => n, ErrorTypes: () => i2 }), function(t3) {
          t3.NETWORK_ERROR = "networkError", t3.MEDIA_ERROR = "mediaError", t3.KEY_SYSTEM_ERROR = "keySystemError", t3.MUX_ERROR = "muxError", t3.OTHER_ERROR = "otherError";
        }(i2 || (i2 = {})), function(t3) {
          t3.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys", t3.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess", t3.KEY_SYSTEM_NO_SESSION = "keySystemNoSession", t3.KEY_SYSTEM_LICENSE_REQUEST_FAILED = "keySystemLicenseRequestFailed", t3.KEY_SYSTEM_NO_INIT_DATA = "keySystemNoInitData", t3.MANIFEST_LOAD_ERROR = "manifestLoadError", t3.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut", t3.MANIFEST_PARSING_ERROR = "manifestParsingError", t3.MANIFEST_INCOMPATIBLE_CODECS_ERROR = "manifestIncompatibleCodecsError", t3.LEVEL_EMPTY_ERROR = "levelEmptyError", t3.LEVEL_LOAD_ERROR = "levelLoadError", t3.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut", t3.LEVEL_SWITCH_ERROR = "levelSwitchError", t3.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError", t3.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut", t3.SUBTITLE_LOAD_ERROR = "subtitleTrackLoadError", t3.SUBTITLE_TRACK_LOAD_TIMEOUT = "subtitleTrackLoadTimeOut", t3.FRAG_LOAD_ERROR = "fragLoadError", t3.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut", t3.FRAG_DECRYPT_ERROR = "fragDecryptError", t3.FRAG_PARSING_ERROR = "fragParsingError", t3.REMUX_ALLOC_ERROR = "remuxAllocError", t3.KEY_LOAD_ERROR = "keyLoadError", t3.KEY_LOAD_TIMEOUT = "keyLoadTimeOut", t3.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError", t3.BUFFER_INCOMPATIBLE_CODECS_ERROR = "bufferIncompatibleCodecsError", t3.BUFFER_APPEND_ERROR = "bufferAppendError", t3.BUFFER_APPENDING_ERROR = "bufferAppendingError", t3.BUFFER_STALLED_ERROR = "bufferStalledError", t3.BUFFER_FULL_ERROR = "bufferFullError", t3.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole", t3.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall", t3.INTERNAL_EXCEPTION = "internalException", t3.INTERNAL_ABORTED = "aborted", t3.UNKNOWN = "unknown";
        }(n || (n = {}));
      }, 851: (t2, e3, r2) => {
        "use strict";
        var i2;
        r2.r(e3), r2.d(e3, { Events: () => i2 }), function(t3) {
          t3.MEDIA_ATTACHING = "hlsMediaAttaching", t3.MEDIA_ATTACHED = "hlsMediaAttached", t3.MEDIA_DETACHING = "hlsMediaDetaching", t3.MEDIA_DETACHED = "hlsMediaDetached", t3.BUFFER_RESET = "hlsBufferReset", t3.BUFFER_CODECS = "hlsBufferCodecs", t3.BUFFER_CREATED = "hlsBufferCreated", t3.BUFFER_APPENDING = "hlsBufferAppending", t3.BUFFER_APPENDED = "hlsBufferAppended", t3.BUFFER_EOS = "hlsBufferEos", t3.BUFFER_FLUSHING = "hlsBufferFlushing", t3.BUFFER_FLUSHED = "hlsBufferFlushed", t3.MANIFEST_LOADING = "hlsManifestLoading", t3.MANIFEST_LOADED = "hlsManifestLoaded", t3.MANIFEST_PARSED = "hlsManifestParsed", t3.LEVEL_SWITCHING = "hlsLevelSwitching", t3.LEVEL_SWITCHED = "hlsLevelSwitched", t3.LEVEL_LOADING = "hlsLevelLoading", t3.LEVEL_LOADED = "hlsLevelLoaded", t3.LEVEL_UPDATED = "hlsLevelUpdated", t3.LEVEL_PTS_UPDATED = "hlsLevelPtsUpdated", t3.LEVELS_UPDATED = "hlsLevelsUpdated", t3.AUDIO_TRACKS_UPDATED = "hlsAudioTracksUpdated", t3.AUDIO_TRACK_SWITCHING = "hlsAudioTrackSwitching", t3.AUDIO_TRACK_SWITCHED = "hlsAudioTrackSwitched", t3.AUDIO_TRACK_LOADING = "hlsAudioTrackLoading", t3.AUDIO_TRACK_LOADED = "hlsAudioTrackLoaded", t3.SUBTITLE_TRACKS_UPDATED = "hlsSubtitleTracksUpdated", t3.SUBTITLE_TRACKS_CLEARED = "hlsSubtitleTracksCleared", t3.SUBTITLE_TRACK_SWITCH = "hlsSubtitleTrackSwitch", t3.SUBTITLE_TRACK_LOADING = "hlsSubtitleTrackLoading", t3.SUBTITLE_TRACK_LOADED = "hlsSubtitleTrackLoaded", t3.SUBTITLE_FRAG_PROCESSED = "hlsSubtitleFragProcessed", t3.CUES_PARSED = "hlsCuesParsed", t3.NON_NATIVE_TEXT_TRACKS_FOUND = "hlsNonNativeTextTracksFound", t3.INIT_PTS_FOUND = "hlsInitPtsFound", t3.FRAG_LOADING = "hlsFragLoading", t3.FRAG_LOAD_EMERGENCY_ABORTED = "hlsFragLoadEmergencyAborted", t3.FRAG_LOADED = "hlsFragLoaded", t3.FRAG_DECRYPTED = "hlsFragDecrypted", t3.FRAG_PARSING_INIT_SEGMENT = "hlsFragParsingInitSegment", t3.FRAG_PARSING_USERDATA = "hlsFragParsingUserdata", t3.FRAG_PARSING_METADATA = "hlsFragParsingMetadata", t3.FRAG_PARSED = "hlsFragParsed", t3.FRAG_BUFFERED = "hlsFragBuffered", t3.FRAG_CHANGED = "hlsFragChanged", t3.FPS_DROP = "hlsFpsDrop", t3.FPS_DROP_LEVEL_CAPPING = "hlsFpsDropLevelCapping", t3.ERROR = "hlsError", t3.DESTROYING = "hlsDestroying", t3.KEY_LOADING = "hlsKeyLoading", t3.KEY_LOADED = "hlsKeyLoaded", t3.LIVE_BACK_BUFFER_REACHED = "hlsLiveBackBufferReached", t3.BACK_BUFFER_REACHED = "hlsBackBufferReached";
        }(i2 || (i2 = {}));
      }, 817: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { default: () => Ti });
        var i2, n = r2(945), a2 = r2(965), s = r2(851), o = r2(973), l = r2(93), u = r2(63), d2 = /^(\d+)x(\d+)$/, h = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g, c2 = function() {
          function t3(e5) {
            for (var r3 in "string" == typeof e5 && (e5 = t3.parseAttrList(e5)), e5)
              e5.hasOwnProperty(r3) && (this[r3] = e5[r3]);
          }
          var e4 = t3.prototype;
          return e4.decimalInteger = function(t4) {
            var e5 = parseInt(this[t4], 10);
            return e5 > Number.MAX_SAFE_INTEGER ? 1 / 0 : e5;
          }, e4.hexadecimalInteger = function(t4) {
            if (this[t4]) {
              var e5 = (this[t4] || "0x").slice(2);
              e5 = (1 & e5.length ? "0" : "") + e5;
              for (var r3 = new Uint8Array(e5.length / 2), i3 = 0; i3 < e5.length / 2; i3++)
                r3[i3] = parseInt(e5.slice(2 * i3, 2 * i3 + 2), 16);
              return r3;
            }
            return null;
          }, e4.hexadecimalIntegerAsNumber = function(t4) {
            var e5 = parseInt(this[t4], 16);
            return e5 > Number.MAX_SAFE_INTEGER ? 1 / 0 : e5;
          }, e4.decimalFloatingPoint = function(t4) {
            return parseFloat(this[t4]);
          }, e4.optionalFloat = function(t4, e5) {
            var r3 = this[t4];
            return r3 ? parseFloat(r3) : e5;
          }, e4.enumeratedString = function(t4) {
            return this[t4];
          }, e4.bool = function(t4) {
            return "YES" === this[t4];
          }, e4.decimalResolution = function(t4) {
            var e5 = d2.exec(this[t4]);
            if (null !== e5)
              return { width: parseInt(e5[1], 10), height: parseInt(e5[2], 10) };
          }, t3.parseAttrList = function(t4) {
            var e5, r3 = {};
            for (h.lastIndex = 0; null !== (e5 = h.exec(t4)); ) {
              var i3 = e5[2];
              0 === i3.indexOf('"') && i3.lastIndexOf('"') === i3.length - 1 && (i3 = i3.slice(1, -1)), r3[e5[1]] = i3;
            }
            return r3;
          }, t3;
        }();
        function f2() {
          return f2 = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, f2.apply(this, arguments);
        }
        function g(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        !function(t3) {
          t3.ID = "ID", t3.CLASS = "CLASS", t3.START_DATE = "START-DATE", t3.DURATION = "DURATION", t3.END_DATE = "END-DATE", t3.END_ON_NEXT = "END-ON-NEXT", t3.PLANNED_DURATION = "PLANNED-DURATION", t3.SCTE35_OUT = "SCTE35-OUT", t3.SCTE35_IN = "SCTE35-IN";
        }(i2 || (i2 = {}));
        var v = function() {
          function t3(t4, e5) {
            if (this.attr = void 0, this._startDate = void 0, this._endDate = void 0, this._badValueForSameId = void 0, e5) {
              var r4 = e5.attr;
              for (var n2 in r4)
                if (Object.prototype.hasOwnProperty.call(t4, n2) && t4[n2] !== r4[n2]) {
                  l.logger.warn('DATERANGE tag attribute: "' + n2 + '" does not match for tags with ID: "' + t4.ID + '"'), this._badValueForSameId = n2;
                  break;
                }
              t4 = f2(new c2({}), r4, t4);
            }
            if (this.attr = t4, this._startDate = new Date(t4[i2.START_DATE]), i2.END_DATE in this.attr) {
              var s2 = new Date(this.attr[i2.END_DATE]);
              (0, a2.isFiniteNumber)(s2.getTime()) && (this._endDate = s2);
            }
          }
          var e4, r3;
          return e4 = t3, (r3 = [{ key: "id", get: function() {
            return this.attr.ID;
          } }, { key: "class", get: function() {
            return this.attr.CLASS;
          } }, { key: "startDate", get: function() {
            return this._startDate;
          } }, { key: "endDate", get: function() {
            if (this._endDate)
              return this._endDate;
            var t4 = this.duration;
            return null !== t4 ? new Date(this._startDate.getTime() + 1e3 * t4) : null;
          } }, { key: "duration", get: function() {
            if (i2.DURATION in this.attr) {
              var t4 = this.attr.decimalFloatingPoint(i2.DURATION);
              if ((0, a2.isFiniteNumber)(t4))
                return t4;
            } else if (this._endDate)
              return (this._endDate.getTime() - this._startDate.getTime()) / 1e3;
            return null;
          } }, { key: "plannedDuration", get: function() {
            return i2.PLANNED_DURATION in this.attr ? this.attr.decimalFloatingPoint(i2.PLANNED_DURATION) : null;
          } }, { key: "endOnNext", get: function() {
            return this.attr.bool(i2.END_ON_NEXT);
          } }, { key: "isValid", get: function() {
            return !!this.id && !this._badValueForSameId && (0, a2.isFiniteNumber)(this.startDate.getTime()) && (null === this.duration || this.duration >= 0) && (!this.endOnNext || !!this.class);
          } }]) && g(e4.prototype, r3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }(), p = r2(923);
        function m(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        var y = function() {
          function t3(t4) {
            this.PTSKnown = false, this.alignedSliding = false, this.averagetargetduration = void 0, this.endCC = 0, this.endSN = 0, this.fragments = void 0, this.fragmentHint = void 0, this.partList = null, this.dateRanges = void 0, this.live = true, this.ageHeader = 0, this.advancedDateTime = void 0, this.updated = true, this.advanced = true, this.availabilityDelay = void 0, this.misses = 0, this.needSidxRanges = false, this.startCC = 0, this.startSN = 0, this.startTimeOffset = null, this.targetduration = 0, this.totalduration = 0, this.type = null, this.url = void 0, this.m3u8 = "", this.version = null, this.canBlockReload = false, this.canSkipUntil = 0, this.canSkipDateRanges = false, this.skippedSegments = 0, this.recentlyRemovedDateranges = void 0, this.partHoldBack = 0, this.holdBack = 0, this.partTarget = 0, this.preloadHint = void 0, this.renditionReports = void 0, this.tuneInGoal = 0, this.deltaUpdateFailed = void 0, this.driftStartTime = 0, this.driftEndTime = 0, this.driftStart = 0, this.driftEnd = 0, this.fragments = [], this.dateRanges = {}, this.url = t4;
          }
          var e4, r3;
          return t3.prototype.reloaded = function(t4) {
            if (!t4)
              return this.advanced = true, void (this.updated = true);
            var e5 = this.lastPartSn - t4.lastPartSn, r4 = this.lastPartIndex - t4.lastPartIndex;
            this.updated = this.endSN !== t4.endSN || !!r4 || !!e5, this.advanced = this.endSN > t4.endSN || e5 > 0 || 0 === e5 && r4 > 0, this.updated || this.advanced ? this.misses = Math.floor(0.6 * t4.misses) : this.misses = t4.misses + 1, this.availabilityDelay = t4.availabilityDelay;
          }, e4 = t3, (r3 = [{ key: "hasProgramDateTime", get: function() {
            return !!this.fragments.length && (0, a2.isFiniteNumber)(this.fragments[this.fragments.length - 1].programDateTime);
          } }, { key: "levelTargetDuration", get: function() {
            return this.averagetargetduration || this.targetduration || 10;
          } }, { key: "drift", get: function() {
            var t4 = this.driftEndTime - this.driftStartTime;
            return t4 > 0 ? 1e3 * (this.driftEnd - this.driftStart) / t4 : 1;
          } }, { key: "edge", get: function() {
            return this.partEnd || this.fragmentEnd;
          } }, { key: "partEnd", get: function() {
            var t4;
            return null !== (t4 = this.partList) && void 0 !== t4 && t4.length ? this.partList[this.partList.length - 1].end : this.fragmentEnd;
          } }, { key: "fragmentEnd", get: function() {
            var t4;
            return null !== (t4 = this.fragments) && void 0 !== t4 && t4.length ? this.fragments[this.fragments.length - 1].end : 0;
          } }, { key: "age", get: function() {
            return this.advancedDateTime ? Math.max(Date.now() - this.advancedDateTime, 0) / 1e3 : 0;
          } }, { key: "lastPartIndex", get: function() {
            var t4;
            return null !== (t4 = this.partList) && void 0 !== t4 && t4.length ? this.partList[this.partList.length - 1].index : -1;
          } }, { key: "lastPartSn", get: function() {
            var t4;
            return null !== (t4 = this.partList) && void 0 !== t4 && t4.length ? this.partList[this.partList.length - 1].fragment.sn : this.endSN;
          } }]) && m(e4.prototype, r3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }(), E = r2(960), T = { audio: { a3ds: true, "ac-3": true, "ac-4": true, alac: true, alaw: true, dra1: true, "dts+": true, "dts-": true, dtsc: true, dtse: true, dtsh: true, "ec-3": true, enca: true, g719: true, g726: true, m4ae: true, mha1: true, mha2: true, mhm1: true, mhm2: true, mlpa: true, mp4a: true, "raw ": true, Opus: true, opus: true, samr: true, sawb: true, sawp: true, sevc: true, sqcp: true, ssmv: true, twos: true, ulaw: true }, video: { avc1: true, avc2: true, avc3: true, avc4: true, avcp: true, av01: true, drac: true, dva1: true, dvav: true, dvh1: true, dvhe: true, encv: true, hev1: true, hvc1: true, mjp2: true, mp4v: true, mvc1: true, mvc2: true, mvc3: true, mvc4: true, resv: true, rv60: true, s263: true, svc1: true, svc2: true, "vc-1": true, vp08: true, vp09: true }, text: { stpp: true, wvtt: true } };
        function S(t3, e4) {
          return MediaSource.isTypeSupported((e4 || "video") + '/mp4;codecs="' + t3 + '"');
        }
        var b2 = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-SESSION-DATA:([^\r\n]*)[\r\n]+/g, L = /#EXT-X-MEDIA:(.*)/g, D = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, /(?!#) *(\S[\S ]*)/.source, /#EXT-X-BYTERANGE:*(.+)/.source, /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, /#.*/.source].join("|"), "g"), A = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|")), R = /\.(mp4|m4s|m4v|m4a)$/i, k2 = function() {
          function t3() {
          }
          return t3.findGroup = function(t4, e4) {
            for (var r3 = 0; r3 < t4.length; r3++) {
              var i3 = t4[r3];
              if (i3.id === e4)
                return i3;
            }
          }, t3.convertAVC1ToAVCOTI = function(t4) {
            var e4 = t4.split(".");
            if (e4.length > 2) {
              var r3 = e4.shift() + ".";
              return (r3 += parseInt(e4.shift()).toString(16)) + ("000" + parseInt(e4.shift()).toString(16)).slice(-4);
            }
            return t4;
          }, t3.resolve = function(t4, e4) {
            return n.buildAbsoluteURL(e4, t4, { alwaysNormalize: true });
          }, t3.parseMasterPlaylist = function(e4, r3) {
            var i3, n2 = [], a3 = [], s2 = {}, o2 = false;
            for (b2.lastIndex = 0; null != (i3 = b2.exec(e4)); )
              if (i3[1]) {
                var l2, u2 = new c2(i3[1]), d3 = { attrs: u2, bitrate: u2.decimalInteger("AVERAGE-BANDWIDTH") || u2.decimalInteger("BANDWIDTH"), name: u2.NAME, url: t3.resolve(i3[2], r3) }, h2 = u2.decimalResolution("RESOLUTION");
                h2 && (d3.width = h2.width, d3.height = h2.height), I((u2.CODECS || "").split(/[ ,]+/).filter(function(t4) {
                  return t4;
                }), d3), d3.videoCodec && -1 !== d3.videoCodec.indexOf("avc1") && (d3.videoCodec = t3.convertAVC1ToAVCOTI(d3.videoCodec)), null !== (l2 = d3.unknownCodecs) && void 0 !== l2 && l2.length || a3.push(d3), n2.push(d3);
              } else if (i3[3]) {
                var f3 = new c2(i3[3]);
                f3["DATA-ID"] && (o2 = true, s2[f3["DATA-ID"]] = f3);
              }
            return { levels: a3.length > 0 && a3.length < n2.length ? a3 : n2, sessionData: o2 ? s2 : null };
          }, t3.parseMasterPlaylistMedia = function(e4, r3, i3, n2) {
            var a3;
            void 0 === n2 && (n2 = []);
            var s2 = [], o2 = 0;
            for (L.lastIndex = 0; null !== (a3 = L.exec(e4)); ) {
              var l2 = new c2(a3[1]);
              if (l2.TYPE === i3) {
                var u2 = { attrs: l2, bitrate: 0, id: o2++, groupId: l2["GROUP-ID"], instreamId: l2["INSTREAM-ID"], name: l2.NAME || l2.LANGUAGE || "", type: i3, default: l2.bool("DEFAULT"), autoselect: l2.bool("AUTOSELECT"), forced: l2.bool("FORCED"), lang: l2.LANGUAGE, url: l2.URI ? t3.resolve(l2.URI, r3) : "" };
                if (n2.length) {
                  var d3 = t3.findGroup(n2, u2.groupId) || n2[0];
                  _(u2, d3, "audioCodec"), _(u2, d3, "textCodec");
                }
                s2.push(u2);
              }
            }
            return s2;
          }, t3.parseLevelPlaylist = function(t4, e4, r3, i3, s2) {
            var o2, u2, d3, h2 = new y(e4), f3 = h2.fragments, g2 = null, m2 = 0, T2 = 0, S2 = 0, b3 = 0, L2 = null, k3 = new p.Fragment(i3, e4), I2 = -1, _2 = false;
            for (D.lastIndex = 0, h2.m3u8 = t4; null !== (o2 = D.exec(t4)); ) {
              _2 && (_2 = false, (k3 = new p.Fragment(i3, e4)).start = S2, k3.sn = m2, k3.cc = b3, k3.level = r3, g2 && (k3.initSegment = g2, k3.rawProgramDateTime = g2.rawProgramDateTime, g2.rawProgramDateTime = null));
              var O2 = o2[1];
              if (O2) {
                k3.duration = parseFloat(O2);
                var x2 = (" " + o2[2]).slice(1);
                k3.title = x2 || null, k3.tagList.push(x2 ? ["INF", O2, x2] : ["INF", O2]);
              } else if (o2[3])
                (0, a2.isFiniteNumber)(k3.duration) && (k3.start = S2, d3 && (k3.levelkey = d3), k3.sn = m2, k3.level = r3, k3.cc = b3, k3.urlId = s2, f3.push(k3), k3.relurl = (" " + o2[3]).slice(1), C(k3, L2), L2 = k3, S2 += k3.duration, m2++, T2 = 0, _2 = true);
              else if (o2[4]) {
                var P2 = (" " + o2[4]).slice(1);
                L2 ? k3.setByteRange(P2, L2) : k3.setByteRange(P2);
              } else if (o2[5])
                k3.rawProgramDateTime = (" " + o2[5]).slice(1), k3.tagList.push(["PROGRAM-DATE-TIME", k3.rawProgramDateTime]), -1 === I2 && (I2 = f3.length);
              else {
                if (!(o2 = o2[0].match(A))) {
                  l.logger.warn("No matches on slow regex match for level playlist!");
                  continue;
                }
                for (u2 = 1; u2 < o2.length && void 0 === o2[u2]; u2++)
                  ;
                var F2 = (" " + o2[u2]).slice(1), M2 = (" " + o2[u2 + 1]).slice(1), N2 = o2[u2 + 2] ? (" " + o2[u2 + 2]).slice(1) : "";
                switch (F2) {
                  case "PLAYLIST-TYPE":
                    h2.type = M2.toUpperCase();
                    break;
                  case "MEDIA-SEQUENCE":
                    m2 = h2.startSN = parseInt(M2);
                    break;
                  case "SKIP":
                    var U2 = new c2(M2), B2 = U2.decimalInteger("SKIPPED-SEGMENTS");
                    if ((0, a2.isFiniteNumber)(B2)) {
                      h2.skippedSegments = B2;
                      for (var G2 = B2; G2--; )
                        f3.unshift(null);
                      m2 += B2;
                    }
                    var K2 = U2.enumeratedString("RECENTLY-REMOVED-DATERANGES");
                    K2 && (h2.recentlyRemovedDateranges = K2.split("	"));
                    break;
                  case "TARGETDURATION":
                    h2.targetduration = parseFloat(M2);
                    break;
                  case "VERSION":
                    h2.version = parseInt(M2);
                    break;
                  case "EXTM3U":
                    break;
                  case "ENDLIST":
                    h2.live = false;
                    break;
                  case "#":
                    (M2 || N2) && k3.tagList.push(N2 ? [M2, N2] : [M2]);
                    break;
                  case "DISCONTINUITY":
                    b3++, k3.tagList.push(["DIS"]);
                    break;
                  case "GAP":
                    k3.tagList.push([F2]);
                    break;
                  case "BITRATE":
                    k3.tagList.push([F2, M2]);
                    break;
                  case "DATERANGE":
                    var H2 = new c2(M2), j2 = new v(H2, h2.dateRanges[H2.ID]);
                    j2.isValid || h2.skippedSegments ? h2.dateRanges[j2.id] = j2 : l.logger.warn('Ignoring invalid DATERANGE tag: "' + M2 + '"'), k3.tagList.push(["EXT-X-DATERANGE", M2]);
                    break;
                  case "DISCONTINUITY-SEQUENCE":
                    b3 = parseInt(M2);
                    break;
                  case "KEY":
                    var V2, W2 = new c2(M2), Y2 = W2.enumeratedString("METHOD"), q2 = W2.URI, z2 = W2.hexadecimalInteger("IV"), X2 = W2.enumeratedString("KEYFORMATVERSIONS"), Q2 = W2.enumeratedString("KEYID"), $2 = null != (V2 = W2.enumeratedString("KEYFORMAT")) ? V2 : "identity";
                    if (["com.apple.streamingkeydelivery", "com.microsoft.playready", "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed", "com.widevine"].indexOf($2) > -1) {
                      l.logger.warn("Keyformat " + $2 + " is not supported from the manifest");
                      continue;
                    }
                    if ("identity" !== $2)
                      continue;
                    Y2 && (d3 = E.LevelKey.fromURL(e4, q2), q2 && ["AES-128", "SAMPLE-AES", "SAMPLE-AES-CENC"].indexOf(Y2) >= 0 && (d3.method = Y2, d3.keyFormat = $2, Q2 && (d3.keyID = Q2), X2 && (d3.keyFormatVersions = X2), d3.iv = z2));
                    break;
                  case "START":
                    var Z2 = new c2(M2).decimalFloatingPoint("TIME-OFFSET");
                    (0, a2.isFiniteNumber)(Z2) && (h2.startTimeOffset = Z2);
                    break;
                  case "MAP":
                    var J2 = new c2(M2);
                    if (k3.duration) {
                      var tt2 = new p.Fragment(i3, e4);
                      w(tt2, J2, r3, d3), g2 = tt2, k3.initSegment = g2, g2.rawProgramDateTime && !k3.rawProgramDateTime && (k3.rawProgramDateTime = g2.rawProgramDateTime);
                    } else
                      w(k3, J2, r3, d3), g2 = k3, _2 = true;
                    break;
                  case "SERVER-CONTROL":
                    var et2 = new c2(M2);
                    h2.canBlockReload = et2.bool("CAN-BLOCK-RELOAD"), h2.canSkipUntil = et2.optionalFloat("CAN-SKIP-UNTIL", 0), h2.canSkipDateRanges = h2.canSkipUntil > 0 && et2.bool("CAN-SKIP-DATERANGES"), h2.partHoldBack = et2.optionalFloat("PART-HOLD-BACK", 0), h2.holdBack = et2.optionalFloat("HOLD-BACK", 0);
                    break;
                  case "PART-INF":
                    var rt2 = new c2(M2);
                    h2.partTarget = rt2.decimalFloatingPoint("PART-TARGET");
                    break;
                  case "PART":
                    var it2 = h2.partList;
                    it2 || (it2 = h2.partList = []);
                    var nt2 = T2 > 0 ? it2[it2.length - 1] : void 0, at2 = T2++, st2 = new p.Part(new c2(M2), k3, e4, at2, nt2);
                    it2.push(st2), k3.duration += st2.duration;
                    break;
                  case "PRELOAD-HINT":
                    var ot2 = new c2(M2);
                    h2.preloadHint = ot2;
                    break;
                  case "RENDITION-REPORT":
                    var lt2 = new c2(M2);
                    h2.renditionReports = h2.renditionReports || [], h2.renditionReports.push(lt2);
                    break;
                  default:
                    l.logger.warn("line parsed but not handled: " + o2);
                }
              }
            }
            L2 && !L2.relurl ? (f3.pop(), S2 -= L2.duration, h2.partList && (h2.fragmentHint = L2)) : h2.partList && (C(k3, L2), k3.cc = b3, h2.fragmentHint = k3);
            var ut2 = f3.length, dt2 = f3[0], ht2 = f3[ut2 - 1];
            if ((S2 += h2.skippedSegments * h2.targetduration) > 0 && ut2 && ht2) {
              h2.averagetargetduration = S2 / ut2;
              var ct2 = ht2.sn;
              h2.endSN = "initSegment" !== ct2 ? ct2 : 0, dt2 && (h2.startCC = dt2.cc, dt2.initSegment || h2.fragments.every(function(t5) {
                return t5.relurl && (e5 = t5.relurl, R.test(null != (r4 = null === (i4 = n.parseURL(e5)) || void 0 === i4 ? void 0 : i4.path) ? r4 : ""));
                var e5, r4, i4;
              }) && (l.logger.warn("MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX"), (k3 = new p.Fragment(i3, e4)).relurl = ht2.relurl, k3.level = r3, k3.sn = "initSegment", dt2.initSegment = k3, h2.needSidxRanges = true));
            } else
              h2.endSN = 0, h2.startCC = 0;
            return h2.fragmentHint && (S2 += h2.fragmentHint.duration), h2.totalduration = S2, h2.endCC = b3, I2 > 0 && function(t5, e5) {
              for (var r4 = t5[e5], i4 = e5; i4--; ) {
                var n2 = t5[i4];
                if (!n2)
                  return;
                n2.programDateTime = r4.programDateTime - 1e3 * n2.duration, r4 = n2;
              }
            }(f3, I2), h2;
          }, t3;
        }();
        function I(t3, e4) {
          ["video", "audio", "text"].forEach(function(r3) {
            var i3 = t3.filter(function(t4) {
              return function(t5, e5) {
                var r4 = T[e5];
                return !!r4 && true === r4[t5.slice(0, 4)];
              }(t4, r3);
            });
            if (i3.length) {
              var n2 = i3.filter(function(t4) {
                return 0 === t4.lastIndexOf("avc1", 0) || 0 === t4.lastIndexOf("mp4a", 0);
              });
              e4[r3 + "Codec"] = n2.length > 0 ? n2[0] : i3[0], t3 = t3.filter(function(t4) {
                return -1 === i3.indexOf(t4);
              });
            }
          }), e4.unknownCodecs = t3;
        }
        function _(t3, e4, r3) {
          var i3 = e4[r3];
          i3 && (t3[r3] = i3);
        }
        function C(t3, e4) {
          t3.rawProgramDateTime ? t3.programDateTime = Date.parse(t3.rawProgramDateTime) : null != e4 && e4.programDateTime && (t3.programDateTime = e4.endProgramDateTime), (0, a2.isFiniteNumber)(t3.programDateTime) || (t3.programDateTime = null, t3.rawProgramDateTime = null);
        }
        function w(t3, e4, r3, i3) {
          t3.relurl = e4.URI, e4.BYTERANGE && t3.setByteRange(e4.BYTERANGE), t3.level = r3, t3.sn = "initSegment", i3 && (t3.levelkey = i3), t3.initSegment = null;
        }
        var O = r2(308);
        function x(t3, e4) {
          var r3 = t3.url;
          return void 0 !== r3 && 0 !== r3.indexOf("data:") || (r3 = e4.url), r3;
        }
        const P = function() {
          function t3(t4) {
            this.hls = void 0, this.loaders = /* @__PURE__ */ Object.create(null), this.hls = t4, this.registerListeners();
          }
          var e4 = t3.prototype;
          return e4.startLoad = function(t4) {
          }, e4.stopLoad = function() {
            this.destroyInternalLoaders();
          }, e4.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.on(s.Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t4.on(s.Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
          }, e4.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.off(s.Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t4.off(s.Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
          }, e4.createInternalLoader = function(t4) {
            var e5 = this.hls.config, r3 = e5.pLoader, i3 = e5.loader, n2 = new (r3 || i3)(e5);
            return t4.loader = n2, this.loaders[t4.type] = n2, n2;
          }, e4.getInternalLoader = function(t4) {
            return this.loaders[t4.type];
          }, e4.resetInternalLoader = function(t4) {
            this.loaders[t4] && delete this.loaders[t4];
          }, e4.destroyInternalLoaders = function() {
            for (var t4 in this.loaders) {
              var e5 = this.loaders[t4];
              e5 && e5.destroy(), this.resetInternalLoader(t4);
            }
          }, e4.destroy = function() {
            this.unregisterListeners(), this.destroyInternalLoaders();
          }, e4.onManifestLoading = function(t4, e5) {
            var r3 = e5.url;
            this.load({ id: null, groupId: null, level: 0, responseType: "text", type: O.PlaylistContextType.MANIFEST, url: r3, deliveryDirectives: null });
          }, e4.onLevelLoading = function(t4, e5) {
            var r3 = e5.id, i3 = e5.level, n2 = e5.url, a3 = e5.deliveryDirectives;
            this.load({ id: r3, groupId: null, level: i3, responseType: "text", type: O.PlaylistContextType.LEVEL, url: n2, deliveryDirectives: a3 });
          }, e4.onAudioTrackLoading = function(t4, e5) {
            var r3 = e5.id, i3 = e5.groupId, n2 = e5.url, a3 = e5.deliveryDirectives;
            this.load({ id: r3, groupId: i3, level: null, responseType: "text", type: O.PlaylistContextType.AUDIO_TRACK, url: n2, deliveryDirectives: a3 });
          }, e4.onSubtitleTrackLoading = function(t4, e5) {
            var r3 = e5.id, i3 = e5.groupId, n2 = e5.url, a3 = e5.deliveryDirectives;
            this.load({ id: r3, groupId: i3, level: null, responseType: "text", type: O.PlaylistContextType.SUBTITLE_TRACK, url: n2, deliveryDirectives: a3 });
          }, e4.load = function(t4) {
            var e5, r3, i3, n2, a3, s2, o2 = this.hls.config, u2 = this.getInternalLoader(t4);
            if (u2) {
              var d3 = u2.context;
              if (d3 && d3.url === t4.url)
                return void l.logger.trace("[playlist-loader]: playlist request ongoing");
              l.logger.log("[playlist-loader]: aborting previous loader for type: " + t4.type), u2.abort();
            }
            switch (t4.type) {
              case O.PlaylistContextType.MANIFEST:
                r3 = o2.manifestLoadingMaxRetry, i3 = o2.manifestLoadingTimeOut, n2 = o2.manifestLoadingRetryDelay, a3 = o2.manifestLoadingMaxRetryTimeout;
                break;
              case O.PlaylistContextType.LEVEL:
              case O.PlaylistContextType.AUDIO_TRACK:
              case O.PlaylistContextType.SUBTITLE_TRACK:
                r3 = 0, i3 = o2.levelLoadingTimeOut;
                break;
              default:
                r3 = o2.levelLoadingMaxRetry, i3 = o2.levelLoadingTimeOut, n2 = o2.levelLoadingRetryDelay, a3 = o2.levelLoadingMaxRetryTimeout;
            }
            if (u2 = this.createInternalLoader(t4), null !== (e5 = t4.deliveryDirectives) && void 0 !== e5 && e5.part && (t4.type === O.PlaylistContextType.LEVEL && null !== t4.level ? s2 = this.hls.levels[t4.level].details : t4.type === O.PlaylistContextType.AUDIO_TRACK && null !== t4.id ? s2 = this.hls.audioTracks[t4.id].details : t4.type === O.PlaylistContextType.SUBTITLE_TRACK && null !== t4.id && (s2 = this.hls.subtitleTracks[t4.id].details), s2)) {
              var h2 = s2.partTarget, c3 = s2.targetduration;
              h2 && c3 && (i3 = Math.min(1e3 * Math.max(3 * h2, 0.8 * c3), i3));
            }
            var f3 = { timeout: i3, maxRetry: r3, retryDelay: n2, maxRetryDelay: a3, highWaterMark: 0 }, g2 = { onSuccess: this.loadsuccess.bind(this), onError: this.loaderror.bind(this), onTimeout: this.loadtimeout.bind(this) };
            u2.load(t4, f3, g2);
          }, e4.loadsuccess = function(t4, e5, r3, i3) {
            if (void 0 === i3 && (i3 = null), r3.isSidxRequest)
              return this.handleSidxRequest(t4, r3), void this.handlePlaylistLoaded(t4, e5, r3, i3);
            this.resetInternalLoader(r3.type);
            var n2 = t4.data;
            0 === n2.indexOf("#EXTM3U") ? (e5.parsing.start = performance.now(), n2.indexOf("#EXTINF:") > 0 || n2.indexOf("#EXT-X-TARGETDURATION:") > 0 ? this.handleTrackOrLevelPlaylist(t4, e5, r3, i3) : this.handleMasterPlaylist(t4, e5, r3, i3)) : this.handleManifestParsingError(t4, r3, "no EXTM3U delimiter", i3);
          }, e4.loaderror = function(t4, e5, r3) {
            void 0 === r3 && (r3 = null), this.handleNetworkError(e5, r3, false, t4);
          }, e4.loadtimeout = function(t4, e5, r3) {
            void 0 === r3 && (r3 = null), this.handleNetworkError(e5, r3, true);
          }, e4.handleMasterPlaylist = function(t4, e5, r3, i3) {
            var n2 = this.hls, a3 = t4.data, o2 = x(t4, r3), u2 = k2.parseMasterPlaylist(a3, o2), d3 = u2.levels, h2 = u2.sessionData;
            if (d3.length) {
              var f3 = d3.map(function(t5) {
                return { id: t5.attrs.AUDIO, audioCodec: t5.audioCodec };
              }), g2 = d3.map(function(t5) {
                return { id: t5.attrs.SUBTITLES, textCodec: t5.textCodec };
              }), v2 = k2.parseMasterPlaylistMedia(a3, o2, "AUDIO", f3), p2 = k2.parseMasterPlaylistMedia(a3, o2, "SUBTITLES", g2), m2 = k2.parseMasterPlaylistMedia(a3, o2, "CLOSED-CAPTIONS");
              v2.length && (v2.some(function(t5) {
                return !t5.url;
              }) || !d3[0].audioCodec || d3[0].attrs.AUDIO || (l.logger.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one"), v2.unshift({ type: "main", name: "main", default: false, autoselect: false, forced: false, id: -1, attrs: new c2({}), bitrate: 0, url: "" }))), n2.trigger(s.Events.MANIFEST_LOADED, { levels: d3, audioTracks: v2, subtitles: p2, captions: m2, url: o2, stats: e5, networkDetails: i3, sessionData: h2 });
            } else
              this.handleManifestParsingError(t4, r3, "no level found in manifest", i3);
          }, e4.handleTrackOrLevelPlaylist = function(t4, e5, r3, i3) {
            var n2 = this.hls, l2 = r3.id, u2 = r3.level, d3 = r3.type, h2 = x(t4, r3), f3 = (0, a2.isFiniteNumber)(l2) ? l2 : 0, g2 = (0, a2.isFiniteNumber)(u2) ? u2 : f3, v2 = function(t5) {
              switch (t5.type) {
                case O.PlaylistContextType.AUDIO_TRACK:
                  return O.PlaylistLevelType.AUDIO;
                case O.PlaylistContextType.SUBTITLE_TRACK:
                  return O.PlaylistLevelType.SUBTITLE;
                default:
                  return O.PlaylistLevelType.MAIN;
              }
            }(r3), p2 = k2.parseLevelPlaylist(t4.data, h2, g2, v2, f3);
            if (p2.fragments.length) {
              if (d3 === O.PlaylistContextType.MANIFEST) {
                var m2 = { attrs: new c2({}), bitrate: 0, details: p2, name: "", url: h2 };
                n2.trigger(s.Events.MANIFEST_LOADED, { levels: [m2], audioTracks: [], url: h2, stats: e5, networkDetails: i3, sessionData: null });
              }
              if (e5.parsing.end = performance.now(), p2.needSidxRanges) {
                var y2, E2 = null === (y2 = p2.fragments[0].initSegment) || void 0 === y2 ? void 0 : y2.url;
                this.load({ url: E2, isSidxRequest: true, type: d3, level: u2, levelDetails: p2, id: l2, groupId: null, rangeStart: 0, rangeEnd: 2048, responseType: "arraybuffer", deliveryDirectives: null });
              } else
                r3.levelDetails = p2, this.handlePlaylistLoaded(t4, e5, r3, i3);
            } else
              n2.trigger(s.Events.ERROR, { type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.LEVEL_EMPTY_ERROR, fatal: false, url: h2, reason: "no fragments found in level", level: "number" == typeof r3.level ? r3.level : void 0 });
          }, e4.handleSidxRequest = function(t4, e5) {
            var r3 = new Uint8Array(t4.data), i3 = (0, u.findBox)(r3, ["sidx"])[0];
            if (i3) {
              var n2 = (0, u.parseSegmentIndex)(i3);
              if (n2) {
                var a3 = n2.references, s2 = e5.levelDetails;
                a3.forEach(function(t5, e6) {
                  var i4 = t5.info, n3 = s2.fragments[e6];
                  if (0 === n3.byteRange.length && n3.setByteRange(String(1 + i4.end - i4.start) + "@" + String(i4.start)), n3.initSegment) {
                    var a4 = (0, u.findBox)(r3, ["moov"])[0], o2 = a4 ? a4.length : null;
                    n3.initSegment.setByteRange(String(o2) + "@0");
                  }
                });
              }
            }
          }, e4.handleManifestParsingError = function(t4, e5, r3, i3) {
            this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.MANIFEST_PARSING_ERROR, fatal: e5.type === O.PlaylistContextType.MANIFEST, url: t4.url, reason: r3, response: t4, context: e5, networkDetails: i3 });
          }, e4.handleNetworkError = function(t4, e5, r3, i3) {
            void 0 === r3 && (r3 = false), l.logger.warn("[playlist-loader]: A network " + (r3 ? "timeout" : "error") + " occurred while loading " + t4.type + " level: " + t4.level + " id: " + t4.id + ' group-id: "' + t4.groupId + '"');
            var n2 = o.ErrorDetails.UNKNOWN, a3 = false, u2 = this.getInternalLoader(t4);
            switch (t4.type) {
              case O.PlaylistContextType.MANIFEST:
                n2 = r3 ? o.ErrorDetails.MANIFEST_LOAD_TIMEOUT : o.ErrorDetails.MANIFEST_LOAD_ERROR, a3 = true;
                break;
              case O.PlaylistContextType.LEVEL:
                n2 = r3 ? o.ErrorDetails.LEVEL_LOAD_TIMEOUT : o.ErrorDetails.LEVEL_LOAD_ERROR, a3 = false;
                break;
              case O.PlaylistContextType.AUDIO_TRACK:
                n2 = r3 ? o.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT : o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR, a3 = false;
                break;
              case O.PlaylistContextType.SUBTITLE_TRACK:
                n2 = r3 ? o.ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT : o.ErrorDetails.SUBTITLE_LOAD_ERROR, a3 = false;
            }
            u2 && this.resetInternalLoader(t4.type);
            var d3 = { type: o.ErrorTypes.NETWORK_ERROR, details: n2, fatal: a3, url: t4.url, loader: u2, context: t4, networkDetails: e5 };
            i3 && (d3.response = i3), this.hls.trigger(s.Events.ERROR, d3);
          }, e4.handlePlaylistLoaded = function(t4, e5, r3, i3) {
            var n2 = r3.type, a3 = r3.level, o2 = r3.id, l2 = r3.groupId, u2 = r3.loader, d3 = r3.levelDetails, h2 = r3.deliveryDirectives;
            if (null != d3 && d3.targetduration) {
              if (u2)
                switch (d3.live && (u2.getCacheAge && (d3.ageHeader = u2.getCacheAge() || 0), u2.getCacheAge && !isNaN(d3.ageHeader) || (d3.ageHeader = 0)), n2) {
                  case O.PlaylistContextType.MANIFEST:
                  case O.PlaylistContextType.LEVEL:
                    this.hls.trigger(s.Events.LEVEL_LOADED, { details: d3, level: a3 || 0, id: o2 || 0, stats: e5, networkDetails: i3, deliveryDirectives: h2 });
                    break;
                  case O.PlaylistContextType.AUDIO_TRACK:
                    this.hls.trigger(s.Events.AUDIO_TRACK_LOADED, { details: d3, id: o2 || 0, groupId: l2 || "", stats: e5, networkDetails: i3, deliveryDirectives: h2 });
                    break;
                  case O.PlaylistContextType.SUBTITLE_TRACK:
                    this.hls.trigger(s.Events.SUBTITLE_TRACK_LOADED, { details: d3, id: o2 || 0, groupId: l2 || "", stats: e5, networkDetails: i3, deliveryDirectives: h2 });
                }
            } else
              this.handleManifestParsingError(t4, r3, "invalid target duration", i3);
          }, t3;
        }();
        var F = function() {
          function t3(t4) {
            this.hls = void 0, this.loaders = {}, this.decryptkey = null, this.decrypturl = null, this.hls = t4, this.registerListeners();
          }
          var e4 = t3.prototype;
          return e4.startLoad = function(t4) {
          }, e4.stopLoad = function() {
            this.destroyInternalLoaders();
          }, e4.registerListeners = function() {
            this.hls.on(s.Events.KEY_LOADING, this.onKeyLoading, this);
          }, e4.unregisterListeners = function() {
            this.hls.off(s.Events.KEY_LOADING, this.onKeyLoading);
          }, e4.destroyInternalLoaders = function() {
            for (var t4 in this.loaders) {
              var e5 = this.loaders[t4];
              e5 && e5.destroy();
            }
            this.loaders = {};
          }, e4.destroy = function() {
            this.unregisterListeners(), this.destroyInternalLoaders();
          }, e4.onKeyLoading = function(t4, e5) {
            var r3 = e5.frag, i3 = r3.type, n2 = this.loaders[i3];
            if (r3.decryptdata) {
              var a3 = r3.decryptdata.uri;
              if (a3 !== this.decrypturl || null === this.decryptkey) {
                var o2 = this.hls.config;
                if (n2 && (l.logger.warn("abort previous key loader for type:" + i3), n2.abort()), !a3)
                  return void l.logger.warn("key uri is falsy");
                var u2 = o2.loader, d3 = r3.loader = this.loaders[i3] = new u2(o2);
                this.decrypturl = a3, this.decryptkey = null;
                var h2 = { url: a3, frag: r3, responseType: "arraybuffer" }, c3 = { timeout: o2.fragLoadingTimeOut, maxRetry: 0, retryDelay: o2.fragLoadingRetryDelay, maxRetryDelay: o2.fragLoadingMaxRetryTimeout, highWaterMark: 0 }, f3 = { onSuccess: this.loadsuccess.bind(this), onError: this.loaderror.bind(this), onTimeout: this.loadtimeout.bind(this) };
                d3.load(h2, c3, f3);
              } else
                this.decryptkey && (r3.decryptdata.key = this.decryptkey, this.hls.trigger(s.Events.KEY_LOADED, { frag: r3 }));
            } else
              l.logger.warn("Missing decryption data on fragment in onKeyLoading");
          }, e4.loadsuccess = function(t4, e5, r3) {
            var i3 = r3.frag;
            i3.decryptdata ? (this.decryptkey = i3.decryptdata.key = new Uint8Array(t4.data), i3.loader = null, delete this.loaders[i3.type], this.hls.trigger(s.Events.KEY_LOADED, { frag: i3 })) : l.logger.error("after key load, decryptdata unset");
          }, e4.loaderror = function(t4, e5) {
            var r3 = e5.frag, i3 = r3.loader;
            i3 && i3.abort(), delete this.loaders[r3.type], this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.KEY_LOAD_ERROR, fatal: false, frag: r3, response: t4 });
          }, e4.loadtimeout = function(t4, e5) {
            var r3 = e5.frag, i3 = r3.loader;
            i3 && i3.abort(), delete this.loaders[r3.type], this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.KEY_LOAD_TIMEOUT, fatal: false, frag: r3 });
          }, t3;
        }();
        function M(t3, e4) {
          var r3;
          try {
            r3 = new Event("addtrack");
          } catch (t4) {
            (r3 = document.createEvent("Event")).initEvent("addtrack", false, false);
          }
          r3.track = t3, e4.dispatchEvent(r3);
        }
        function N(t3, e4) {
          var r3 = t3.mode;
          if ("disabled" === r3 && (t3.mode = "hidden"), t3.cues && !t3.cues.getCueById(e4.id))
            try {
              if (t3.addCue(e4), !t3.cues.getCueById(e4.id))
                throw new Error("addCue is failed for: " + e4);
            } catch (r4) {
              l.logger.debug("[texttrack-utils]: " + r4);
              var i3 = new self.TextTrackCue(e4.startTime, e4.endTime, e4.text);
              i3.id = e4.id, t3.addCue(i3);
            }
          "disabled" === r3 && (t3.mode = r3);
        }
        function U(t3) {
          var e4 = t3.mode;
          if ("disabled" === e4 && (t3.mode = "hidden"), t3.cues)
            for (var r3 = t3.cues.length; r3--; )
              t3.removeCue(t3.cues[r3]);
          "disabled" === e4 && (t3.mode = e4);
        }
        function B(t3, e4, r3, i3) {
          var n2 = t3.mode;
          if ("disabled" === n2 && (t3.mode = "hidden"), t3.cues && t3.cues.length > 0)
            for (var a3 = function(t4, e5, r4) {
              var i4 = [], n3 = function(t5, e6) {
                if (e6 < t5[0].startTime)
                  return 0;
                var r5 = t5.length - 1;
                if (e6 > t5[r5].endTime)
                  return -1;
                for (var i5 = 0, n4 = r5; i5 <= n4; ) {
                  var a5 = Math.floor((n4 + i5) / 2);
                  if (e6 < t5[a5].startTime)
                    n4 = a5 - 1;
                  else {
                    if (!(e6 > t5[a5].startTime && i5 < r5))
                      return a5;
                    i5 = a5 + 1;
                  }
                }
                return t5[i5].startTime - e6 < e6 - t5[n4].startTime ? i5 : n4;
              }(t4, e5);
              if (n3 > -1)
                for (var a4 = n3, s3 = t4.length; a4 < s3; a4++) {
                  var o2 = t4[a4];
                  if (o2.startTime >= e5 && o2.endTime <= r4)
                    i4.push(o2);
                  else if (o2.startTime > r4)
                    return i4;
                }
              return i4;
            }(t3.cues, e4, r3), s2 = 0; s2 < a3.length; s2++)
              i3 && !i3(a3[s2]) || t3.removeCue(a3[s2]);
          "disabled" === n2 && (t3.mode = n2);
        }
        var G = r2(181), K = r2(856);
        function H() {
          return self.WebKitDataCue || self.VTTCue || self.TextTrackCue;
        }
        var j = function() {
          var t3 = H();
          try {
            new t3(0, Number.POSITIVE_INFINITY, "");
          } catch (t4) {
            return Number.MAX_VALUE;
          }
          return Number.POSITIVE_INFINITY;
        }();
        function V(t3, e4) {
          return t3.getTime() / 1e3 - e4;
        }
        const W = function() {
          function t3(t4) {
            this.hls = void 0, this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = t4, this._registerListeners();
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            this._unregisterListeners(), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = null;
          }, e4._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t4.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this);
          }, e4._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t4.off(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this);
          }, e4.onMediaAttached = function(t4, e5) {
            this.media = e5.media;
          }, e4.onMediaDetaching = function() {
            this.id3Track && (U(this.id3Track), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {});
          }, e4.onManifestLoading = function() {
            this.dateRangeCuesAppended = {};
          }, e4.createTrack = function(t4) {
            var e5 = this.getID3Track(t4.textTracks);
            return e5.mode = "hidden", e5;
          }, e4.getID3Track = function(t4) {
            if (this.media) {
              for (var e5 = 0; e5 < t4.length; e5++) {
                var r3 = t4[e5];
                if ("metadata" === r3.kind && "id3" === r3.label)
                  return M(r3, this.media), r3;
              }
              return this.media.addTextTrack("metadata", "id3");
            }
          }, e4.onFragParsingMetadata = function(t4, e5) {
            if (this.media) {
              var r3 = this.hls.config, i3 = r3.enableEmsgMetadataCues, n2 = r3.enableID3MetadataCues;
              if (i3 || n2) {
                e5.frag;
                var a3 = e5.samples;
                e5.details, this.id3Track || (this.id3Track = this.createTrack(this.media));
                for (var s2 = H(), o2 = 0; o2 < a3.length; o2++) {
                  var l2 = a3[o2].type;
                  if ((l2 !== K.MetadataSchema.emsg || i3) && n2) {
                    var u2 = G.getID3Frames(a3[o2].data);
                    if (u2) {
                      var d3 = a3[o2].pts, h2 = d3 + a3[o2].duration;
                      h2 > j && (h2 = j), h2 - d3 <= 0 && (h2 = d3 + 0.25);
                      for (var c3 = 0; c3 < u2.length; c3++) {
                        var f3 = u2[c3];
                        if (!G.isTimeStampFrame(f3)) {
                          this.updateId3CueEnds(d3);
                          var g2 = new s2(d3, h2, "");
                          g2.value = f3, l2 && (g2.type = l2), this.id3Track.addCue(g2);
                        }
                      }
                    }
                  }
                }
              }
            }
          }, e4.updateId3CueEnds = function(t4) {
            var e5, r3 = null === (e5 = this.id3Track) || void 0 === e5 ? void 0 : e5.cues;
            if (r3)
              for (var i3 = r3.length; i3--; ) {
                var n2 = r3[i3];
                n2.startTime < t4 && n2.endTime === j && (n2.endTime = t4);
              }
          }, e4.onBufferFlushing = function(t4, e5) {
            var r3 = e5.startOffset, i3 = e5.endOffset, n2 = e5.type, a3 = this.id3Track, s2 = this.hls;
            if (s2) {
              var o2 = s2.config, l2 = o2.enableEmsgMetadataCues, u2 = o2.enableID3MetadataCues;
              a3 && (l2 || u2) && B(a3, r3, i3, "audio" === n2 ? function(t5) {
                return t5.type === K.MetadataSchema.audioId3 && u2;
              } : "video" === n2 ? function(t5) {
                return t5.type === K.MetadataSchema.emsg && l2;
              } : function(t5) {
                return t5.type === K.MetadataSchema.audioId3 && u2 || t5.type === K.MetadataSchema.emsg && l2;
              });
            }
          }, e4.onLevelUpdated = function(t4, e5) {
            var r3 = this, n2 = e5.details;
            if (this.media && n2.hasProgramDateTime && this.hls.config.enableDateRangeMetadataCues) {
              var s2 = this.dateRangeCuesAppended, o2 = this.id3Track, l2 = n2.dateRanges, u2 = Object.keys(l2);
              if (o2)
                for (var d3 = Object.keys(s2).filter(function(t5) {
                  return !u2.includes(t5);
                }), h2 = function(t5) {
                  var e6 = d3[t5];
                  Object.keys(s2[e6].cues).forEach(function(t6) {
                    o2.removeCue(s2[e6].cues[t6]);
                  }), delete s2[e6];
                }, c3 = d3.length; c3--; )
                  h2(c3);
              var f3 = n2.fragments[n2.fragments.length - 1];
              if (0 !== u2.length && (0, a2.isFiniteNumber)(null == f3 ? void 0 : f3.programDateTime)) {
                this.id3Track || (this.id3Track = this.createTrack(this.media));
                for (var g2 = f3.programDateTime / 1e3 - f3.start, v2 = H(), p2 = function(t5) {
                  var e6 = u2[t5], n3 = l2[e6], a3 = s2[e6], o3 = (null == a3 ? void 0 : a3.cues) || {}, d4 = (null == a3 ? void 0 : a3.durationKnown) || false, h3 = V(n3.startDate, g2), c4 = j, f4 = n3.endDate;
                  if (f4)
                    c4 = V(f4, g2), d4 = true;
                  else if (n3.endOnNext && !d4) {
                    var p3 = u2.reduce(function(t6, e7) {
                      var r4 = l2[e7];
                      return r4.class === n3.class && r4.id !== e7 && r4.startDate > n3.startDate && t6.push(r4), t6;
                    }, []).sort(function(t6, e7) {
                      return t6.startDate.getTime() - e7.startDate.getTime();
                    })[0];
                    p3 && (c4 = V(p3.startDate, g2), d4 = true);
                  }
                  for (var m3, y2 = Object.keys(n3.attr), E2 = 0; E2 < y2.length; E2++) {
                    var T2 = y2[E2];
                    if (T2 !== i2.ID && T2 !== i2.CLASS && T2 !== i2.START_DATE && T2 !== i2.DURATION && T2 !== i2.END_DATE && T2 !== i2.END_ON_NEXT) {
                      var S2 = o3[T2];
                      if (S2)
                        d4 && !a3.durationKnown && (S2.endTime = c4);
                      else {
                        var b3 = n3.attr[T2];
                        S2 = new v2(h3, c4, ""), T2 !== i2.SCTE35_OUT && T2 !== i2.SCTE35_IN || (m3 = b3, b3 = Uint8Array.from(m3.replace(/^0x/, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")).buffer), S2.value = { key: T2, data: b3 }, S2.type = K.MetadataSchema.dateRange, r3.id3Track.addCue(S2), o3[T2] = S2;
                      }
                    }
                  }
                  s2[e6] = { cues: o3, dateRange: n3, durationKnown: d4 };
                }, m2 = 0; m2 < u2.length; m2++)
                  p2(m2);
              }
            }
          }, t3;
        }();
        function Y(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        var q, z = function() {
          function t3(t4) {
            var e5 = this;
            this.hls = void 0, this.config = void 0, this.media = null, this.levelDetails = null, this.currentTime = 0, this.stallCount = 0, this._latency = null, this.timeupdateHandler = function() {
              return e5.timeupdate();
            }, this.hls = t4, this.config = t4.config, this.registerListeners();
          }
          var e4, r3, i3 = t3.prototype;
          return i3.destroy = function() {
            this.unregisterListeners(), this.onMediaDetaching(), this.levelDetails = null, this.hls = this.timeupdateHandler = null;
          }, i3.registerListeners = function() {
            this.hls.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.on(s.Events.ERROR, this.onError, this);
          }, i3.unregisterListeners = function() {
            this.hls.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached), this.hls.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching), this.hls.off(s.Events.MANIFEST_LOADING, this.onManifestLoading), this.hls.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated), this.hls.off(s.Events.ERROR, this.onError);
          }, i3.onMediaAttached = function(t4, e5) {
            this.media = e5.media, this.media.addEventListener("timeupdate", this.timeupdateHandler);
          }, i3.onMediaDetaching = function() {
            this.media && (this.media.removeEventListener("timeupdate", this.timeupdateHandler), this.media = null);
          }, i3.onManifestLoading = function() {
            this.levelDetails = null, this._latency = null, this.stallCount = 0;
          }, i3.onLevelUpdated = function(t4, e5) {
            var r4 = e5.details;
            this.levelDetails = r4, r4.advanced && this.timeupdate(), !r4.live && this.media && this.media.removeEventListener("timeupdate", this.timeupdateHandler);
          }, i3.onError = function(t4, e5) {
            e5.details === o.ErrorDetails.BUFFER_STALLED_ERROR && (this.stallCount++, l.logger.warn("[playback-rate-controller]: Stall detected, adjusting target latency"));
          }, i3.timeupdate = function() {
            var t4 = this.media, e5 = this.levelDetails;
            if (t4 && e5) {
              this.currentTime = t4.currentTime;
              var r4 = this.computeLatency();
              if (null !== r4) {
                this._latency = r4;
                var i4 = this.config, n2 = i4.lowLatencyMode, a3 = i4.maxLiveSyncPlaybackRate;
                if (n2 && 1 !== a3) {
                  var s2 = this.targetLatency;
                  if (null !== s2) {
                    var o2 = r4 - s2, l2 = o2 < Math.min(this.maxLatency, s2 + e5.targetduration);
                    if (e5.live && l2 && o2 > 0.05 && this.forwardBufferLength > 1) {
                      var u2 = Math.min(2, Math.max(1, a3)), d3 = Math.round(2 / (1 + Math.exp(-0.75 * o2 - this.edgeStalled)) * 20) / 20;
                      t4.playbackRate = Math.min(u2, Math.max(1, d3));
                    } else
                      1 !== t4.playbackRate && 0 !== t4.playbackRate && (t4.playbackRate = 1);
                  }
                }
              }
            }
          }, i3.estimateLiveEdge = function() {
            var t4 = this.levelDetails;
            return null === t4 ? null : t4.edge + t4.age;
          }, i3.computeLatency = function() {
            var t4 = this.estimateLiveEdge();
            return null === t4 ? null : t4 - this.currentTime;
          }, e4 = t3, (r3 = [{ key: "latency", get: function() {
            return this._latency || 0;
          } }, { key: "maxLatency", get: function() {
            var t4 = this.config, e5 = this.levelDetails;
            return void 0 !== t4.liveMaxLatencyDuration ? t4.liveMaxLatencyDuration : e5 ? t4.liveMaxLatencyDurationCount * e5.targetduration : 0;
          } }, { key: "targetLatency", get: function() {
            var t4 = this.levelDetails;
            if (null === t4)
              return null;
            var e5 = t4.holdBack, r4 = t4.partHoldBack, i4 = t4.targetduration, n2 = this.config, a3 = n2.liveSyncDuration, s2 = n2.liveSyncDurationCount, o2 = n2.lowLatencyMode, l2 = this.hls.userConfig, u2 = o2 && r4 || e5;
            (l2.liveSyncDuration || l2.liveSyncDurationCount || 0 === u2) && (u2 = void 0 !== a3 ? a3 : s2 * i4);
            var d3 = i4;
            return u2 + Math.min(1 * this.stallCount, d3);
          } }, { key: "liveSyncPosition", get: function() {
            var t4 = this.estimateLiveEdge(), e5 = this.targetLatency, r4 = this.levelDetails;
            if (null === t4 || null === e5 || null === r4)
              return null;
            var i4 = r4.edge, n2 = t4 - e5 - this.edgeStalled, a3 = i4 - r4.totalduration, s2 = i4 - (this.config.lowLatencyMode && r4.partTarget || r4.targetduration);
            return Math.min(Math.max(a3, n2), s2);
          } }, { key: "drift", get: function() {
            var t4 = this.levelDetails;
            return null === t4 ? 1 : t4.drift;
          } }, { key: "edgeStalled", get: function() {
            var t4 = this.levelDetails;
            if (null === t4)
              return 0;
            var e5 = 3 * (this.config.lowLatencyMode && t4.partTarget || t4.targetduration);
            return Math.max(t4.age - e5, 0);
          } }, { key: "forwardBufferLength", get: function() {
            var t4 = this.media, e5 = this.levelDetails;
            if (!t4 || !e5)
              return 0;
            var r4 = t4.buffered.length;
            return (r4 ? t4.buffered.end(r4 - 1) : e5.edge) - this.currentTime;
          } }]) && Y(e4.prototype, r3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }();
        function X(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        !function(t3) {
          t3.No = "", t3.Yes = "YES", t3.v2 = "v2";
        }(q || (q = {}));
        var Q = function() {
          function t3(t4, e4, r3) {
            this.msn = void 0, this.part = void 0, this.skip = void 0, this.msn = t4, this.part = e4, this.skip = r3;
          }
          return t3.prototype.addDirectives = function(t4) {
            var e4 = new self.URL(t4);
            return void 0 !== this.msn && e4.searchParams.set("_HLS_msn", this.msn.toString()), void 0 !== this.part && e4.searchParams.set("_HLS_part", this.part.toString()), this.skip && e4.searchParams.set("_HLS_skip", this.skip), e4.toString();
          }, t3;
        }(), $ = function() {
          function t3(t4) {
            this.attrs = void 0, this.audioCodec = void 0, this.bitrate = void 0, this.codecSet = void 0, this.height = void 0, this.id = void 0, this.name = void 0, this.videoCodec = void 0, this.width = void 0, this.unknownCodecs = void 0, this.audioGroupIds = void 0, this.details = void 0, this.fragmentError = 0, this.loadError = 0, this.loaded = void 0, this.realBitrate = 0, this.textGroupIds = void 0, this.url = void 0, this._urlId = 0, this.url = [t4.url], this.attrs = t4.attrs, this.bitrate = t4.bitrate, t4.details && (this.details = t4.details), this.id = t4.id || 0, this.name = t4.name, this.width = t4.width || 0, this.height = t4.height || 0, this.audioCodec = t4.audioCodec, this.videoCodec = t4.videoCodec, this.unknownCodecs = t4.unknownCodecs, this.codecSet = [t4.videoCodec, t4.audioCodec].filter(function(t5) {
              return t5;
            }).join(",").replace(/\.[^.,]+/g, "");
          }
          var e4, r3;
          return e4 = t3, (r3 = [{ key: "maxBitrate", get: function() {
            return Math.max(this.realBitrate, this.bitrate);
          } }, { key: "uri", get: function() {
            return this.url[this._urlId] || "";
          } }, { key: "urlId", get: function() {
            return this._urlId;
          }, set: function(t4) {
            var e5 = t4 % this.url.length;
            this._urlId !== e5 && (this.details = void 0, this._urlId = e5);
          } }]) && X(e4.prototype, r3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }();
        function Z() {
          return Z = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, Z.apply(this, arguments);
        }
        function J(t3, e4, r3) {
          switch (e4) {
            case "audio":
              t3.audioGroupIds || (t3.audioGroupIds = []), t3.audioGroupIds.push(r3);
              break;
            case "text":
              t3.textGroupIds || (t3.textGroupIds = []), t3.textGroupIds.push(r3);
          }
        }
        function tt(t3) {
          var e4 = {};
          t3.forEach(function(t4) {
            var r3 = t4.groupId || "";
            t4.id = e4[r3] = e4[r3] || 0, e4[r3]++;
          });
        }
        function et(t3, e4) {
          var r3 = e4.startPTS;
          if ((0, a2.isFiniteNumber)(r3)) {
            var i3, n2 = 0;
            e4.sn > t3.sn ? (n2 = r3 - t3.start, i3 = t3) : (n2 = t3.start - r3, i3 = e4), i3.duration !== n2 && (i3.duration = n2);
          } else
            e4.sn > t3.sn ? t3.cc === e4.cc && t3.minEndPTS ? e4.start = t3.start + (t3.minEndPTS - t3.start) : e4.start = t3.start + t3.duration : e4.start = Math.max(t3.start - e4.duration, 0);
        }
        function rt(t3, e4, r3, i3, n2, s2) {
          i3 - r3 <= 0 && (l.logger.warn("Fragment should have a positive duration", e4), i3 = r3 + e4.duration, s2 = n2 + e4.duration);
          var o2 = r3, u2 = i3, d3 = e4.startPTS, h2 = e4.endPTS;
          if ((0, a2.isFiniteNumber)(d3)) {
            var c3 = Math.abs(d3 - r3);
            (0, a2.isFiniteNumber)(e4.deltaPTS) ? e4.deltaPTS = Math.max(c3, e4.deltaPTS) : e4.deltaPTS = c3, o2 = Math.max(r3, d3), r3 = Math.min(r3, d3), n2 = Math.min(n2, e4.startDTS), u2 = Math.min(i3, h2), i3 = Math.max(i3, h2), s2 = Math.max(s2, e4.endDTS);
          }
          e4.duration = i3 - r3;
          var f3 = r3 - e4.start;
          e4.appendedPTS = i3, e4.start = e4.startPTS = r3, e4.maxStartPTS = o2, e4.startDTS = n2, e4.endPTS = i3, e4.minEndPTS = u2, e4.endDTS = s2;
          var g2, v2 = e4.sn;
          if (!t3 || v2 < t3.startSN || v2 > t3.endSN)
            return 0;
          var p2 = v2 - t3.startSN, m2 = t3.fragments;
          for (m2[p2] = e4, g2 = p2; g2 > 0; g2--)
            et(m2[g2], m2[g2 - 1]);
          for (g2 = p2; g2 < m2.length - 1; g2++)
            et(m2[g2], m2[g2 + 1]);
          return t3.fragmentHint && et(m2[m2.length - 1], t3.fragmentHint), t3.PTSKnown = t3.alignedSliding = true, f3;
        }
        function it(t3, e4) {
          var r3 = e4.startSN + e4.skippedSegments - t3.startSN, i3 = t3.fragments;
          r3 < 0 || r3 >= i3.length || nt(e4, i3[r3].start);
        }
        function nt(t3, e4) {
          if (e4) {
            for (var r3 = t3.fragments, i3 = t3.skippedSegments; i3 < r3.length; i3++)
              r3[i3].start += e4;
            t3.fragmentHint && (t3.fragmentHint.start += e4);
          }
        }
        var at = function() {
          function t3(t4, e5) {
            this.hls = void 0, this.timer = -1, this.canLoad = false, this.retryCount = 0, this.log = void 0, this.warn = void 0, this.log = l.logger.log.bind(l.logger, e5 + ":"), this.warn = l.logger.warn.bind(l.logger, e5 + ":"), this.hls = t4;
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            this.clearTimer(), this.hls = this.log = this.warn = null;
          }, e4.onError = function(t4, e5) {
            e5.fatal && e5.type === o.ErrorTypes.NETWORK_ERROR && this.clearTimer();
          }, e4.clearTimer = function() {
            clearTimeout(this.timer), this.timer = -1;
          }, e4.startLoad = function() {
            this.canLoad = true, this.retryCount = 0, this.loadPlaylist();
          }, e4.stopLoad = function() {
            this.canLoad = false, this.clearTimer();
          }, e4.switchParams = function(t4, e5) {
            var r3 = null == e5 ? void 0 : e5.renditionReports;
            if (r3)
              for (var i3 = 0; i3 < r3.length; i3++) {
                var n2 = r3[i3], s2 = "" + n2.URI;
                if (s2 === t4.slice(-s2.length)) {
                  var o2 = parseInt(n2["LAST-MSN"]), l2 = parseInt(n2["LAST-PART"]);
                  if (e5 && this.hls.config.lowLatencyMode) {
                    var u2 = Math.min(e5.age - e5.partTarget, e5.targetduration);
                    void 0 !== l2 && u2 > e5.partTarget && (l2 += 1);
                  }
                  if ((0, a2.isFiniteNumber)(o2))
                    return new Q(o2, (0, a2.isFiniteNumber)(l2) ? l2 : void 0, q.No);
                }
              }
          }, e4.loadPlaylist = function(t4) {
          }, e4.shouldLoadTrack = function(t4) {
            return this.canLoad && t4 && !!t4.url && (!t4.details || t4.details.live);
          }, e4.playlistLoaded = function(t4, e5, r3) {
            var i3 = this, n2 = e5.details, s2 = e5.stats, o2 = s2.loading.end ? Math.max(0, self.performance.now() - s2.loading.end) : 0;
            if (n2.advancedDateTime = Date.now() - o2, n2.live || null != r3 && r3.live) {
              if (n2.reloaded(r3), r3 && this.log("live playlist " + t4 + " " + (n2.advanced ? "REFRESHED " + n2.lastPartSn + "-" + n2.lastPartIndex : "MISSED")), r3 && n2.fragments.length > 0 && function(t5, e6) {
                for (var r4 = null, i4 = t5.fragments, n3 = i4.length - 1; n3 >= 0; n3--) {
                  var s3 = i4[n3].initSegment;
                  if (s3) {
                    r4 = s3;
                    break;
                  }
                }
                t5.fragmentHint && delete t5.fragmentHint.endPTS;
                var o3, u3, d4, h3, c4, f4 = 0;
                if (function(t6, e7, r5) {
                  for (var i5 = e7.skippedSegments, n4 = Math.max(t6.startSN, e7.startSN) - e7.startSN, a3 = (t6.fragmentHint ? 1 : 0) + (i5 ? e7.endSN : Math.min(t6.endSN, e7.endSN)) - e7.startSN, s4 = e7.startSN - t6.startSN, o4 = e7.fragmentHint ? e7.fragments.concat(e7.fragmentHint) : e7.fragments, l2 = t6.fragmentHint ? t6.fragments.concat(t6.fragmentHint) : t6.fragments, u4 = n4; u4 <= a3; u4++) {
                    var d5 = l2[s4 + u4], h4 = o4[u4];
                    i5 && !h4 && u4 < i5 && (h4 = e7.fragments[u4] = d5), d5 && h4 && r5(d5, h4);
                  }
                }(t5, e6, function(t6, i5) {
                  t6.relurl && (f4 = t6.cc - i5.cc), (0, a2.isFiniteNumber)(t6.startPTS) && (0, a2.isFiniteNumber)(t6.endPTS) && (i5.start = i5.startPTS = t6.startPTS, i5.startDTS = t6.startDTS, i5.appendedPTS = t6.appendedPTS, i5.maxStartPTS = t6.maxStartPTS, i5.endPTS = t6.endPTS, i5.endDTS = t6.endDTS, i5.minEndPTS = t6.minEndPTS, i5.duration = t6.endPTS - t6.startPTS, i5.duration && (o3 = i5), e6.PTSKnown = e6.alignedSliding = true), i5.elementaryStreams = t6.elementaryStreams, i5.loader = t6.loader, i5.stats = t6.stats, i5.urlId = t6.urlId, t6.initSegment && (i5.initSegment = t6.initSegment, r4 = t6.initSegment);
                }), r4 && (e6.fragmentHint ? e6.fragments.concat(e6.fragmentHint) : e6.fragments).forEach(function(t6) {
                  var e7;
                  t6.initSegment && t6.initSegment.relurl !== (null === (e7 = r4) || void 0 === e7 ? void 0 : e7.relurl) || (t6.initSegment = r4);
                }), e6.skippedSegments)
                  if (e6.deltaUpdateFailed = e6.fragments.some(function(t6) {
                    return !t6;
                  }), e6.deltaUpdateFailed) {
                    l.logger.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
                    for (var g3 = e6.skippedSegments; g3--; )
                      e6.fragments.shift();
                    e6.startSN = e6.fragments[0].sn, e6.startCC = e6.fragments[0].cc;
                  } else
                    e6.canSkipDateRanges && (e6.dateRanges = (u3 = t5.dateRanges, d4 = e6.dateRanges, h3 = e6.recentlyRemovedDateranges, c4 = Z({}, u3), h3 && h3.forEach(function(t6) {
                      delete c4[t6];
                    }), Object.keys(d4).forEach(function(t6) {
                      var e7 = new v(d4[t6].attr, c4[t6]);
                      e7.isValid ? c4[t6] = e7 : l.logger.warn('Ignoring invalid Playlist Delta Update DATERANGE tag: "' + JSON.stringify(d4[t6].attr) + '"');
                    }), c4));
                var p3 = e6.fragments;
                if (f4) {
                  l.logger.warn("discontinuity sliding from playlist, take drift into account");
                  for (var m3 = 0; m3 < p3.length; m3++)
                    p3[m3].cc += f4;
                }
                e6.skippedSegments && (e6.startCC = e6.fragments[0].cc), function(t6, e7, r5) {
                  if (t6 && e7)
                    for (var i5 = 0, n4 = 0, a3 = t6.length; n4 <= a3; n4++) {
                      var s4 = t6[n4], o4 = e7[n4 + i5];
                      s4 && o4 && s4.index === o4.index && s4.fragment.sn === o4.fragment.sn ? (l2 = s4, (u4 = o4).elementaryStreams = l2.elementaryStreams, u4.stats = l2.stats) : i5--;
                    }
                  var l2, u4;
                }(t5.partList, e6.partList), o3 ? rt(e6, o3, o3.startPTS, o3.endPTS, o3.startDTS, o3.endDTS) : it(t5, e6), p3.length && (e6.totalduration = e6.edge - p3[0].start), e6.driftStartTime = t5.driftStartTime, e6.driftStart = t5.driftStart;
                var y3 = e6.advancedDateTime;
                if (e6.advanced && y3) {
                  var E3 = e6.edge;
                  e6.driftStart || (e6.driftStartTime = y3, e6.driftStart = E3), e6.driftEndTime = y3, e6.driftEnd = E3;
                } else
                  e6.driftEndTime = t5.driftEndTime, e6.driftEnd = t5.driftEnd, e6.advancedDateTime = t5.advancedDateTime;
              }(r3, n2), !this.canLoad || !n2.live)
                return;
              var u2, d3 = void 0, h2 = void 0;
              if (n2.canBlockReload && n2.endSN && n2.advanced) {
                var c3 = this.hls.config.lowLatencyMode, f3 = n2.lastPartSn, g2 = n2.endSN, p2 = n2.lastPartIndex, m2 = f3 === g2;
                -1 !== p2 ? (d3 = m2 ? g2 + 1 : f3, h2 = m2 ? c3 ? 0 : p2 : p2 + 1) : d3 = g2 + 1;
                var y2 = n2.age, E2 = y2 + n2.ageHeader, T2 = Math.min(E2 - n2.partTarget, 1.5 * n2.targetduration);
                if (T2 > 0) {
                  if (r3 && T2 > r3.tuneInGoal)
                    this.warn("CDN Tune-in goal increased from: " + r3.tuneInGoal + " to: " + T2 + " with playlist age: " + n2.age), T2 = 0;
                  else {
                    var S2 = Math.floor(T2 / n2.targetduration);
                    d3 += S2, void 0 !== h2 && (h2 += Math.round(T2 % n2.targetduration / n2.partTarget)), this.log("CDN Tune-in age: " + n2.ageHeader + "s last advanced " + y2.toFixed(2) + "s goal: " + T2 + " skip sn " + S2 + " to part " + h2);
                  }
                  n2.tuneInGoal = T2;
                }
                if (u2 = this.getDeliveryDirectives(n2, e5.deliveryDirectives, d3, h2), c3 || !m2)
                  return void this.loadPlaylist(u2);
              } else
                u2 = this.getDeliveryDirectives(n2, e5.deliveryDirectives, d3, h2);
              var b3 = function(t5, e6) {
                var r4, i4 = 1e3 * t5.levelTargetDuration, n3 = i4 / 2, a3 = t5.age, s3 = a3 > 0 && a3 < 3 * i4, o3 = e6.loading.end - e6.loading.start, l2 = t5.availabilityDelay;
                if (false === t5.updated)
                  if (s3) {
                    var u3 = 333 * t5.misses;
                    r4 = Math.max(Math.min(n3, 2 * o3), u3), t5.availabilityDelay = (t5.availabilityDelay || 0) + r4;
                  } else
                    r4 = n3;
                else
                  s3 ? (l2 = Math.min(l2 || i4 / 2, a3), t5.availabilityDelay = l2, r4 = l2 + i4 - a3) : r4 = i4 - o3;
                return Math.round(r4);
              }(n2, s2);
              void 0 !== d3 && n2.canBlockReload && (b3 -= n2.partTarget || 1), this.log("reload live playlist " + t4 + " in " + Math.round(b3) + " ms"), this.timer = self.setTimeout(function() {
                return i3.loadPlaylist(u2);
              }, b3);
            } else
              this.clearTimer();
          }, e4.getDeliveryDirectives = function(t4, e5, r3, i3) {
            var n2 = function(t5, e6) {
              var r4 = t5.canSkipUntil, i4 = t5.canSkipDateRanges, n3 = t5.endSN;
              return r4 && (void 0 !== e6 ? e6 - n3 : 0) < r4 ? i4 ? q.v2 : q.Yes : q.No;
            }(t4, r3);
            return null != e5 && e5.skip && t4.deltaUpdateFailed && (r3 = e5.msn, i3 = e5.part, n2 = q.No), new Q(r3, i3, n2);
          }, e4.retryLoadingOrFail = function(t4) {
            var e5, r3 = this, i3 = this.hls.config, n2 = this.retryCount < i3.levelLoadingMaxRetry;
            if (n2)
              if (this.retryCount++, t4.details.indexOf("LoadTimeOut") > -1 && null !== (e5 = t4.context) && void 0 !== e5 && e5.deliveryDirectives)
                this.warn("retry playlist loading #" + this.retryCount + ' after "' + t4.details + '"'), this.loadPlaylist();
              else {
                var a3 = Math.min(Math.pow(2, this.retryCount) * i3.levelLoadingRetryDelay, i3.levelLoadingMaxRetryTimeout);
                this.timer = self.setTimeout(function() {
                  return r3.loadPlaylist();
                }, a3), this.warn("retry playlist loading #" + this.retryCount + " in " + a3 + ' ms after "' + t4.details + '"');
              }
            else
              this.warn('cannot recover from error "' + t4.details + '"'), this.clearTimer(), t4.fatal = true;
            return n2;
          }, t3;
        }();
        function st() {
          return st = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, st.apply(this, arguments);
        }
        function ot(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        function lt(t3, e4) {
          return lt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, lt(t3, e4);
        }
        var ut, dt = /chrome|firefox/.test(navigator.userAgent.toLowerCase()), ht = function(t3) {
          var e4, r3;
          function i3(e5) {
            var r4;
            return (r4 = t3.call(this, e5, "[level-controller]") || this)._levels = [], r4._firstLevel = -1, r4._startLevel = void 0, r4.currentLevelIndex = -1, r4.manualLevelIndex = -1, r4.onParsedComplete = void 0, r4._registerListeners(), r4;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, lt(e4, r3);
          var n2, a3, l2 = i3.prototype;
          return l2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.on(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.on(s.Events.ERROR, this.onError, this);
          }, l2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.off(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.off(s.Events.ERROR, this.onError, this);
          }, l2.destroy = function() {
            this._unregisterListeners(), this.manualLevelIndex = -1, this._levels.length = 0, t3.prototype.destroy.call(this);
          }, l2.startLoad = function() {
            this._levels.forEach(function(t4) {
              t4.loadError = 0;
            }), t3.prototype.startLoad.call(this);
          }, l2.onManifestLoaded = function(t4, e5) {
            var r4, i4, n3 = [], a4 = [], l3 = [], u2 = {}, d3 = false, h2 = false, c3 = false;
            if (e5.levels.forEach(function(t5) {
              var e6 = t5.attrs;
              d3 = d3 || !(!t5.width || !t5.height), h2 = h2 || !!t5.videoCodec, c3 = c3 || !!t5.audioCodec, dt && t5.audioCodec && -1 !== t5.audioCodec.indexOf("mp4a.40.34") && (t5.audioCodec = void 0);
              var r5 = t5.bitrate + "-" + t5.attrs.RESOLUTION + "-" + t5.attrs.CODECS;
              (i4 = u2[r5]) ? i4.url.push(t5.url) : (i4 = new $(t5), u2[r5] = i4, n3.push(i4)), e6 && (e6.AUDIO && J(i4, "audio", e6.AUDIO), e6.SUBTITLES && J(i4, "text", e6.SUBTITLES));
            }), (d3 || h2) && c3 && (n3 = n3.filter(function(t5) {
              var e6 = t5.videoCodec, r5 = t5.width, i5 = t5.height;
              return !!e6 || !(!r5 || !i5);
            })), n3 = n3.filter(function(t5) {
              var e6 = t5.audioCodec, r5 = t5.videoCodec;
              return (!e6 || S(e6, "audio")) && (!r5 || S(r5, "video"));
            }), e5.audioTracks && tt(a4 = e5.audioTracks.filter(function(t5) {
              return !t5.audioCodec || S(t5.audioCodec, "audio");
            })), e5.subtitles && tt(l3 = e5.subtitles), n3.length > 0) {
              r4 = n3[0].bitrate, n3.sort(function(t5, e6) {
                return t5.bitrate - e6.bitrate;
              }), this._levels = n3;
              for (var f3 = 0; f3 < n3.length; f3++)
                if (n3[f3].bitrate === r4) {
                  this._firstLevel = f3, this.log("manifest loaded, " + n3.length + " level(s) found, first bitrate: " + r4);
                  break;
                }
              var g2 = c3 && !h2, v2 = { levels: n3, audioTracks: a4, subtitleTracks: l3, firstLevel: this._firstLevel, stats: e5.stats, audio: c3, video: h2, altAudio: !g2 && a4.some(function(t5) {
                return !!t5.url;
              }) };
              this.hls.trigger(s.Events.MANIFEST_PARSED, v2), (this.hls.config.autoStartLoad || this.hls.forceStartLoad) && this.hls.startLoad(this.hls.config.startPosition);
            } else
              this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: true, url: e5.url, reason: "no level with compatible codecs found in manifest" });
          }, l2.onError = function(e5, r4) {
            var i4;
            if (t3.prototype.onError.call(this, e5, r4), !r4.fatal) {
              var n3 = r4.context, a4 = this._levels[this.currentLevelIndex];
              if (n3 && (n3.type === O.PlaylistContextType.AUDIO_TRACK && a4.audioGroupIds && n3.groupId === a4.audioGroupIds[a4.urlId] || n3.type === O.PlaylistContextType.SUBTITLE_TRACK && a4.textGroupIds && n3.groupId === a4.textGroupIds[a4.urlId]))
                this.redundantFailover(this.currentLevelIndex);
              else {
                var s2, l3 = false, u2 = true;
                switch (r4.details) {
                  case o.ErrorDetails.FRAG_LOAD_ERROR:
                  case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                  case o.ErrorDetails.KEY_LOAD_ERROR:
                  case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                    if (r4.frag) {
                      var d3 = r4.frag.type === O.PlaylistLevelType.MAIN ? r4.frag.level : this.currentLevelIndex, h2 = this._levels[d3];
                      h2 ? (h2.fragmentError++, h2.fragmentError > this.hls.config.fragLoadingMaxRetry && (s2 = d3)) : s2 = d3;
                    }
                    break;
                  case o.ErrorDetails.LEVEL_LOAD_ERROR:
                  case o.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                    n3 && (n3.deliveryDirectives && (u2 = false), s2 = n3.level), l3 = true;
                    break;
                  case o.ErrorDetails.REMUX_ALLOC_ERROR:
                    s2 = null != (i4 = r4.level) ? i4 : this.currentLevelIndex, l3 = true;
                }
                void 0 !== s2 && this.recoverLevel(r4, s2, l3, u2);
              }
            }
          }, l2.recoverLevel = function(t4, e5, r4, i4) {
            var n3 = t4.details, a4 = this._levels[e5];
            if (a4.loadError++, r4) {
              if (!this.retryLoadingOrFail(t4))
                return void (this.currentLevelIndex = -1);
              t4.levelRetry = true;
            }
            if (i4) {
              var s2 = a4.url.length;
              if (s2 > 1 && a4.loadError < s2)
                t4.levelRetry = true, this.redundantFailover(e5);
              else if (-1 === this.manualLevelIndex) {
                for (var o2 = -1, l3 = this._levels, u2 = l3.length; u2--; ) {
                  var d3 = (u2 + this.currentLevelIndex) % l3.length;
                  if (d3 !== this.currentLevelIndex && 0 === l3[d3].loadError) {
                    o2 = d3;
                    break;
                  }
                }
                o2 > -1 && this.currentLevelIndex !== o2 && (this.warn(n3 + ": switch to " + o2), t4.levelRetry = true, this.hls.nextAutoLevel = o2);
              }
            }
          }, l2.redundantFailover = function(t4) {
            var e5 = this._levels[t4], r4 = e5.url.length;
            if (r4 > 1) {
              var i4 = (e5.urlId + 1) % r4;
              this.warn("Switching to redundant URL-id " + i4), this._levels.forEach(function(t5) {
                t5.urlId = i4;
              }), this.level = t4;
            }
          }, l2.onFragLoaded = function(t4, e5) {
            var r4 = e5.frag;
            if (void 0 !== r4 && r4.type === O.PlaylistLevelType.MAIN) {
              var i4 = this._levels[r4.level];
              void 0 !== i4 && (i4.fragmentError = 0, i4.loadError = 0);
            }
          }, l2.onLevelLoaded = function(t4, e5) {
            var r4, i4, n3 = e5.level, a4 = e5.details, s2 = this._levels[n3];
            if (!s2)
              return this.warn("Invalid level index " + n3), void (null !== (i4 = e5.deliveryDirectives) && void 0 !== i4 && i4.skip && (a4.deltaUpdateFailed = true));
            n3 === this.currentLevelIndex ? (0 === s2.fragmentError && (s2.loadError = 0, this.retryCount = 0), this.playlistLoaded(n3, e5, s2.details)) : null !== (r4 = e5.deliveryDirectives) && void 0 !== r4 && r4.skip && (a4.deltaUpdateFailed = true);
          }, l2.onAudioTrackSwitched = function(t4, e5) {
            var r4 = this.hls.levels[this.currentLevelIndex];
            if (r4 && r4.audioGroupIds) {
              for (var i4 = -1, n3 = this.hls.audioTracks[e5.id].groupId, a4 = 0; a4 < r4.audioGroupIds.length; a4++)
                if (r4.audioGroupIds[a4] === n3) {
                  i4 = a4;
                  break;
                }
              i4 !== r4.urlId && (r4.urlId = i4, this.startLoad());
            }
          }, l2.loadPlaylist = function(t4) {
            var e5 = this.currentLevelIndex, r4 = this._levels[e5];
            if (this.canLoad && r4 && r4.url.length > 0) {
              var i4 = r4.urlId, n3 = r4.url[i4];
              if (t4)
                try {
                  n3 = t4.addDirectives(n3);
                } catch (t5) {
                  this.warn("Could not construct new URL with HLS Delivery Directives: " + t5);
                }
              this.log("Attempt loading level index " + e5 + (t4 ? " at sn " + t4.msn + " part " + t4.part : "") + " with URL-id " + i4 + " " + n3), this.clearTimer(), this.hls.trigger(s.Events.LEVEL_LOADING, { url: n3, level: e5, id: i4, deliveryDirectives: t4 || null });
            }
          }, l2.removeLevel = function(t4, e5) {
            var r4 = function(t5, r5) {
              return r5 !== e5;
            }, i4 = this._levels.filter(function(i5, n3) {
              return n3 !== t4 || i5.url.length > 1 && void 0 !== e5 && (i5.url = i5.url.filter(r4), i5.audioGroupIds && (i5.audioGroupIds = i5.audioGroupIds.filter(r4)), i5.textGroupIds && (i5.textGroupIds = i5.textGroupIds.filter(r4)), i5.urlId = 0, true);
            }).map(function(t5, e6) {
              var r5 = t5.details;
              return null != r5 && r5.fragments && r5.fragments.forEach(function(t6) {
                t6.level = e6;
              }), t5;
            });
            this._levels = i4, this.hls.trigger(s.Events.LEVELS_UPDATED, { levels: i4 });
          }, n2 = i3, (a3 = [{ key: "levels", get: function() {
            return 0 === this._levels.length ? null : this._levels;
          } }, { key: "level", get: function() {
            return this.currentLevelIndex;
          }, set: function(t4) {
            var e5, r4 = this._levels;
            if (0 !== r4.length && (this.currentLevelIndex !== t4 || null === (e5 = r4[t4]) || void 0 === e5 || !e5.details)) {
              if (t4 < 0 || t4 >= r4.length) {
                var i4 = t4 < 0;
                if (this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.OTHER_ERROR, details: o.ErrorDetails.LEVEL_SWITCH_ERROR, level: t4, fatal: i4, reason: "invalid level idx" }), i4)
                  return;
                t4 = Math.min(t4, r4.length - 1);
              }
              this.clearTimer();
              var n3 = this.currentLevelIndex, a4 = r4[n3], l3 = r4[t4];
              this.log("switching to level " + t4 + " from " + n3), this.currentLevelIndex = t4;
              var u2 = st({}, l3, { level: t4, maxBitrate: l3.maxBitrate, uri: l3.uri, urlId: l3.urlId });
              delete u2._urlId, this.hls.trigger(s.Events.LEVEL_SWITCHING, u2);
              var d3 = l3.details;
              if (!d3 || d3.live) {
                var h2 = this.switchParams(l3.uri, null == a4 ? void 0 : a4.details);
                this.loadPlaylist(h2);
              }
            }
          } }, { key: "manualLevel", get: function() {
            return this.manualLevelIndex;
          }, set: function(t4) {
            this.manualLevelIndex = t4, void 0 === this._startLevel && (this._startLevel = t4), -1 !== t4 && (this.level = t4);
          } }, { key: "firstLevel", get: function() {
            return this._firstLevel;
          }, set: function(t4) {
            this._firstLevel = t4;
          } }, { key: "startLevel", get: function() {
            if (void 0 === this._startLevel) {
              var t4 = this.hls.config.startLevel;
              return void 0 !== t4 ? t4 : this._firstLevel;
            }
            return this._startLevel;
          }, set: function(t4) {
            this._startLevel = t4;
          } }, { key: "nextLoadLevel", get: function() {
            return -1 !== this.manualLevelIndex ? this.manualLevelIndex : this.hls.nextAutoLevel;
          }, set: function(t4) {
            this.level = t4, -1 === this.manualLevelIndex && (this.hls.nextAutoLevel = t4);
          } }]) && ot(n2.prototype, a3), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(at);
        !function(t3) {
          t3.NOT_LOADED = "NOT_LOADED", t3.APPENDING = "APPENDING", t3.PARTIAL = "PARTIAL", t3.OK = "OK";
        }(ut || (ut = {}));
        var ct = function() {
          function t3(t4) {
            this.activeFragment = null, this.activeParts = null, this.fragments = /* @__PURE__ */ Object.create(null), this.timeRanges = /* @__PURE__ */ Object.create(null), this.bufferPadding = 0.2, this.hls = void 0, this.hls = t4, this._registerListeners();
          }
          var e4 = t3.prototype;
          return e4._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.BUFFER_APPENDED, this.onBufferAppended, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this), t4.on(s.Events.FRAG_LOADED, this.onFragLoaded, this);
          }, e4._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.BUFFER_APPENDED, this.onBufferAppended, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this), t4.off(s.Events.FRAG_LOADED, this.onFragLoaded, this);
          }, e4.destroy = function() {
            this._unregisterListeners(), this.fragments = this.timeRanges = null;
          }, e4.getAppendedFrag = function(t4, e5) {
            if (e5 === O.PlaylistLevelType.MAIN) {
              var r3 = this.activeFragment, i3 = this.activeParts;
              if (!r3)
                return null;
              if (i3)
                for (var n2 = i3.length; n2--; ) {
                  var a3 = i3[n2], s2 = a3 ? a3.end : r3.appendedPTS;
                  if (a3.start <= t4 && void 0 !== s2 && t4 <= s2)
                    return n2 > 9 && (this.activeParts = i3.slice(n2 - 9)), a3;
                }
              else if (r3.start <= t4 && void 0 !== r3.appendedPTS && t4 <= r3.appendedPTS)
                return r3;
            }
            return this.getBufferedFrag(t4, e5);
          }, e4.getBufferedFrag = function(t4, e5) {
            for (var r3 = this.fragments, i3 = Object.keys(r3), n2 = i3.length; n2--; ) {
              var a3 = r3[i3[n2]];
              if ((null == a3 ? void 0 : a3.body.type) === e5 && a3.buffered) {
                var s2 = a3.body;
                if (s2.start <= t4 && t4 <= s2.end)
                  return s2;
              }
            }
            return null;
          }, e4.detectEvictedFragments = function(t4, e5, r3) {
            var i3 = this;
            Object.keys(this.fragments).forEach(function(n2) {
              var a3 = i3.fragments[n2];
              if (a3)
                if (a3.buffered) {
                  var s2 = a3.range[t4];
                  s2 && s2.time.some(function(t5) {
                    var r4 = !i3.isTimeBuffered(t5.startPTS, t5.endPTS, e5);
                    return r4 && i3.removeFragment(a3.body), r4;
                  });
                } else
                  a3.body.type === r3 && i3.removeFragment(a3.body);
            });
          }, e4.detectPartialFragments = function(t4) {
            var e5 = this, r3 = this.timeRanges, i3 = t4.frag, n2 = t4.part;
            if (r3 && "initSegment" !== i3.sn) {
              var a3 = gt(i3), s2 = this.fragments[a3];
              s2 && (Object.keys(r3).forEach(function(t5) {
                var a4 = i3.elementaryStreams[t5];
                if (a4) {
                  var o2 = r3[t5], l2 = null !== n2 || true === a4.partial;
                  s2.range[t5] = e5.getBufferedTimes(i3, n2, l2, o2);
                }
              }), s2.loaded = null, Object.keys(s2.range).length ? s2.buffered = true : this.removeFragment(s2.body));
            }
          }, e4.fragBuffered = function(t4) {
            var e5 = gt(t4), r3 = this.fragments[e5];
            r3 && (r3.loaded = null, r3.buffered = true);
          }, e4.getBufferedTimes = function(t4, e5, r3, i3) {
            for (var n2 = { time: [], partial: r3 }, a3 = e5 ? e5.start : t4.start, s2 = e5 ? e5.end : t4.end, o2 = t4.minEndPTS || s2, l2 = t4.maxStartPTS || a3, u2 = 0; u2 < i3.length; u2++) {
              var d3 = i3.start(u2) - this.bufferPadding, h2 = i3.end(u2) + this.bufferPadding;
              if (l2 >= d3 && o2 <= h2) {
                n2.time.push({ startPTS: Math.max(a3, i3.start(u2)), endPTS: Math.min(s2, i3.end(u2)) });
                break;
              }
              if (a3 < h2 && s2 > d3)
                n2.partial = true, n2.time.push({ startPTS: Math.max(a3, i3.start(u2)), endPTS: Math.min(s2, i3.end(u2)) });
              else if (s2 <= d3)
                break;
            }
            return n2;
          }, e4.getPartialFragment = function(t4) {
            var e5, r3, i3, n2 = null, a3 = 0, s2 = this.bufferPadding, o2 = this.fragments;
            return Object.keys(o2).forEach(function(l2) {
              var u2 = o2[l2];
              u2 && ft(u2) && (r3 = u2.body.start - s2, i3 = u2.body.end + s2, t4 >= r3 && t4 <= i3 && (e5 = Math.min(t4 - r3, i3 - t4), a3 <= e5 && (n2 = u2.body, a3 = e5)));
            }), n2;
          }, e4.getState = function(t4) {
            var e5 = gt(t4), r3 = this.fragments[e5];
            return r3 ? r3.buffered ? ft(r3) ? ut.PARTIAL : ut.OK : ut.APPENDING : ut.NOT_LOADED;
          }, e4.isTimeBuffered = function(t4, e5, r3) {
            for (var i3, n2, a3 = 0; a3 < r3.length; a3++) {
              if (i3 = r3.start(a3) - this.bufferPadding, n2 = r3.end(a3) + this.bufferPadding, t4 >= i3 && e5 <= n2)
                return true;
              if (e5 <= i3)
                return false;
            }
            return false;
          }, e4.onFragLoaded = function(t4, e5) {
            var r3 = e5.frag, i3 = e5.part;
            if ("initSegment" !== r3.sn && !r3.bitrateTest && !i3) {
              var n2 = gt(r3);
              this.fragments[n2] = { body: r3, loaded: e5, buffered: false, range: /* @__PURE__ */ Object.create(null) };
            }
          }, e4.onBufferAppended = function(t4, e5) {
            var r3 = this, i3 = e5.frag, n2 = e5.part, a3 = e5.timeRanges;
            if (i3.type === O.PlaylistLevelType.MAIN)
              if (this.activeFragment = i3, n2) {
                var s2 = this.activeParts;
                s2 || (this.activeParts = s2 = []), s2.push(n2);
              } else
                this.activeParts = null;
            this.timeRanges = a3, Object.keys(a3).forEach(function(t5) {
              var e6 = a3[t5];
              if (r3.detectEvictedFragments(t5, e6), !n2)
                for (var s3 = 0; s3 < e6.length; s3++)
                  i3.appendedPTS = Math.max(e6.end(s3), i3.appendedPTS || 0);
            });
          }, e4.onFragBuffered = function(t4, e5) {
            this.detectPartialFragments(e5);
          }, e4.hasFragment = function(t4) {
            var e5 = gt(t4);
            return !!this.fragments[e5];
          }, e4.removeFragmentsInRange = function(t4, e5, r3) {
            var i3 = this;
            Object.keys(this.fragments).forEach(function(n2) {
              var a3 = i3.fragments[n2];
              if (a3 && a3.buffered) {
                var s2 = a3.body;
                s2.type === r3 && s2.start < e5 && s2.end > t4 && i3.removeFragment(s2);
              }
            });
          }, e4.removeFragment = function(t4) {
            var e5 = gt(t4);
            t4.stats.loaded = 0, t4.clearElementaryStreamInfo(), delete this.fragments[e5];
          }, e4.removeAllFragments = function() {
            this.fragments = /* @__PURE__ */ Object.create(null), this.activeFragment = null, this.activeParts = null;
          }, t3;
        }();
        function ft(t3) {
          var e4, r3;
          return t3.buffered && ((null === (e4 = t3.range.video) || void 0 === e4 ? void 0 : e4.partial) || (null === (r3 = t3.range.audio) || void 0 === r3 ? void 0 : r3.partial));
        }
        function gt(t3) {
          return t3.type + "_" + t3.level + "_" + t3.urlId + "_" + t3.sn;
        }
        var vt = function() {
          function t3() {
            this._boundTick = void 0, this._tickTimer = null, this._tickInterval = null, this._tickCallCount = 0, this._boundTick = this.tick.bind(this);
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            this.onHandlerDestroying(), this.onHandlerDestroyed();
          }, e4.onHandlerDestroying = function() {
            this.clearNextTick(), this.clearInterval();
          }, e4.onHandlerDestroyed = function() {
          }, e4.hasInterval = function() {
            return !!this._tickInterval;
          }, e4.hasNextTick = function() {
            return !!this._tickTimer;
          }, e4.setInterval = function(t4) {
            return !this._tickInterval && (this._tickInterval = self.setInterval(this._boundTick, t4), true);
          }, e4.clearInterval = function() {
            return !!this._tickInterval && (self.clearInterval(this._tickInterval), this._tickInterval = null, true);
          }, e4.clearNextTick = function() {
            return !!this._tickTimer && (self.clearTimeout(this._tickTimer), this._tickTimer = null, true);
          }, e4.tick = function() {
            this._tickCallCount++, 1 === this._tickCallCount && (this.doTick(), this._tickCallCount > 1 && this.tickImmediate(), this._tickCallCount = 0);
          }, e4.tickImmediate = function() {
            this.clearNextTick(), this._tickTimer = self.setTimeout(this._boundTick, 0);
          }, e4.doTick = function() {
          }, t3;
        }(), pt = { length: 0, start: function() {
          return 0;
        }, end: function() {
          return 0;
        } }, mt = function() {
          function t3() {
          }
          return t3.isBuffered = function(e4, r3) {
            try {
              if (e4) {
                for (var i3 = t3.getBuffered(e4), n2 = 0; n2 < i3.length; n2++)
                  if (r3 >= i3.start(n2) && r3 <= i3.end(n2))
                    return true;
              }
            } catch (t4) {
            }
            return false;
          }, t3.bufferInfo = function(e4, r3, i3) {
            try {
              if (e4) {
                var n2, a3 = t3.getBuffered(e4), s2 = [];
                for (n2 = 0; n2 < a3.length; n2++)
                  s2.push({ start: a3.start(n2), end: a3.end(n2) });
                return this.bufferedInfo(s2, r3, i3);
              }
            } catch (t4) {
            }
            return { len: 0, start: r3, end: r3, nextStart: void 0 };
          }, t3.bufferedInfo = function(t4, e4, r3) {
            e4 = Math.max(0, e4), t4.sort(function(t5, e5) {
              return t5.start - e5.start || e5.end - t5.end;
            });
            var i3 = [];
            if (r3)
              for (var n2 = 0; n2 < t4.length; n2++) {
                var a3 = i3.length;
                if (a3) {
                  var s2 = i3[a3 - 1].end;
                  t4[n2].start - s2 < r3 ? t4[n2].end > s2 && (i3[a3 - 1].end = t4[n2].end) : i3.push(t4[n2]);
                } else
                  i3.push(t4[n2]);
              }
            else
              i3 = t4;
            for (var o2, l2 = 0, u2 = e4, d3 = e4, h2 = 0; h2 < i3.length; h2++) {
              var c3 = i3[h2].start, f3 = i3[h2].end;
              if (e4 + r3 >= c3 && e4 < f3)
                u2 = c3, l2 = (d3 = f3) - e4;
              else if (e4 + r3 < c3) {
                o2 = c3;
                break;
              }
            }
            return { len: l2, start: u2 || 0, end: d3 || 0, nextStart: o2 };
          }, t3.getBuffered = function(t4) {
            try {
              return t4.buffered;
            } catch (t5) {
              return l.logger.log("failed to get media.buffered", t5), pt;
            }
          }, t3;
        }(), yt = function(t3, e4, r3, i3, n2, a3) {
          void 0 === i3 && (i3 = 0), void 0 === n2 && (n2 = -1), void 0 === a3 && (a3 = false), this.level = void 0, this.sn = void 0, this.part = void 0, this.id = void 0, this.size = void 0, this.partial = void 0, this.transmuxing = { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, this.buffering = { audio: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, video: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, audiovideo: { start: 0, executeStart: 0, executeEnd: 0, end: 0 } }, this.level = t3, this.sn = e4, this.id = r3, this.size = i3, this.part = n2, this.partial = a3;
        };
        function Et(t3, e4) {
          for (var r3 = null, i3 = 0, n2 = t3.length; i3 < n2; i3++) {
            var a3 = t3[i3];
            if (a3 && a3.cc === e4) {
              r3 = a3;
              break;
            }
          }
          return r3;
        }
        function Tt(t3, e4) {
          if (t3) {
            var r3 = t3.start + e4;
            t3.start = t3.startPTS = r3, t3.endPTS = r3 + t3.duration;
          }
        }
        function St(t3, e4) {
          for (var r3 = e4.fragments, i3 = 0, n2 = r3.length; i3 < n2; i3++)
            Tt(r3[i3], t3);
          e4.fragmentHint && Tt(e4.fragmentHint, t3), e4.alignedSliding = true;
        }
        function bt(t3, e4) {
          if (t3.hasProgramDateTime && e4.hasProgramDateTime) {
            var r3 = t3.fragments, i3 = e4.fragments;
            if (r3.length && i3.length) {
              var n2 = i3[Math.round(i3.length / 2) - 1], a3 = Et(r3, n2.cc) || r3[Math.round(r3.length / 2) - 1], s2 = n2.programDateTime, o2 = a3.programDateTime;
              null !== s2 && null !== o2 && St((o2 - s2) / 1e3 - (a3.start - n2.start), t3);
            }
          }
        }
        const Lt = function(t3, e4) {
          for (var r3 = 0, i3 = t3.length - 1, n2 = null, a3 = null; r3 <= i3; ) {
            var s2 = e4(a3 = t3[n2 = (r3 + i3) / 2 | 0]);
            if (s2 > 0)
              r3 = n2 + 1;
            else {
              if (!(s2 < 0))
                return a3;
              i3 = n2 - 1;
            }
          }
          return null;
        };
        function Dt(t3, e4, r3, i3) {
          void 0 === r3 && (r3 = 0), void 0 === i3 && (i3 = 0);
          var n2 = null;
          return t3 ? n2 = e4[t3.sn - e4[0].sn + 1] || null : 0 === r3 && 0 === e4[0].start && (n2 = e4[0]), n2 && 0 === At(r3, i3, n2) ? n2 : Lt(e4, At.bind(null, r3, i3)) || n2;
        }
        function At(t3, e4, r3) {
          void 0 === t3 && (t3 = 0), void 0 === e4 && (e4 = 0);
          var i3 = Math.min(e4, r3.duration + (r3.deltaPTS ? r3.deltaPTS : 0));
          return r3.start + r3.duration - i3 <= t3 ? 1 : r3.start - i3 > t3 && r3.start ? -1 : 0;
        }
        function Rt(t3, e4, r3) {
          var i3 = 1e3 * Math.min(e4, r3.duration + (r3.deltaPTS ? r3.deltaPTS : 0));
          return (r3.endProgramDateTime || 0) - i3 > t3;
        }
        function kt(t3) {
          var e4 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return kt = function(t4) {
            if (null === t4 || (r3 = t4, -1 === Function.toString.call(r3).indexOf("[native code]")))
              return t4;
            var r3;
            if ("function" != typeof t4)
              throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e4) {
              if (e4.has(t4))
                return e4.get(t4);
              e4.set(t4, i3);
            }
            function i3() {
              return It(t4, arguments, wt(this).constructor);
            }
            return i3.prototype = Object.create(t4.prototype, { constructor: { value: i3, enumerable: false, writable: true, configurable: true } }), Ct(i3, t4);
          }, kt(t3);
        }
        function It(t3, e4, r3) {
          return It = _t() ? Reflect.construct.bind() : function(t4, e5, r4) {
            var i3 = [null];
            i3.push.apply(i3, e5);
            var n2 = new (Function.bind.apply(t4, i3))();
            return r4 && Ct(n2, r4.prototype), n2;
          }, It.apply(null, arguments);
        }
        function _t() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }
        function Ct(t3, e4) {
          return Ct = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, Ct(t3, e4);
        }
        function wt(t3) {
          return wt = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          }, wt(t3);
        }
        var Ot = Math.pow(2, 17), xt = function() {
          function t3(t4) {
            this.config = void 0, this.loader = null, this.partLoadTimeout = -1, this.config = t4;
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            this.loader && (this.loader.destroy(), this.loader = null);
          }, e4.abort = function() {
            this.loader && this.loader.abort();
          }, e4.load = function(t4, e5) {
            var r3 = this, i3 = t4.url;
            if (!i3)
              return Promise.reject(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: t4, networkDetails: null }, "Fragment does not have a " + (i3 ? "part list" : "url")));
            this.abort();
            var n2 = this.config, a3 = n2.fLoader, s2 = n2.loader;
            return new Promise(function(i4, l2) {
              r3.loader && r3.loader.destroy();
              var u2 = r3.loader = t4.loader = a3 ? new a3(n2) : new s2(n2), d3 = Pt(t4), h2 = { timeout: n2.fragLoadingTimeOut, maxRetry: 0, retryDelay: 0, maxRetryDelay: n2.fragLoadingMaxRetryTimeout, highWaterMark: "initSegment" === t4.sn ? 1 / 0 : Ot };
              t4.stats = u2.stats, u2.load(d3, h2, { onSuccess: function(e6, n3, a4, s3) {
                r3.resetLoader(t4, u2), i4({ frag: t4, part: null, payload: e6.data, networkDetails: s3 });
              }, onError: function(e6, i5, n3) {
                r3.resetLoader(t4, u2), l2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: t4, response: e6, networkDetails: n3 }));
              }, onAbort: function(e6, i5, n3) {
                r3.resetLoader(t4, u2), l2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.INTERNAL_ABORTED, fatal: false, frag: t4, networkDetails: n3 }));
              }, onTimeout: function(e6, i5, n3) {
                r3.resetLoader(t4, u2), l2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: t4, networkDetails: n3 }));
              }, onProgress: function(r4, i5, n3, a4) {
                e5 && e5({ frag: t4, part: null, payload: n3, networkDetails: a4 });
              } });
            });
          }, e4.loadPart = function(t4, e5, r3) {
            var i3 = this;
            this.abort();
            var n2 = this.config, a3 = n2.fLoader, s2 = n2.loader;
            return new Promise(function(l2, u2) {
              i3.loader && i3.loader.destroy();
              var d3 = i3.loader = t4.loader = a3 ? new a3(n2) : new s2(n2), h2 = Pt(t4, e5), c3 = { timeout: n2.fragLoadingTimeOut, maxRetry: 0, retryDelay: 0, maxRetryDelay: n2.fragLoadingMaxRetryTimeout, highWaterMark: Ot };
              e5.stats = d3.stats, d3.load(h2, c3, { onSuccess: function(n3, a4, s3, o2) {
                i3.resetLoader(t4, d3), i3.updateStatsFromPart(t4, e5);
                var u3 = { frag: t4, part: e5, payload: n3.data, networkDetails: o2 };
                r3(u3), l2(u3);
              }, onError: function(r4, n3, a4) {
                i3.resetLoader(t4, d3), u2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: t4, part: e5, response: r4, networkDetails: a4 }));
              }, onAbort: function(r4, n3, a4) {
                t4.stats.aborted = e5.stats.aborted, i3.resetLoader(t4, d3), u2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.INTERNAL_ABORTED, fatal: false, frag: t4, part: e5, networkDetails: a4 }));
              }, onTimeout: function(r4, n3, a4) {
                i3.resetLoader(t4, d3), u2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: t4, part: e5, networkDetails: a4 }));
              } });
            });
          }, e4.updateStatsFromPart = function(t4, e5) {
            var r3 = t4.stats, i3 = e5.stats, n2 = i3.total;
            if (r3.loaded += i3.loaded, n2) {
              var a3 = Math.round(t4.duration / e5.duration), s2 = Math.min(Math.round(r3.loaded / n2), a3), o2 = (a3 - s2) * Math.round(r3.loaded / s2);
              r3.total = r3.loaded + o2;
            } else
              r3.total = Math.max(r3.loaded, r3.total);
            var l2 = r3.loading, u2 = i3.loading;
            l2.start ? l2.first += u2.first - u2.start : (l2.start = u2.start, l2.first = u2.first), l2.end = u2.end;
          }, e4.resetLoader = function(t4, e5) {
            t4.loader = null, this.loader === e5 && (self.clearTimeout(this.partLoadTimeout), this.loader = null), e5.destroy();
          }, t3;
        }();
        function Pt(t3, e4) {
          void 0 === e4 && (e4 = null);
          var r3 = e4 || t3, i3 = { frag: t3, part: e4, responseType: "arraybuffer", url: r3.url, headers: {}, rangeStart: 0, rangeEnd: 0 }, n2 = r3.byteRangeStartOffset, s2 = r3.byteRangeEndOffset;
          return (0, a2.isFiniteNumber)(n2) && (0, a2.isFiniteNumber)(s2) && (i3.rangeStart = n2, i3.rangeEnd = s2), i3;
        }
        var Ft = function(t3) {
          var e4, r3;
          function i3(e5) {
            for (var r4, i4 = arguments.length, n2 = new Array(i4 > 1 ? i4 - 1 : 0), a3 = 1; a3 < i4; a3++)
              n2[a3 - 1] = arguments[a3];
            return (r4 = t3.call.apply(t3, [this].concat(n2)) || this).data = void 0, r4.data = e5, r4;
          }
          return r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, Ct(e4, r3), i3;
        }(kt(Error)), Mt = r2(21);
        const Nt = function(t3) {
          for (var e4 = "", r3 = t3.length, i3 = 0; i3 < r3; i3++)
            e4 += "[" + t3.start(i3).toFixed(3) + "," + t3.end(i3).toFixed(3) + "]";
          return e4;
        };
        function Ut(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        function Bt(t3) {
          if (void 0 === t3)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t3;
        }
        function Gt(t3, e4) {
          return Gt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, Gt(t3, e4);
        }
        var Kt = "STOPPED", Ht = "IDLE", jt = "KEY_LOADING", Vt = "FRAG_LOADING", Wt = "FRAG_LOADING_WAITING_RETRY", Yt = "WAITING_TRACK", qt = "PARSING", zt = "PARSED", Xt = "ENDED", Qt = "ERROR", $t = "WAITING_INIT_PTS", Zt = "WAITING_LEVEL", Jt = function(t3) {
          var e4, r3;
          function i3(e5, r4, i4) {
            var n3;
            return (n3 = t3.call(this) || this).hls = void 0, n3.fragPrevious = null, n3.fragCurrent = null, n3.fragmentTracker = void 0, n3.transmuxer = null, n3._state = Kt, n3.media = null, n3.mediaBuffer = null, n3.config = void 0, n3.bitrateTest = false, n3.lastCurrentTime = 0, n3.nextLoadPosition = 0, n3.startPosition = 0, n3.loadedmetadata = false, n3.fragLoadError = 0, n3.retryDate = 0, n3.levels = null, n3.fragmentLoader = void 0, n3.levelLastLoaded = null, n3.startFragRequested = false, n3.decrypter = void 0, n3.initPTS = [], n3.onvseeking = null, n3.onvended = null, n3.logPrefix = "", n3.log = void 0, n3.warn = void 0, n3.logPrefix = i4, n3.log = l.logger.log.bind(l.logger, i4 + ":"), n3.warn = l.logger.warn.bind(l.logger, i4 + ":"), n3.hls = e5, n3.fragmentLoader = new xt(e5.config), n3.fragmentTracker = r4, n3.config = e5.config, n3.decrypter = new Mt.default(e5, e5.config), e5.on(s.Events.KEY_LOADED, n3.onKeyLoaded, Bt(n3)), e5.on(s.Events.LEVEL_SWITCHING, n3.onLevelSwitching, Bt(n3)), n3;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, Gt(e4, r3);
          var n2, d3, h2 = i3.prototype;
          return h2.doTick = function() {
            this.onTickEnd();
          }, h2.onTickEnd = function() {
          }, h2.startLoad = function(t4) {
          }, h2.stopLoad = function() {
            this.fragmentLoader.abort();
            var t4 = this.fragCurrent;
            t4 && this.fragmentTracker.removeFragment(t4), this.resetTransmuxer(), this.fragCurrent = null, this.fragPrevious = null, this.clearInterval(), this.clearNextTick(), this.state = Kt;
          }, h2._streamEnded = function(t4, e5) {
            var r4 = this.fragCurrent, i4 = this.fragmentTracker;
            if (!e5.live && r4 && this.media && r4.sn >= e5.endSN && !t4.nextStart) {
              var n3 = e5.partList;
              if (null != n3 && n3.length) {
                var a3 = n3[n3.length - 1];
                return mt.isBuffered(this.media, a3.start + a3.duration / 2);
              }
              var s2 = i4.getState(r4);
              return s2 === ut.PARTIAL || s2 === ut.OK;
            }
            return false;
          }, h2.onMediaAttached = function(t4, e5) {
            var r4 = this.media = this.mediaBuffer = e5.media;
            this.onvseeking = this.onMediaSeeking.bind(this), this.onvended = this.onMediaEnded.bind(this), r4.addEventListener("seeking", this.onvseeking), r4.addEventListener("ended", this.onvended);
            var i4 = this.config;
            this.levels && i4.autoStartLoad && this.state === Kt && this.startLoad(i4.startPosition);
          }, h2.onMediaDetaching = function() {
            var t4 = this.media;
            null != t4 && t4.ended && (this.log("MSE detaching and video ended, reset startPosition"), this.startPosition = this.lastCurrentTime = 0), t4 && this.onvseeking && this.onvended && (t4.removeEventListener("seeking", this.onvseeking), t4.removeEventListener("ended", this.onvended), this.onvseeking = this.onvended = null), this.media = this.mediaBuffer = null, this.loadedmetadata = false, this.fragmentTracker.removeAllFragments(), this.stopLoad();
          }, h2.onMediaSeeking = function() {
            var t4 = this.config, e5 = this.fragCurrent, r4 = this.media, i4 = this.mediaBuffer, n3 = this.state, s2 = r4 ? r4.currentTime : 0, o2 = mt.bufferInfo(i4 || r4, s2, t4.maxBufferHole);
            if (this.log("media seeking to " + ((0, a2.isFiniteNumber)(s2) ? s2.toFixed(3) : s2) + ", state: " + n3), n3 === Xt)
              this.resetLoadingState();
            else if (e5) {
              var l2 = t4.maxFragLookUpTolerance, u2 = e5.start - l2, d4 = e5.start + e5.duration + l2;
              if (!o2.len || d4 < o2.start || u2 > o2.end) {
                var h3 = s2 > d4;
                (s2 < u2 || h3) && (h3 && e5.loader && (this.log("seeking outside of buffer while fragment load in progress, cancel fragment load"), e5.loader.abort()), this.resetLoadingState());
              }
            }
            r4 && (this.lastCurrentTime = s2), this.loadedmetadata || o2.len || (this.nextLoadPosition = this.startPosition = s2), this.tickImmediate();
          }, h2.onMediaEnded = function() {
            this.startPosition = this.lastCurrentTime = 0;
          }, h2.onKeyLoaded = function(t4, e5) {
            if (this.state === jt && e5.frag === this.fragCurrent && this.levels) {
              this.state = Ht;
              var r4 = this.levels[e5.frag.level].details;
              r4 && this.loadFragment(e5.frag, r4, e5.frag.start);
            }
          }, h2.onLevelSwitching = function(t4, e5) {
            this.fragLoadError = 0;
          }, h2.onHandlerDestroying = function() {
            this.stopLoad(), t3.prototype.onHandlerDestroying.call(this);
          }, h2.onHandlerDestroyed = function() {
            this.state = Kt, this.hls.off(s.Events.KEY_LOADED, this.onKeyLoaded, this), this.hls.off(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), this.fragmentLoader && this.fragmentLoader.destroy(), this.decrypter && this.decrypter.destroy(), this.hls = this.log = this.warn = this.decrypter = this.fragmentLoader = this.fragmentTracker = null, t3.prototype.onHandlerDestroyed.call(this);
          }, h2.loadKey = function(t4, e5) {
            this.log("Loading key for " + t4.sn + " of [" + e5.startSN + "-" + e5.endSN + "], " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + " " + t4.level), this.state = jt, this.fragCurrent = t4, this.hls.trigger(s.Events.KEY_LOADING, { frag: t4 });
          }, h2.loadFragment = function(t4, e5, r4) {
            this._loadFragForPlayback(t4, e5, r4);
          }, h2._loadFragForPlayback = function(t4, e5, r4) {
            var i4 = this;
            this._doFragLoad(t4, e5, r4, function(e6) {
              if (i4.fragContextChanged(t4))
                return i4.warn("Fragment " + t4.sn + (e6.part ? " p: " + e6.part.index : "") + " of level " + t4.level + " was dropped during download."), void i4.fragmentTracker.removeFragment(t4);
              t4.stats.chunkCount++, i4._handleFragmentLoadProgress(e6);
            }).then(function(e6) {
              if (e6) {
                i4.fragLoadError = 0;
                var r5 = i4.state;
                i4.fragContextChanged(t4) ? (r5 === Vt || !i4.fragCurrent && r5 === qt) && (i4.fragmentTracker.removeFragment(t4), i4.state = Ht) : ("payload" in e6 && (i4.log("Loaded fragment " + t4.sn + " of level " + t4.level), i4.hls.trigger(s.Events.FRAG_LOADED, e6)), i4._handleFragmentLoadComplete(e6));
              }
            }).catch(function(e6) {
              i4.state !== Kt && i4.state !== Qt && (i4.warn(e6), i4.resetFragmentLoading(t4));
            });
          }, h2.flushMainBuffer = function(t4, e5, r4) {
            if (void 0 === r4 && (r4 = null), t4 - e5) {
              var i4 = { startOffset: t4, endOffset: e5, type: r4 };
              this.fragLoadError = 0, this.hls.trigger(s.Events.BUFFER_FLUSHING, i4);
            }
          }, h2._loadInitSegment = function(t4) {
            var e5 = this;
            this._doFragLoad(t4).then(function(r4) {
              if (!r4 || e5.fragContextChanged(t4) || !e5.levels)
                throw new Error("init load aborted");
              return r4;
            }).then(function(r4) {
              var i4 = e5.hls, n3 = r4.payload, a3 = t4.decryptdata;
              if (n3 && n3.byteLength > 0 && a3 && a3.key && a3.iv && "AES-128" === a3.method) {
                var o2 = self.performance.now();
                return e5.decrypter.webCryptoDecrypt(new Uint8Array(n3), a3.key.buffer, a3.iv.buffer).then(function(e6) {
                  var n4 = self.performance.now();
                  return i4.trigger(s.Events.FRAG_DECRYPTED, { frag: t4, payload: e6, stats: { tstart: o2, tdecrypt: n4 } }), r4.payload = e6, r4;
                });
              }
              return r4;
            }).then(function(r4) {
              var i4 = e5.fragCurrent, n3 = e5.hls, a3 = e5.levels;
              if (!a3)
                throw new Error("init load aborted, missing levels");
              a3[t4.level].details;
              var o2 = t4.stats;
              e5.state = Ht, e5.fragLoadError = 0, t4.data = new Uint8Array(r4.payload), o2.parsing.start = o2.buffering.start = self.performance.now(), o2.parsing.end = o2.buffering.end = self.performance.now(), r4.frag === i4 && n3.trigger(s.Events.FRAG_BUFFERED, { stats: o2, frag: i4, part: null, id: t4.type }), e5.tick();
            }).catch(function(r4) {
              e5.state !== Kt && e5.state !== Qt && (e5.warn(r4), e5.resetFragmentLoading(t4));
            });
          }, h2.fragContextChanged = function(t4) {
            var e5 = this.fragCurrent;
            return !t4 || !e5 || t4.level !== e5.level || t4.sn !== e5.sn || t4.urlId !== e5.urlId;
          }, h2.fragBufferedComplete = function(t4, e5) {
            var r4, i4, n3 = this.mediaBuffer ? this.mediaBuffer : this.media;
            this.log("Buffered " + t4.type + " sn: " + t4.sn + (e5 ? " part: " + e5.index : "") + " of " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + " " + t4.level + " " + (n3 ? Nt(mt.getBuffered(n3)) : "(detached)")), this.state = Ht, n3 && (!this.loadedmetadata && t4.type == O.PlaylistLevelType.MAIN && n3.buffered.length && (null === (r4 = this.fragCurrent) || void 0 === r4 ? void 0 : r4.sn) === (null === (i4 = this.fragPrevious) || void 0 === i4 ? void 0 : i4.sn) && (this.loadedmetadata = true, this.seekToStartPos()), this.tick());
          }, h2.seekToStartPos = function() {
          }, h2._handleFragmentLoadComplete = function(t4) {
            var e5 = this.transmuxer;
            if (e5) {
              var r4 = t4.frag, i4 = t4.part, n3 = t4.partsLoaded, a3 = !n3 || 0 === n3.length || n3.some(function(t5) {
                return !t5;
              }), s2 = new yt(r4.level, r4.sn, r4.stats.chunkCount + 1, 0, i4 ? i4.index : -1, !a3);
              e5.flush(s2);
            }
          }, h2._handleFragmentLoadProgress = function(t4) {
          }, h2._doFragLoad = function(t4, e5, r4, i4) {
            var n3 = this;
            if (void 0 === r4 && (r4 = null), !this.levels)
              throw new Error("frag load aborted, missing levels");
            if (r4 = Math.max(t4.start, r4 || 0), this.config.lowLatencyMode && e5) {
              var o2 = e5.partList;
              if (o2 && i4) {
                r4 > t4.end && e5.fragmentHint && (t4 = e5.fragmentHint);
                var l2 = this.getNextPart(o2, t4, r4);
                if (l2 > -1) {
                  var u2 = o2[l2];
                  return this.log("Loading part sn: " + t4.sn + " p: " + u2.index + " cc: " + t4.cc + " of playlist [" + e5.startSN + "-" + e5.endSN + "] parts [0-" + l2 + "-" + (o2.length - 1) + "] " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + t4.level + ", target: " + parseFloat(r4.toFixed(3))), this.nextLoadPosition = u2.start + u2.duration, this.state = Vt, this.hls.trigger(s.Events.FRAG_LOADING, { frag: t4, part: o2[l2], targetBufferTime: r4 }), this.doFragPartsLoad(t4, o2, l2, i4).catch(function(t5) {
                    return n3.handleFragLoadError(t5);
                  });
                }
                if (!t4.url || this.loadedEndOfParts(o2, r4))
                  return Promise.resolve(null);
              }
            }
            return this.log("Loading fragment " + t4.sn + " cc: " + t4.cc + " " + (e5 ? "of [" + e5.startSN + "-" + e5.endSN + "] " : "") + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + t4.level + ", target: " + parseFloat(r4.toFixed(3))), (0, a2.isFiniteNumber)(t4.sn) && !this.bitrateTest && (this.nextLoadPosition = t4.start + t4.duration), this.state = Vt, this.hls.trigger(s.Events.FRAG_LOADING, { frag: t4, targetBufferTime: r4 }), this.fragmentLoader.load(t4, i4).catch(function(t5) {
              return n3.handleFragLoadError(t5);
            });
          }, h2.doFragPartsLoad = function(t4, e5, r4, i4) {
            var n3 = this;
            return new Promise(function(a3, o2) {
              var l2 = [];
              !function r5(u2) {
                var d4 = e5[u2];
                n3.fragmentLoader.loadPart(t4, d4, i4).then(function(i5) {
                  l2[d4.index] = i5;
                  var o3 = i5.part;
                  n3.hls.trigger(s.Events.FRAG_LOADED, i5);
                  var h3 = e5[u2 + 1];
                  if (!h3 || h3.fragment !== t4)
                    return a3({ frag: t4, part: o3, partsLoaded: l2 });
                  r5(u2 + 1);
                }).catch(o2);
              }(r4);
            });
          }, h2.handleFragLoadError = function(t4) {
            var e5 = t4.data;
            return e5 && e5.details === o.ErrorDetails.INTERNAL_ABORTED ? this.handleFragLoadAborted(e5.frag, e5.part) : this.hls.trigger(s.Events.ERROR, e5), null;
          }, h2._handleTransmuxerFlush = function(t4) {
            var e5 = this.getCurrentContext(t4);
            if (e5 && this.state === qt) {
              var r4 = e5.frag, i4 = e5.part, n3 = e5.level, a3 = self.performance.now();
              r4.stats.parsing.end = a3, i4 && (i4.stats.parsing.end = a3), this.updateLevelTiming(r4, i4, n3, t4.partial);
            } else
              this.fragCurrent || (this.state = Ht);
          }, h2.getCurrentContext = function(t4) {
            var e5 = this.levels, r4 = t4.level, i4 = t4.sn, n3 = t4.part;
            if (!e5 || !e5[r4])
              return this.warn("Levels object was unset while buffering fragment " + i4 + " of level " + r4 + ". The current chunk will not be buffered."), null;
            var a3 = e5[r4], s2 = n3 > -1 ? function(t5, e6, r5) {
              if (!t5 || !t5.details)
                return null;
              var i5 = t5.details.partList;
              if (i5)
                for (var n4 = i5.length; n4--; ) {
                  var a4 = i5[n4];
                  if (a4.index === r5 && a4.fragment.sn === e6)
                    return a4;
                }
              return null;
            }(a3, i4, n3) : null, o2 = s2 ? s2.fragment : function(t5, e6, r5) {
              if (!t5 || !t5.details)
                return null;
              var i5 = t5.details, n4 = i5.fragments[e6 - i5.startSN];
              return n4 || ((n4 = i5.fragmentHint) && n4.sn === e6 ? n4 : e6 < i5.startSN && r5 && r5.sn === e6 ? r5 : null);
            }(a3, i4, this.fragCurrent);
            return o2 ? { frag: o2, part: s2, level: a3 } : null;
          }, h2.bufferFragmentData = function(t4, e5, r4, i4) {
            if (t4 && this.state === qt) {
              var n3 = t4.data1, a3 = t4.data2, o2 = n3;
              if (n3 && a3 && (o2 = (0, u.appendUint8Array)(n3, a3)), o2 && o2.length) {
                var l2 = { type: t4.type, frag: e5, part: r4, chunkMeta: i4, parent: e5.type, data: o2 };
                this.hls.trigger(s.Events.BUFFER_APPENDING, l2), t4.dropped && t4.independent && !r4 && this.flushBufferGap(e5);
              }
            }
          }, h2.flushBufferGap = function(t4) {
            var e5 = this.media;
            if (e5)
              if (mt.isBuffered(e5, e5.currentTime)) {
                var r4 = e5.currentTime, i4 = mt.bufferInfo(e5, r4, 0), n3 = t4.duration, a3 = Math.min(2 * this.config.maxFragLookUpTolerance, 0.25 * n3), s2 = Math.max(Math.min(t4.start - a3, i4.end - a3), r4 + a3);
                t4.start - s2 > a3 && this.flushMainBuffer(s2, t4.start);
              } else
                this.flushMainBuffer(0, t4.start);
          }, h2.getFwdBufferInfo = function(t4, e5) {
            var r4 = this.config, i4 = this.getLoadPosition();
            if (!(0, a2.isFiniteNumber)(i4))
              return null;
            var n3 = mt.bufferInfo(t4, i4, r4.maxBufferHole);
            if (0 === n3.len && void 0 !== n3.nextStart) {
              var s2 = this.fragmentTracker.getBufferedFrag(i4, e5);
              if (s2 && n3.nextStart < s2.end)
                return mt.bufferInfo(t4, i4, Math.max(n3.nextStart, r4.maxBufferHole));
            }
            return n3;
          }, h2.getMaxBufferLength = function(t4) {
            var e5, r4 = this.config;
            return e5 = t4 ? Math.max(8 * r4.maxBufferSize / t4, r4.maxBufferLength) : r4.maxBufferLength, Math.min(e5, r4.maxMaxBufferLength);
          }, h2.reduceMaxBufferLength = function(t4) {
            var e5 = this.config, r4 = t4 || e5.maxBufferLength;
            return e5.maxMaxBufferLength >= r4 && (e5.maxMaxBufferLength /= 2, this.warn("Reduce max buffer length to " + e5.maxMaxBufferLength + "s"), true);
          }, h2.getNextFragment = function(t4, e5) {
            var r4 = e5.fragments, i4 = r4.length;
            if (!i4)
              return null;
            var n3, a3 = this.config, s2 = r4[0].start;
            if (e5.live) {
              var o2 = a3.initialLiveManifestSize;
              if (i4 < o2)
                return this.warn("Not enough fragments to start playback (have: " + i4 + ", need: " + o2 + ")"), null;
              e5.PTSKnown || this.startFragRequested || -1 !== this.startPosition || (n3 = this.getInitialLiveFragment(e5, r4), this.startPosition = n3 ? this.hls.liveSyncPosition || n3.start : t4);
            } else
              t4 <= s2 && (n3 = r4[0]);
            if (!n3) {
              var l2 = a3.lowLatencyMode ? e5.partEnd : e5.fragmentEnd;
              n3 = this.getFragmentAtPosition(t4, l2, e5);
            }
            return this.mapToInitFragWhenRequired(n3);
          }, h2.mapToInitFragWhenRequired = function(t4) {
            return null == t4 || !t4.initSegment || null != t4 && t4.initSegment.data || this.bitrateTest ? t4 : t4.initSegment;
          }, h2.getNextPart = function(t4, e5, r4) {
            for (var i4 = -1, n3 = false, a3 = true, s2 = 0, o2 = t4.length; s2 < o2; s2++) {
              var l2 = t4[s2];
              if (a3 = a3 && !l2.independent, i4 > -1 && r4 < l2.start)
                break;
              var u2 = l2.loaded;
              !u2 && (n3 || l2.independent || a3) && l2.fragment === e5 && (i4 = s2), n3 = u2;
            }
            return i4;
          }, h2.loadedEndOfParts = function(t4, e5) {
            var r4 = t4[t4.length - 1];
            return r4 && e5 > r4.start && r4.loaded;
          }, h2.getInitialLiveFragment = function(t4, e5) {
            var r4 = this.fragPrevious, i4 = null;
            if (r4) {
              if (t4.hasProgramDateTime && (this.log("Live playlist, switching playlist, load frag with same PDT: " + r4.programDateTime), i4 = function(t5, e6, r5) {
                if (null === e6 || !Array.isArray(t5) || !t5.length || !(0, a2.isFiniteNumber)(e6))
                  return null;
                if (e6 < (t5[0].programDateTime || 0))
                  return null;
                if (e6 >= (t5[t5.length - 1].endProgramDateTime || 0))
                  return null;
                r5 = r5 || 0;
                for (var i5 = 0; i5 < t5.length; ++i5) {
                  var n4 = t5[i5];
                  if (Rt(e6, r5, n4))
                    return n4;
                }
                return null;
              }(e5, r4.endProgramDateTime, this.config.maxFragLookUpTolerance)), !i4) {
                var n3 = r4.sn + 1;
                if (n3 >= t4.startSN && n3 <= t4.endSN) {
                  var s2 = e5[n3 - t4.startSN];
                  r4.cc === s2.cc && (i4 = s2, this.log("Live playlist, switching playlist, load frag with next SN: " + i4.sn));
                }
                i4 || (i4 = function(t5, e6) {
                  return Lt(t5, function(t6) {
                    return t6.cc < e6 ? 1 : t6.cc > e6 ? -1 : 0;
                  });
                }(e5, r4.cc), i4 && this.log("Live playlist, switching playlist, load frag with same CC: " + i4.sn));
              }
            } else {
              var o2 = this.hls.liveSyncPosition;
              null !== o2 && (i4 = this.getFragmentAtPosition(o2, this.bitrateTest ? t4.fragmentEnd : t4.edge, t4));
            }
            return i4;
          }, h2.getFragmentAtPosition = function(t4, e5, r4) {
            var i4, n3 = this.config, a3 = this.fragPrevious, s2 = r4.fragments, o2 = r4.endSN, l2 = r4.fragmentHint, u2 = n3.maxFragLookUpTolerance, d4 = !!(n3.lowLatencyMode && r4.partList && l2);
            if (d4 && l2 && !this.bitrateTest && (s2 = s2.concat(l2), o2 = l2.sn), i4 = t4 < e5 ? Dt(a3, s2, t4, t4 > e5 - u2 ? 0 : u2) : s2[s2.length - 1]) {
              var h3 = i4.sn - r4.startSN;
              if (this.fragmentTracker.getState(i4) === ut.OK && (a3 = i4), a3 && i4.sn === a3.sn && !d4 && a3 && i4.level === a3.level) {
                var c3 = s2[h3 + 1];
                i4.sn < o2 && this.fragmentTracker.getState(c3) !== ut.OK ? (this.log("SN " + i4.sn + " just loaded, load next one: " + c3.sn), i4 = c3) : i4 = null;
              }
            }
            return i4;
          }, h2.synchronizeToLiveEdge = function(t4) {
            var e5 = this.config, r4 = this.media;
            if (r4) {
              var i4 = this.hls.liveSyncPosition, n3 = r4.currentTime, a3 = t4.fragments[0].start, s2 = t4.edge, o2 = n3 >= a3 - e5.maxFragLookUpTolerance && n3 <= s2;
              if (null !== i4 && r4.duration > i4 && (n3 < i4 || !o2)) {
                var l2 = void 0 !== e5.liveMaxLatencyDuration ? e5.liveMaxLatencyDuration : e5.liveMaxLatencyDurationCount * t4.targetduration;
                (!o2 && r4.readyState < 4 || n3 < s2 - l2) && (this.loadedmetadata || (this.nextLoadPosition = i4), r4.readyState && (this.warn("Playback: " + n3.toFixed(3) + " is located too far from the end of live sliding playlist: " + s2 + ", reset currentTime to : " + i4.toFixed(3)), r4.currentTime = i4));
              }
            }
          }, h2.alignPlaylists = function(t4, e5) {
            var r4 = this.levels, i4 = this.levelLastLoaded, n3 = this.fragPrevious, s2 = null !== i4 ? r4[i4] : null, o2 = t4.fragments.length;
            if (!o2)
              return this.warn("No fragments in live playlist"), 0;
            var u2 = t4.fragments[0].start, d4 = !e5, h3 = t4.alignedSliding && (0, a2.isFiniteNumber)(u2);
            if (d4 || !h3 && !u2) {
              !function(t5, e6, r5) {
                e6 && (function(t6, e7, r6) {
                  if (function(t7, e8, r7) {
                    return !(!e8.details || !(r7.endCC > r7.startCC || t7 && t7.cc < r7.startCC));
                  }(t6, r6, e7)) {
                    var i5 = function(t7, e8, r7) {
                      void 0 === r7 && (r7 = 0);
                      var i6 = t7.fragments, n4 = e8.fragments;
                      if (n4.length && i6.length) {
                        var a3 = Et(i6, n4[0].cc);
                        if (a3 && (!a3 || a3.startPTS))
                          return a3;
                        l.logger.log("No frag in previous level to align on");
                      } else
                        l.logger.log("No fragments to align");
                    }(r6.details, e7);
                    i5 && (0, a2.isFiniteNumber)(i5.start) && (l.logger.log("Adjusting PTS using last level due to CC increase within current level " + e7.url), St(i5.start, e7));
                  }
                }(t5, r5, e6), !r5.alignedSliding && e6.details && function(t6, e7) {
                  if (e7.fragments.length && t6.hasProgramDateTime && e7.hasProgramDateTime) {
                    var r6 = e7.fragments[0].programDateTime, i5 = t6.fragments[0].programDateTime, n4 = (i5 - r6) / 1e3 + e7.fragments[0].start;
                    n4 && (0, a2.isFiniteNumber)(n4) && (l.logger.log("Adjusting PTS using programDateTime delta " + (i5 - r6) + "ms, sliding:" + n4.toFixed(3) + " " + t6.url + " "), St(n4, t6));
                  }
                }(r5, e6.details), r5.alignedSliding || !e6.details || r5.skippedSegments || it(e6.details, r5));
              }(n3, s2, t4);
              var c3 = t4.fragments[0].start;
              return this.log("Live playlist sliding: " + c3.toFixed(2) + " start-sn: " + (e5 ? e5.startSN : "na") + "->" + t4.startSN + " prev-sn: " + (n3 ? n3.sn : "na") + " fragments: " + o2), c3;
            }
            return u2;
          }, h2.waitForCdnTuneIn = function(t4) {
            return t4.live && t4.canBlockReload && t4.partTarget && t4.tuneInGoal > Math.max(t4.partHoldBack, 3 * t4.partTarget);
          }, h2.setStartPosition = function(t4, e5) {
            var r4 = this.startPosition;
            if (r4 < e5 && (r4 = -1), -1 === r4 || -1 === this.lastCurrentTime) {
              var i4 = t4.startTimeOffset;
              (0, a2.isFiniteNumber)(i4) ? (r4 = e5 + i4, i4 < 0 && (r4 += t4.totalduration), r4 = Math.min(Math.max(e5, r4), e5 + t4.totalduration), this.log("Start time offset " + i4 + " found in playlist, adjust startPosition to " + r4), this.startPosition = r4) : t4.live ? r4 = this.hls.liveSyncPosition || e5 : this.startPosition = r4 = 0, this.lastCurrentTime = r4;
            }
            this.nextLoadPosition = r4;
          }, h2.getLoadPosition = function() {
            var t4 = this.media, e5 = 0;
            return this.loadedmetadata && t4 ? e5 = t4.currentTime : this.nextLoadPosition && (e5 = this.nextLoadPosition), e5;
          }, h2.handleFragLoadAborted = function(t4, e5) {
            this.transmuxer && "initSegment" !== t4.sn && t4.stats.aborted && (this.warn("Fragment " + t4.sn + (e5 ? " part" + e5.index : "") + " of level " + t4.level + " was aborted"), this.resetFragmentLoading(t4));
          }, h2.resetFragmentLoading = function(t4) {
            this.fragCurrent && (this.fragContextChanged(t4) || this.state === Wt) || (this.state = Ht);
          }, h2.onFragmentOrKeyLoadError = function(t4, e5) {
            if (!e5.fatal) {
              var r4 = e5.frag;
              if (r4 && r4.type === t4) {
                this.fragCurrent;
                var i4 = this.config;
                if (this.fragLoadError + 1 <= i4.fragLoadingMaxRetry) {
                  this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition);
                  var n3 = Math.min(Math.pow(2, this.fragLoadError) * i4.fragLoadingRetryDelay, i4.fragLoadingMaxRetryTimeout);
                  this.warn("Fragment " + r4.sn + " of " + t4 + " " + r4.level + " failed to load, retrying in " + n3 + "ms"), this.retryDate = self.performance.now() + n3, this.fragLoadError++, this.state = Wt;
                } else
                  e5.levelRetry ? (t4 === O.PlaylistLevelType.AUDIO && (this.fragCurrent = null), this.fragLoadError = 0, this.state = Ht) : (l.logger.error(e5.details + " reaches max retry, redispatch as fatal ..."), e5.fatal = true, this.hls.stopLoad(), this.state = Qt);
              }
            }
          }, h2.afterBufferFlushed = function(t4, e5, r4) {
            if (t4) {
              var i4 = mt.getBuffered(t4);
              this.fragmentTracker.detectEvictedFragments(e5, i4, r4), this.state === Xt && this.resetLoadingState();
            }
          }, h2.resetLoadingState = function() {
            this.fragCurrent = null, this.fragPrevious = null, this.state = Ht;
          }, h2.resetStartWhenNotLoaded = function(t4) {
            if (!this.loadedmetadata) {
              this.startFragRequested = false;
              var e5 = this.levels ? this.levels[t4].details : null;
              null != e5 && e5.live ? (this.startPosition = -1, this.setStartPosition(e5, 0), this.resetLoadingState()) : this.nextLoadPosition = this.startPosition;
            }
          }, h2.updateLevelTiming = function(t4, e5, r4, i4) {
            var n3 = this, a3 = r4.details;
            Object.keys(t4.elementaryStreams).reduce(function(e6, o2) {
              var l2 = t4.elementaryStreams[o2];
              if (l2) {
                var u2 = l2.endPTS - l2.startPTS;
                if (u2 <= 0)
                  return n3.warn("Could not parse fragment " + t4.sn + " " + o2 + " duration reliably (" + u2 + ")"), e6 || false;
                var d4 = i4 ? 0 : rt(a3, t4, l2.startPTS, l2.endPTS, l2.startDTS, l2.endDTS);
                return n3.hls.trigger(s.Events.LEVEL_PTS_UPDATED, { details: a3, level: r4, drift: d4, type: o2, frag: t4, start: l2.startPTS, end: l2.endPTS }), true;
              }
              return e6;
            }, false) || (this.warn("Found no media in fragment " + t4.sn + " of level " + r4.id + " resetting transmuxer to fallback to playlist timing"), this.resetTransmuxer()), this.state = zt, this.hls.trigger(s.Events.FRAG_PARSED, { frag: t4, part: e5 });
          }, h2.resetTransmuxer = function() {
            this.transmuxer && (this.transmuxer.destroy(), this.transmuxer = null);
          }, n2 = i3, (d3 = [{ key: "state", get: function() {
            return this._state;
          }, set: function(t4) {
            var e5 = this._state;
            e5 !== t4 && (this._state = t4, this.log(e5 + "->" + t4));
          } }]) && Ut(n2.prototype, d3), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(vt);
        function te() {
          return self.MediaSource || self.WebKitMediaSource;
        }
        function ee() {
          return self.SourceBuffer || self.WebKitSourceBuffer;
        }
        var re = function() {
          var t3 = ENTRY_MODULE, e4 = {}, r3 = function r4(i4) {
            var n2 = e4[i4];
            if (void 0 !== n2)
              return n2.exports;
            var a3 = e4[i4] = { exports: {} };
            return t3[i4].call(a3.exports, a3, a3.exports, r4), a3.exports;
          };
          r3.m = t3, r3.n = function(t4) {
            var e5 = t4 && t4.__esModule ? function() {
              return t4.default;
            } : function() {
              return t4;
            };
            return r3.d(e5, { a: e5 }), e5;
          }, r3.d = function(t4, e5) {
            for (var i4 in e5)
              r3.o(e5, i4) && !r3.o(t4, i4) && Object.defineProperty(t4, i4, { enumerable: true, get: e5[i4] });
          }, r3.o = function(t4, e5) {
            return Object.prototype.hasOwnProperty.call(t4, e5);
          }, r3.r = function(t4) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t4, "__esModule", { value: true });
          };
          var i3 = r3(ENTRY_MODULE);
          return i3.default || i3;
        }.toString().split("ENTRY_MODULE"), ie = "\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)";
        function ne(t3) {
          return (t3 + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
        }
        function ae(t3, e4, i3) {
          var n2 = {};
          n2[i3] = [];
          var a3 = e4.toString().replace(/^"[^"]+"/, "function"), s2 = a3.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/) || a3.match(/^\(\w+,\s*\w+,\s*(\w+)\)\s?\=\s?\>/);
          if (!s2)
            return n2;
          for (var o2, l2 = s2[1], u2 = new RegExp("(\\\\n|\\W)" + ne(l2) + ie, "g"); o2 = u2.exec(a3); )
            "dll-reference" !== o2[3] && n2[i3].push(o2[3]);
          for (u2 = new RegExp("\\(" + ne(l2) + '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)' + ie, "g"); o2 = u2.exec(a3); )
            t3[o2[2]] || (n2[i3].push(o2[1]), t3[o2[2]] = r2(o2[1]).m), n2[o2[2]] = n2[o2[2]] || [], n2[o2[2]].push(o2[4]);
          for (var d3, h2 = Object.keys(n2), c3 = 0; c3 < h2.length; c3++)
            for (var f3 = 0; f3 < n2[h2[c3]].length; f3++)
              d3 = n2[h2[c3]][f3], isNaN(1 * d3) || (n2[h2[c3]][f3] = 1 * n2[h2[c3]][f3]);
          return n2;
        }
        function se(t3) {
          return Object.keys(t3).reduce(function(e4, r3) {
            return e4 || t3[r3].length > 0;
          }, false);
        }
        function oe(t3, e4, r3, i3) {
          var n2 = t3[i3].map(function(t4) {
            return '"' + t4 + '": ' + e4[i3][t4].toString().replace(/^"[^"]+"/, "function");
          }).join(",");
          return re[0] + "{" + n2 + "}" + re[1] + '"' + r3 + '"' + re[2];
        }
        var le = r2(544), ue = r2(729), de = te() || { isTypeSupported: function() {
          return false;
        } }, he = function() {
          function t3(t4, e5, i3, n2) {
            var a3 = this;
            this.hls = void 0, this.id = void 0, this.observer = void 0, this.frag = null, this.part = null, this.useWorker = void 0, this.worker = void 0, this.onwmsg = void 0, this.transmuxer = null, this.onTransmuxComplete = void 0, this.onFlush = void 0;
            var u2 = t4.config;
            this.hls = t4, this.id = e5, this.useWorker = !!u2.enableWorker, this.onTransmuxComplete = i3, this.onFlush = n2;
            var d3 = function(t5, e6) {
              (e6 = e6 || {}).frag = a3.frag, e6.id = a3.id, a3.hls.trigger(t5, e6);
            };
            this.observer = new ue.EventEmitter(), this.observer.on(s.Events.FRAG_DECRYPTED, d3), this.observer.on(s.Events.ERROR, d3);
            var h2 = { mp4: de.isTypeSupported("video/mp4"), mpeg: de.isTypeSupported("audio/mpeg"), mp3: de.isTypeSupported('audio/mp4; codecs="mp3"') }, c3 = navigator.vendor;
            if (this.useWorker && "undefined" != typeof Worker) {
              var f3;
              l.logger.log("demuxing in webworker");
              try {
                f3 = this.worker = function(t5, e6) {
                  e6 = e6 || {};
                  var i4 = { main: r2.m }, n3 = e6.all ? { main: Object.keys(i4.main) } : function(t6, e7) {
                    for (var r3 = { main: [e7] }, i5 = { main: [] }, n4 = { main: {} }; se(r3); )
                      for (var a5 = Object.keys(r3), s3 = 0; s3 < a5.length; s3++) {
                        var o3 = a5[s3], l3 = r3[o3].pop();
                        if (n4[o3] = n4[o3] || {}, !n4[o3][l3] && t6[o3][l3]) {
                          n4[o3][l3] = true, i5[o3] = i5[o3] || [], i5[o3].push(l3);
                          for (var u3 = ae(t6, t6[o3][l3], o3), d4 = Object.keys(u3), h3 = 0; h3 < d4.length; h3++)
                            r3[d4[h3]] = r3[d4[h3]] || [], r3[d4[h3]] = r3[d4[h3]].concat(u3[d4[h3]]);
                        }
                      }
                    return i5;
                  }(i4, t5), a4 = "";
                  Object.keys(n3).filter(function(t6) {
                    return "main" !== t6;
                  }).forEach(function(t6) {
                    for (var e7 = 0; n3[t6][e7]; )
                      e7++;
                    n3[t6].push(e7), i4[t6][e7] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })", a4 = a4 + "var " + t6 + " = (" + oe(n3, i4, e7, modules) + ")();\n";
                  }), a4 = a4 + "new ((" + oe(n3, i4, t5, "main") + ")())(self);";
                  var s2 = new window.Blob([a4], { type: "text/javascript" }), o2 = (window.URL || window.webkitURL || window.mozURL || window.msURL).createObjectURL(s2), l2 = new window.Worker(o2);
                  return l2.objectURL = o2, l2;
                }(182), this.onwmsg = this.onWorkerMessage.bind(this), f3.addEventListener("message", this.onwmsg), f3.onerror = function(t5) {
                  a3.useWorker = false, l.logger.warn("Exception in webworker, fallback to inline"), a3.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.OTHER_ERROR, details: o.ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: "demuxerWorker", error: new Error(t5.message + "  (" + t5.filename + ":" + t5.lineno + ")") });
                }, f3.postMessage({ cmd: "init", typeSupported: h2, vendor: c3, id: e5, config: JSON.stringify(u2) });
              } catch (t5) {
                l.logger.warn("Error in worker:", t5), l.logger.error("Error while initializing DemuxerWorker, fallback to inline"), f3 && self.URL.revokeObjectURL(f3.objectURL), this.transmuxer = new le.default(this.observer, h2, u2, c3, e5), this.worker = null;
              }
            } else
              this.transmuxer = new le.default(this.observer, h2, u2, c3, e5);
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            var t4 = this.worker;
            if (t4)
              t4.removeEventListener("message", this.onwmsg), t4.terminate(), this.worker = null, this.onwmsg = void 0;
            else {
              var e5 = this.transmuxer;
              e5 && (e5.destroy(), this.transmuxer = null);
            }
            var r3 = this.observer;
            r3 && r3.removeAllListeners(), this.frag = null, this.observer = null, this.hls = null;
          }, e4.push = function(t4, e5, r3, i3, n2, a3, s2, o2, u2, d3) {
            var h2, c3, f3 = this;
            u2.transmuxing.start = self.performance.now();
            var g2 = this.transmuxer, v2 = this.worker, p2 = a3 ? a3.start : n2.start, m2 = n2.decryptdata, y2 = this.frag, E2 = !(y2 && n2.cc === y2.cc), T2 = !(y2 && u2.level === y2.level), S2 = y2 ? u2.sn - y2.sn : -1, b3 = this.part ? u2.part - this.part.index : -1, L2 = 0 === S2 && u2.id > 1 && u2.id === (null == y2 ? void 0 : y2.stats.chunkCount), D2 = !T2 && (1 === S2 || 0 === S2 && (1 === b3 || L2 && b3 <= 0)), A2 = self.performance.now();
            (T2 || S2 || 0 === n2.stats.parsing.start) && (n2.stats.parsing.start = A2), !a3 || !b3 && D2 || (a3.stats.parsing.start = A2);
            var R2 = !(y2 && (null === (h2 = n2.initSegment) || void 0 === h2 ? void 0 : h2.url) === (null === (c3 = y2.initSegment) || void 0 === c3 ? void 0 : c3.url)), k3 = new le.TransmuxState(E2, D2, o2, T2, p2, R2);
            if (!D2 || E2 || R2) {
              l.logger.log("[transmuxer-interface, " + n2.type + "]: Starting new transmux session for sn: " + u2.sn + " p: " + u2.part + " level: " + u2.level + " id: " + u2.id + "\n        discontinuity: " + E2 + "\n        trackSwitch: " + T2 + "\n        contiguous: " + D2 + "\n        accurateTimeOffset: " + o2 + "\n        timeOffset: " + p2 + "\n        initSegmentChange: " + R2);
              var I2 = new le.TransmuxConfig(r3, i3, e5, s2, d3);
              this.configureTransmuxer(I2);
            }
            if (this.frag = n2, this.part = a3, v2)
              v2.postMessage({ cmd: "demux", data: t4, decryptdata: m2, chunkMeta: u2, state: k3 }, t4 instanceof ArrayBuffer ? [t4] : []);
            else if (g2) {
              var _2 = g2.push(t4, m2, u2, k3);
              (0, le.isPromise)(_2) ? _2.then(function(t5) {
                f3.handleTransmuxComplete(t5);
              }) : this.handleTransmuxComplete(_2);
            }
          }, e4.flush = function(t4) {
            var e5 = this;
            t4.transmuxing.start = self.performance.now();
            var r3 = this.transmuxer, i3 = this.worker;
            if (i3)
              i3.postMessage({ cmd: "flush", chunkMeta: t4 });
            else if (r3) {
              var n2 = r3.flush(t4);
              (0, le.isPromise)(n2) ? n2.then(function(r4) {
                e5.handleFlushResult(r4, t4);
              }) : this.handleFlushResult(n2, t4);
            }
          }, e4.handleFlushResult = function(t4, e5) {
            var r3 = this;
            t4.forEach(function(t5) {
              r3.handleTransmuxComplete(t5);
            }), this.onFlush(e5);
          }, e4.onWorkerMessage = function(t4) {
            var e5 = t4.data, r3 = this.hls;
            switch (e5.event) {
              case "init":
                self.URL.revokeObjectURL(this.worker.objectURL);
                break;
              case "transmuxComplete":
                this.handleTransmuxComplete(e5.data);
                break;
              case "flush":
                this.onFlush(e5.data);
                break;
              case "workerLog":
                l.logger[e5.data.logType] && l.logger[e5.data.logType](e5.data.message);
                break;
              default:
                e5.data = e5.data || {}, e5.data.frag = this.frag, e5.data.id = this.id, r3.trigger(e5.event, e5.data);
            }
          }, e4.configureTransmuxer = function(t4) {
            var e5 = this.worker, r3 = this.transmuxer;
            e5 ? e5.postMessage({ cmd: "configure", config: t4 }) : r3 && r3.configure(t4);
          }, e4.handleTransmuxComplete = function(t4) {
            t4.chunkMeta.transmuxing.end = self.performance.now(), this.onTransmuxComplete(t4);
          }, t3;
        }(), ce = function() {
          function t3(t4, e5, r3, i3) {
            this.config = void 0, this.media = null, this.fragmentTracker = void 0, this.hls = void 0, this.nudgeRetry = 0, this.stallReported = false, this.stalled = null, this.moved = false, this.seeking = false, this.config = t4, this.media = e5, this.fragmentTracker = r3, this.hls = i3;
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            this.media = null, this.hls = this.fragmentTracker = null;
          }, e4.poll = function(t4, e5) {
            var r3 = this.config, i3 = this.media, n2 = this.stalled;
            if (null !== i3) {
              var a3 = i3.currentTime, s2 = i3.seeking, o2 = this.seeking && !s2, u2 = !this.seeking && s2;
              if (this.seeking = s2, a3 === t4) {
                if ((u2 || o2) && (this.stalled = null), !(i3.paused && !s2 || i3.ended || 0 === i3.playbackRate) && mt.getBuffered(i3).length) {
                  var d3 = mt.bufferInfo(i3, a3, 0), h2 = d3.len > 0, c3 = d3.nextStart || 0;
                  if (h2 || c3) {
                    if (s2) {
                      var f3 = d3.len > 2, g2 = !c3 || e5 && e5.start <= a3 || c3 - a3 > 2 && !this.fragmentTracker.getPartialFragment(a3);
                      if (f3 || g2)
                        return;
                      this.moved = false;
                    }
                    if (!this.moved && null !== this.stalled) {
                      var v2, p2 = Math.max(c3, d3.start || 0) - a3, m2 = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null, y2 = (null == m2 || null === (v2 = m2.details) || void 0 === v2 ? void 0 : v2.live) ? 2 * m2.details.targetduration : 2;
                      if (p2 > 0 && p2 <= y2)
                        return void this._trySkipBufferHole(null);
                    }
                    var E2 = self.performance.now();
                    if (null !== n2) {
                      var T2 = E2 - n2;
                      if (s2 || !(T2 >= 250) || (this._reportStall(d3), this.media)) {
                        var S2 = mt.bufferInfo(i3, a3, r3.maxBufferHole);
                        this._tryFixBufferStall(S2, T2);
                      }
                    } else
                      this.stalled = E2;
                  }
                }
              } else if (this.moved = true, null !== n2) {
                if (this.stallReported) {
                  var b3 = self.performance.now() - n2;
                  l.logger.warn("playback not stuck anymore @" + a3 + ", after " + Math.round(b3) + "ms"), this.stallReported = false;
                }
                this.stalled = null, this.nudgeRetry = 0;
              }
            }
          }, e4._tryFixBufferStall = function(t4, e5) {
            var r3 = this.config, i3 = this.fragmentTracker, n2 = this.media;
            if (null !== n2) {
              var a3 = n2.currentTime, s2 = i3.getPartialFragment(a3);
              if (s2 && (this._trySkipBufferHole(s2) || !this.media))
                return;
              t4.len > r3.maxBufferHole && e5 > 1e3 * r3.highBufferWatchdogPeriod && (l.logger.warn("Trying to nudge playhead over buffer-hole"), this.stalled = null, this._tryNudgeBuffer());
            }
          }, e4._reportStall = function(t4) {
            var e5 = this.hls, r3 = this.media;
            !this.stallReported && r3 && (this.stallReported = true, l.logger.warn("Playback stalling at @" + r3.currentTime + " due to low buffer (" + JSON.stringify(t4) + ")"), e5.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer: t4.len }));
          }, e4._trySkipBufferHole = function(t4) {
            var e5 = this.config, r3 = this.hls, i3 = this.media;
            if (null === i3)
              return 0;
            for (var n2 = i3.currentTime, a3 = 0, u2 = mt.getBuffered(i3), d3 = 0; d3 < u2.length; d3++) {
              var h2 = u2.start(d3);
              if (n2 + e5.maxBufferHole >= a3 && n2 < h2) {
                var c3 = Math.max(h2 + 0.05, i3.currentTime + 0.1);
                return l.logger.warn("skipping hole, adjusting currentTime from " + n2 + " to " + c3), this.moved = true, this.stalled = null, i3.currentTime = c3, t4 && r3.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_SEEK_OVER_HOLE, fatal: false, reason: "fragment loaded with buffer holes, seeking from " + n2 + " to " + c3, frag: t4 }), c3;
              }
              a3 = u2.end(d3);
            }
            return 0;
          }, e4._tryNudgeBuffer = function() {
            var t4 = this.config, e5 = this.hls, r3 = this.media, i3 = this.nudgeRetry;
            if (null !== r3) {
              var n2 = r3.currentTime;
              if (this.nudgeRetry++, i3 < t4.nudgeMaxRetry) {
                var a3 = n2 + (i3 + 1) * t4.nudgeOffset;
                l.logger.warn("Nudging 'currentTime' from " + n2 + " to " + a3), r3.currentTime = a3, e5.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_NUDGE_ON_STALL, fatal: false });
              } else
                l.logger.error("Playhead still not moving while enough data buffered @" + n2 + " after " + t4.nudgeMaxRetry + " nudges"), e5.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_STALLED_ERROR, fatal: true });
            }
          }, t3;
        }();
        function fe(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        function ge(t3, e4) {
          return ge = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, ge(t3, e4);
        }
        var ve = function(t3) {
          var e4, r3;
          function i3(e5, r4) {
            var i4;
            return (i4 = t3.call(this, e5, r4, "[stream-controller]") || this).audioCodecSwap = false, i4.gapController = null, i4.level = -1, i4._forceStartLoad = false, i4.altAudio = false, i4.audioOnly = false, i4.fragPlaying = null, i4.onvplaying = null, i4.onvseeked = null, i4.fragLastKbps = 0, i4.couldBacktrack = false, i4.backtrackFragment = null, i4.audioCodecSwitch = false, i4.videoBuffer = null, i4._registerListeners(), i4;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, ge(e4, r3);
          var n2, l2, u2 = i3.prototype;
          return u2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t4.on(s.Events.ERROR, this.onError, this), t4.on(s.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.on(s.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this), t4.on(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.on(s.Events.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, u2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t4.off(s.Events.ERROR, this.onError, this), t4.off(s.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.off(s.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.off(s.Events.BUFFER_CREATED, this.onBufferCreated, this), t4.off(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.off(s.Events.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, u2.onHandlerDestroying = function() {
            this._unregisterListeners(), this.onMediaDetaching();
          }, u2.startLoad = function(t4) {
            if (this.levels) {
              var e5 = this.lastCurrentTime, r4 = this.hls;
              if (this.stopLoad(), this.setInterval(100), this.level = -1, this.fragLoadError = 0, !this.startFragRequested) {
                var i4 = r4.startLevel;
                -1 === i4 && (r4.config.testBandwidth && this.levels.length > 1 ? (i4 = 0, this.bitrateTest = true) : i4 = r4.nextAutoLevel), this.level = r4.nextLoadLevel = i4, this.loadedmetadata = false;
              }
              e5 > 0 && -1 === t4 && (this.log("Override startPosition with lastCurrentTime @" + e5.toFixed(3)), t4 = e5), this.state = Ht, this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
            } else
              this._forceStartLoad = true, this.state = Kt;
          }, u2.stopLoad = function() {
            this._forceStartLoad = false, t3.prototype.stopLoad.call(this);
          }, u2.doTick = function() {
            switch (this.state) {
              case Ht:
                this.doTickIdle();
                break;
              case Zt:
                var t4, e5 = this.levels, r4 = this.level, i4 = null == e5 || null === (t4 = e5[r4]) || void 0 === t4 ? void 0 : t4.details;
                if (i4 && (!i4.live || this.levelLastLoaded === this.level)) {
                  if (this.waitForCdnTuneIn(i4))
                    break;
                  this.state = Ht;
                  break;
                }
                break;
              case Wt:
                var n3, a3 = self.performance.now(), s2 = this.retryDate;
                (!s2 || a3 >= s2 || null !== (n3 = this.media) && void 0 !== n3 && n3.seeking) && (this.log("retryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded(this.level), this.state = Ht);
            }
            this.onTickEnd();
          }, u2.onTickEnd = function() {
            t3.prototype.onTickEnd.call(this), this.checkBuffer(), this.checkFragmentChanged();
          }, u2.doTickIdle = function() {
            var t4, e5, r4 = this.hls, i4 = this.levelLastLoaded, n3 = this.levels, a3 = this.media, o2 = r4.config, l3 = r4.nextLoadLevel;
            if (null !== i4 && (a3 || !this.startFragRequested && o2.startFragPrefetch) && (!this.altAudio || !this.audioOnly) && n3 && n3[l3]) {
              var u3 = n3[l3];
              this.level = r4.nextLoadLevel = l3;
              var d3 = u3.details;
              if (!d3 || this.state === Zt || d3.live && this.levelLastLoaded !== l3)
                this.state = Zt;
              else {
                var h2 = this.getMainFwdBufferInfo();
                if (null !== h2 && !(h2.len >= this.getMaxBufferLength(u3.maxBitrate))) {
                  if (this._streamEnded(h2, d3)) {
                    var c3 = {};
                    return this.altAudio && (c3.type = "video"), this.hls.trigger(s.Events.BUFFER_EOS, c3), void (this.state = Xt);
                  }
                  this.backtrackFragment && this.backtrackFragment.start > h2.end && (this.backtrackFragment = null);
                  var f3 = this.backtrackFragment ? this.backtrackFragment.start : h2.end, g2 = this.getNextFragment(f3, d3);
                  if (this.couldBacktrack && !this.fragPrevious && g2 && "initSegment" !== g2.sn && this.fragmentTracker.getState(g2) !== ut.OK) {
                    var v2, m2 = (null != (v2 = this.backtrackFragment) ? v2 : g2).sn - d3.startSN, y2 = d3.fragments[m2 - 1];
                    y2 && g2.cc === y2.cc && (g2 = y2, this.fragmentTracker.removeFragment(y2));
                  } else
                    this.backtrackFragment && h2.len && (this.backtrackFragment = null);
                  if (g2 && this.fragmentTracker.getState(g2) === ut.OK && this.nextLoadPosition > f3) {
                    var E2 = this.audioOnly && !this.altAudio ? p.ElementaryStreamTypes.AUDIO : p.ElementaryStreamTypes.VIDEO;
                    a3 && this.afterBufferFlushed(a3, E2, O.PlaylistLevelType.MAIN), g2 = this.getNextFragment(this.nextLoadPosition, d3);
                  }
                  g2 && (!g2.initSegment || g2.initSegment.data || this.bitrateTest || (g2 = g2.initSegment), "identity" !== (null === (t4 = g2.decryptdata) || void 0 === t4 ? void 0 : t4.keyFormat) || null !== (e5 = g2.decryptdata) && void 0 !== e5 && e5.key ? this.loadFragment(g2, d3, f3) : this.loadKey(g2, d3));
                }
              }
            }
          }, u2.loadFragment = function(e5, r4, i4) {
            var n3, a3 = this.fragmentTracker.getState(e5);
            this.fragCurrent = e5, a3 === ut.NOT_LOADED ? "initSegment" === e5.sn ? this._loadInitSegment(e5) : this.bitrateTest ? (this.log("Fragment " + e5.sn + " of level " + e5.level + " is being downloaded to test bitrate and will not be buffered"), this._loadBitrateTestFrag(e5)) : (this.startFragRequested = true, t3.prototype.loadFragment.call(this, e5, r4, i4)) : a3 === ut.APPENDING ? this.reduceMaxBufferLength(e5.duration) && this.fragmentTracker.removeFragment(e5) : 0 === (null === (n3 = this.media) || void 0 === n3 ? void 0 : n3.buffered.length) && this.fragmentTracker.removeAllFragments();
          }, u2.getAppendedFrag = function(t4) {
            var e5 = this.fragmentTracker.getAppendedFrag(t4, O.PlaylistLevelType.MAIN);
            return e5 && "fragment" in e5 ? e5.fragment : e5;
          }, u2.getBufferedFrag = function(t4) {
            return this.fragmentTracker.getBufferedFrag(t4, O.PlaylistLevelType.MAIN);
          }, u2.followingBufferedFrag = function(t4) {
            return t4 ? this.getBufferedFrag(t4.end + 0.5) : null;
          }, u2.immediateLevelSwitch = function() {
            this.abortCurrentFrag(), this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
          }, u2.nextLevelSwitch = function() {
            var t4 = this.levels, e5 = this.media;
            if (null != e5 && e5.readyState) {
              var r4, i4 = this.getAppendedFrag(e5.currentTime);
              if (i4 && i4.start > 1 && this.flushMainBuffer(0, i4.start - 1), !e5.paused && t4) {
                var n3 = t4[this.hls.nextLoadLevel], a3 = this.fragLastKbps;
                r4 = a3 && this.fragCurrent ? this.fragCurrent.duration * n3.maxBitrate / (1e3 * a3) + 1 : 0;
              } else
                r4 = 0;
              var s2 = this.getBufferedFrag(e5.currentTime + r4);
              if (s2) {
                var o2 = this.followingBufferedFrag(s2);
                if (o2) {
                  this.abortCurrentFrag();
                  var l3 = o2.maxStartPTS ? o2.maxStartPTS : o2.start, u3 = o2.duration, d3 = Math.max(s2.end, l3 + Math.min(Math.max(u3 - this.config.maxFragLookUpTolerance, 0.5 * u3), 0.75 * u3));
                  this.flushMainBuffer(d3, Number.POSITIVE_INFINITY);
                }
              }
            }
          }, u2.abortCurrentFrag = function() {
            var t4 = this.fragCurrent;
            switch (this.fragCurrent = null, this.backtrackFragment = null, null != t4 && t4.loader && t4.loader.abort(), this.state) {
              case jt:
              case Vt:
              case Wt:
              case qt:
              case zt:
                this.state = Ht;
            }
            this.nextLoadPosition = this.getLoadPosition();
          }, u2.flushMainBuffer = function(e5, r4) {
            t3.prototype.flushMainBuffer.call(this, e5, r4, this.altAudio ? "video" : null);
          }, u2.onMediaAttached = function(e5, r4) {
            t3.prototype.onMediaAttached.call(this, e5, r4);
            var i4 = r4.media;
            this.onvplaying = this.onMediaPlaying.bind(this), this.onvseeked = this.onMediaSeeked.bind(this), i4.addEventListener("playing", this.onvplaying), i4.addEventListener("seeked", this.onvseeked), this.gapController = new ce(this.config, i4, this.fragmentTracker, this.hls);
          }, u2.onMediaDetaching = function() {
            var e5 = this.media;
            e5 && this.onvplaying && this.onvseeked && (e5.removeEventListener("playing", this.onvplaying), e5.removeEventListener("seeked", this.onvseeked), this.onvplaying = this.onvseeked = null, this.videoBuffer = null), this.fragPlaying = null, this.gapController && (this.gapController.destroy(), this.gapController = null), t3.prototype.onMediaDetaching.call(this);
          }, u2.onMediaPlaying = function() {
            this.tick();
          }, u2.onMediaSeeked = function() {
            var t4 = this.media, e5 = t4 ? t4.currentTime : null;
            (0, a2.isFiniteNumber)(e5) && this.log("Media seeked to " + e5.toFixed(3)), this.tick();
          }, u2.onManifestLoading = function() {
            this.log("Trigger BUFFER_RESET"), this.hls.trigger(s.Events.BUFFER_RESET, void 0), this.fragmentTracker.removeAllFragments(), this.couldBacktrack = false, this.startPosition = this.lastCurrentTime = 0, this.fragPlaying = null, this.backtrackFragment = null;
          }, u2.onManifestParsed = function(t4, e5) {
            var r4, i4, n3, a3 = false, s2 = false;
            e5.levels.forEach(function(t5) {
              (r4 = t5.audioCodec) && (-1 !== r4.indexOf("mp4a.40.2") && (a3 = true), -1 !== r4.indexOf("mp4a.40.5") && (s2 = true));
            }), this.audioCodecSwitch = a3 && s2 && !("function" == typeof (null == (n3 = ee()) || null === (i4 = n3.prototype) || void 0 === i4 ? void 0 : i4.changeType)), this.audioCodecSwitch && this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"), this.levels = e5.levels, this.startFragRequested = false;
          }, u2.onLevelLoading = function(t4, e5) {
            var r4 = this.levels;
            if (r4 && this.state === Ht) {
              var i4 = r4[e5.level];
              (!i4.details || i4.details.live && this.levelLastLoaded !== e5.level || this.waitForCdnTuneIn(i4.details)) && (this.state = Zt);
            }
          }, u2.onLevelLoaded = function(t4, e5) {
            var r4, i4 = this.levels, n3 = e5.level, a3 = e5.details, o2 = a3.totalduration;
            if (i4) {
              this.log("Level " + n3 + " loaded [" + a3.startSN + "," + a3.endSN + "], cc [" + a3.startCC + ", " + a3.endCC + "] duration:" + o2);
              var l3 = this.fragCurrent;
              !l3 || this.state !== Vt && this.state !== Wt || l3.level !== e5.level && l3.loader && (this.state = Ht, this.backtrackFragment = null, l3.loader.abort());
              var u3 = i4[n3], d3 = 0;
              if (a3.live || null !== (r4 = u3.details) && void 0 !== r4 && r4.live) {
                if (a3.fragments[0] || (a3.deltaUpdateFailed = true), a3.deltaUpdateFailed)
                  return;
                d3 = this.alignPlaylists(a3, u3.details);
              }
              if (u3.details = a3, this.levelLastLoaded = n3, this.hls.trigger(s.Events.LEVEL_UPDATED, { details: a3, level: n3 }), this.state === Zt) {
                if (this.waitForCdnTuneIn(a3))
                  return;
                this.state = Ht;
              }
              this.startFragRequested ? a3.live && this.synchronizeToLiveEdge(a3) : this.setStartPosition(a3, d3), this.tick();
            } else
              this.warn("Levels were reset while loading level " + n3);
          }, u2._handleFragmentLoadProgress = function(t4) {
            var e5, r4 = t4.frag, i4 = t4.part, n3 = t4.payload, a3 = this.levels;
            if (a3) {
              var s2 = a3[r4.level], o2 = s2.details;
              if (o2) {
                var l3 = s2.videoCodec, u3 = o2.PTSKnown || !o2.live, d3 = null === (e5 = r4.initSegment) || void 0 === e5 ? void 0 : e5.data, h2 = this._getAudioCodec(s2), c3 = this.transmuxer = this.transmuxer || new he(this.hls, O.PlaylistLevelType.MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)), f3 = i4 ? i4.index : -1, g2 = -1 !== f3, v2 = new yt(r4.level, r4.sn, r4.stats.chunkCount, n3.byteLength, f3, g2), p2 = this.initPTS[r4.cc];
                c3.push(n3, d3, h2, l3, r4, i4, o2.totalduration, u3, v2, p2);
              } else
                this.warn("Dropping fragment " + r4.sn + " of level " + r4.level + " after level details were reset");
            } else
              this.warn("Levels were reset while fragment load was in progress. Fragment " + r4.sn + " of level " + r4.level + " will not be buffered");
          }, u2.onAudioTrackSwitching = function(t4, e5) {
            var r4 = this.altAudio, i4 = !!e5.url, n3 = e5.id;
            if (!i4) {
              if (this.mediaBuffer !== this.media) {
                this.log("Switching on main audio, use media.buffered to schedule main fragment loading"), this.mediaBuffer = this.media;
                var a3 = this.fragCurrent;
                null != a3 && a3.loader && (this.log("Switching to main audio track, cancel main fragment load"), a3.loader.abort()), this.resetTransmuxer(), this.resetLoadingState();
              } else
                this.audioOnly && this.resetTransmuxer();
              var o2 = this.hls;
              r4 && o2.trigger(s.Events.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: "audio" }), o2.trigger(s.Events.AUDIO_TRACK_SWITCHED, { id: n3 });
            }
          }, u2.onAudioTrackSwitched = function(t4, e5) {
            var r4 = e5.id, i4 = !!this.hls.audioTracks[r4].url;
            if (i4) {
              var n3 = this.videoBuffer;
              n3 && this.mediaBuffer !== n3 && (this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading"), this.mediaBuffer = n3);
            }
            this.altAudio = i4, this.tick();
          }, u2.onBufferCreated = function(t4, e5) {
            var r4, i4, n3 = e5.tracks, a3 = false;
            for (var s2 in n3) {
              var o2 = n3[s2];
              if ("main" === o2.id) {
                if (i4 = s2, r4 = o2, "video" === s2) {
                  var l3 = n3[s2];
                  l3 && (this.videoBuffer = l3.buffer);
                }
              } else
                a3 = true;
            }
            a3 && r4 ? (this.log("Alternate track found, use " + i4 + ".buffered to schedule main fragment loading"), this.mediaBuffer = r4.buffer) : this.mediaBuffer = this.media;
          }, u2.onFragBuffered = function(t4, e5) {
            var r4 = e5.frag, i4 = e5.part;
            if (!r4 || r4.type === O.PlaylistLevelType.MAIN) {
              if (this.fragContextChanged(r4))
                return this.warn("Fragment " + r4.sn + (i4 ? " p: " + i4.index : "") + " of level " + r4.level + " finished buffering, but was aborted. state: " + this.state), void (this.state === zt && (this.state = Ht));
              var n3 = i4 ? i4.stats : r4.stats;
              this.fragLastKbps = Math.round(8 * n3.total / (n3.buffering.end - n3.loading.first)), "initSegment" !== r4.sn && (this.fragPrevious = r4), this.fragBufferedComplete(r4, i4);
            }
          }, u2.onError = function(t4, e5) {
            switch (e5.details) {
              case o.ErrorDetails.FRAG_LOAD_ERROR:
              case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
              case o.ErrorDetails.KEY_LOAD_ERROR:
              case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                this.onFragmentOrKeyLoadError(O.PlaylistLevelType.MAIN, e5);
                break;
              case o.ErrorDetails.LEVEL_LOAD_ERROR:
              case o.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                this.state !== Qt && (e5.fatal ? (this.warn("" + e5.details), this.state = Qt) : e5.levelRetry || this.state !== Zt || (this.state = Ht));
                break;
              case o.ErrorDetails.BUFFER_FULL_ERROR:
                if ("main" === e5.parent && (this.state === qt || this.state === zt)) {
                  var r4 = true, i4 = this.getFwdBufferInfo(this.media, O.PlaylistLevelType.MAIN);
                  i4 && i4.len > 0.5 && (r4 = !this.reduceMaxBufferLength(i4.len)), r4 && (this.warn("buffer full error also media.currentTime is not buffered, flush main"), this.immediateLevelSwitch()), this.resetLoadingState();
                }
            }
          }, u2.checkBuffer = function() {
            var t4 = this.media, e5 = this.gapController;
            if (t4 && e5 && t4.readyState) {
              if (this.loadedmetadata || !mt.getBuffered(t4).length) {
                var r4 = this.state !== Ht ? this.fragCurrent : null;
                e5.poll(this.lastCurrentTime, r4);
              }
              this.lastCurrentTime = t4.currentTime;
            }
          }, u2.onFragLoadEmergencyAborted = function() {
            this.state = Ht, this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition), this.tickImmediate();
          }, u2.onBufferFlushed = function(t4, e5) {
            var r4 = e5.type;
            if (r4 !== p.ElementaryStreamTypes.AUDIO || this.audioOnly && !this.altAudio) {
              var i4 = (r4 === p.ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
              this.afterBufferFlushed(i4, r4, O.PlaylistLevelType.MAIN);
            }
          }, u2.onLevelsUpdated = function(t4, e5) {
            this.levels = e5.levels;
          }, u2.swapAudioCodec = function() {
            this.audioCodecSwap = !this.audioCodecSwap;
          }, u2.seekToStartPos = function() {
            var t4 = this.media;
            if (t4) {
              var e5 = t4.currentTime, r4 = this.startPosition;
              if (r4 >= 0 && e5 < r4) {
                if (t4.seeking)
                  return void this.log("could not seek to " + r4 + ", already seeking at " + e5);
                var i4 = mt.getBuffered(t4), n3 = (i4.length ? i4.start(0) : 0) - r4;
                n3 > 0 && (n3 < this.config.maxBufferHole || n3 < this.config.maxFragLookUpTolerance) && (this.log("adjusting start position by " + n3 + " to match buffer start"), r4 += n3, this.startPosition = r4), this.log("seek to target start position " + r4 + " from current time " + e5), t4.currentTime = r4;
              }
            }
          }, u2._getAudioCodec = function(t4) {
            var e5 = this.config.defaultAudioCodec || t4.audioCodec;
            return this.audioCodecSwap && e5 && (this.log("Swapping audio codec"), e5 = -1 !== e5.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), e5;
          }, u2._loadBitrateTestFrag = function(t4) {
            var e5 = this;
            t4.bitrateTest = true, this._doFragLoad(t4).then(function(r4) {
              var i4 = e5.hls;
              if (r4 && !i4.nextLoadLevel && !e5.fragContextChanged(t4)) {
                e5.fragLoadError = 0, e5.state = Ht, e5.startFragRequested = false, e5.bitrateTest = false;
                var n3 = t4.stats;
                n3.parsing.start = n3.parsing.end = n3.buffering.start = n3.buffering.end = self.performance.now(), i4.trigger(s.Events.FRAG_LOADED, r4), t4.bitrateTest = false;
              }
            });
          }, u2._handleTransmuxComplete = function(t4) {
            var e5, r4 = "main", i4 = this.hls, n3 = t4.remuxResult, o2 = t4.chunkMeta, l3 = this.getCurrentContext(o2);
            if (!l3)
              return this.warn("The loading context changed while buffering fragment " + o2.sn + " of level " + o2.level + ". This chunk will not be buffered."), void this.resetStartWhenNotLoaded(o2.level);
            var u3 = l3.frag, d3 = l3.part, h2 = l3.level, c3 = n3.video, f3 = n3.text, g2 = n3.id3, v2 = n3.initSegment, m2 = h2.details, y2 = this.altAudio ? void 0 : n3.audio;
            if (!this.fragContextChanged(u3)) {
              if (this.state = qt, v2) {
                v2.tracks && (this._bufferInitSegment(h2, v2.tracks, u3, o2), i4.trigger(s.Events.FRAG_PARSING_INIT_SEGMENT, { frag: u3, id: r4, tracks: v2.tracks }));
                var E2 = v2.initPTS, T2 = v2.timescale;
                (0, a2.isFiniteNumber)(E2) && (this.initPTS[u3.cc] = E2, i4.trigger(s.Events.INIT_PTS_FOUND, { frag: u3, id: r4, initPTS: E2, timescale: T2 }));
              }
              if (c3 && false !== n3.independent) {
                if (m2) {
                  var S2 = c3.startPTS, b3 = c3.endPTS, L2 = c3.startDTS, D2 = c3.endDTS;
                  if (d3)
                    d3.elementaryStreams[c3.type] = { startPTS: S2, endPTS: b3, startDTS: L2, endDTS: D2 };
                  else if (c3.firstKeyFrame && c3.independent && (this.couldBacktrack = true), c3.dropped && c3.independent) {
                    var A2 = this.getMainFwdBufferInfo();
                    if ((A2 ? A2.end : this.getLoadPosition()) + this.config.maxBufferHole < (c3.firstKeyFramePTS ? c3.firstKeyFramePTS : S2) - this.config.maxBufferHole)
                      return void this.backtrack(u3);
                    u3.setElementaryStreamInfo(c3.type, u3.start, b3, u3.start, D2, true);
                  }
                  u3.setElementaryStreamInfo(c3.type, S2, b3, L2, D2), this.backtrackFragment && (this.backtrackFragment = u3), this.bufferFragmentData(c3, u3, d3, o2);
                }
              } else if (false === n3.independent)
                return void this.backtrack(u3);
              if (y2) {
                var R2 = y2.startPTS, k3 = y2.endPTS, I2 = y2.startDTS, _2 = y2.endDTS;
                d3 && (d3.elementaryStreams[p.ElementaryStreamTypes.AUDIO] = { startPTS: R2, endPTS: k3, startDTS: I2, endDTS: _2 }), u3.setElementaryStreamInfo(p.ElementaryStreamTypes.AUDIO, R2, k3, I2, _2), this.bufferFragmentData(y2, u3, d3, o2);
              }
              if (m2 && null != g2 && null !== (e5 = g2.samples) && void 0 !== e5 && e5.length) {
                var C2 = { id: r4, frag: u3, details: m2, samples: g2.samples };
                i4.trigger(s.Events.FRAG_PARSING_METADATA, C2);
              }
              if (m2 && f3) {
                var w2 = { id: r4, frag: u3, details: m2, samples: f3.samples };
                i4.trigger(s.Events.FRAG_PARSING_USERDATA, w2);
              }
            }
          }, u2._bufferInitSegment = function(t4, e5, r4, i4) {
            var n3 = this;
            if (this.state === qt) {
              this.audioOnly = !!e5.audio && !e5.video, this.altAudio && !this.audioOnly && delete e5.audio;
              var a3 = e5.audio, o2 = e5.video, l3 = e5.audiovideo;
              if (a3) {
                var u3 = t4.audioCodec, d3 = navigator.userAgent.toLowerCase();
                this.audioCodecSwitch && (u3 && (u3 = -1 !== u3.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), 1 !== a3.metadata.channelCount && -1 === d3.indexOf("firefox") && (u3 = "mp4a.40.5")), -1 !== d3.indexOf("android") && "audio/mpeg" !== a3.container && (u3 = "mp4a.40.2", this.log("Android: force audio codec to " + u3)), t4.audioCodec && t4.audioCodec !== u3 && this.log('Swapping manifest audio codec "' + t4.audioCodec + '" for "' + u3 + '"'), a3.levelCodec = u3, a3.id = "main", this.log("Init audio buffer, container:" + a3.container + ", codecs[selected/level/parsed]=[" + (u3 || "") + "/" + (t4.audioCodec || "") + "/" + a3.codec + "]");
              }
              o2 && (o2.levelCodec = t4.videoCodec, o2.id = "main", this.log("Init video buffer, container:" + o2.container + ", codecs[level/parsed]=[" + (t4.videoCodec || "") + "/" + o2.codec + "]")), l3 && this.log("Init audiovideo buffer, container:" + l3.container + ", codecs[level/parsed]=[" + (t4.attrs.CODECS || "") + "/" + l3.codec + "]"), this.hls.trigger(s.Events.BUFFER_CODECS, e5), Object.keys(e5).forEach(function(t5) {
                var a4 = e5[t5].initSegment;
                null != a4 && a4.byteLength && n3.hls.trigger(s.Events.BUFFER_APPENDING, { type: t5, data: a4, frag: r4, part: null, chunkMeta: i4, parent: r4.type });
              }), this.tick();
            }
          }, u2.getMainFwdBufferInfo = function() {
            return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, O.PlaylistLevelType.MAIN);
          }, u2.backtrack = function(t4) {
            this.couldBacktrack = true, this.backtrackFragment = t4, this.resetTransmuxer(), this.flushBufferGap(t4), this.fragmentTracker.removeFragment(t4), this.fragPrevious = null, this.nextLoadPosition = t4.start, this.state = Ht;
          }, u2.checkFragmentChanged = function() {
            var t4 = this.media, e5 = null;
            if (t4 && t4.readyState > 1 && false === t4.seeking) {
              var r4 = t4.currentTime;
              if (mt.isBuffered(t4, r4) ? e5 = this.getAppendedFrag(r4) : mt.isBuffered(t4, r4 + 0.1) && (e5 = this.getAppendedFrag(r4 + 0.1)), e5) {
                this.backtrackFragment = null;
                var i4 = this.fragPlaying, n3 = e5.level;
                i4 && e5.sn === i4.sn && i4.level === n3 && e5.urlId === i4.urlId || (this.hls.trigger(s.Events.FRAG_CHANGED, { frag: e5 }), i4 && i4.level === n3 || this.hls.trigger(s.Events.LEVEL_SWITCHED, { level: n3 }), this.fragPlaying = e5);
              }
            }
          }, n2 = i3, (l2 = [{ key: "nextLevel", get: function() {
            var t4 = this.nextBufferedFrag;
            return t4 ? t4.level : -1;
          } }, { key: "currentFrag", get: function() {
            var t4 = this.media;
            return t4 ? this.fragPlaying || this.getAppendedFrag(t4.currentTime) : null;
          } }, { key: "currentProgramDateTime", get: function() {
            var t4 = this.media;
            if (t4) {
              var e5 = t4.currentTime, r4 = this.currentFrag;
              if (r4 && (0, a2.isFiniteNumber)(e5) && (0, a2.isFiniteNumber)(r4.programDateTime)) {
                var i4 = r4.programDateTime + 1e3 * (e5 - r4.start);
                return new Date(i4);
              }
            }
            return null;
          } }, { key: "currentLevel", get: function() {
            var t4 = this.currentFrag;
            return t4 ? t4.level : -1;
          } }, { key: "nextBufferedFrag", get: function() {
            var t4 = this.currentFrag;
            return t4 ? this.followingBufferedFrag(t4) : null;
          } }, { key: "forceStartLoad", get: function() {
            return this._forceStartLoad;
          } }]) && fe(n2.prototype, l2), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(Jt);
        const pe = function() {
          function t3(t4, e5, r3) {
            void 0 === e5 && (e5 = 0), void 0 === r3 && (r3 = 0), this.halfLife = void 0, this.alpha_ = void 0, this.estimate_ = void 0, this.totalWeight_ = void 0, this.halfLife = t4, this.alpha_ = t4 ? Math.exp(Math.log(0.5) / t4) : 0, this.estimate_ = e5, this.totalWeight_ = r3;
          }
          var e4 = t3.prototype;
          return e4.sample = function(t4, e5) {
            var r3 = Math.pow(this.alpha_, t4);
            this.estimate_ = e5 * (1 - r3) + r3 * this.estimate_, this.totalWeight_ += t4;
          }, e4.getTotalWeight = function() {
            return this.totalWeight_;
          }, e4.getEstimate = function() {
            if (this.alpha_) {
              var t4 = 1 - Math.pow(this.alpha_, this.totalWeight_);
              if (t4)
                return this.estimate_ / t4;
            }
            return this.estimate_;
          }, t3;
        }(), me = function() {
          function t3(t4, e5, r3) {
            this.defaultEstimate_ = void 0, this.minWeight_ = void 0, this.minDelayMs_ = void 0, this.slow_ = void 0, this.fast_ = void 0, this.defaultEstimate_ = r3, this.minWeight_ = 1e-3, this.minDelayMs_ = 50, this.slow_ = new pe(t4), this.fast_ = new pe(e5);
          }
          var e4 = t3.prototype;
          return e4.update = function(t4, e5) {
            var r3 = this.slow_, i3 = this.fast_;
            this.slow_.halfLife !== t4 && (this.slow_ = new pe(t4, r3.getEstimate(), r3.getTotalWeight())), this.fast_.halfLife !== e5 && (this.fast_ = new pe(e5, i3.getEstimate(), i3.getTotalWeight()));
          }, e4.sample = function(t4, e5) {
            var r3 = (t4 = Math.max(t4, this.minDelayMs_)) / 1e3, i3 = 8 * e5 / r3;
            this.fast_.sample(r3, i3), this.slow_.sample(r3, i3);
          }, e4.canEstimate = function() {
            var t4 = this.fast_;
            return t4 && t4.getTotalWeight() >= this.minWeight_;
          }, e4.getEstimate = function() {
            return this.canEstimate() ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate()) : this.defaultEstimate_;
          }, e4.destroy = function() {
          }, t3;
        }();
        function ye(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        const Ee = function() {
          function t3(t4) {
            this.hls = void 0, this.lastLoadedFragLevel = 0, this._nextAutoLevel = -1, this.timer = void 0, this.onCheck = this._abandonRulesCheck.bind(this), this.fragCurrent = null, this.partCurrent = null, this.bitrateTestDelay = 0, this.bwEstimator = void 0, this.hls = t4;
            var e5 = t4.config;
            this.bwEstimator = new me(e5.abrEwmaSlowVoD, e5.abrEwmaFastVoD, e5.abrEwmaDefaultEstimate), this.registerListeners();
          }
          var e4, r3, i3 = t3.prototype;
          return i3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.FRAG_LOADING, this.onFragLoading, this), t4.on(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.ERROR, this.onError, this);
          }, i3.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.FRAG_LOADING, this.onFragLoading, this), t4.off(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.ERROR, this.onError, this);
          }, i3.destroy = function() {
            this.unregisterListeners(), this.clearTimer(), this.hls = this.onCheck = null, this.fragCurrent = this.partCurrent = null;
          }, i3.onFragLoading = function(t4, e5) {
            var r4, i4 = e5.frag;
            i4.type === O.PlaylistLevelType.MAIN && (this.timer || (this.fragCurrent = i4, this.partCurrent = null != (r4 = e5.part) ? r4 : null, this.timer = self.setInterval(this.onCheck, 100)));
          }, i3.onLevelLoaded = function(t4, e5) {
            var r4 = this.hls.config;
            e5.details.live ? this.bwEstimator.update(r4.abrEwmaSlowLive, r4.abrEwmaFastLive) : this.bwEstimator.update(r4.abrEwmaSlowVoD, r4.abrEwmaFastVoD);
          }, i3._abandonRulesCheck = function() {
            var t4 = this.fragCurrent, e5 = this.partCurrent, r4 = this.hls, i4 = r4.autoLevelEnabled, n2 = (r4.config, r4.media);
            if (t4 && n2) {
              var o2 = e5 ? e5.stats : t4.stats, u2 = e5 ? e5.duration : t4.duration;
              if (o2.aborted || o2.loaded && o2.loaded === o2.total || 0 === t4.level)
                return this.clearTimer(), void (this._nextAutoLevel = -1);
              if (i4 && !n2.paused && n2.playbackRate && n2.readyState) {
                var d3 = r4.mainForwardBufferInfo;
                if (null !== d3) {
                  var h2 = performance.now() - o2.loading.start, c3 = Math.abs(n2.playbackRate);
                  if (!(h2 <= 500 * u2 / c3)) {
                    var f3 = o2.loaded && o2.loading.first, g2 = this.bwEstimator.getEstimate(), v2 = r4.levels, p2 = r4.minAutoLevel, m2 = v2[t4.level], y2 = o2.total || Math.max(o2.loaded, Math.round(u2 * m2.maxBitrate / 8)), E2 = f3 ? 1e3 * o2.loaded / h2 : 0, T2 = E2 ? (y2 - o2.loaded) / E2 : 8 * y2 / g2, S2 = d3.len / c3;
                    if (!(T2 <= S2)) {
                      var b3, L2 = Number.POSITIVE_INFINITY;
                      for (b3 = t4.level - 1; b3 > p2; b3--) {
                        var D2 = v2[b3].maxBitrate;
                        if ((L2 = E2 ? u2 * D2 / (6.4 * E2) : u2 * D2 / g2) < S2)
                          break;
                      }
                      L2 >= T2 || (l.logger.warn("Fragment " + t4.sn + (e5 ? " part " + e5.index : "") + " of level " + t4.level + " is loading too slowly and will cause an underbuffer; aborting and switching to level " + b3 + "\n      Current BW estimate: " + ((0, a2.isFiniteNumber)(g2) ? (g2 / 1024).toFixed(3) : "Unknown") + " Kb/s\n      Estimated load time for current fragment: " + T2.toFixed(3) + " s\n      Estimated load time for the next fragment: " + L2.toFixed(3) + " s\n      Time to underbuffer: " + S2.toFixed(3) + " s"), r4.nextLoadLevel = b3, f3 && this.bwEstimator.sample(h2, o2.loaded), this.clearTimer(), t4.loader && (this.fragCurrent = this.partCurrent = null, t4.loader.abort()), r4.trigger(s.Events.FRAG_LOAD_EMERGENCY_ABORTED, { frag: t4, part: e5, stats: o2 }));
                    }
                  }
                }
              }
            }
          }, i3.onFragLoaded = function(t4, e5) {
            var r4 = e5.frag, i4 = e5.part;
            if (r4.type === O.PlaylistLevelType.MAIN && (0, a2.isFiniteNumber)(r4.sn)) {
              var n2 = i4 ? i4.stats : r4.stats, o2 = i4 ? i4.duration : r4.duration;
              if (this.clearTimer(), this.lastLoadedFragLevel = r4.level, this._nextAutoLevel = -1, this.hls.config.abrMaxWithRealBitrate) {
                var l2 = this.hls.levels[r4.level], u2 = (l2.loaded ? l2.loaded.bytes : 0) + n2.loaded, d3 = (l2.loaded ? l2.loaded.duration : 0) + o2;
                l2.loaded = { bytes: u2, duration: d3 }, l2.realBitrate = Math.round(8 * u2 / d3);
              }
              if (r4.bitrateTest) {
                var h2 = { stats: n2, frag: r4, part: i4, id: r4.type };
                this.onFragBuffered(s.Events.FRAG_BUFFERED, h2);
              }
            }
          }, i3.onFragBuffered = function(t4, e5) {
            var r4 = e5.frag, i4 = e5.part, n2 = i4 ? i4.stats : r4.stats;
            if (!n2.aborted && r4.type === O.PlaylistLevelType.MAIN && "initSegment" !== r4.sn) {
              var a3 = n2.parsing.end - n2.loading.start;
              this.bwEstimator.sample(a3, n2.loaded), n2.bwEstimate = this.bwEstimator.getEstimate(), r4.bitrateTest ? this.bitrateTestDelay = a3 / 1e3 : this.bitrateTestDelay = 0;
            }
          }, i3.onError = function(t4, e5) {
            switch (e5.details) {
              case o.ErrorDetails.FRAG_LOAD_ERROR:
              case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                this.clearTimer();
            }
          }, i3.clearTimer = function() {
            self.clearInterval(this.timer), this.timer = void 0;
          }, i3.getNextABRAutoLevel = function() {
            var t4 = this.fragCurrent, e5 = this.partCurrent, r4 = this.hls, i4 = r4.maxAutoLevel, n2 = r4.config, a3 = r4.minAutoLevel, s2 = r4.media, o2 = e5 ? e5.duration : t4 ? t4.duration : 0, u2 = (s2 && s2.currentTime, s2 && 0 !== s2.playbackRate ? Math.abs(s2.playbackRate) : 1), d3 = this.bwEstimator ? this.bwEstimator.getEstimate() : n2.abrEwmaDefaultEstimate, h2 = r4.mainForwardBufferInfo, c3 = (h2 ? h2.len : 0) / u2, f3 = this.findBestLevel(d3, a3, i4, c3, n2.abrBandWidthFactor, n2.abrBandWidthUpFactor);
            if (f3 >= 0)
              return f3;
            l.logger.trace((c3 ? "rebuffering expected" : "buffer is empty") + ", finding optimal quality level");
            var g2 = o2 ? Math.min(o2, n2.maxStarvationDelay) : n2.maxStarvationDelay, v2 = n2.abrBandWidthFactor, p2 = n2.abrBandWidthUpFactor;
            if (!c3) {
              var m2 = this.bitrateTestDelay;
              m2 && (g2 = (o2 ? Math.min(o2, n2.maxLoadingDelay) : n2.maxLoadingDelay) - m2, l.logger.trace("bitrate test took " + Math.round(1e3 * m2) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * g2) + " ms"), v2 = p2 = 1);
            }
            return f3 = this.findBestLevel(d3, a3, i4, c3 + g2, v2, p2), Math.max(f3, 0);
          }, i3.findBestLevel = function(t4, e5, r4, i4, n2, s2) {
            for (var o2, u2 = this.fragCurrent, d3 = this.partCurrent, h2 = this.lastLoadedFragLevel, c3 = this.hls.levels, f3 = c3[h2], g2 = !(null == f3 || null === (o2 = f3.details) || void 0 === o2 || !o2.live), v2 = null == f3 ? void 0 : f3.codecSet, p2 = d3 ? d3.duration : u2 ? u2.duration : 0, m2 = r4; m2 >= e5; m2--) {
              var y2 = c3[m2];
              if (y2 && (!v2 || y2.codecSet === v2)) {
                var E2, T2 = y2.details, S2 = (d3 ? null == T2 ? void 0 : T2.partTarget : null == T2 ? void 0 : T2.averagetargetduration) || p2;
                E2 = m2 <= h2 ? n2 * t4 : s2 * t4;
                var b3 = c3[m2].maxBitrate, L2 = b3 * S2 / E2;
                if (l.logger.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " + m2 + "/" + Math.round(E2) + "/" + b3 + "/" + S2 + "/" + i4 + "/" + L2), E2 > b3 && (0 === L2 || !(0, a2.isFiniteNumber)(L2) || g2 && !this.bitrateTestDelay || L2 < i4))
                  return m2;
              }
            }
            return -1;
          }, e4 = t3, (r3 = [{ key: "nextAutoLevel", get: function() {
            var t4 = this._nextAutoLevel, e5 = this.bwEstimator;
            if (-1 !== t4 && !e5.canEstimate())
              return t4;
            var r4 = this.getNextABRAutoLevel();
            return -1 !== t4 && this.hls.levels[r4].loadError ? t4 : (-1 !== t4 && (r4 = Math.min(t4, r4)), r4);
          }, set: function(t4) {
            this._nextAutoLevel = t4;
          } }]) && ye(e4.prototype, r3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }();
        var Te = function() {
          function t3() {
            this.chunks = [], this.dataLength = 0;
          }
          var e4 = t3.prototype;
          return e4.push = function(t4) {
            this.chunks.push(t4), this.dataLength += t4.length;
          }, e4.flush = function() {
            var t4, e5 = this.chunks, r3 = this.dataLength;
            return e5.length ? (t4 = 1 === e5.length ? e5[0] : function(t5, e6) {
              for (var r4 = new Uint8Array(e6), i3 = 0, n2 = 0; n2 < t5.length; n2++) {
                var a3 = t5[n2];
                r4.set(a3, i3), i3 += a3.length;
              }
              return r4;
            }(e5, r3), this.reset(), t4) : new Uint8Array(0);
          }, e4.reset = function() {
            this.chunks.length = 0, this.dataLength = 0;
          }, t3;
        }();
        function Se() {
          return Se = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, Se.apply(this, arguments);
        }
        function be(t3, e4) {
          return be = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, be(t3, e4);
        }
        var Le = function(t3) {
          var e4, r3;
          function i3(e5, r4) {
            var i4;
            return (i4 = t3.call(this, e5, r4, "[audio-stream-controller]") || this).videoBuffer = null, i4.videoTrackCC = -1, i4.waitingVideoCC = -1, i4.audioSwitch = false, i4.trackId = -1, i4.waitingData = null, i4.mainDetails = null, i4.bufferFlushed = false, i4.cachedTrackLoadedData = null, i4._registerListeners(), i4;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, be(e4, r3);
          var n2 = i3.prototype;
          return n2.onHandlerDestroying = function() {
            this._unregisterListeners(), this.mainDetails = null;
          }, n2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t4.on(s.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.on(s.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.on(s.Events.ERROR, this.onError, this), t4.on(s.Events.BUFFER_RESET, this.onBufferReset, this), t4.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this), t4.on(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.on(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, n2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t4.off(s.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.off(s.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.off(s.Events.ERROR, this.onError, this), t4.off(s.Events.BUFFER_RESET, this.onBufferReset, this), t4.off(s.Events.BUFFER_CREATED, this.onBufferCreated, this), t4.off(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.off(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, n2.onInitPtsFound = function(t4, e5) {
            var r4 = e5.frag, i4 = e5.id, n3 = e5.initPTS;
            if ("main" === i4) {
              var a3 = r4.cc;
              this.initPTS[r4.cc] = n3, this.log("InitPTS for cc: " + a3 + " found from main: " + n3), this.videoTrackCC = a3, this.state === $t && this.tick();
            }
          }, n2.startLoad = function(t4) {
            if (!this.levels)
              return this.startPosition = t4, void (this.state = Kt);
            var e5 = this.lastCurrentTime;
            this.stopLoad(), this.setInterval(100), this.fragLoadError = 0, e5 > 0 && -1 === t4 ? (this.log("Override startPosition with lastCurrentTime @" + e5.toFixed(3)), t4 = e5, this.state = Ht) : (this.loadedmetadata = false, this.state = Yt), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
          }, n2.doTick = function() {
            switch (this.state) {
              case Ht:
                this.doTickIdle();
                break;
              case Yt:
                var e5, r4 = this.levels, i4 = this.trackId, n3 = null == r4 || null === (e5 = r4[i4]) || void 0 === e5 ? void 0 : e5.details;
                if (n3) {
                  if (this.waitForCdnTuneIn(n3))
                    break;
                  this.state = $t;
                }
                break;
              case Wt:
                var a3, s2 = performance.now(), o2 = this.retryDate;
                (!o2 || s2 >= o2 || null !== (a3 = this.media) && void 0 !== a3 && a3.seeking) && (this.log("RetryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded(this.trackId), this.state = Ht);
                break;
              case $t:
                var l2 = this.waitingData;
                if (l2) {
                  var u2 = l2.frag, d3 = l2.part, h2 = l2.cache, c3 = l2.complete;
                  if (void 0 !== this.initPTS[u2.cc]) {
                    this.waitingData = null, this.waitingVideoCC = -1, this.state = Vt;
                    var f3 = { frag: u2, part: d3, payload: h2.flush(), networkDetails: null };
                    this._handleFragmentLoadProgress(f3), c3 && t3.prototype._handleFragmentLoadComplete.call(this, f3);
                  } else if (this.videoTrackCC !== this.waitingVideoCC)
                    this.log("Waiting fragment cc (" + u2.cc + ") cancelled because video is at cc " + this.videoTrackCC), this.clearWaitingFragment();
                  else {
                    var g2 = this.getLoadPosition(), v2 = mt.bufferInfo(this.mediaBuffer, g2, this.config.maxBufferHole);
                    At(v2.end, this.config.maxFragLookUpTolerance, u2) < 0 && (this.log("Waiting fragment cc (" + u2.cc + ") @ " + u2.start + " cancelled because another fragment at " + v2.end + " is needed"), this.clearWaitingFragment());
                  }
                } else
                  this.state = Ht;
            }
            this.onTickEnd();
          }, n2.clearWaitingFragment = function() {
            var t4 = this.waitingData;
            t4 && (this.fragmentTracker.removeFragment(t4.frag), this.waitingData = null, this.waitingVideoCC = -1, this.state = Ht);
          }, n2.resetLoadingState = function() {
            this.clearWaitingFragment(), t3.prototype.resetLoadingState.call(this);
          }, n2.onTickEnd = function() {
            var t4 = this.media;
            t4 && t4.readyState && (this.lastCurrentTime = t4.currentTime);
          }, n2.doTickIdle = function() {
            var t4, e5, r4 = this.hls, i4 = this.levels, n3 = this.media, a3 = this.trackId, o2 = r4.config;
            if (i4 && i4[a3] && (n3 || !this.startFragRequested && o2.startFragPrefetch)) {
              var l2 = i4[a3].details;
              if (!l2 || l2.live && this.levelLastLoaded !== a3 || this.waitForCdnTuneIn(l2))
                this.state = Yt;
              else {
                var u2 = this.mediaBuffer ? this.mediaBuffer : this.media;
                this.bufferFlushed && u2 && (this.bufferFlushed = false, this.afterBufferFlushed(u2, p.ElementaryStreamTypes.AUDIO, O.PlaylistLevelType.AUDIO));
                var d3 = this.getFwdBufferInfo(u2, O.PlaylistLevelType.AUDIO);
                if (null !== d3) {
                  var h2 = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, O.PlaylistLevelType.MAIN), c3 = d3.len, f3 = this.getMaxBufferLength(null == h2 ? void 0 : h2.len), g2 = this.audioSwitch;
                  if (!(c3 >= f3) || g2) {
                    if (!g2 && this._streamEnded(d3, l2))
                      return r4.trigger(s.Events.BUFFER_EOS, { type: "audio" }), void (this.state = Xt);
                    var v2 = l2.fragments[0].start, m2 = d3.end;
                    if (g2 && n3) {
                      var y2 = this.getLoadPosition();
                      m2 = y2, l2.PTSKnown && y2 < v2 && (d3.end > v2 || d3.nextStart) && (this.log("Alt audio track ahead of main track, seek to start of alt audio track"), n3.currentTime = v2 + 0.05);
                    }
                    if (!(h2 && m2 > h2.end + l2.targetduration) && (h2 && h2.len || !d3.len)) {
                      var E2 = this.getNextFragment(m2, l2);
                      E2 ? "identity" !== (null === (t4 = E2.decryptdata) || void 0 === t4 ? void 0 : t4.keyFormat) || null !== (e5 = E2.decryptdata) && void 0 !== e5 && e5.key ? this.loadFragment(E2, l2, m2) : this.loadKey(E2, l2) : this.bufferFlushed = true;
                    }
                  }
                }
              }
            }
          }, n2.getMaxBufferLength = function(e5) {
            var r4 = t3.prototype.getMaxBufferLength.call(this);
            return e5 ? Math.max(r4, e5) : r4;
          }, n2.onMediaDetaching = function() {
            this.videoBuffer = null, t3.prototype.onMediaDetaching.call(this);
          }, n2.onAudioTracksUpdated = function(t4, e5) {
            var r4 = e5.audioTracks;
            this.resetTransmuxer(), this.levels = r4.map(function(t5) {
              return new $(t5);
            });
          }, n2.onAudioTrackSwitching = function(t4, e5) {
            var r4 = !!e5.url;
            this.trackId = e5.id;
            var i4 = this.fragCurrent;
            null != i4 && i4.loader && i4.loader.abort(), this.fragCurrent = null, this.clearWaitingFragment(), r4 ? this.setInterval(100) : this.resetTransmuxer(), r4 ? (this.audioSwitch = true, this.state = Ht) : this.state = Kt, this.tick();
          }, n2.onManifestLoading = function() {
            this.mainDetails = null, this.fragmentTracker.removeAllFragments(), this.startPosition = this.lastCurrentTime = 0, this.bufferFlushed = false;
          }, n2.onLevelLoaded = function(t4, e5) {
            this.mainDetails = e5.details, null !== this.cachedTrackLoadedData && (this.hls.trigger(s.Events.AUDIO_TRACK_LOADED, this.cachedTrackLoadedData), this.cachedTrackLoadedData = null);
          }, n2.onAudioTrackLoaded = function(t4, e5) {
            var r4;
            if (null != this.mainDetails) {
              var i4 = this.levels, n3 = e5.details, a3 = e5.id;
              if (i4) {
                this.log("Track " + a3 + " loaded [" + n3.startSN + "," + n3.endSN + "],duration:" + n3.totalduration);
                var s2 = i4[a3], o2 = 0;
                if (n3.live || null !== (r4 = s2.details) && void 0 !== r4 && r4.live) {
                  var l2 = this.mainDetails;
                  if (n3.fragments[0] || (n3.deltaUpdateFailed = true), n3.deltaUpdateFailed || !l2)
                    return;
                  !s2.details && n3.hasProgramDateTime && l2.hasProgramDateTime ? (bt(n3, l2), o2 = n3.fragments[0].start) : o2 = this.alignPlaylists(n3, s2.details);
                }
                s2.details = n3, this.levelLastLoaded = a3, this.startFragRequested || !this.mainDetails && n3.live || this.setStartPosition(s2.details, o2), this.state !== Yt || this.waitForCdnTuneIn(n3) || (this.state = Ht), this.tick();
              } else
                this.warn("Audio tracks were reset while loading level " + a3);
            } else
              this.cachedTrackLoadedData = e5;
          }, n2._handleFragmentLoadProgress = function(t4) {
            var e5, r4 = t4.frag, i4 = t4.part, n3 = t4.payload, a3 = this.config, s2 = this.trackId, o2 = this.levels;
            if (o2) {
              var l2 = o2[s2], u2 = l2.details, d3 = a3.defaultAudioCodec || l2.audioCodec || "mp4a.40.2", h2 = this.transmuxer;
              h2 || (h2 = this.transmuxer = new he(this.hls, O.PlaylistLevelType.AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)));
              var c3 = this.initPTS[r4.cc], f3 = null === (e5 = r4.initSegment) || void 0 === e5 ? void 0 : e5.data;
              if (void 0 !== c3) {
                var g2 = i4 ? i4.index : -1, v2 = -1 !== g2, p2 = new yt(r4.level, r4.sn, r4.stats.chunkCount, n3.byteLength, g2, v2);
                h2.push(n3, f3, d3, "", r4, i4, u2.totalduration, false, p2, c3);
              } else
                this.log("Unknown video PTS for cc " + r4.cc + ", waiting for video PTS before demuxing audio frag " + r4.sn + " of [" + u2.startSN + " ," + u2.endSN + "],track " + s2), (this.waitingData = this.waitingData || { frag: r4, part: i4, cache: new Te(), complete: false }).cache.push(new Uint8Array(n3)), this.waitingVideoCC = this.videoTrackCC, this.state = $t;
            } else
              this.warn("Audio tracks were reset while fragment load was in progress. Fragment " + r4.sn + " of level " + r4.level + " will not be buffered");
          }, n2._handleFragmentLoadComplete = function(e5) {
            this.waitingData ? this.waitingData.complete = true : t3.prototype._handleFragmentLoadComplete.call(this, e5);
          }, n2.onBufferReset = function() {
            this.mediaBuffer = this.videoBuffer = null, this.loadedmetadata = false;
          }, n2.onBufferCreated = function(t4, e5) {
            var r4 = e5.tracks.audio;
            r4 && (this.mediaBuffer = r4.buffer || null), e5.tracks.video && (this.videoBuffer = e5.tracks.video.buffer || null);
          }, n2.onFragBuffered = function(t4, e5) {
            var r4, i4 = e5.frag, n3 = e5.part;
            i4.type === O.PlaylistLevelType.AUDIO ? this.fragContextChanged(i4) ? this.warn("Fragment " + i4.sn + (n3 ? " p: " + n3.index : "") + " of level " + i4.level + " finished buffering, but was aborted. state: " + this.state + ", audioSwitch: " + this.audioSwitch) : ("initSegment" !== i4.sn && (this.fragPrevious = i4, this.audioSwitch && (this.audioSwitch = false, this.hls.trigger(s.Events.AUDIO_TRACK_SWITCHED, { id: this.trackId }))), this.fragBufferedComplete(i4, n3)) : this.loadedmetadata || i4.type !== O.PlaylistLevelType.MAIN || null !== (r4 = this.videoBuffer || this.media) && void 0 !== r4 && r4.buffered.length && (this.loadedmetadata = true);
          }, n2.onError = function(e5, r4) {
            switch (r4.details) {
              case o.ErrorDetails.FRAG_LOAD_ERROR:
              case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
              case o.ErrorDetails.KEY_LOAD_ERROR:
              case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                this.onFragmentOrKeyLoadError(O.PlaylistLevelType.AUDIO, r4);
                break;
              case o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
              case o.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
                this.state !== Qt && this.state !== Kt && (this.state = r4.fatal ? Qt : Ht, this.warn(r4.details + " while loading frag, switching to " + this.state + " state"));
                break;
              case o.ErrorDetails.BUFFER_FULL_ERROR:
                if ("audio" === r4.parent && (this.state === qt || this.state === zt)) {
                  var i4 = true, n3 = this.getFwdBufferInfo(this.mediaBuffer, O.PlaylistLevelType.AUDIO);
                  n3 && n3.len > 0.5 && (i4 = !this.reduceMaxBufferLength(n3.len)), i4 && (this.warn("Buffer full error also media.currentTime is not buffered, flush audio buffer"), this.fragCurrent = null, t3.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio")), this.resetLoadingState();
                }
            }
          }, n2.onBufferFlushed = function(t4, e5) {
            e5.type === p.ElementaryStreamTypes.AUDIO && (this.bufferFlushed = true);
          }, n2._handleTransmuxComplete = function(t4) {
            var e5, r4 = "audio", i4 = this.hls, n3 = t4.remuxResult, a3 = t4.chunkMeta, o2 = this.getCurrentContext(a3);
            if (!o2)
              return this.warn("The loading context changed while buffering fragment " + a3.sn + " of level " + a3.level + ". This chunk will not be buffered."), void this.resetStartWhenNotLoaded(a3.level);
            var l2 = o2.frag, u2 = o2.part, d3 = o2.level.details, h2 = n3.audio, c3 = n3.text, f3 = n3.id3, g2 = n3.initSegment;
            if (!this.fragContextChanged(l2) && d3) {
              if (this.state = qt, this.audioSwitch && h2 && this.completeAudioSwitch(), null != g2 && g2.tracks && (this._bufferInitSegment(g2.tracks, l2, a3), i4.trigger(s.Events.FRAG_PARSING_INIT_SEGMENT, { frag: l2, id: r4, tracks: g2.tracks })), h2) {
                var v2 = h2.startPTS, m2 = h2.endPTS, y2 = h2.startDTS, E2 = h2.endDTS;
                u2 && (u2.elementaryStreams[p.ElementaryStreamTypes.AUDIO] = { startPTS: v2, endPTS: m2, startDTS: y2, endDTS: E2 }), l2.setElementaryStreamInfo(p.ElementaryStreamTypes.AUDIO, v2, m2, y2, E2), this.bufferFragmentData(h2, l2, u2, a3);
              }
              if (null != f3 && null !== (e5 = f3.samples) && void 0 !== e5 && e5.length) {
                var T2 = Se({ id: r4, frag: l2, details: d3 }, f3);
                i4.trigger(s.Events.FRAG_PARSING_METADATA, T2);
              }
              if (c3) {
                var S2 = Se({ id: r4, frag: l2, details: d3 }, c3);
                i4.trigger(s.Events.FRAG_PARSING_USERDATA, S2);
              }
            }
          }, n2._bufferInitSegment = function(t4, e5, r4) {
            if (this.state === qt) {
              t4.video && delete t4.video;
              var i4 = t4.audio;
              if (i4) {
                i4.levelCodec = i4.codec, i4.id = "audio", this.log("Init audio buffer, container:" + i4.container + ", codecs[parsed]=[" + i4.codec + "]"), this.hls.trigger(s.Events.BUFFER_CODECS, t4);
                var n3 = i4.initSegment;
                if (null != n3 && n3.byteLength) {
                  var a3 = { type: "audio", frag: e5, part: null, chunkMeta: r4, parent: e5.type, data: n3 };
                  this.hls.trigger(s.Events.BUFFER_APPENDING, a3);
                }
                this.tick();
              }
            }
          }, n2.loadFragment = function(e5, r4, i4) {
            var n3 = this.fragmentTracker.getState(e5);
            this.fragCurrent = e5, (this.audioSwitch || n3 === ut.NOT_LOADED || n3 === ut.PARTIAL) && ("initSegment" === e5.sn ? this._loadInitSegment(e5) : r4.live && !(0, a2.isFiniteNumber)(this.initPTS[e5.cc]) ? (this.log("Waiting for video PTS in continuity counter " + e5.cc + " of live stream before loading audio fragment " + e5.sn + " of level " + this.trackId), this.state = $t) : (this.startFragRequested = true, t3.prototype.loadFragment.call(this, e5, r4, i4)));
          }, n2.completeAudioSwitch = function() {
            var e5 = this.hls, r4 = this.media, i4 = this.trackId;
            r4 && (this.log("Switching audio track : flushing all audio"), t3.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio")), this.audioSwitch = false, e5.trigger(s.Events.AUDIO_TRACK_SWITCHED, { id: i4 });
          }, i3;
        }(Jt);
        const De = Le;
        function Ae(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        function Re(t3, e4) {
          return Re = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, Re(t3, e4);
        }
        const ke = function(t3) {
          var e4, r3;
          function i3(e5) {
            var r4;
            return (r4 = t3.call(this, e5, "[audio-track-controller]") || this).tracks = [], r4.groupId = null, r4.tracksInGroup = [], r4.trackId = -1, r4.trackName = "", r4.selectDefaultTrack = true, r4.registerListeners(), r4;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, Re(e4, r3);
          var n2, a3, l2 = i3.prototype;
          return l2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.on(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.on(s.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.on(s.Events.ERROR, this.onError, this);
          }, l2.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.off(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.off(s.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.off(s.Events.ERROR, this.onError, this);
          }, l2.destroy = function() {
            this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, t3.prototype.destroy.call(this);
          }, l2.onManifestLoading = function() {
            this.tracks = [], this.groupId = null, this.tracksInGroup = [], this.trackId = -1, this.trackName = "", this.selectDefaultTrack = true;
          }, l2.onManifestParsed = function(t4, e5) {
            this.tracks = e5.audioTracks || [];
          }, l2.onAudioTrackLoaded = function(t4, e5) {
            var r4 = e5.id, i4 = e5.details, n3 = this.tracksInGroup[r4];
            if (n3) {
              var a4 = n3.details;
              n3.details = e5.details, this.log("audioTrack " + r4 + " loaded [" + i4.startSN + "-" + i4.endSN + "]"), r4 === this.trackId && (this.retryCount = 0, this.playlistLoaded(r4, e5, a4));
            } else
              this.warn("Invalid audio track id " + r4);
          }, l2.onLevelLoading = function(t4, e5) {
            this.switchLevel(e5.level);
          }, l2.onLevelSwitching = function(t4, e5) {
            this.switchLevel(e5.level);
          }, l2.switchLevel = function(t4) {
            var e5 = this.hls.levels[t4];
            if (null != e5 && e5.audioGroupIds) {
              var r4 = e5.audioGroupIds[e5.urlId];
              if (this.groupId !== r4) {
                this.groupId = r4;
                var i4 = this.tracks.filter(function(t5) {
                  return !r4 || t5.groupId === r4;
                });
                this.selectDefaultTrack && !i4.some(function(t5) {
                  return t5.default;
                }) && (this.selectDefaultTrack = false), this.tracksInGroup = i4;
                var n3 = { audioTracks: i4 };
                this.log("Updating audio tracks, " + i4.length + ' track(s) found in "' + r4 + '" group-id'), this.hls.trigger(s.Events.AUDIO_TRACKS_UPDATED, n3), this.selectInitialTrack();
              }
            }
          }, l2.onError = function(e5, r4) {
            t3.prototype.onError.call(this, e5, r4), !r4.fatal && r4.context && r4.context.type === O.PlaylistContextType.AUDIO_TRACK && r4.context.id === this.trackId && r4.context.groupId === this.groupId && this.retryLoadingOrFail(r4);
          }, l2.setAudioTrack = function(t4) {
            var e5 = this.tracksInGroup;
            if (t4 < 0 || t4 >= e5.length)
              this.warn("Invalid id passed to audio-track controller");
            else {
              this.clearTimer();
              var r4 = e5[this.trackId];
              this.log("Now switching to audio-track index " + t4);
              var i4 = e5[t4], n3 = i4.id, a4 = i4.groupId, o2 = void 0 === a4 ? "" : a4, l3 = i4.name, u2 = i4.type, d3 = i4.url;
              if (this.trackId = t4, this.trackName = l3, this.selectDefaultTrack = false, this.hls.trigger(s.Events.AUDIO_TRACK_SWITCHING, { id: n3, groupId: o2, name: l3, type: u2, url: d3 }), !i4.details || i4.details.live) {
                var h2 = this.switchParams(i4.url, null == r4 ? void 0 : r4.details);
                this.loadPlaylist(h2);
              }
            }
          }, l2.selectInitialTrack = function() {
            this.tracksInGroup;
            var t4 = this.trackName, e5 = this.findTrackId(t4) || this.findTrackId();
            -1 !== e5 ? this.setAudioTrack(e5) : (this.warn("No track found for running audio group-ID: " + this.groupId), this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR, fatal: true }));
          }, l2.findTrackId = function(t4) {
            for (var e5 = this.tracksInGroup, r4 = 0; r4 < e5.length; r4++) {
              var i4 = e5[r4];
              if ((!this.selectDefaultTrack || i4.default) && (!t4 || t4 === i4.name))
                return i4.id;
            }
            return -1;
          }, l2.loadPlaylist = function(t4) {
            var e5 = this.tracksInGroup[this.trackId];
            if (this.shouldLoadTrack(e5)) {
              var r4 = e5.id, i4 = e5.groupId, n3 = e5.url;
              if (t4)
                try {
                  n3 = t4.addDirectives(n3);
                } catch (t5) {
                  this.warn("Could not construct new URL with HLS Delivery Directives: " + t5);
                }
              this.log("loading audio-track playlist for id: " + r4), this.clearTimer(), this.hls.trigger(s.Events.AUDIO_TRACK_LOADING, { url: n3, id: r4, groupId: i4, deliveryDirectives: t4 || null });
            }
          }, n2 = i3, (a3 = [{ key: "audioTracks", get: function() {
            return this.tracksInGroup;
          } }, { key: "audioTrack", get: function() {
            return this.trackId;
          }, set: function(t4) {
            this.selectDefaultTrack = false, this.setAudioTrack(t4);
          } }]) && Ae(n2.prototype, a3), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(at);
        function Ie(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        function _e(t3, e4) {
          return _e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, _e(t3, e4);
        }
        var Ce = function(t3) {
          var e4, r3;
          function i3(e5, r4) {
            var i4;
            return (i4 = t3.call(this, e5, r4, "[subtitle-stream-controller]") || this).levels = [], i4.currentTrackId = -1, i4.tracksBuffered = [], i4.mainDetails = null, i4._registerListeners(), i4;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, _e(e4, r3);
          var n2, a3, o2 = i3.prototype;
          return o2.onHandlerDestroying = function() {
            this._unregisterListeners(), this.mainDetails = null;
          }, o2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.ERROR, this.onError, this), t4.on(s.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.on(s.Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t4.on(s.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.on(s.Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t4.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, o2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.ERROR, this.onError, this), t4.off(s.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.off(s.Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t4.off(s.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.off(s.Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t4.off(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, o2.startLoad = function(t4) {
            this.stopLoad(), this.state = Ht, this.setInterval(500), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
          }, o2.onManifestLoading = function() {
            this.mainDetails = null, this.fragmentTracker.removeAllFragments();
          }, o2.onLevelLoaded = function(t4, e5) {
            this.mainDetails = e5.details;
          }, o2.onSubtitleFragProcessed = function(t4, e5) {
            var r4 = e5.frag, i4 = e5.success;
            if (this.fragPrevious = r4, this.state = Ht, i4) {
              var n3 = this.tracksBuffered[this.currentTrackId];
              if (n3) {
                for (var a4, s2 = r4.start, o3 = 0; o3 < n3.length; o3++)
                  if (s2 >= n3[o3].start && s2 <= n3[o3].end) {
                    a4 = n3[o3];
                    break;
                  }
                var l2 = r4.start + r4.duration;
                a4 ? a4.end = l2 : (a4 = { start: s2, end: l2 }, n3.push(a4)), this.fragmentTracker.fragBuffered(r4);
              }
            }
          }, o2.onBufferFlushing = function(t4, e5) {
            var r4 = e5.startOffset, i4 = e5.endOffset;
            if (0 === r4 && i4 !== Number.POSITIVE_INFINITY) {
              var n3 = this.currentTrackId, a4 = this.levels;
              if (!a4.length || !a4[n3] || !a4[n3].details)
                return;
              var s2 = i4 - a4[n3].details.targetduration;
              if (s2 <= 0)
                return;
              e5.endOffsetSubtitles = Math.max(0, s2), this.tracksBuffered.forEach(function(t5) {
                for (var e6 = 0; e6 < t5.length; )
                  if (t5[e6].end <= s2)
                    t5.shift();
                  else {
                    if (!(t5[e6].start < s2))
                      break;
                    t5[e6].start = s2, e6++;
                  }
              }), this.fragmentTracker.removeFragmentsInRange(r4, s2, O.PlaylistLevelType.SUBTITLE);
            }
          }, o2.onFragBuffered = function(t4, e5) {
            var r4;
            this.loadedmetadata || e5.frag.type !== O.PlaylistLevelType.MAIN || null !== (r4 = this.media) && void 0 !== r4 && r4.buffered.length && (this.loadedmetadata = true);
          }, o2.onError = function(t4, e5) {
            var r4, i4 = e5.frag;
            i4 && i4.type === O.PlaylistLevelType.SUBTITLE && (null !== (r4 = this.fragCurrent) && void 0 !== r4 && r4.loader && this.fragCurrent.loader.abort(), this.state = Ht);
          }, o2.onSubtitleTracksUpdated = function(t4, e5) {
            var r4 = this, i4 = e5.subtitleTracks;
            this.tracksBuffered = [], this.levels = i4.map(function(t5) {
              return new $(t5);
            }), this.fragmentTracker.removeAllFragments(), this.fragPrevious = null, this.levels.forEach(function(t5) {
              r4.tracksBuffered[t5.id] = [];
            }), this.mediaBuffer = null;
          }, o2.onSubtitleTrackSwitch = function(t4, e5) {
            if (this.currentTrackId = e5.id, this.levels.length && -1 !== this.currentTrackId) {
              var r4 = this.levels[this.currentTrackId];
              null != r4 && r4.details ? this.mediaBuffer = this.mediaBufferTimeRanges : this.mediaBuffer = null, r4 && this.setInterval(500);
            } else
              this.clearInterval();
          }, o2.onSubtitleTrackLoaded = function(t4, e5) {
            var r4, i4 = e5.details, n3 = e5.id, a4 = this.currentTrackId, s2 = this.levels;
            if (s2.length) {
              var o3 = s2[a4];
              if (!(n3 >= s2.length || n3 !== a4) && o3) {
                this.mediaBuffer = this.mediaBufferTimeRanges;
                var l2 = 0;
                if (i4.live || null !== (r4 = o3.details) && void 0 !== r4 && r4.live) {
                  var u2 = this.mainDetails;
                  if (i4.deltaUpdateFailed || !u2)
                    return;
                  var d3 = u2.fragments[0];
                  o3.details ? 0 === (l2 = this.alignPlaylists(i4, o3.details)) && d3 && nt(i4, l2 = d3.start) : i4.hasProgramDateTime && u2.hasProgramDateTime ? (bt(i4, u2), l2 = i4.fragments[0].start) : d3 && nt(i4, l2 = d3.start);
                }
                o3.details = i4, this.levelLastLoaded = n3, this.startFragRequested || !this.mainDetails && i4.live || this.setStartPosition(o3.details, l2), this.tick(), i4.live && !this.fragCurrent && this.media && this.state === Ht && (Dt(null, i4.fragments, this.media.currentTime, 0) || (this.warn("Subtitle playlist not aligned with playback"), o3.details = void 0));
              }
            }
          }, o2._handleFragmentLoadComplete = function(t4) {
            var e5 = t4.frag, r4 = t4.payload, i4 = e5.decryptdata, n3 = this.hls;
            if (!this.fragContextChanged(e5) && r4 && r4.byteLength > 0 && i4 && i4.key && i4.iv && "AES-128" === i4.method) {
              var a4 = performance.now();
              this.decrypter.webCryptoDecrypt(new Uint8Array(r4), i4.key.buffer, i4.iv.buffer).then(function(t5) {
                var r5 = performance.now();
                n3.trigger(s.Events.FRAG_DECRYPTED, { frag: e5, payload: t5, stats: { tstart: a4, tdecrypt: r5 } });
              });
            }
          }, o2.doTick = function() {
            if (this.media) {
              if (this.state === Ht) {
                var t4 = this.currentTrackId, e5 = this.levels;
                if (!e5.length || !e5[t4] || !e5[t4].details)
                  return;
                var r4 = e5[t4].details, i4 = r4.targetduration, n3 = this.config, a4 = this.getLoadPosition(), s2 = mt.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], a4 - i4, n3.maxBufferHole), o3 = s2.end, l2 = s2.len, u2 = this.getFwdBufferInfo(this.media, O.PlaylistLevelType.MAIN);
                if (l2 > this.getMaxBufferLength(null == u2 ? void 0 : u2.len) + i4)
                  return;
                var d3, h2 = r4.fragments, c3 = h2.length, f3 = r4.edge, g2 = this.fragPrevious;
                if (o3 < f3) {
                  var v2 = n3.maxFragLookUpTolerance;
                  !(d3 = Dt(g2, h2, Math.max(h2[0].start, o3), v2)) && g2 && g2.start < h2[0].start && (d3 = h2[0]);
                } else
                  d3 = h2[c3 - 1];
                if (!(d3 = this.mapToInitFragWhenRequired(d3)))
                  return;
                if (this.fragmentTracker.getState(d3) !== ut.NOT_LOADED)
                  return;
                d3.encrypted ? this.loadKey(d3, r4) : this.loadFragment(d3, r4, o3);
              }
            } else
              this.state = Ht;
          }, o2.getMaxBufferLength = function(e5) {
            var r4 = t3.prototype.getMaxBufferLength.call(this);
            return e5 ? Math.max(r4, e5) : r4;
          }, o2.loadFragment = function(e5, r4, i4) {
            this.fragCurrent = e5, "initSegment" === e5.sn ? this._loadInitSegment(e5) : (this.startFragRequested = true, t3.prototype.loadFragment.call(this, e5, r4, i4));
          }, n2 = i3, (a3 = [{ key: "mediaBufferTimeRanges", get: function() {
            return new we(this.tracksBuffered[this.currentTrackId] || []);
          } }]) && Ie(n2.prototype, a3), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(Jt), we = function(t3) {
          this.buffered = void 0;
          var e4 = function(e5, r3, i3) {
            if ((r3 >>>= 0) > i3 - 1)
              throw new DOMException("Failed to execute '" + e5 + "' on 'TimeRanges': The index provided (" + r3 + ") is greater than the maximum bound (" + i3 + ")");
            return t3[r3][e5];
          };
          this.buffered = { get length() {
            return t3.length;
          }, end: function(r3) {
            return e4("end", r3, t3.length);
          }, start: function(r3) {
            return e4("start", r3, t3.length);
          } };
        };
        function Oe(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        function xe(t3, e4) {
          return xe = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, xe(t3, e4);
        }
        function Pe(t3) {
          for (var e4 = [], r3 = 0; r3 < t3.length; r3++) {
            var i3 = t3[r3];
            "subtitles" === i3.kind && i3.label && e4.push(t3[r3]);
          }
          return e4;
        }
        const Fe = function(t3) {
          var e4, r3;
          function i3(e5) {
            var r4;
            return (r4 = t3.call(this, e5, "[subtitle-track-controller]") || this).media = null, r4.tracks = [], r4.groupId = null, r4.tracksInGroup = [], r4.trackId = -1, r4.selectDefaultTrack = true, r4.queuedDefaultTrack = -1, r4.trackChangeListener = function() {
              return r4.onTextTracksChanged();
            }, r4.asyncPollTrackChange = function() {
              return r4.pollTrackChange(0);
            }, r4.useTextTrackPolling = false, r4.subtitlePollingInterval = -1, r4._subtitleDisplay = true, r4.registerListeners(), r4;
          }
          r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, xe(e4, r3);
          var n2, a3, o2 = i3.prototype;
          return o2.destroy = function() {
            this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.trackChangeListener = this.asyncPollTrackChange = null, t3.prototype.destroy.call(this);
          }, o2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.on(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.on(s.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.on(s.Events.ERROR, this.onError, this);
          }, o2.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.off(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.off(s.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.off(s.Events.ERROR, this.onError, this);
          }, o2.onMediaAttached = function(t4, e5) {
            this.media = e5.media, this.media && (this.queuedDefaultTrack > -1 && (this.subtitleTrack = this.queuedDefaultTrack, this.queuedDefaultTrack = -1), this.useTextTrackPolling = !(this.media.textTracks && "onchange" in this.media.textTracks), this.useTextTrackPolling ? this.pollTrackChange(500) : this.media.textTracks.addEventListener("change", this.asyncPollTrackChange));
          }, o2.pollTrackChange = function(t4) {
            self.clearInterval(this.subtitlePollingInterval), this.subtitlePollingInterval = self.setInterval(this.trackChangeListener, t4);
          }, o2.onMediaDetaching = function() {
            this.media && (self.clearInterval(this.subtitlePollingInterval), this.useTextTrackPolling || this.media.textTracks.removeEventListener("change", this.asyncPollTrackChange), this.trackId > -1 && (this.queuedDefaultTrack = this.trackId), Pe(this.media.textTracks).forEach(function(t4) {
              U(t4);
            }), this.subtitleTrack = -1, this.media = null);
          }, o2.onManifestLoading = function() {
            this.tracks = [], this.groupId = null, this.tracksInGroup = [], this.trackId = -1, this.selectDefaultTrack = true;
          }, o2.onManifestParsed = function(t4, e5) {
            this.tracks = e5.subtitleTracks;
          }, o2.onSubtitleTrackLoaded = function(t4, e5) {
            var r4 = e5.id, i4 = e5.details, n3 = this.trackId, a4 = this.tracksInGroup[n3];
            if (a4) {
              var s2 = a4.details;
              a4.details = e5.details, this.log("subtitle track " + r4 + " loaded [" + i4.startSN + "-" + i4.endSN + "]"), r4 === this.trackId && (this.retryCount = 0, this.playlistLoaded(r4, e5, s2));
            } else
              this.warn("Invalid subtitle track id " + r4);
          }, o2.onLevelLoading = function(t4, e5) {
            this.switchLevel(e5.level);
          }, o2.onLevelSwitching = function(t4, e5) {
            this.switchLevel(e5.level);
          }, o2.switchLevel = function(t4) {
            var e5 = this.hls.levels[t4];
            if (null != e5 && e5.textGroupIds) {
              var r4 = e5.textGroupIds[e5.urlId];
              if (this.groupId !== r4) {
                var i4 = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0, n3 = this.tracks.filter(function(t5) {
                  return !r4 || t5.groupId === r4;
                });
                this.tracksInGroup = n3;
                var a4 = this.findTrackId(null == i4 ? void 0 : i4.name) || this.findTrackId();
                this.groupId = r4;
                var o3 = { subtitleTracks: n3 };
                this.log("Updating subtitle tracks, " + n3.length + ' track(s) found in "' + r4 + '" group-id'), this.hls.trigger(s.Events.SUBTITLE_TRACKS_UPDATED, o3), -1 !== a4 && this.setSubtitleTrack(a4, i4);
              }
            }
          }, o2.findTrackId = function(t4) {
            for (var e5 = this.tracksInGroup, r4 = 0; r4 < e5.length; r4++) {
              var i4 = e5[r4];
              if ((!this.selectDefaultTrack || i4.default) && (!t4 || t4 === i4.name))
                return i4.id;
            }
            return -1;
          }, o2.onError = function(e5, r4) {
            t3.prototype.onError.call(this, e5, r4), !r4.fatal && r4.context && r4.context.type === O.PlaylistContextType.SUBTITLE_TRACK && r4.context.id === this.trackId && r4.context.groupId === this.groupId && this.retryLoadingOrFail(r4);
          }, o2.loadPlaylist = function(t4) {
            var e5 = this.tracksInGroup[this.trackId];
            if (this.shouldLoadTrack(e5)) {
              var r4 = e5.id, i4 = e5.groupId, n3 = e5.url;
              if (t4)
                try {
                  n3 = t4.addDirectives(n3);
                } catch (t5) {
                  this.warn("Could not construct new URL with HLS Delivery Directives: " + t5);
                }
              this.log("Loading subtitle playlist for id " + r4), this.hls.trigger(s.Events.SUBTITLE_TRACK_LOADING, { url: n3, id: r4, groupId: i4, deliveryDirectives: t4 || null });
            }
          }, o2.toggleTrackModes = function(t4) {
            var e5 = this, r4 = this.media, i4 = this.trackId;
            if (r4) {
              var n3 = Pe(r4.textTracks), a4 = n3.filter(function(t5) {
                return t5.groupId === e5.groupId;
              });
              if (-1 === t4)
                [].slice.call(n3).forEach(function(t5) {
                  t5.mode = "disabled";
                });
              else {
                var s2 = a4[i4];
                s2 && (s2.mode = "disabled");
              }
              var o3 = a4[t4];
              o3 && (o3.mode = this.subtitleDisplay ? "showing" : "hidden");
            }
          }, o2.setSubtitleTrack = function(t4, e5) {
            var r4, i4 = this.tracksInGroup;
            if (this.media) {
              if (this.trackId !== t4 && this.toggleTrackModes(t4), !(this.trackId === t4 && (-1 === t4 || null !== (r4 = i4[t4]) && void 0 !== r4 && r4.details) || t4 < -1 || t4 >= i4.length)) {
                this.clearTimer();
                var n3 = i4[t4];
                if (this.log("Switching to subtitle track " + t4), this.trackId = t4, n3) {
                  var a4 = n3.id, o3 = n3.groupId, l2 = void 0 === o3 ? "" : o3, u2 = n3.name, d3 = n3.type, h2 = n3.url;
                  this.hls.trigger(s.Events.SUBTITLE_TRACK_SWITCH, { id: a4, groupId: l2, name: u2, type: d3, url: h2 });
                  var c3 = this.switchParams(n3.url, null == e5 ? void 0 : e5.details);
                  this.loadPlaylist(c3);
                } else
                  this.hls.trigger(s.Events.SUBTITLE_TRACK_SWITCH, { id: t4 });
              }
            } else
              this.queuedDefaultTrack = t4;
          }, o2.onTextTracksChanged = function() {
            if (this.useTextTrackPolling || self.clearInterval(this.subtitlePollingInterval), this.media && this.hls.config.renderTextTracksNatively) {
              for (var t4 = -1, e5 = Pe(this.media.textTracks), r4 = 0; r4 < e5.length; r4++)
                if ("hidden" === e5[r4].mode)
                  t4 = r4;
                else if ("showing" === e5[r4].mode) {
                  t4 = r4;
                  break;
                }
              this.subtitleTrack !== t4 && (this.subtitleTrack = t4);
            }
          }, n2 = i3, (a3 = [{ key: "subtitleDisplay", get: function() {
            return this._subtitleDisplay;
          }, set: function(t4) {
            this._subtitleDisplay = t4, this.trackId > -1 && this.toggleTrackModes(this.trackId);
          } }, { key: "subtitleTracks", get: function() {
            return this.tracksInGroup;
          } }, { key: "subtitleTrack", get: function() {
            return this.trackId;
          }, set: function(t4) {
            this.selectDefaultTrack = false;
            var e5 = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0;
            this.setSubtitleTrack(t4, e5);
          } }]) && Oe(n2.prototype, a3), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(at);
        var Me, Ne = function() {
          function t3(t4) {
            this.buffers = void 0, this.queues = { video: [], audio: [], audiovideo: [] }, this.buffers = t4;
          }
          var e4 = t3.prototype;
          return e4.append = function(t4, e5) {
            var r3 = this.queues[e5];
            r3.push(t4), 1 === r3.length && this.buffers[e5] && this.executeNext(e5);
          }, e4.insertAbort = function(t4, e5) {
            this.queues[e5].unshift(t4), this.executeNext(e5);
          }, e4.appendBlocker = function(t4) {
            var e5, r3 = new Promise(function(t5) {
              e5 = t5;
            }), i3 = { execute: e5, onStart: function() {
            }, onComplete: function() {
            }, onError: function() {
            } };
            return this.append(i3, t4), r3;
          }, e4.executeNext = function(t4) {
            var e5 = this.buffers, r3 = this.queues, i3 = e5[t4], n2 = r3[t4];
            if (n2.length) {
              var a3 = n2[0];
              try {
                a3.execute();
              } catch (e6) {
                l.logger.warn("[buffer-operation-queue]: Unhandled exception executing the current operation"), a3.onError(e6), i3 && i3.updating || (n2.shift(), this.executeNext(t4));
              }
            }
          }, e4.shiftAndExecuteNext = function(t4) {
            this.queues[t4].shift(), this.executeNext(t4);
          }, e4.current = function(t4) {
            return this.queues[t4][0];
          }, t3;
        }(), Ue = te(), Be = /([ha]vc.)(?:\.[^.,]+)+/, Ge = function() {
          function t3(t4) {
            var e5 = this;
            this.details = null, this._objectUrl = null, this.operationQueue = void 0, this.listeners = void 0, this.hls = void 0, this.bufferCodecEventsExpected = 0, this._bufferCodecEventsTotal = 0, this.media = null, this.mediaSource = null, this.appendError = 0, this.tracks = {}, this.pendingTracks = {}, this.sourceBuffer = void 0, this._onMediaSourceOpen = function() {
              var t5 = e5.hls, r3 = e5.media, i3 = e5.mediaSource;
              l.logger.log("[buffer-controller]: Media source opened"), r3 && (e5.updateMediaElementDuration(), t5.trigger(s.Events.MEDIA_ATTACHED, { media: r3 })), i3 && i3.removeEventListener("sourceopen", e5._onMediaSourceOpen), e5.checkPendingTracks();
            }, this._onMediaSourceClose = function() {
              l.logger.log("[buffer-controller]: Media source closed");
            }, this._onMediaSourceEnded = function() {
              l.logger.log("[buffer-controller]: Media source ended");
            }, this.hls = t4, this._initSourceBuffer(), this.registerListeners();
          }
          var e4 = t3.prototype;
          return e4.hasSourceTypes = function() {
            return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
          }, e4.destroy = function() {
            this.unregisterListeners(), this.details = null;
          }, e4.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.BUFFER_RESET, this.onBufferReset, this), t4.on(s.Events.BUFFER_APPENDING, this.onBufferAppending, this), t4.on(s.Events.BUFFER_CODECS, this.onBufferCodecs, this), t4.on(s.Events.BUFFER_EOS, this.onBufferEos, this), t4.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this), t4.on(s.Events.FRAG_PARSED, this.onFragParsed, this), t4.on(s.Events.FRAG_CHANGED, this.onFragChanged, this);
          }, e4.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.BUFFER_RESET, this.onBufferReset, this), t4.off(s.Events.BUFFER_APPENDING, this.onBufferAppending, this), t4.off(s.Events.BUFFER_CODECS, this.onBufferCodecs, this), t4.off(s.Events.BUFFER_EOS, this.onBufferEos, this), t4.off(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this), t4.off(s.Events.FRAG_PARSED, this.onFragParsed, this), t4.off(s.Events.FRAG_CHANGED, this.onFragChanged, this);
          }, e4._initSourceBuffer = function() {
            this.sourceBuffer = {}, this.operationQueue = new Ne(this.sourceBuffer), this.listeners = { audio: [], video: [], audiovideo: [] };
          }, e4.onManifestParsed = function(t4, e5) {
            var r3 = 2;
            (e5.audio && !e5.video || !e5.altAudio) && (r3 = 1), this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = r3, this.details = null, l.logger.log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
          }, e4.onMediaAttaching = function(t4, e5) {
            var r3 = this.media = e5.media;
            if (r3 && Ue) {
              var i3 = this.mediaSource = new Ue();
              i3.addEventListener("sourceopen", this._onMediaSourceOpen), i3.addEventListener("sourceended", this._onMediaSourceEnded), i3.addEventListener("sourceclose", this._onMediaSourceClose), r3.src = self.URL.createObjectURL(i3), this._objectUrl = r3.src;
            }
          }, e4.onMediaDetaching = function() {
            var t4 = this.media, e5 = this.mediaSource, r3 = this._objectUrl;
            if (e5) {
              if (l.logger.log("[buffer-controller]: media source detaching"), "open" === e5.readyState)
                try {
                  e5.endOfStream();
                } catch (t5) {
                  l.logger.warn("[buffer-controller]: onMediaDetaching: " + t5.message + " while calling endOfStream");
                }
              this.onBufferReset(), e5.removeEventListener("sourceopen", this._onMediaSourceOpen), e5.removeEventListener("sourceended", this._onMediaSourceEnded), e5.removeEventListener("sourceclose", this._onMediaSourceClose), t4 && (r3 && self.URL.revokeObjectURL(r3), t4.src === r3 ? (t4.removeAttribute("src"), t4.load()) : l.logger.warn("[buffer-controller]: media.src was changed by a third party - skip cleanup")), this.mediaSource = null, this.media = null, this._objectUrl = null, this.bufferCodecEventsExpected = this._bufferCodecEventsTotal, this.pendingTracks = {}, this.tracks = {};
            }
            this.hls.trigger(s.Events.MEDIA_DETACHED, void 0);
          }, e4.onBufferReset = function() {
            var t4 = this;
            this.getSourceBufferTypes().forEach(function(e5) {
              var r3 = t4.sourceBuffer[e5];
              try {
                r3 && (t4.removeBufferListeners(e5), t4.mediaSource && t4.mediaSource.removeSourceBuffer(r3), t4.sourceBuffer[e5] = void 0);
              } catch (t5) {
                l.logger.warn("[buffer-controller]: Failed to reset the " + e5 + " buffer", t5);
              }
            }), this._initSourceBuffer();
          }, e4.onBufferCodecs = function(t4, e5) {
            var r3 = this, i3 = this.getSourceBufferTypes().length;
            Object.keys(e5).forEach(function(t5) {
              if (i3) {
                var n2 = r3.tracks[t5];
                if (n2 && "function" == typeof n2.buffer.changeType) {
                  var a3 = e5[t5], s2 = a3.id, o2 = a3.codec, u2 = a3.levelCodec, d3 = a3.container, h2 = a3.metadata, c3 = (n2.levelCodec || n2.codec).replace(Be, "$1"), f3 = (u2 || o2).replace(Be, "$1");
                  if (c3 !== f3) {
                    var g2 = d3 + ";codecs=" + (u2 || o2);
                    r3.appendChangeType(t5, g2), l.logger.log("[buffer-controller]: switching codec " + c3 + " to " + f3), r3.tracks[t5] = { buffer: n2.buffer, codec: o2, container: d3, levelCodec: u2, metadata: h2, id: s2 };
                  }
                }
              } else
                r3.pendingTracks[t5] = e5[t5];
            }), i3 || (this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0), this.mediaSource && "open" === this.mediaSource.readyState && this.checkPendingTracks());
          }, e4.appendChangeType = function(t4, e5) {
            var r3 = this, i3 = this.operationQueue, n2 = { execute: function() {
              var n3 = r3.sourceBuffer[t4];
              n3 && (l.logger.log("[buffer-controller]: changing " + t4 + " sourceBuffer type to " + e5), n3.changeType(e5)), i3.shiftAndExecuteNext(t4);
            }, onStart: function() {
            }, onComplete: function() {
            }, onError: function(e6) {
              l.logger.warn("[buffer-controller]: Failed to change " + t4 + " SourceBuffer type", e6);
            } };
            i3.append(n2, t4);
          }, e4.onBufferAppending = function(t4, e5) {
            var r3 = this, i3 = this.hls, n2 = this.operationQueue, a3 = this.tracks, u2 = e5.data, d3 = e5.type, h2 = e5.frag, c3 = e5.part, f3 = e5.chunkMeta, g2 = f3.buffering[d3], v2 = self.performance.now();
            g2.start = v2;
            var p2 = h2.stats.buffering, m2 = c3 ? c3.stats.buffering : null;
            0 === p2.start && (p2.start = v2), m2 && 0 === m2.start && (m2.start = v2);
            var y2 = a3.audio, E2 = "audio" === d3 && 1 === f3.id && "audio/mpeg" === (null == y2 ? void 0 : y2.container), T2 = { execute: function() {
              if (g2.executeStart = self.performance.now(), E2) {
                var t5 = r3.sourceBuffer[d3];
                if (t5) {
                  var e6 = h2.start - t5.timestampOffset;
                  Math.abs(e6) >= 0.1 && (l.logger.log("[buffer-controller]: Updating audio SourceBuffer timestampOffset to " + h2.start + " (delta: " + e6 + ") sn: " + h2.sn + ")"), t5.timestampOffset = h2.start);
                }
              }
              r3.appendExecutor(u2, d3);
            }, onStart: function() {
            }, onComplete: function() {
              var t5 = self.performance.now();
              g2.executeEnd = g2.end = t5, 0 === p2.first && (p2.first = t5), m2 && 0 === m2.first && (m2.first = t5);
              var e6 = r3.sourceBuffer, i4 = {};
              for (var n3 in e6)
                i4[n3] = mt.getBuffered(e6[n3]);
              r3.appendError = 0, r3.hls.trigger(s.Events.BUFFER_APPENDED, { type: d3, frag: h2, part: c3, chunkMeta: f3, parent: h2.type, timeRanges: i4 });
            }, onError: function(t5) {
              l.logger.error("[buffer-controller]: Error encountered while trying to append to the " + d3 + " SourceBuffer", t5);
              var e6 = { type: o.ErrorTypes.MEDIA_ERROR, parent: h2.type, details: o.ErrorDetails.BUFFER_APPEND_ERROR, err: t5, fatal: false };
              t5.code === DOMException.QUOTA_EXCEEDED_ERR ? e6.details = o.ErrorDetails.BUFFER_FULL_ERROR : (r3.appendError++, e6.details = o.ErrorDetails.BUFFER_APPEND_ERROR, r3.appendError > i3.config.appendErrorMaxRetry && (l.logger.error("[buffer-controller]: Failed " + i3.config.appendErrorMaxRetry + " times to append segment in sourceBuffer"), e6.fatal = true, i3.stopLoad())), i3.trigger(s.Events.ERROR, e6);
            } };
            n2.append(T2, d3);
          }, e4.onBufferFlushing = function(t4, e5) {
            var r3 = this, i3 = this.operationQueue, n2 = function(t5) {
              return { execute: r3.removeExecutor.bind(r3, t5, e5.startOffset, e5.endOffset), onStart: function() {
              }, onComplete: function() {
                r3.hls.trigger(s.Events.BUFFER_FLUSHED, { type: t5 });
              }, onError: function(e6) {
                l.logger.warn("[buffer-controller]: Failed to remove from " + t5 + " SourceBuffer", e6);
              } };
            };
            e5.type ? i3.append(n2(e5.type), e5.type) : this.getSourceBufferTypes().forEach(function(t5) {
              i3.append(n2(t5), t5);
            });
          }, e4.onFragParsed = function(t4, e5) {
            var r3 = this, i3 = e5.frag, n2 = e5.part, a3 = [], o2 = n2 ? n2.elementaryStreams : i3.elementaryStreams;
            o2[p.ElementaryStreamTypes.AUDIOVIDEO] ? a3.push("audiovideo") : (o2[p.ElementaryStreamTypes.AUDIO] && a3.push("audio"), o2[p.ElementaryStreamTypes.VIDEO] && a3.push("video")), 0 === a3.length && l.logger.warn("Fragments must have at least one ElementaryStreamType set. type: " + i3.type + " level: " + i3.level + " sn: " + i3.sn), this.blockBuffers(function() {
              var t5 = self.performance.now();
              i3.stats.buffering.end = t5, n2 && (n2.stats.buffering.end = t5);
              var e6 = n2 ? n2.stats : i3.stats;
              r3.hls.trigger(s.Events.FRAG_BUFFERED, { frag: i3, part: n2, stats: e6, id: i3.type });
            }, a3);
          }, e4.onFragChanged = function(t4, e5) {
            this.flushBackBuffer();
          }, e4.onBufferEos = function(t4, e5) {
            var r3 = this;
            this.getSourceBufferTypes().reduce(function(t5, i3) {
              var n2 = r3.sourceBuffer[i3];
              return e5.type && e5.type !== i3 || n2 && !n2.ended && (n2.ended = true, l.logger.log("[buffer-controller]: " + i3 + " sourceBuffer now EOS")), t5 && !(n2 && !n2.ended);
            }, true) && this.blockBuffers(function() {
              var t5 = r3.mediaSource;
              t5 && "open" === t5.readyState && t5.endOfStream();
            });
          }, e4.onLevelUpdated = function(t4, e5) {
            var r3 = e5.details;
            r3.fragments.length && (this.details = r3, this.getSourceBufferTypes().length ? this.blockBuffers(this.updateMediaElementDuration.bind(this)) : this.updateMediaElementDuration());
          }, e4.flushBackBuffer = function() {
            var t4 = this.hls, e5 = this.details, r3 = this.media, i3 = this.sourceBuffer;
            if (r3 && null !== e5) {
              var n2 = this.getSourceBufferTypes();
              if (n2.length) {
                var o2 = e5.live && null !== t4.config.liveBackBufferLength ? t4.config.liveBackBufferLength : t4.config.backBufferLength;
                if ((0, a2.isFiniteNumber)(o2) && !(o2 < 0)) {
                  var l2 = r3.currentTime, u2 = e5.levelTargetDuration, d3 = Math.max(o2, u2), h2 = Math.floor(l2 / u2) * u2 - d3;
                  n2.forEach(function(r4) {
                    var n3 = i3[r4];
                    if (n3) {
                      var a3 = mt.getBuffered(n3);
                      a3.length > 0 && h2 > a3.start(0) && (t4.trigger(s.Events.BACK_BUFFER_REACHED, { bufferEnd: h2 }), e5.live && t4.trigger(s.Events.LIVE_BACK_BUFFER_REACHED, { bufferEnd: h2 }), t4.trigger(s.Events.BUFFER_FLUSHING, { startOffset: 0, endOffset: h2, type: r4 }));
                    }
                  });
                }
              }
            }
          }, e4.updateMediaElementDuration = function() {
            if (this.details && this.media && this.mediaSource && "open" === this.mediaSource.readyState) {
              var t4 = this.details, e5 = this.hls, r3 = this.media, i3 = this.mediaSource, n2 = t4.fragments[0].start + t4.totalduration, s2 = r3.duration, o2 = (0, a2.isFiniteNumber)(i3.duration) ? i3.duration : 0;
              t4.live && e5.config.liveDurationInfinity ? (l.logger.log("[buffer-controller]: Media Source duration is set to Infinity"), i3.duration = 1 / 0, this.updateSeekableRange(t4)) : (n2 > o2 && n2 > s2 || !(0, a2.isFiniteNumber)(s2)) && (l.logger.log("[buffer-controller]: Updating Media Source duration to " + n2.toFixed(3)), i3.duration = n2);
            }
          }, e4.updateSeekableRange = function(t4) {
            var e5 = this.mediaSource, r3 = t4.fragments;
            if (r3.length && t4.live && null != e5 && e5.setLiveSeekableRange) {
              var i3 = Math.max(0, r3[0].start), n2 = Math.max(i3, i3 + t4.totalduration);
              e5.setLiveSeekableRange(i3, n2);
            }
          }, e4.checkPendingTracks = function() {
            var t4 = this.bufferCodecEventsExpected, e5 = this.operationQueue, r3 = this.pendingTracks, i3 = Object.keys(r3).length;
            if (i3 && !t4 || 2 === i3) {
              this.createSourceBuffers(r3), this.pendingTracks = {};
              var n2 = this.getSourceBufferTypes();
              if (0 === n2.length)
                return void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR, fatal: true, reason: "could not create source buffer for media codec(s)" });
              n2.forEach(function(t5) {
                e5.executeNext(t5);
              });
            }
          }, e4.createSourceBuffers = function(t4) {
            var e5 = this.sourceBuffer, r3 = this.mediaSource;
            if (!r3)
              throw Error("createSourceBuffers called when mediaSource was null");
            var i3 = 0;
            for (var n2 in t4)
              if (!e5[n2]) {
                var a3 = t4[n2];
                if (!a3)
                  throw Error("source buffer exists for track " + n2 + ", however track does not");
                var u2 = a3.levelCodec || a3.codec, d3 = a3.container + ";codecs=" + u2;
                l.logger.log("[buffer-controller]: creating sourceBuffer(" + d3 + ")");
                try {
                  var h2 = e5[n2] = r3.addSourceBuffer(d3), c3 = n2;
                  this.addBufferListener(c3, "updatestart", this._onSBUpdateStart), this.addBufferListener(c3, "updateend", this._onSBUpdateEnd), this.addBufferListener(c3, "error", this._onSBUpdateError), this.tracks[n2] = { buffer: h2, codec: u2, container: a3.container, levelCodec: a3.levelCodec, metadata: a3.metadata, id: a3.id }, i3++;
                } catch (t5) {
                  l.logger.error("[buffer-controller]: error while trying to add sourceBuffer: " + t5.message), this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_ADD_CODEC_ERROR, fatal: false, error: t5, mimeType: d3 });
                }
              }
            i3 && this.hls.trigger(s.Events.BUFFER_CREATED, { tracks: this.tracks });
          }, e4._onSBUpdateStart = function(t4) {
            this.operationQueue.current(t4).onStart();
          }, e4._onSBUpdateEnd = function(t4) {
            var e5 = this.operationQueue;
            e5.current(t4).onComplete(), e5.shiftAndExecuteNext(t4);
          }, e4._onSBUpdateError = function(t4, e5) {
            l.logger.error("[buffer-controller]: " + t4 + " SourceBuffer error", e5), this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false });
            var r3 = this.operationQueue.current(t4);
            r3 && r3.onError(e5);
          }, e4.removeExecutor = function(t4, e5, r3) {
            var i3 = this.media, n2 = this.mediaSource, s2 = this.operationQueue, o2 = this.sourceBuffer[t4];
            if (!i3 || !n2 || !o2)
              return l.logger.warn("[buffer-controller]: Attempting to remove from the " + t4 + " SourceBuffer, but it does not exist"), void s2.shiftAndExecuteNext(t4);
            var u2 = (0, a2.isFiniteNumber)(i3.duration) ? i3.duration : 1 / 0, d3 = (0, a2.isFiniteNumber)(n2.duration) ? n2.duration : 1 / 0, h2 = Math.max(0, e5), c3 = Math.min(r3, u2, d3);
            c3 > h2 ? (l.logger.log("[buffer-controller]: Removing [" + h2 + "," + c3 + "] from the " + t4 + " SourceBuffer"), o2.remove(h2, c3)) : s2.shiftAndExecuteNext(t4);
          }, e4.appendExecutor = function(t4, e5) {
            var r3 = this.operationQueue, i3 = this.sourceBuffer[e5];
            if (!i3)
              return l.logger.warn("[buffer-controller]: Attempting to append to the " + e5 + " SourceBuffer, but it does not exist"), void r3.shiftAndExecuteNext(e5);
            i3.ended = false, i3.appendBuffer(t4);
          }, e4.blockBuffers = function(t4, e5) {
            var r3 = this;
            if (void 0 === e5 && (e5 = this.getSourceBufferTypes()), !e5.length)
              return l.logger.log("[buffer-controller]: Blocking operation requested, but no SourceBuffers exist"), void Promise.resolve().then(t4);
            var i3 = this.operationQueue, n2 = e5.map(function(t5) {
              return i3.appendBlocker(t5);
            });
            Promise.all(n2).then(function() {
              t4(), e5.forEach(function(t5) {
                var e6 = r3.sourceBuffer[t5];
                e6 && e6.updating || i3.shiftAndExecuteNext(t5);
              });
            });
          }, e4.getSourceBufferTypes = function() {
            return Object.keys(this.sourceBuffer);
          }, e4.addBufferListener = function(t4, e5, r3) {
            var i3 = this.sourceBuffer[t4];
            if (i3) {
              var n2 = r3.bind(this, t4);
              this.listeners[t4].push({ event: e5, listener: n2 }), i3.addEventListener(e5, n2);
            }
          }, e4.removeBufferListeners = function(t4) {
            var e5 = this.sourceBuffer[t4];
            e5 && this.listeners[t4].forEach(function(t5) {
              e5.removeEventListener(t5.event, t5.listener);
            });
          }, t3;
        }(), Ke = { 42: 225, 92: 233, 94: 237, 95: 243, 96: 250, 123: 231, 124: 247, 125: 209, 126: 241, 127: 9608, 128: 174, 129: 176, 130: 189, 131: 191, 132: 8482, 133: 162, 134: 163, 135: 9834, 136: 224, 137: 32, 138: 232, 139: 226, 140: 234, 141: 238, 142: 244, 143: 251, 144: 193, 145: 201, 146: 211, 147: 218, 148: 220, 149: 252, 150: 8216, 151: 161, 152: 42, 153: 8217, 154: 9473, 155: 169, 156: 8480, 157: 8226, 158: 8220, 159: 8221, 160: 192, 161: 194, 162: 199, 163: 200, 164: 202, 165: 203, 166: 235, 167: 206, 168: 207, 169: 239, 170: 212, 171: 217, 172: 249, 173: 219, 174: 171, 175: 187, 176: 195, 177: 227, 178: 205, 179: 204, 180: 236, 181: 210, 182: 242, 183: 213, 184: 245, 185: 123, 186: 125, 187: 92, 188: 94, 189: 95, 190: 124, 191: 8764, 192: 196, 193: 228, 194: 214, 195: 246, 196: 223, 197: 165, 198: 164, 199: 9475, 200: 197, 201: 229, 202: 216, 203: 248, 204: 9487, 205: 9491, 206: 9495, 207: 9499 }, He = function(t3) {
          var e4 = t3;
          return Ke.hasOwnProperty(t3) && (e4 = Ke[t3]), String.fromCharCode(e4);
        }, je = 15, Ve = 100, We = { 17: 1, 18: 3, 21: 5, 22: 7, 23: 9, 16: 11, 19: 12, 20: 14 }, Ye = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 }, qe = { 25: 1, 26: 3, 29: 5, 30: 7, 31: 9, 24: 11, 27: 12, 28: 14 }, ze = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 }, Xe = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent"];
        !function(t3) {
          t3[t3.ERROR = 0] = "ERROR", t3[t3.TEXT = 1] = "TEXT", t3[t3.WARNING = 2] = "WARNING", t3[t3.INFO = 2] = "INFO", t3[t3.DEBUG = 3] = "DEBUG", t3[t3.DATA = 3] = "DATA";
        }(Me || (Me = {}));
        var Qe = function() {
          function t3() {
            this.time = null, this.verboseLevel = Me.ERROR;
          }
          return t3.prototype.log = function(t4, e4) {
            this.verboseLevel >= t4 && l.logger.log(this.time + " [" + t4 + "] " + e4);
          }, t3;
        }(), $e = function(t3) {
          for (var e4 = [], r3 = 0; r3 < t3.length; r3++)
            e4.push(t3[r3].toString(16));
          return e4;
        }, Ze = function() {
          function t3(t4, e5, r3, i3, n2) {
            this.foreground = void 0, this.underline = void 0, this.italics = void 0, this.background = void 0, this.flash = void 0, this.foreground = t4 || "white", this.underline = e5 || false, this.italics = r3 || false, this.background = i3 || "black", this.flash = n2 || false;
          }
          var e4 = t3.prototype;
          return e4.reset = function() {
            this.foreground = "white", this.underline = false, this.italics = false, this.background = "black", this.flash = false;
          }, e4.setStyles = function(t4) {
            for (var e5 = ["foreground", "underline", "italics", "background", "flash"], r3 = 0; r3 < e5.length; r3++) {
              var i3 = e5[r3];
              t4.hasOwnProperty(i3) && (this[i3] = t4[i3]);
            }
          }, e4.isDefault = function() {
            return "white" === this.foreground && !this.underline && !this.italics && "black" === this.background && !this.flash;
          }, e4.equals = function(t4) {
            return this.foreground === t4.foreground && this.underline === t4.underline && this.italics === t4.italics && this.background === t4.background && this.flash === t4.flash;
          }, e4.copy = function(t4) {
            this.foreground = t4.foreground, this.underline = t4.underline, this.italics = t4.italics, this.background = t4.background, this.flash = t4.flash;
          }, e4.toString = function() {
            return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
          }, t3;
        }(), Je = function() {
          function t3(t4, e5, r3, i3, n2, a3) {
            this.uchar = void 0, this.penState = void 0, this.uchar = t4 || " ", this.penState = new Ze(e5, r3, i3, n2, a3);
          }
          var e4 = t3.prototype;
          return e4.reset = function() {
            this.uchar = " ", this.penState.reset();
          }, e4.setChar = function(t4, e5) {
            this.uchar = t4, this.penState.copy(e5);
          }, e4.setPenState = function(t4) {
            this.penState.copy(t4);
          }, e4.equals = function(t4) {
            return this.uchar === t4.uchar && this.penState.equals(t4.penState);
          }, e4.copy = function(t4) {
            this.uchar = t4.uchar, this.penState.copy(t4.penState);
          }, e4.isEmpty = function() {
            return " " === this.uchar && this.penState.isDefault();
          }, t3;
        }(), tr = function() {
          function t3(t4) {
            this.chars = void 0, this.pos = void 0, this.currPenState = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chars = [];
            for (var e5 = 0; e5 < Ve; e5++)
              this.chars.push(new Je());
            this.logger = t4, this.pos = 0, this.currPenState = new Ze();
          }
          var e4 = t3.prototype;
          return e4.equals = function(t4) {
            for (var e5 = true, r3 = 0; r3 < Ve; r3++)
              if (!this.chars[r3].equals(t4.chars[r3])) {
                e5 = false;
                break;
              }
            return e5;
          }, e4.copy = function(t4) {
            for (var e5 = 0; e5 < Ve; e5++)
              this.chars[e5].copy(t4.chars[e5]);
          }, e4.isEmpty = function() {
            for (var t4 = true, e5 = 0; e5 < Ve; e5++)
              if (!this.chars[e5].isEmpty()) {
                t4 = false;
                break;
              }
            return t4;
          }, e4.setCursor = function(t4) {
            this.pos !== t4 && (this.pos = t4), this.pos < 0 ? (this.logger.log(Me.DEBUG, "Negative cursor position " + this.pos), this.pos = 0) : this.pos > Ve && (this.logger.log(Me.DEBUG, "Too large cursor position " + this.pos), this.pos = Ve);
          }, e4.moveCursor = function(t4) {
            var e5 = this.pos + t4;
            if (t4 > 1)
              for (var r3 = this.pos + 1; r3 < e5 + 1; r3++)
                this.chars[r3].setPenState(this.currPenState);
            this.setCursor(e5);
          }, e4.backSpace = function() {
            this.moveCursor(-1), this.chars[this.pos].setChar(" ", this.currPenState);
          }, e4.insertChar = function(t4) {
            t4 >= 144 && this.backSpace();
            var e5 = He(t4);
            this.pos >= Ve ? this.logger.log(Me.ERROR, "Cannot insert " + t4.toString(16) + " (" + e5 + ") at position " + this.pos + ". Skipping it!") : (this.chars[this.pos].setChar(e5, this.currPenState), this.moveCursor(1));
          }, e4.clearFromPos = function(t4) {
            var e5;
            for (e5 = t4; e5 < Ve; e5++)
              this.chars[e5].reset();
          }, e4.clear = function() {
            this.clearFromPos(0), this.pos = 0, this.currPenState.reset();
          }, e4.clearToEndOfRow = function() {
            this.clearFromPos(this.pos);
          }, e4.getTextString = function() {
            for (var t4 = [], e5 = true, r3 = 0; r3 < Ve; r3++) {
              var i3 = this.chars[r3].uchar;
              " " !== i3 && (e5 = false), t4.push(i3);
            }
            return e5 ? "" : t4.join("");
          }, e4.setPenStyles = function(t4) {
            this.currPenState.setStyles(t4), this.chars[this.pos].setPenState(this.currPenState);
          }, t3;
        }(), er = function() {
          function t3(t4) {
            this.rows = void 0, this.currRow = void 0, this.nrRollUpRows = void 0, this.lastOutputScreen = void 0, this.logger = void 0, this.rows = [];
            for (var e5 = 0; e5 < je; e5++)
              this.rows.push(new tr(t4));
            this.logger = t4, this.currRow = 14, this.nrRollUpRows = null, this.lastOutputScreen = null, this.reset();
          }
          var e4 = t3.prototype;
          return e4.reset = function() {
            for (var t4 = 0; t4 < je; t4++)
              this.rows[t4].clear();
            this.currRow = 14;
          }, e4.equals = function(t4) {
            for (var e5 = true, r3 = 0; r3 < je; r3++)
              if (!this.rows[r3].equals(t4.rows[r3])) {
                e5 = false;
                break;
              }
            return e5;
          }, e4.copy = function(t4) {
            for (var e5 = 0; e5 < je; e5++)
              this.rows[e5].copy(t4.rows[e5]);
          }, e4.isEmpty = function() {
            for (var t4 = true, e5 = 0; e5 < je; e5++)
              if (!this.rows[e5].isEmpty()) {
                t4 = false;
                break;
              }
            return t4;
          }, e4.backSpace = function() {
            this.rows[this.currRow].backSpace();
          }, e4.clearToEndOfRow = function() {
            this.rows[this.currRow].clearToEndOfRow();
          }, e4.insertChar = function(t4) {
            this.rows[this.currRow].insertChar(t4);
          }, e4.setPen = function(t4) {
            this.rows[this.currRow].setPenStyles(t4);
          }, e4.moveCursor = function(t4) {
            this.rows[this.currRow].moveCursor(t4);
          }, e4.setCursor = function(t4) {
            this.logger.log(Me.INFO, "setCursor: " + t4), this.rows[this.currRow].setCursor(t4);
          }, e4.setPAC = function(t4) {
            this.logger.log(Me.INFO, "pacData = " + JSON.stringify(t4));
            var e5 = t4.row - 1;
            if (this.nrRollUpRows && e5 < this.nrRollUpRows - 1 && (e5 = this.nrRollUpRows - 1), this.nrRollUpRows && this.currRow !== e5) {
              for (var r3 = 0; r3 < je; r3++)
                this.rows[r3].clear();
              var i3 = this.currRow + 1 - this.nrRollUpRows, n2 = this.lastOutputScreen;
              if (n2) {
                var a3 = n2.rows[i3].cueStartTime, s2 = this.logger.time;
                if (a3 && null !== s2 && a3 < s2)
                  for (var o2 = 0; o2 < this.nrRollUpRows; o2++)
                    this.rows[e5 - this.nrRollUpRows + o2 + 1].copy(n2.rows[i3 + o2]);
              }
            }
            this.currRow = e5;
            var l2 = this.rows[this.currRow];
            if (null !== t4.indent) {
              var u2 = t4.indent, d3 = Math.max(u2 - 1, 0);
              l2.setCursor(t4.indent), t4.color = l2.chars[d3].penState.foreground;
            }
            var h2 = { foreground: t4.color, underline: t4.underline, italics: t4.italics, background: "black", flash: false };
            this.setPen(h2);
          }, e4.setBkgData = function(t4) {
            this.logger.log(Me.INFO, "bkgData = " + JSON.stringify(t4)), this.backSpace(), this.setPen(t4), this.insertChar(32);
          }, e4.setRollUpRows = function(t4) {
            this.nrRollUpRows = t4;
          }, e4.rollUp = function() {
            if (null !== this.nrRollUpRows) {
              this.logger.log(Me.TEXT, this.getDisplayText());
              var t4 = this.currRow + 1 - this.nrRollUpRows, e5 = this.rows.splice(t4, 1)[0];
              e5.clear(), this.rows.splice(this.currRow, 0, e5), this.logger.log(Me.INFO, "Rolling up");
            } else
              this.logger.log(Me.DEBUG, "roll_up but nrRollUpRows not set yet");
          }, e4.getDisplayText = function(t4) {
            t4 = t4 || false;
            for (var e5 = [], r3 = "", i3 = -1, n2 = 0; n2 < je; n2++) {
              var a3 = this.rows[n2].getTextString();
              a3 && (i3 = n2 + 1, t4 ? e5.push("Row " + i3 + ": '" + a3 + "'") : e5.push(a3.trim()));
            }
            return e5.length > 0 && (r3 = t4 ? "[" + e5.join(" | ") + "]" : e5.join("\n")), r3;
          }, e4.getTextAndFormat = function() {
            return this.rows;
          }, t3;
        }(), rr = function() {
          function t3(t4, e5, r3) {
            this.chNr = void 0, this.outputFilter = void 0, this.mode = void 0, this.verbose = void 0, this.displayedMemory = void 0, this.nonDisplayedMemory = void 0, this.lastOutputScreen = void 0, this.currRollUpRow = void 0, this.writeScreen = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chNr = t4, this.outputFilter = e5, this.mode = null, this.verbose = 0, this.displayedMemory = new er(r3), this.nonDisplayedMemory = new er(r3), this.lastOutputScreen = new er(r3), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, this.logger = r3;
          }
          var e4 = t3.prototype;
          return e4.reset = function() {
            this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), this.lastOutputScreen.reset(), this.outputFilter.reset(), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null;
          }, e4.getHandler = function() {
            return this.outputFilter;
          }, e4.setHandler = function(t4) {
            this.outputFilter = t4;
          }, e4.setPAC = function(t4) {
            this.writeScreen.setPAC(t4);
          }, e4.setBkgData = function(t4) {
            this.writeScreen.setBkgData(t4);
          }, e4.setMode = function(t4) {
            t4 !== this.mode && (this.mode = t4, this.logger.log(Me.INFO, "MODE=" + t4), "MODE_POP-ON" === this.mode ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, this.writeScreen.reset()), "MODE_ROLL-UP" !== this.mode && (this.displayedMemory.nrRollUpRows = null, this.nonDisplayedMemory.nrRollUpRows = null), this.mode = t4);
          }, e4.insertChars = function(t4) {
            for (var e5 = 0; e5 < t4.length; e5++)
              this.writeScreen.insertChar(t4[e5]);
            var r3 = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
            this.logger.log(Me.INFO, r3 + ": " + this.writeScreen.getDisplayText(true)), "MODE_PAINT-ON" !== this.mode && "MODE_ROLL-UP" !== this.mode || (this.logger.log(Me.TEXT, "DISPLAYED: " + this.displayedMemory.getDisplayText(true)), this.outputDataUpdate());
          }, e4.ccRCL = function() {
            this.logger.log(Me.INFO, "RCL - Resume Caption Loading"), this.setMode("MODE_POP-ON");
          }, e4.ccBS = function() {
            this.logger.log(Me.INFO, "BS - BackSpace"), "MODE_TEXT" !== this.mode && (this.writeScreen.backSpace(), this.writeScreen === this.displayedMemory && this.outputDataUpdate());
          }, e4.ccAOF = function() {
          }, e4.ccAON = function() {
          }, e4.ccDER = function() {
            this.logger.log(Me.INFO, "DER- Delete to End of Row"), this.writeScreen.clearToEndOfRow(), this.outputDataUpdate();
          }, e4.ccRU = function(t4) {
            this.logger.log(Me.INFO, "RU(" + t4 + ") - Roll Up"), this.writeScreen = this.displayedMemory, this.setMode("MODE_ROLL-UP"), this.writeScreen.setRollUpRows(t4);
          }, e4.ccFON = function() {
            this.logger.log(Me.INFO, "FON - Flash On"), this.writeScreen.setPen({ flash: true });
          }, e4.ccRDC = function() {
            this.logger.log(Me.INFO, "RDC - Resume Direct Captioning"), this.setMode("MODE_PAINT-ON");
          }, e4.ccTR = function() {
            this.logger.log(Me.INFO, "TR"), this.setMode("MODE_TEXT");
          }, e4.ccRTD = function() {
            this.logger.log(Me.INFO, "RTD"), this.setMode("MODE_TEXT");
          }, e4.ccEDM = function() {
            this.logger.log(Me.INFO, "EDM - Erase Displayed Memory"), this.displayedMemory.reset(), this.outputDataUpdate(true);
          }, e4.ccCR = function() {
            this.logger.log(Me.INFO, "CR - Carriage Return"), this.writeScreen.rollUp(), this.outputDataUpdate(true);
          }, e4.ccENM = function() {
            this.logger.log(Me.INFO, "ENM - Erase Non-displayed Memory"), this.nonDisplayedMemory.reset();
          }, e4.ccEOC = function() {
            if (this.logger.log(Me.INFO, "EOC - End Of Caption"), "MODE_POP-ON" === this.mode) {
              var t4 = this.displayedMemory;
              this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = t4, this.writeScreen = this.nonDisplayedMemory, this.logger.log(Me.TEXT, "DISP: " + this.displayedMemory.getDisplayText());
            }
            this.outputDataUpdate(true);
          }, e4.ccTO = function(t4) {
            this.logger.log(Me.INFO, "TO(" + t4 + ") - Tab Offset"), this.writeScreen.moveCursor(t4);
          }, e4.ccMIDROW = function(t4) {
            var e5 = { flash: false };
            if (e5.underline = t4 % 2 == 1, e5.italics = t4 >= 46, e5.italics)
              e5.foreground = "white";
            else {
              var r3 = Math.floor(t4 / 2) - 16;
              e5.foreground = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"][r3];
            }
            this.logger.log(Me.INFO, "MIDROW: " + JSON.stringify(e5)), this.writeScreen.setPen(e5);
          }, e4.outputDataUpdate = function(t4) {
            void 0 === t4 && (t4 = false);
            var e5 = this.logger.time;
            null !== e5 && this.outputFilter && (null !== this.cueStartTime || this.displayedMemory.isEmpty() ? this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue(this.cueStartTime, e5, this.lastOutputScreen), t4 && this.outputFilter.dispatchCue && this.outputFilter.dispatchCue(), this.cueStartTime = this.displayedMemory.isEmpty() ? null : e5) : this.cueStartTime = e5, this.lastOutputScreen.copy(this.displayedMemory));
          }, e4.cueSplitAtTime = function(t4) {
            this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t4, this.displayedMemory), this.cueStartTime = t4));
          }, t3;
        }(), ir = function() {
          function t3(t4, e5, r3) {
            this.channels = void 0, this.currentChannel = 0, this.cmdHistory = void 0, this.logger = void 0;
            var i3 = new Qe();
            this.channels = [null, new rr(t4, e5, i3), new rr(t4 + 1, r3, i3)], this.cmdHistory = { a: null, b: null }, this.logger = i3;
          }
          var e4 = t3.prototype;
          return e4.getHandler = function(t4) {
            return this.channels[t4].getHandler();
          }, e4.setHandler = function(t4, e5) {
            this.channels[t4].setHandler(e5);
          }, e4.addData = function(t4, e5) {
            var r3, i3, n2, a3 = false;
            this.logger.time = t4;
            for (var s2 = 0; s2 < e5.length; s2 += 2)
              if (i3 = 127 & e5[s2], n2 = 127 & e5[s2 + 1], 0 !== i3 || 0 !== n2) {
                if (this.logger.log(Me.DATA, "[" + $e([e5[s2], e5[s2 + 1]]) + "] -> (" + $e([i3, n2]) + ")"), (r3 = this.parseCmd(i3, n2)) || (r3 = this.parseMidrow(i3, n2)), r3 || (r3 = this.parsePAC(i3, n2)), r3 || (r3 = this.parseBackgroundAttributes(i3, n2)), !r3 && (a3 = this.parseChars(i3, n2))) {
                  var o2 = this.currentChannel;
                  o2 && o2 > 0 ? this.channels[o2].insertChars(a3) : this.logger.log(Me.WARNING, "No channel found yet. TEXT-MODE?");
                }
                r3 || a3 || this.logger.log(Me.WARNING, "Couldn't parse cleaned data " + $e([i3, n2]) + " orig: " + $e([e5[s2], e5[s2 + 1]]));
              }
          }, e4.parseCmd = function(t4, e5) {
            var r3 = this.cmdHistory;
            if (!((20 === t4 || 28 === t4 || 21 === t4 || 29 === t4) && e5 >= 32 && e5 <= 47 || (23 === t4 || 31 === t4) && e5 >= 33 && e5 <= 35))
              return false;
            if (ar(t4, e5, r3))
              return nr(null, null, r3), this.logger.log(Me.DEBUG, "Repeated command (" + $e([t4, e5]) + ") is dropped"), true;
            var i3 = 20 === t4 || 21 === t4 || 23 === t4 ? 1 : 2, n2 = this.channels[i3];
            return 20 === t4 || 21 === t4 || 28 === t4 || 29 === t4 ? 32 === e5 ? n2.ccRCL() : 33 === e5 ? n2.ccBS() : 34 === e5 ? n2.ccAOF() : 35 === e5 ? n2.ccAON() : 36 === e5 ? n2.ccDER() : 37 === e5 ? n2.ccRU(2) : 38 === e5 ? n2.ccRU(3) : 39 === e5 ? n2.ccRU(4) : 40 === e5 ? n2.ccFON() : 41 === e5 ? n2.ccRDC() : 42 === e5 ? n2.ccTR() : 43 === e5 ? n2.ccRTD() : 44 === e5 ? n2.ccEDM() : 45 === e5 ? n2.ccCR() : 46 === e5 ? n2.ccENM() : 47 === e5 && n2.ccEOC() : n2.ccTO(e5 - 32), nr(t4, e5, r3), this.currentChannel = i3, true;
          }, e4.parseMidrow = function(t4, e5) {
            var r3 = 0;
            if ((17 === t4 || 25 === t4) && e5 >= 32 && e5 <= 47) {
              if ((r3 = 17 === t4 ? 1 : 2) !== this.currentChannel)
                return this.logger.log(Me.ERROR, "Mismatch channel in midrow parsing"), false;
              var i3 = this.channels[r3];
              return !!i3 && (i3.ccMIDROW(e5), this.logger.log(Me.DEBUG, "MIDROW (" + $e([t4, e5]) + ")"), true);
            }
            return false;
          }, e4.parsePAC = function(t4, e5) {
            var r3, i3 = this.cmdHistory;
            if (!((t4 >= 17 && t4 <= 23 || t4 >= 25 && t4 <= 31) && e5 >= 64 && e5 <= 127 || (16 === t4 || 24 === t4) && e5 >= 64 && e5 <= 95))
              return false;
            if (ar(t4, e5, i3))
              return nr(null, null, i3), true;
            var n2 = t4 <= 23 ? 1 : 2;
            r3 = e5 >= 64 && e5 <= 95 ? 1 === n2 ? We[t4] : qe[t4] : 1 === n2 ? Ye[t4] : ze[t4];
            var a3 = this.channels[n2];
            return !!a3 && (a3.setPAC(this.interpretPAC(r3, e5)), nr(t4, e5, i3), this.currentChannel = n2, true);
          }, e4.interpretPAC = function(t4, e5) {
            var r3, i3 = { color: null, italics: false, indent: null, underline: false, row: t4 };
            return r3 = e5 > 95 ? e5 - 96 : e5 - 64, i3.underline = 1 == (1 & r3), r3 <= 13 ? i3.color = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "white"][Math.floor(r3 / 2)] : r3 <= 15 ? (i3.italics = true, i3.color = "white") : i3.indent = 4 * Math.floor((r3 - 16) / 2), i3;
          }, e4.parseChars = function(t4, e5) {
            var r3, i3, n2 = null, a3 = null;
            if (t4 >= 25 ? (r3 = 2, a3 = t4 - 8) : (r3 = 1, a3 = t4), a3 >= 17 && a3 <= 19 ? (i3 = 17 === a3 ? e5 + 80 : 18 === a3 ? e5 + 112 : e5 + 144, this.logger.log(Me.INFO, "Special char '" + He(i3) + "' in channel " + r3), n2 = [i3]) : t4 >= 32 && t4 <= 127 && (n2 = 0 === e5 ? [t4] : [t4, e5]), n2) {
              var s2 = $e(n2);
              this.logger.log(Me.DEBUG, "Char codes =  " + s2.join(",")), nr(t4, e5, this.cmdHistory);
            }
            return n2;
          }, e4.parseBackgroundAttributes = function(t4, e5) {
            var r3;
            if (!((16 === t4 || 24 === t4) && e5 >= 32 && e5 <= 47 || (23 === t4 || 31 === t4) && e5 >= 45 && e5 <= 47))
              return false;
            var i3 = {};
            16 === t4 || 24 === t4 ? (r3 = Math.floor((e5 - 32) / 2), i3.background = Xe[r3], e5 % 2 == 1 && (i3.background = i3.background + "_semi")) : 45 === e5 ? i3.background = "transparent" : (i3.foreground = "black", 47 === e5 && (i3.underline = true));
            var n2 = t4 <= 23 ? 1 : 2;
            return this.channels[n2].setBkgData(i3), nr(t4, e5, this.cmdHistory), true;
          }, e4.reset = function() {
            for (var t4 = 0; t4 < Object.keys(this.channels).length; t4++) {
              var e5 = this.channels[t4];
              e5 && e5.reset();
            }
            this.cmdHistory = { a: null, b: null };
          }, e4.cueSplitAtTime = function(t4) {
            for (var e5 = 0; e5 < this.channels.length; e5++) {
              var r3 = this.channels[e5];
              r3 && r3.cueSplitAtTime(t4);
            }
          }, t3;
        }();
        function nr(t3, e4, r3) {
          r3.a = t3, r3.b = e4;
        }
        function ar(t3, e4, r3) {
          return r3.a === t3 && r3.b === e4;
        }
        const sr = ir;
        var or = function() {
          function t3(t4, e5) {
            this.timelineController = void 0, this.cueRanges = [], this.trackName = void 0, this.startTime = null, this.endTime = null, this.screen = null, this.timelineController = t4, this.trackName = e5;
          }
          var e4 = t3.prototype;
          return e4.dispatchCue = function() {
            null !== this.startTime && (this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges), this.startTime = null);
          }, e4.newCue = function(t4, e5, r3) {
            (null === this.startTime || this.startTime > t4) && (this.startTime = t4), this.endTime = e5, this.screen = r3, this.timelineController.createCaptionsTrack(this.trackName);
          }, e4.reset = function() {
            this.cueRanges = [], this.startTime = null;
          }, t3;
        }();
        const lr = function() {
          if ("undefined" != typeof self && self.VTTCue)
            return self.VTTCue;
          var t3 = ["", "lr", "rl"], e4 = ["start", "middle", "end", "left", "right"];
          function r3(t4, e5) {
            if ("string" != typeof e5)
              return false;
            if (!Array.isArray(t4))
              return false;
            var r4 = e5.toLowerCase();
            return !!~t4.indexOf(r4) && r4;
          }
          function i3(t4) {
            return r3(e4, t4);
          }
          function n2(t4) {
            for (var e5 = arguments.length, r4 = new Array(e5 > 1 ? e5 - 1 : 0), i4 = 1; i4 < e5; i4++)
              r4[i4 - 1] = arguments[i4];
            for (var n3 = 1; n3 < arguments.length; n3++) {
              var a4 = arguments[n3];
              for (var s2 in a4)
                t4[s2] = a4[s2];
            }
            return t4;
          }
          function a3(e5, a4, s2) {
            var o2 = this, l2 = { enumerable: true };
            o2.hasBeenReset = false;
            var u2 = "", d3 = false, h2 = e5, c3 = a4, f3 = s2, g2 = null, v2 = "", p2 = true, m2 = "auto", y2 = "start", E2 = 50, T2 = "middle", S2 = 50, b3 = "middle";
            Object.defineProperty(o2, "id", n2({}, l2, { get: function() {
              return u2;
            }, set: function(t4) {
              u2 = "" + t4;
            } })), Object.defineProperty(o2, "pauseOnExit", n2({}, l2, { get: function() {
              return d3;
            }, set: function(t4) {
              d3 = !!t4;
            } })), Object.defineProperty(o2, "startTime", n2({}, l2, { get: function() {
              return h2;
            }, set: function(t4) {
              if ("number" != typeof t4)
                throw new TypeError("Start time must be set to a number.");
              h2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "endTime", n2({}, l2, { get: function() {
              return c3;
            }, set: function(t4) {
              if ("number" != typeof t4)
                throw new TypeError("End time must be set to a number.");
              c3 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "text", n2({}, l2, { get: function() {
              return f3;
            }, set: function(t4) {
              f3 = "" + t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "region", n2({}, l2, { get: function() {
              return g2;
            }, set: function(t4) {
              g2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "vertical", n2({}, l2, { get: function() {
              return v2;
            }, set: function(e6) {
              var i4 = function(e7) {
                return r3(t3, e7);
              }(e6);
              if (false === i4)
                throw new SyntaxError("An invalid or illegal string was specified.");
              v2 = i4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "snapToLines", n2({}, l2, { get: function() {
              return p2;
            }, set: function(t4) {
              p2 = !!t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "line", n2({}, l2, { get: function() {
              return m2;
            }, set: function(t4) {
              if ("number" != typeof t4 && "auto" !== t4)
                throw new SyntaxError("An invalid number or illegal string was specified.");
              m2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "lineAlign", n2({}, l2, { get: function() {
              return y2;
            }, set: function(t4) {
              var e6 = i3(t4);
              if (!e6)
                throw new SyntaxError("An invalid or illegal string was specified.");
              y2 = e6, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "position", n2({}, l2, { get: function() {
              return E2;
            }, set: function(t4) {
              if (t4 < 0 || t4 > 100)
                throw new Error("Position must be between 0 and 100.");
              E2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "positionAlign", n2({}, l2, { get: function() {
              return T2;
            }, set: function(t4) {
              var e6 = i3(t4);
              if (!e6)
                throw new SyntaxError("An invalid or illegal string was specified.");
              T2 = e6, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "size", n2({}, l2, { get: function() {
              return S2;
            }, set: function(t4) {
              if (t4 < 0 || t4 > 100)
                throw new Error("Size must be between 0 and 100.");
              S2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "align", n2({}, l2, { get: function() {
              return b3;
            }, set: function(t4) {
              var e6 = i3(t4);
              if (!e6)
                throw new SyntaxError("An invalid or illegal string was specified.");
              b3 = e6, this.hasBeenReset = true;
            } })), o2.displayState = void 0;
          }
          return a3.prototype.getCueAsHTML = function() {
            return self.WebVTT.convertCueToDOMTree(self, this.text);
          }, a3;
        }();
        var ur = function() {
          function t3() {
          }
          return t3.prototype.decode = function(t4, e4) {
            if (!t4)
              return "";
            if ("string" != typeof t4)
              throw new Error("Error - expected string data.");
            return decodeURIComponent(encodeURIComponent(t4));
          }, t3;
        }();
        function dr(t3) {
          function e4(t4, e5, r4, i3) {
            return 3600 * (0 | t4) + 60 * (0 | e5) + (0 | r4) + parseFloat(i3 || 0);
          }
          var r3 = t3.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
          return r3 ? parseFloat(r3[2]) > 59 ? e4(r3[2], r3[3], 0, r3[4]) : e4(r3[1], r3[2], r3[3], r3[4]) : null;
        }
        var hr = function() {
          function t3() {
            this.values = /* @__PURE__ */ Object.create(null);
          }
          var e4 = t3.prototype;
          return e4.set = function(t4, e5) {
            this.get(t4) || "" === e5 || (this.values[t4] = e5);
          }, e4.get = function(t4, e5, r3) {
            return r3 ? this.has(t4) ? this.values[t4] : e5[r3] : this.has(t4) ? this.values[t4] : e5;
          }, e4.has = function(t4) {
            return t4 in this.values;
          }, e4.alt = function(t4, e5, r3) {
            for (var i3 = 0; i3 < r3.length; ++i3)
              if (e5 === r3[i3]) {
                this.set(t4, e5);
                break;
              }
          }, e4.integer = function(t4, e5) {
            /^-?\d+$/.test(e5) && this.set(t4, parseInt(e5, 10));
          }, e4.percent = function(t4, e5) {
            if (/^([\d]{1,3})(\.[\d]*)?%$/.test(e5)) {
              var r3 = parseFloat(e5);
              if (r3 >= 0 && r3 <= 100)
                return this.set(t4, r3), true;
            }
            return false;
          }, t3;
        }();
        function cr(t3, e4, r3, i3) {
          var n2 = i3 ? t3.split(i3) : [t3];
          for (var a3 in n2)
            if ("string" == typeof n2[a3]) {
              var s2 = n2[a3].split(r3);
              2 === s2.length && e4(s2[0], s2[1]);
            }
        }
        var fr = new lr(0, 0, ""), gr = "middle" === fr.align ? "middle" : "center";
        function vr(t3, e4, r3) {
          var i3 = t3;
          function n2() {
            var e5 = dr(t3);
            if (null === e5)
              throw new Error("Malformed timestamp: " + i3);
            return t3 = t3.replace(/^[^\sa-zA-Z-]+/, ""), e5;
          }
          function a3() {
            t3 = t3.replace(/^\s+/, "");
          }
          if (a3(), e4.startTime = n2(), a3(), "-->" !== t3.slice(0, 3))
            throw new Error("Malformed time stamp (time stamps must be separated by '-->'): " + i3);
          t3 = t3.slice(3), a3(), e4.endTime = n2(), a3(), function(t4, e5) {
            var i4 = new hr();
            cr(t4, function(t5, e6) {
              var n4;
              switch (t5) {
                case "region":
                  for (var a5 = r3.length - 1; a5 >= 0; a5--)
                    if (r3[a5].id === e6) {
                      i4.set(t5, r3[a5].region);
                      break;
                    }
                  break;
                case "vertical":
                  i4.alt(t5, e6, ["rl", "lr"]);
                  break;
                case "line":
                  n4 = e6.split(","), i4.integer(t5, n4[0]), i4.percent(t5, n4[0]) && i4.set("snapToLines", false), i4.alt(t5, n4[0], ["auto"]), 2 === n4.length && i4.alt("lineAlign", n4[1], ["start", gr, "end"]);
                  break;
                case "position":
                  n4 = e6.split(","), i4.percent(t5, n4[0]), 2 === n4.length && i4.alt("positionAlign", n4[1], ["start", gr, "end", "line-left", "line-right", "auto"]);
                  break;
                case "size":
                  i4.percent(t5, e6);
                  break;
                case "align":
                  i4.alt(t5, e6, ["start", gr, "end", "left", "right"]);
              }
            }, /:/, /\s/), e5.region = i4.get("region", null), e5.vertical = i4.get("vertical", "");
            var n3 = i4.get("line", "auto");
            "auto" === n3 && -1 === fr.line && (n3 = -1), e5.line = n3, e5.lineAlign = i4.get("lineAlign", "start"), e5.snapToLines = i4.get("snapToLines", true), e5.size = i4.get("size", 100), e5.align = i4.get("align", gr);
            var a4 = i4.get("position", "auto");
            "auto" === a4 && 50 === fr.position && (a4 = "start" === e5.align || "left" === e5.align ? 0 : "end" === e5.align || "right" === e5.align ? 100 : 50), e5.position = a4;
          }(t3, e4);
        }
        function pr(t3) {
          return t3.replace(/<br(?: \/)?>/gi, "\n");
        }
        var mr = function() {
          function t3() {
            this.state = "INITIAL", this.buffer = "", this.decoder = new ur(), this.regionList = [], this.cue = null, this.oncue = void 0, this.onparsingerror = void 0, this.onflush = void 0;
          }
          var e4 = t3.prototype;
          return e4.parse = function(t4) {
            var e5 = this;
            function r3() {
              var t5 = e5.buffer, r4 = 0;
              for (t5 = pr(t5); r4 < t5.length && "\r" !== t5[r4] && "\n" !== t5[r4]; )
                ++r4;
              var i4 = t5.slice(0, r4);
              return "\r" === t5[r4] && ++r4, "\n" === t5[r4] && ++r4, e5.buffer = t5.slice(r4), i4;
            }
            t4 && (e5.buffer += e5.decoder.decode(t4, { stream: true }));
            try {
              var i3 = "";
              if ("INITIAL" === e5.state) {
                if (!/\r\n|\n/.test(e5.buffer))
                  return this;
                var n2 = (i3 = r3()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                if (!n2 || !n2[0])
                  throw new Error("Malformed WebVTT signature.");
                e5.state = "HEADER";
              }
              for (var a3 = false; e5.buffer; ) {
                if (!/\r\n|\n/.test(e5.buffer))
                  return this;
                switch (a3 ? a3 = false : i3 = r3(), e5.state) {
                  case "HEADER":
                    /:/.test(i3) ? cr(i3, function(t5, e6) {
                    }, /:/) : i3 || (e5.state = "ID");
                    continue;
                  case "NOTE":
                    i3 || (e5.state = "ID");
                    continue;
                  case "ID":
                    if (/^NOTE($|[ \t])/.test(i3)) {
                      e5.state = "NOTE";
                      break;
                    }
                    if (!i3)
                      continue;
                    if (e5.cue = new lr(0, 0, ""), e5.state = "CUE", -1 === i3.indexOf("-->")) {
                      e5.cue.id = i3;
                      continue;
                    }
                  case "CUE":
                    if (!e5.cue) {
                      e5.state = "BADCUE";
                      continue;
                    }
                    try {
                      vr(i3, e5.cue, e5.regionList);
                    } catch (t5) {
                      e5.cue = null, e5.state = "BADCUE";
                      continue;
                    }
                    e5.state = "CUETEXT";
                    continue;
                  case "CUETEXT":
                    var s2 = -1 !== i3.indexOf("-->");
                    if (!i3 || s2 && (a3 = true)) {
                      e5.oncue && e5.cue && e5.oncue(e5.cue), e5.cue = null, e5.state = "ID";
                      continue;
                    }
                    if (null === e5.cue)
                      continue;
                    e5.cue.text && (e5.cue.text += "\n"), e5.cue.text += i3;
                    continue;
                  case "BADCUE":
                    i3 || (e5.state = "ID");
                }
              }
            } catch (t5) {
              "CUETEXT" === e5.state && e5.cue && e5.oncue && e5.oncue(e5.cue), e5.cue = null, e5.state = "INITIAL" === e5.state ? "BADWEBVTT" : "BADCUE";
            }
            return this;
          }, e4.flush = function() {
            var t4 = this;
            try {
              if ((t4.cue || "HEADER" === t4.state) && (t4.buffer += "\n\n", t4.parse()), "INITIAL" === t4.state || "BADWEBVTT" === t4.state)
                throw new Error("Malformed WebVTT signature.");
            } catch (e5) {
              t4.onparsingerror && t4.onparsingerror(e5);
            }
            return t4.onflush && t4.onflush(), this;
          }, t3;
        }(), yr = r2(673), Er = r2(524), Tr = /\r\n|\n\r|\n|\r/g, Sr = function(t3, e4, r3) {
          return void 0 === r3 && (r3 = 0), t3.slice(r3, r3 + e4.length) === e4;
        }, br = function(t3) {
          for (var e4 = 5381, r3 = t3.length; r3; )
            e4 = 33 * e4 ^ t3.charCodeAt(--r3);
          return (e4 >>> 0).toString();
        };
        function Lr(t3, e4, r3) {
          return br(t3.toString()) + br(e4.toString()) + br(r3);
        }
        function Dr() {
          return Dr = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, Dr.apply(this, arguments);
        }
        var Ar = "stpp.ttml.im1t", Rr = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/, kr = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/, Ir = { left: "start", center: "center", right: "end", start: "start", end: "end" };
        function _r(t3, e4, r3, i3, n2) {
          var a3 = (0, u.findBox)(new Uint8Array(t3), ["mdat"]);
          if (0 !== a3.length) {
            var s2 = a3.map(function(t4) {
              return (0, G.utf8ArrayToStr)(t4);
            }), o2 = (0, yr.toTimescaleFromScale)(e4, 1, r3);
            try {
              s2.forEach(function(t4) {
                return i3(function(t5, e5) {
                  var r4 = new DOMParser().parseFromString(t5, "text/xml").getElementsByTagName("tt")[0];
                  if (!r4)
                    throw new Error("Invalid ttml");
                  var i4 = { frameRate: 30, subFrameRate: 1, frameRateMultiplier: 0, tickRate: 0 }, n3 = Object.keys(i4).reduce(function(t6, e6) {
                    return t6[e6] = r4.getAttribute("ttp:" + e6) || i4[e6], t6;
                  }, {}), a4 = "preserve" !== r4.getAttribute("xml:space"), s3 = wr(Cr(r4, "styling", "style")), o3 = wr(Cr(r4, "layout", "region")), l2 = Cr(r4, "body", "[begin]");
                  return [].map.call(l2, function(t6) {
                    var r5 = Or(t6, a4);
                    if (!r5 || !t6.hasAttribute("begin"))
                      return null;
                    var i5 = Fr(t6.getAttribute("begin"), n3), l3 = Fr(t6.getAttribute("dur"), n3), u2 = Fr(t6.getAttribute("end"), n3);
                    if (null === i5)
                      throw Pr(t6);
                    if (null === u2) {
                      if (null === l3)
                        throw Pr(t6);
                      u2 = i5 + l3;
                    }
                    var d3 = new lr(i5 - e5, u2 - e5, r5);
                    d3.id = Lr(d3.startTime, d3.endTime, d3.text);
                    var h2 = o3[t6.getAttribute("region")], c3 = s3[t6.getAttribute("style")];
                    d3.position = 10, d3.size = 80;
                    var f3 = function(t7, e6, r6) {
                      var i6 = "http://www.w3.org/ns/ttml#styling", n4 = null, a5 = null != t7 && t7.hasAttribute("style") ? t7.getAttribute("style") : null;
                      return a5 && r6.hasOwnProperty(a5) && (n4 = r6[a5]), ["displayAlign", "textAlign", "color", "backgroundColor", "fontSize", "fontFamily"].reduce(function(r7, a6) {
                        var s4 = xr(e6, i6, a6) || xr(t7, i6, a6) || xr(n4, i6, a6);
                        return s4 && (r7[a6] = s4), r7;
                      }, {});
                    }(h2, c3, s3), g2 = f3.textAlign;
                    if (g2) {
                      var v2 = Ir[g2];
                      v2 && (d3.lineAlign = v2), d3.align = g2;
                    }
                    return Dr(d3, f3), d3;
                  }).filter(function(t6) {
                    return null !== t6;
                  });
                }(t4, o2));
              });
            } catch (t4) {
              n2(t4);
            }
          } else
            n2(new Error("Could not parse IMSC1 mdat"));
        }
        function Cr(t3, e4, r3) {
          var i3 = t3.getElementsByTagName(e4)[0];
          return i3 ? [].slice.call(i3.querySelectorAll(r3)) : [];
        }
        function wr(t3) {
          return t3.reduce(function(t4, e4) {
            var r3 = e4.getAttribute("xml:id");
            return r3 && (t4[r3] = e4), t4;
          }, {});
        }
        function Or(t3, e4) {
          return [].slice.call(t3.childNodes).reduce(function(t4, r3, i3) {
            var n2;
            return "br" === r3.nodeName && i3 ? t4 + "\n" : null !== (n2 = r3.childNodes) && void 0 !== n2 && n2.length ? Or(r3, e4) : e4 ? t4 + r3.textContent.trim().replace(/\s+/g, " ") : t4 + r3.textContent;
          }, "");
        }
        function xr(t3, e4, r3) {
          return t3 && t3.hasAttributeNS(e4, r3) ? t3.getAttributeNS(e4, r3) : null;
        }
        function Pr(t3) {
          return new Error("Could not parse ttml timestamp " + t3);
        }
        function Fr(t3, e4) {
          if (!t3)
            return null;
          var r3 = dr(t3);
          return null === r3 && (Rr.test(t3) ? r3 = function(t4, e5) {
            var r4 = Rr.exec(t4), i3 = (0 | r4[4]) + (0 | r4[5]) / e5.subFrameRate;
            return 3600 * (0 | r4[1]) + 60 * (0 | r4[2]) + (0 | r4[3]) + i3 / e5.frameRate;
          }(t3, e4) : kr.test(t3) && (r3 = function(t4, e5) {
            var r4 = kr.exec(t4), i3 = Number(r4[1]);
            switch (r4[2]) {
              case "h":
                return 3600 * i3;
              case "m":
                return 60 * i3;
              case "ms":
                return 1e3 * i3;
              case "f":
                return i3 / e5.frameRate;
              case "t":
                return i3 / e5.tickRate;
            }
            return i3;
          }(t3, e4))), r3;
        }
        var Mr = function() {
          function t3(t4) {
            if (this.hls = void 0, this.media = null, this.config = void 0, this.enabled = true, this.Cues = void 0, this.textTracks = [], this.tracks = [], this.initPTS = [], this.timescale = [], this.unparsedVttFrags = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.cea608Parser1 = void 0, this.cea608Parser2 = void 0, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } }, this.captionsProperties = void 0, this.hls = t4, this.config = t4.config, this.Cues = t4.config.cueHandler, this.captionsProperties = { textTrack1: { label: this.config.captionsTextTrack1Label, languageCode: this.config.captionsTextTrack1LanguageCode }, textTrack2: { label: this.config.captionsTextTrack2Label, languageCode: this.config.captionsTextTrack2LanguageCode }, textTrack3: { label: this.config.captionsTextTrack3Label, languageCode: this.config.captionsTextTrack3LanguageCode }, textTrack4: { label: this.config.captionsTextTrack4Label, languageCode: this.config.captionsTextTrack4LanguageCode } }, this.config.enableCEA708Captions) {
              var e5 = new or(this, "textTrack1"), r3 = new or(this, "textTrack2"), i3 = new or(this, "textTrack3"), n2 = new or(this, "textTrack4");
              this.cea608Parser1 = new sr(1, e5, r3), this.cea608Parser2 = new sr(3, i3, n2);
            }
            t4.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this), t4.on(s.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.on(s.Events.FRAG_LOADING, this.onFragLoading, this), t4.on(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.on(s.Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t4.on(s.Events.FRAG_DECRYPTED, this.onFragDecrypted, this), t4.on(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.on(s.Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t4.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this), t4.off(s.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.off(s.Events.FRAG_LOADING, this.onFragLoading, this), t4.off(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.off(s.Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t4.off(s.Events.FRAG_DECRYPTED, this.onFragDecrypted, this), t4.off(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.off(s.Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t4.off(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), this.hls = this.config = this.cea608Parser1 = this.cea608Parser2 = null;
          }, e4.addCues = function(t4, e5, r3, i3, n2) {
            for (var a3, o2, l2, u2, d3 = false, h2 = n2.length; h2--; ) {
              var c3 = n2[h2], f3 = (a3 = c3[0], o2 = c3[1], l2 = e5, u2 = r3, Math.min(o2, u2) - Math.max(a3, l2));
              if (f3 >= 0 && (c3[0] = Math.min(c3[0], e5), c3[1] = Math.max(c3[1], r3), d3 = true, f3 / (r3 - e5) > 0.5))
                return;
            }
            if (d3 || n2.push([e5, r3]), this.config.renderTextTracksNatively) {
              var g2 = this.captionsTracks[t4];
              this.Cues.newCue(g2, e5, r3, i3);
            } else {
              var v2 = this.Cues.newCue(null, e5, r3, i3);
              this.hls.trigger(s.Events.CUES_PARSED, { type: "captions", cues: v2, track: t4 });
            }
          }, e4.onInitPtsFound = function(t4, e5) {
            var r3 = this, i3 = e5.frag, n2 = e5.id, a3 = e5.initPTS, o2 = e5.timescale, l2 = this.unparsedVttFrags;
            "main" === n2 && (this.initPTS[i3.cc] = a3, this.timescale[i3.cc] = o2), l2.length && (this.unparsedVttFrags = [], l2.forEach(function(t5) {
              r3.onFragLoaded(s.Events.FRAG_LOADED, t5);
            }));
          }, e4.getExistingTrack = function(t4) {
            var e5 = this.media;
            if (e5)
              for (var r3 = 0; r3 < e5.textTracks.length; r3++) {
                var i3 = e5.textTracks[r3];
                if (i3[t4])
                  return i3;
              }
            return null;
          }, e4.createCaptionsTrack = function(t4) {
            this.config.renderTextTracksNatively ? this.createNativeTrack(t4) : this.createNonNativeTrack(t4);
          }, e4.createNativeTrack = function(t4) {
            if (!this.captionsTracks[t4]) {
              var e5 = this.captionsProperties, r3 = this.captionsTracks, i3 = this.media, n2 = e5[t4], a3 = n2.label, s2 = n2.languageCode, o2 = this.getExistingTrack(t4);
              if (o2)
                r3[t4] = o2, U(r3[t4]), M(r3[t4], i3);
              else {
                var l2 = this.createTextTrack("captions", a3, s2);
                l2 && (l2[t4] = true, r3[t4] = l2);
              }
            }
          }, e4.createNonNativeTrack = function(t4) {
            if (!this.nonNativeCaptionsTracks[t4]) {
              var e5 = this.captionsProperties[t4];
              if (e5) {
                var r3 = { _id: t4, label: e5.label, kind: "captions", default: !!e5.media && !!e5.media.default, closedCaptions: e5.media };
                this.nonNativeCaptionsTracks[t4] = r3, this.hls.trigger(s.Events.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: [r3] });
              }
            }
          }, e4.createTextTrack = function(t4, e5, r3) {
            var i3 = this.media;
            if (i3)
              return i3.addTextTrack(t4, e5, r3);
          }, e4.onMediaAttaching = function(t4, e5) {
            this.media = e5.media, this._cleanTracks();
          }, e4.onMediaDetaching = function() {
            var t4 = this.captionsTracks;
            Object.keys(t4).forEach(function(e5) {
              U(t4[e5]), delete t4[e5];
            }), this.nonNativeCaptionsTracks = {};
          }, e4.onManifestLoading = function() {
            this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } }, this._cleanTracks(), this.tracks = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.textTracks = [], this.unparsedVttFrags = this.unparsedVttFrags || [], this.initPTS = [], this.timescale = [], this.cea608Parser1 && this.cea608Parser2 && (this.cea608Parser1.reset(), this.cea608Parser2.reset());
          }, e4._cleanTracks = function() {
            var t4 = this.media;
            if (t4) {
              var e5 = t4.textTracks;
              if (e5)
                for (var r3 = 0; r3 < e5.length; r3++)
                  U(e5[r3]);
            }
          }, e4.onSubtitleTracksUpdated = function(t4, e5) {
            var r3 = this;
            this.textTracks = [];
            var i3 = e5.subtitleTracks || [], n2 = i3.some(function(t5) {
              return t5.textCodec === Ar;
            });
            if (this.config.enableWebVTT || n2 && this.config.enableIMSC1) {
              var a3 = this.tracks && i3 && this.tracks.length === i3.length;
              if (this.tracks = i3 || [], this.config.renderTextTracksNatively) {
                var o2 = this.media ? this.media.textTracks : [];
                this.tracks.forEach(function(t5, e6) {
                  var i4;
                  if (e6 < o2.length) {
                    for (var n3 = null, a4 = 0; a4 < o2.length; a4++)
                      if (Nr(o2[a4], t5)) {
                        n3 = o2[a4];
                        break;
                      }
                    n3 && (i4 = n3);
                  }
                  if (i4)
                    U(i4);
                  else {
                    var s2 = r3._captionsOrSubtitlesFromCharacteristics(t5);
                    (i4 = r3.createTextTrack(s2, t5.name, t5.lang)) && (i4.mode = "disabled");
                  }
                  i4 && (i4.groupId = t5.groupId, r3.textTracks.push(i4));
                });
              } else if (!a3 && this.tracks && this.tracks.length) {
                var l2 = this.tracks.map(function(t5) {
                  return { label: t5.name, kind: t5.type.toLowerCase(), default: t5.default, subtitleTrack: t5 };
                });
                this.hls.trigger(s.Events.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: l2 });
              }
            }
          }, e4._captionsOrSubtitlesFromCharacteristics = function(t4) {
            var e5;
            if (null !== (e5 = t4.attrs) && void 0 !== e5 && e5.CHARACTERISTICS) {
              var r3 = /transcribes-spoken-dialog/gi.test(t4.attrs.CHARACTERISTICS), i3 = /describes-music-and-sound/gi.test(t4.attrs.CHARACTERISTICS);
              if (r3 && i3)
                return "captions";
            }
            return "subtitles";
          }, e4.onManifestLoaded = function(t4, e5) {
            var r3 = this;
            this.config.enableCEA708Captions && e5.captions && e5.captions.forEach(function(t5) {
              var e6 = /(?:CC|SERVICE)([1-4])/.exec(t5.instreamId);
              if (e6) {
                var i3 = "textTrack" + e6[1], n2 = r3.captionsProperties[i3];
                n2 && (n2.label = t5.name, t5.lang && (n2.languageCode = t5.lang), n2.media = t5);
              }
            });
          }, e4.closedCaptionsForLevel = function(t4) {
            var e5 = this.hls.levels[t4.level];
            return null == e5 ? void 0 : e5.attrs["CLOSED-CAPTIONS"];
          }, e4.onFragLoading = function(t4, e5) {
            var r3 = this.cea608Parser1, i3 = this.cea608Parser2, n2 = this.lastSn, a3 = this.lastPartIndex;
            if (this.enabled && r3 && i3 && e5.frag.type === O.PlaylistLevelType.MAIN) {
              var s2, o2, l2 = e5.frag.sn, u2 = null != (s2 = null == e5 || null === (o2 = e5.part) || void 0 === o2 ? void 0 : o2.index) ? s2 : -1;
              l2 === n2 + 1 || l2 === n2 && u2 === a3 + 1 || (r3.reset(), i3.reset()), this.lastSn = l2, this.lastPartIndex = u2;
            }
          }, e4.onFragLoaded = function(t4, e5) {
            var r3 = e5.frag, i3 = e5.payload, n2 = this.initPTS, o2 = this.unparsedVttFrags;
            if (r3.type === O.PlaylistLevelType.SUBTITLE)
              if (i3.byteLength) {
                if (!(0, a2.isFiniteNumber)(n2[r3.cc]))
                  return o2.push(e5), void (n2.length && this.hls.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: r3, error: new Error("Missing initial subtitle PTS") }));
                var l2 = r3.decryptdata, u2 = "stats" in e5;
                if (null == l2 || null == l2.key || "AES-128" !== l2.method || u2) {
                  var d3 = this.tracks[r3.level], h2 = this.vttCCs;
                  h2[r3.cc] || (h2[r3.cc] = { start: r3.start, prevCC: this.prevCC, new: true }, this.prevCC = r3.cc), d3 && d3.textCodec === Ar ? this._parseIMSC1(r3, i3) : this._parseVTTs(r3, i3, h2);
                }
              } else
                this.hls.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: r3, error: new Error("Empty subtitle payload") });
          }, e4._parseIMSC1 = function(t4, e5) {
            var r3 = this, i3 = this.hls;
            _r(e5, this.initPTS[t4.cc], this.timescale[t4.cc], function(e6) {
              r3._appendCues(e6, t4.level), i3.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: true, frag: t4 });
            }, function(e6) {
              l.logger.log("Failed to parse IMSC1: " + e6), i3.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: t4, error: e6 });
            });
          }, e4._parseVTTs = function(t4, e5, r3) {
            var i3, n2 = this, o2 = this.hls;
            !function(t5, e6, r4, i4, n3, s2, o3, l2) {
              var u2, d3 = new mr(), h2 = (0, G.utf8ArrayToStr)(new Uint8Array(t5)).trim().replace(Tr, "\n").split("\n"), c3 = [], f3 = (0, yr.toMpegTsClockFromTimescale)(e6, r4), g2 = "00:00.000", v2 = 0, p2 = 0, m2 = true;
              d3.oncue = function(t6) {
                var e7 = i4[n3], r5 = i4.ccOffset, a3 = (v2 - f3) / 9e4;
                null != e7 && e7.new && (void 0 !== p2 ? r5 = i4.ccOffset = e7.start : function(t7, e8, r6) {
                  var i5 = t7[e8], n4 = t7[i5.prevCC];
                  if (!n4 || !n4.new && i5.new)
                    return t7.ccOffset = t7.presentationOffset = i5.start, void (i5.new = false);
                  for (; null !== (a4 = n4) && void 0 !== a4 && a4.new; ) {
                    var a4;
                    t7.ccOffset += i5.start - n4.start, i5.new = false, n4 = t7[(i5 = n4).prevCC];
                  }
                  t7.presentationOffset = r6;
                }(i4, n3, a3)), a3 && (r5 = a3 - i4.presentationOffset);
                var o4 = t6.endTime - t6.startTime, l3 = (0, Er.normalizePts)(9e4 * (t6.startTime + r5 - p2), 9e4 * s2) / 9e4;
                t6.startTime = Math.max(l3, 0), t6.endTime = Math.max(l3 + o4, 0);
                var u3 = t6.text.trim();
                t6.text = decodeURIComponent(encodeURIComponent(u3)), t6.id || (t6.id = Lr(t6.startTime, t6.endTime, u3)), t6.endTime > 0 && c3.push(t6);
              }, d3.onparsingerror = function(t6) {
                u2 = t6;
              }, d3.onflush = function() {
                u2 ? l2(u2) : o3(c3);
              }, h2.forEach(function(t6) {
                if (m2) {
                  if (Sr(t6, "X-TIMESTAMP-MAP=")) {
                    m2 = false, t6.slice(16).split(",").forEach(function(t7) {
                      Sr(t7, "LOCAL:") ? g2 = t7.slice(6) : Sr(t7, "MPEGTS:") && (v2 = parseInt(t7.slice(7)));
                    });
                    try {
                      p2 = function(t7) {
                        var e7 = parseInt(t7.slice(-3)), r5 = parseInt(t7.slice(-6, -4)), i5 = parseInt(t7.slice(-9, -7)), n4 = t7.length > 9 ? parseInt(t7.substring(0, t7.indexOf(":"))) : 0;
                        if (!((0, a2.isFiniteNumber)(e7) && (0, a2.isFiniteNumber)(r5) && (0, a2.isFiniteNumber)(i5) && (0, a2.isFiniteNumber)(n4)))
                          throw Error("Malformed X-TIMESTAMP-MAP: Local:" + t7);
                        return e7 += 1e3 * r5, (e7 += 6e4 * i5) + 36e5 * n4;
                      }(g2) / 1e3;
                    } catch (t7) {
                      u2 = t7;
                    }
                    return;
                  }
                  "" === t6 && (m2 = false);
                }
                d3.parse(t6 + "\n");
              }), d3.flush();
            }(null !== (i3 = t4.initSegment) && void 0 !== i3 && i3.data ? (0, u.appendUint8Array)(t4.initSegment.data, new Uint8Array(e5)) : e5, this.initPTS[t4.cc], this.timescale[t4.cc], r3, t4.cc, t4.start, function(e6) {
              n2._appendCues(e6, t4.level), o2.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: true, frag: t4 });
            }, function(r4) {
              n2._fallbackToIMSC1(t4, e5), l.logger.log("Failed to parse VTT cue: " + r4), o2.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: t4, error: r4 });
            });
          }, e4._fallbackToIMSC1 = function(t4, e5) {
            var r3 = this, i3 = this.tracks[t4.level];
            i3.textCodec || _r(e5, this.initPTS[t4.cc], this.timescale[t4.cc], function() {
              i3.textCodec = Ar, r3._parseIMSC1(t4, e5);
            }, function() {
              i3.textCodec = "wvtt";
            });
          }, e4._appendCues = function(t4, e5) {
            var r3 = this.hls;
            if (this.config.renderTextTracksNatively) {
              var i3 = this.textTracks[e5];
              if (!i3 || "disabled" === i3.mode)
                return;
              t4.forEach(function(t5) {
                return N(i3, t5);
              });
            } else {
              var n2 = this.tracks[e5];
              if (!n2)
                return;
              var a3 = n2.default ? "default" : "subtitles" + e5;
              r3.trigger(s.Events.CUES_PARSED, { type: "subtitles", cues: t4, track: a3 });
            }
          }, e4.onFragDecrypted = function(t4, e5) {
            var r3 = e5.frag;
            if (r3.type === O.PlaylistLevelType.SUBTITLE) {
              if (!(0, a2.isFiniteNumber)(this.initPTS[r3.cc]))
                return void this.unparsedVttFrags.push(e5);
              this.onFragLoaded(s.Events.FRAG_LOADED, e5);
            }
          }, e4.onSubtitleTracksCleared = function() {
            this.tracks = [], this.captionsTracks = {};
          }, e4.onFragParsingUserdata = function(t4, e5) {
            var r3 = this.cea608Parser1, i3 = this.cea608Parser2;
            if (this.enabled && r3 && i3) {
              var n2 = e5.frag, a3 = e5.samples;
              if (n2.type !== O.PlaylistLevelType.MAIN || "NONE" !== this.closedCaptionsForLevel(n2))
                for (var s2 = 0; s2 < a3.length; s2++) {
                  var o2 = a3[s2].bytes;
                  if (o2) {
                    var l2 = this.extractCea608Data(o2);
                    r3.addData(a3[s2].pts, l2[0]), i3.addData(a3[s2].pts, l2[1]);
                  }
                }
            }
          }, e4.onBufferFlushing = function(t4, e5) {
            var r3 = e5.startOffset, i3 = e5.endOffset, n2 = e5.endOffsetSubtitles, a3 = e5.type, s2 = this.media;
            if (s2 && !(s2.currentTime < i3)) {
              if (!a3 || "video" === a3) {
                var o2 = this.captionsTracks;
                Object.keys(o2).forEach(function(t5) {
                  return B(o2[t5], r3, i3);
                });
              }
              if (this.config.renderTextTracksNatively && 0 === r3 && void 0 !== n2) {
                var l2 = this.textTracks;
                Object.keys(l2).forEach(function(t5) {
                  return B(l2[t5], r3, n2);
                });
              }
            }
          }, e4.extractCea608Data = function(t4) {
            for (var e5 = [[], []], r3 = 31 & t4[0], i3 = 2, n2 = 0; n2 < r3; n2++) {
              var a3 = t4[i3++], s2 = 127 & t4[i3++], o2 = 127 & t4[i3++];
              if ((0 !== s2 || 0 !== o2) && 0 != (4 & a3)) {
                var l2 = 3 & a3;
                0 !== l2 && 1 !== l2 || (e5[l2].push(s2), e5[l2].push(o2));
              }
            }
            return e5;
          }, t3;
        }();
        function Nr(t3, e4) {
          return t3 && t3.label === e4.name && !(t3.textTrack1 || t3.textTrack2);
        }
        function Ur(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        const Br = function() {
          function t3(t4) {
            this.autoLevelCapping = void 0, this.firstLevel = void 0, this.media = void 0, this.restrictedLevels = void 0, this.timer = void 0, this.hls = void 0, this.streamController = void 0, this.clientRect = void 0, this.hls = t4, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.firstLevel = -1, this.media = null, this.restrictedLevels = [], this.timer = void 0, this.clientRect = null, this.registerListeners();
          }
          var e4, r3, i3 = t3.prototype;
          return i3.setStreamController = function(t4) {
            this.streamController = t4;
          }, i3.destroy = function() {
            this.unregisterListener(), this.hls.config.capLevelToPlayerSize && this.stopCapping(), this.media = null, this.clientRect = null, this.hls = this.streamController = null;
          }, i3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t4.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.BUFFER_CODECS, this.onBufferCodecs, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this);
          }, i3.unregisterListener = function() {
            var t4 = this.hls;
            t4.off(s.Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t4.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.BUFFER_CODECS, this.onBufferCodecs, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this);
          }, i3.onFpsDropLevelCapping = function(e5, r4) {
            t3.isLevelAllowed(r4.droppedLevel, this.restrictedLevels) && this.restrictedLevels.push(r4.droppedLevel);
          }, i3.onMediaAttaching = function(t4, e5) {
            this.media = e5.media instanceof HTMLVideoElement ? e5.media : null;
          }, i3.onManifestParsed = function(t4, e5) {
            var r4 = this.hls;
            this.restrictedLevels = [], this.firstLevel = e5.firstLevel, r4.config.capLevelToPlayerSize && e5.video && this.startCapping();
          }, i3.onBufferCodecs = function(t4, e5) {
            this.hls.config.capLevelToPlayerSize && e5.video && this.startCapping();
          }, i3.onMediaDetaching = function() {
            this.stopCapping();
          }, i3.detectPlayerSize = function() {
            if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {
              var t4 = this.hls.levels;
              if (t4.length) {
                var e5 = this.hls;
                e5.autoLevelCapping = this.getMaxLevel(t4.length - 1), e5.autoLevelCapping > this.autoLevelCapping && this.streamController && this.streamController.nextLevelSwitch(), this.autoLevelCapping = e5.autoLevelCapping;
              }
            }
          }, i3.getMaxLevel = function(e5) {
            var r4 = this, i4 = this.hls.levels;
            if (!i4.length)
              return -1;
            var n2 = i4.filter(function(i5, n3) {
              return t3.isLevelAllowed(n3, r4.restrictedLevels) && n3 <= e5;
            });
            return this.clientRect = null, t3.getMaxLevelByMediaSize(n2, this.mediaWidth, this.mediaHeight);
          }, i3.startCapping = function() {
            this.timer || (this.autoLevelCapping = Number.POSITIVE_INFINITY, this.hls.firstLevel = this.getMaxLevel(this.firstLevel), self.clearInterval(this.timer), this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3), this.detectPlayerSize());
          }, i3.stopCapping = function() {
            this.restrictedLevels = [], this.firstLevel = -1, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.timer && (self.clearInterval(this.timer), this.timer = void 0);
          }, i3.getDimensions = function() {
            if (this.clientRect)
              return this.clientRect;
            var t4 = this.media, e5 = { width: 0, height: 0 };
            if (t4) {
              var r4 = t4.getBoundingClientRect();
              e5.width = r4.width, e5.height = r4.height, e5.width || e5.height || (e5.width = r4.right - r4.left || t4.width || 0, e5.height = r4.bottom - r4.top || t4.height || 0);
            }
            return this.clientRect = e5, e5;
          }, t3.isLevelAllowed = function(t4, e5) {
            return void 0 === e5 && (e5 = []), -1 === e5.indexOf(t4);
          }, t3.getMaxLevelByMediaSize = function(t4, e5, r4) {
            if (!t4 || !t4.length)
              return -1;
            for (var i4, n2, a3 = t4.length - 1, s2 = 0; s2 < t4.length; s2 += 1) {
              var o2 = t4[s2];
              if ((o2.width >= e5 || o2.height >= r4) && (i4 = o2, !(n2 = t4[s2 + 1]) || i4.width !== n2.width || i4.height !== n2.height)) {
                a3 = s2;
                break;
              }
            }
            return a3;
          }, e4 = t3, (r3 = [{ key: "mediaWidth", get: function() {
            return this.getDimensions().width * this.contentScaleFactor;
          } }, { key: "mediaHeight", get: function() {
            return this.getDimensions().height * this.contentScaleFactor;
          } }, { key: "contentScaleFactor", get: function() {
            var t4 = 1;
            if (!this.hls.config.ignoreDevicePixelRatio)
              try {
                t4 = self.devicePixelRatio;
              } catch (t5) {
              }
            return t4;
          } }]) && Ur(e4.prototype, r3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }(), Gr = function() {
          function t3(t4) {
            this.hls = void 0, this.isVideoPlaybackQualityAvailable = false, this.timer = void 0, this.media = null, this.lastTime = void 0, this.lastDroppedFrames = 0, this.lastDecodedFrames = 0, this.streamController = void 0, this.hls = t4, this.registerListeners();
          }
          var e4 = t3.prototype;
          return e4.setStreamController = function(t4) {
            this.streamController = t4;
          }, e4.registerListeners = function() {
            this.hls.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
          }, e4.unregisterListeners = function() {
            this.hls.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching);
          }, e4.destroy = function() {
            this.timer && clearInterval(this.timer), this.unregisterListeners(), this.isVideoPlaybackQualityAvailable = false, this.media = null;
          }, e4.onMediaAttaching = function(t4, e5) {
            var r3 = this.hls.config;
            if (r3.capLevelOnFPSDrop) {
              var i3 = e5.media instanceof self.HTMLVideoElement ? e5.media : null;
              this.media = i3, i3 && "function" == typeof i3.getVideoPlaybackQuality && (this.isVideoPlaybackQualityAvailable = true), self.clearInterval(this.timer), this.timer = self.setInterval(this.checkFPSInterval.bind(this), r3.fpsDroppedMonitoringPeriod);
            }
          }, e4.checkFPS = function(t4, e5, r3) {
            var i3 = performance.now();
            if (e5) {
              if (this.lastTime) {
                var n2 = i3 - this.lastTime, a3 = r3 - this.lastDroppedFrames, o2 = e5 - this.lastDecodedFrames, u2 = 1e3 * a3 / n2, d3 = this.hls;
                if (d3.trigger(s.Events.FPS_DROP, { currentDropped: a3, currentDecoded: o2, totalDroppedFrames: r3 }), u2 > 0 && a3 > d3.config.fpsDroppedMonitoringThreshold * o2) {
                  var h2 = d3.currentLevel;
                  l.logger.warn("drop FPS ratio greater than max allowed value for currentLevel: " + h2), h2 > 0 && (-1 === d3.autoLevelCapping || d3.autoLevelCapping >= h2) && (h2 -= 1, d3.trigger(s.Events.FPS_DROP_LEVEL_CAPPING, { level: h2, droppedLevel: d3.currentLevel }), d3.autoLevelCapping = h2, this.streamController.nextLevelSwitch());
                }
              }
              this.lastTime = i3, this.lastDroppedFrames = r3, this.lastDecodedFrames = e5;
            }
          }, e4.checkFPSInterval = function() {
            var t4 = this.media;
            if (t4)
              if (this.isVideoPlaybackQualityAvailable) {
                var e5 = t4.getVideoPlaybackQuality();
                this.checkFPS(t4, e5.totalVideoFrames, e5.droppedVideoFrames);
              } else
                this.checkFPS(t4, t4.webkitDecodedFrameCount, t4.webkitDroppedFrameCount);
          }, t3;
        }();
        var Kr;
        !function(t3) {
          t3.WIDEVINE = "com.widevine.alpha", t3.PLAYREADY = "com.microsoft.playready";
        }(Kr || (Kr = {}));
        var Hr = "undefined" != typeof self && self.navigator && self.navigator.requestMediaKeySystemAccess ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator) : null;
        function jr(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        const Vr = function() {
          function t3(t4) {
            this.hls = void 0, this._widevineLicenseUrl = void 0, this._licenseXhrSetup = void 0, this._licenseResponseCallback = void 0, this._emeEnabled = void 0, this._requestMediaKeySystemAccess = void 0, this._drmSystemOptions = void 0, this._config = void 0, this._mediaKeysList = [], this._media = null, this._hasSetMediaKeys = false, this._requestLicenseFailureCount = 0, this.mediaKeysPromise = null, this._onMediaEncrypted = this.onMediaEncrypted.bind(this), this.hls = t4, this._config = t4.config, this._widevineLicenseUrl = this._config.widevineLicenseUrl, this._licenseXhrSetup = this._config.licenseXhrSetup, this._licenseResponseCallback = this._config.licenseResponseCallback, this._emeEnabled = this._config.emeEnabled, this._requestMediaKeySystemAccess = this._config.requestMediaKeySystemAccessFunc, this._drmSystemOptions = this._config.drmSystemOptions, this._registerListeners();
          }
          var e4, r3, i3 = t3.prototype;
          return i3.destroy = function() {
            this._unregisterListeners(), this.hls = this._onMediaEncrypted = null, this._requestMediaKeySystemAccess = null;
          }, i3._registerListeners = function() {
            this.hls.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(s.Events.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this);
          }, i3._unregisterListeners = function() {
            this.hls.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(s.Events.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this);
          }, i3.getLicenseServerUrl = function(t4) {
            switch (t4) {
              case Kr.WIDEVINE:
                if (!this._widevineLicenseUrl)
                  break;
                return this._widevineLicenseUrl;
            }
            throw new Error('no license server URL configured for key-system "' + t4 + '"');
          }, i3._attemptKeySystemAccess = function(t4, e5, r4) {
            var i4 = this, n2 = function(t5, e6, r5, i5) {
              if (t5 === Kr.WIDEVINE)
                return function(t6, e7, r6) {
                  var i6 = { audioCapabilities: [], videoCapabilities: [] };
                  return t6.forEach(function(t7) {
                    i6.audioCapabilities.push({ contentType: 'audio/mp4; codecs="' + t7 + '"', robustness: r6.audioRobustness || "" });
                  }), e7.forEach(function(t7) {
                    i6.videoCapabilities.push({ contentType: 'video/mp4; codecs="' + t7 + '"', robustness: r6.videoRobustness || "" });
                  }), [i6];
                }(e6, r5, i5);
              throw new Error("Unknown key-system: " + t5);
            }(t4, e5, r4, this._drmSystemOptions);
            l.logger.log("Requesting encrypted media key-system access");
            var a3 = this.requestMediaKeySystemAccess(t4, n2);
            this.mediaKeysPromise = a3.then(function(e6) {
              return i4._onMediaKeySystemAccessObtained(t4, e6);
            }), a3.catch(function(e6) {
              l.logger.error('Failed to obtain key-system "' + t4 + '" access:', e6);
            });
          }, i3._onMediaKeySystemAccessObtained = function(t4, e5) {
            var r4 = this;
            l.logger.log('Access for key-system "' + t4 + '" obtained');
            var i4 = { mediaKeysSessionInitialized: false, mediaKeySystemAccess: e5, mediaKeySystemDomain: t4 };
            this._mediaKeysList.push(i4);
            var n2 = Promise.resolve().then(function() {
              return e5.createMediaKeys();
            }).then(function(e6) {
              return i4.mediaKeys = e6, l.logger.log('Media-keys created for key-system "' + t4 + '"'), r4._onMediaKeysCreated(), e6;
            });
            return n2.catch(function(t5) {
              l.logger.error("Failed to create media-keys:", t5);
            }), n2;
          }, i3._onMediaKeysCreated = function() {
            var t4 = this;
            this._mediaKeysList.forEach(function(e5) {
              e5.mediaKeysSession || (e5.mediaKeysSession = e5.mediaKeys.createSession(), t4._onNewMediaKeySession(e5.mediaKeysSession));
            });
          }, i3._onNewMediaKeySession = function(t4) {
            var e5 = this;
            l.logger.log("New key-system session " + t4.sessionId), t4.addEventListener("message", function(r4) {
              e5._onKeySessionMessage(t4, r4.message);
            }, false);
          }, i3._onKeySessionMessage = function(t4, e5) {
            l.logger.log("Got EME message event, creating license request"), this._requestLicense(e5, function(e6) {
              l.logger.log("Received license data (length: " + (e6 ? e6.byteLength : e6) + "), updating key-session"), t4.update(e6).catch(function(t5) {
                l.logger.warn("Updating key-session failed: " + t5);
              });
            });
          }, i3.onMediaEncrypted = function(t4) {
            var e5 = this;
            if (l.logger.log('Media is encrypted using "' + t4.initDataType + '" init data type'), !this.mediaKeysPromise)
              return l.logger.error("Fatal: Media is encrypted but no CDM access or no keys have been requested"), void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_KEYS, fatal: true });
            var r4 = function(r5) {
              e5._media && (e5._attemptSetMediaKeys(r5), e5._generateRequestWithPreferredKeySession(t4.initDataType, t4.initData));
            };
            this.mediaKeysPromise.then(r4).catch(r4);
          }, i3._attemptSetMediaKeys = function(t4) {
            if (!this._media)
              throw new Error("Attempted to set mediaKeys without first attaching a media element");
            if (!this._hasSetMediaKeys) {
              var e5 = this._mediaKeysList[0];
              if (!e5 || !e5.mediaKeys)
                return l.logger.error("Fatal: Media is encrypted but no CDM access or no keys have been obtained yet"), void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_KEYS, fatal: true });
              l.logger.log("Setting keys for encrypted media"), this._media.setMediaKeys(e5.mediaKeys), this._hasSetMediaKeys = true;
            }
          }, i3._generateRequestWithPreferredKeySession = function(t4, e5) {
            var r4 = this, i4 = this._mediaKeysList[0];
            if (!i4)
              return l.logger.error("Fatal: Media is encrypted but not any key-system access has been obtained yet"), void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_ACCESS, fatal: true });
            if (i4.mediaKeysSessionInitialized)
              l.logger.warn("Key-Session already initialized but requested again");
            else {
              var n2 = i4.mediaKeysSession;
              if (!n2)
                return l.logger.error("Fatal: Media is encrypted but no key-session existing"), void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_SESSION, fatal: true });
              if (!e5)
                return l.logger.warn("Fatal: initData required for generating a key session is null"), void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_INIT_DATA, fatal: true });
              l.logger.log('Generating key-session request for "' + t4 + '" init data type'), i4.mediaKeysSessionInitialized = true, n2.generateRequest(t4, e5).then(function() {
                l.logger.debug("Key-session generation succeeded");
              }).catch(function(t5) {
                l.logger.error("Error generating key-session request:", t5), r4.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_SESSION, fatal: false });
              });
            }
          }, i3._createLicenseXhr = function(t4, e5, r4) {
            var i4 = new XMLHttpRequest();
            i4.responseType = "arraybuffer", i4.onreadystatechange = this._onLicenseRequestReadyStageChange.bind(this, i4, t4, e5, r4);
            var n2 = this._licenseXhrSetup;
            if (n2)
              try {
                n2.call(this.hls, i4, t4), n2 = void 0;
              } catch (t5) {
                l.logger.error(t5);
              }
            try {
              i4.readyState || i4.open("POST", t4, true), n2 && n2.call(this.hls, i4, t4);
            } catch (t5) {
              throw new Error("issue setting up KeySystem license XHR " + t5);
            }
            return i4;
          }, i3._onLicenseRequestReadyStageChange = function(t4, e5, r4, i4) {
            if (4 === t4.readyState)
              if (200 === t4.status) {
                this._requestLicenseFailureCount = 0, l.logger.log("License request succeeded");
                var n2 = t4.response, a3 = this._licenseResponseCallback;
                if (a3)
                  try {
                    n2 = a3.call(this.hls, t4, e5);
                  } catch (t5) {
                    l.logger.error(t5);
                  }
                i4(n2);
              } else {
                if (l.logger.error("License Request XHR failed (" + e5 + "). Status: " + t4.status + " (" + t4.statusText + ")"), this._requestLicenseFailureCount++, this._requestLicenseFailureCount > 3)
                  return void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED, fatal: true });
                var u2 = 3 - this._requestLicenseFailureCount + 1;
                l.logger.warn("Retrying license request, " + u2 + " attempts left"), this._requestLicense(r4, i4);
              }
          }, i3._generateLicenseRequestChallenge = function(t4, e5) {
            if (t4.mediaKeySystemDomain === Kr.WIDEVINE)
              return e5;
            throw new Error("unsupported key-system: " + t4.mediaKeySystemDomain);
          }, i3._requestLicense = function(t4, e5) {
            l.logger.log("Requesting content license for key-system");
            var r4 = this._mediaKeysList[0];
            if (!r4)
              return l.logger.error("Fatal error: Media is encrypted but no key-system access has been obtained yet"), void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_ACCESS, fatal: true });
            try {
              var i4 = this.getLicenseServerUrl(r4.mediaKeySystemDomain), n2 = this._createLicenseXhr(i4, t4, e5);
              l.logger.log("Sending license request to URL: " + i4);
              var a3 = this._generateLicenseRequestChallenge(r4, t4);
              n2.send(a3);
            } catch (t5) {
              l.logger.error("Failure requesting DRM license: " + t5), this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED, fatal: true });
            }
          }, i3.onMediaAttached = function(t4, e5) {
            if (this._emeEnabled) {
              var r4 = e5.media;
              this._media = r4, r4.addEventListener("encrypted", this._onMediaEncrypted);
            }
          }, i3.onMediaDetached = function() {
            var t4 = this._media, e5 = this._mediaKeysList;
            t4 && (t4.removeEventListener("encrypted", this._onMediaEncrypted), this._media = null, this._mediaKeysList = [], Promise.all(e5.map(function(t5) {
              if (t5.mediaKeysSession)
                return t5.mediaKeysSession.close().catch(function() {
                });
            })).then(function() {
              return t4.setMediaKeys(null);
            }).catch(function() {
            }));
          }, i3.onManifestParsed = function(t4, e5) {
            if (this._emeEnabled) {
              var r4 = e5.levels.map(function(t5) {
                return t5.audioCodec;
              }).filter(function(t5) {
                return !!t5;
              }), i4 = e5.levels.map(function(t5) {
                return t5.videoCodec;
              }).filter(function(t5) {
                return !!t5;
              });
              this._attemptKeySystemAccess(Kr.WIDEVINE, r4, i4);
            }
          }, e4 = t3, (r3 = [{ key: "requestMediaKeySystemAccess", get: function() {
            if (!this._requestMediaKeySystemAccess)
              throw new Error("No requestMediaKeySystemAccess function configured");
            return this._requestMediaKeySystemAccess;
          } }]) && jr(e4.prototype, r3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }();
        var Wr, Yr, qr;
        function zr(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        function Xr(t3, e4, r3) {
          return e4 && zr(t3.prototype, e4), r3 && zr(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
        }
        function Qr(t3, e4) {
          var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
          if (r3)
            return (r3 = r3.call(t3)).next.bind(r3);
          if (Array.isArray(t3) || (r3 = function(t4, e5) {
            if (t4) {
              if ("string" == typeof t4)
                return $r(t4, e5);
              var r4 = Object.prototype.toString.call(t4).slice(8, -1);
              return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? $r(t4, e5) : void 0;
            }
          }(t3)) || e4 && t3 && "number" == typeof t3.length) {
            r3 && (t3 = r3);
            var i3 = 0;
            return function() {
              return i3 >= t3.length ? { done: true } : { done: false, value: t3[i3++] };
            };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function $r(t3, e4) {
          (null == e4 || e4 > t3.length) && (e4 = t3.length);
          for (var r3 = 0, i3 = new Array(e4); r3 < e4; r3++)
            i3[r3] = t3[r3];
          return i3;
        }
        function Zr() {
          return Zr = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, Zr.apply(this, arguments);
        }
        !function(t3) {
          t3.MANIFEST = "m", t3.AUDIO = "a", t3.VIDEO = "v", t3.MUXED = "av", t3.INIT = "i", t3.CAPTION = "c", t3.TIMED_TEXT = "tt", t3.KEY = "k", t3.OTHER = "o";
        }(Wr || (Wr = {})), function(t3) {
          t3.DASH = "d", t3.HLS = "h", t3.SMOOTH = "s", t3.OTHER = "o";
        }(Yr || (Yr = {})), function(t3) {
          t3.VOD = "v", t3.LIVE = "l";
        }(qr || (qr = {}));
        var Jr = function() {
          function t3(e5) {
            var r3 = this;
            this.hls = void 0, this.config = void 0, this.media = void 0, this.sid = void 0, this.cid = void 0, this.useHeaders = false, this.initialized = false, this.starved = false, this.buffering = true, this.audioBuffer = void 0, this.videoBuffer = void 0, this.onWaiting = function() {
              r3.initialized && (r3.starved = true), r3.buffering = true;
            }, this.onPlaying = function() {
              r3.initialized || (r3.initialized = true), r3.buffering = false;
            }, this.applyPlaylistData = function(t4) {
              try {
                r3.apply(t4, { ot: Wr.MANIFEST, su: !r3.initialized });
              } catch (t5) {
                l.logger.warn("Could not generate manifest CMCD data.", t5);
              }
            }, this.applyFragmentData = function(t4) {
              try {
                var e6 = t4.frag, i4 = r3.hls.levels[e6.level], n3 = r3.getObjectType(e6), a3 = { d: 1e3 * e6.duration, ot: n3 };
                n3 !== Wr.VIDEO && n3 !== Wr.AUDIO && n3 != Wr.MUXED || (a3.br = i4.bitrate / 1e3, a3.tb = r3.getTopBandwidth(n3) / 1e3, a3.bl = r3.getBufferLength(n3)), r3.apply(t4, a3);
              } catch (t5) {
                l.logger.warn("Could not generate segment CMCD data.", t5);
              }
            }, this.hls = e5;
            var i3 = this.config = e5.config, n2 = i3.cmcd;
            null != n2 && (i3.pLoader = this.createPlaylistLoader(), i3.fLoader = this.createFragmentLoader(), this.sid = n2.sessionId || t3.uuid(), this.cid = n2.contentId, this.useHeaders = true === n2.useHeaders, this.registerListeners());
          }
          var e4 = t3.prototype;
          return e4.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHED, this.onMediaDetached, this), t4.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this);
          }, e4.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHED, this.onMediaDetached, this), t4.off(s.Events.BUFFER_CREATED, this.onBufferCreated, this), this.onMediaDetached();
          }, e4.destroy = function() {
            this.unregisterListeners(), this.hls = this.config = this.audioBuffer = this.videoBuffer = null;
          }, e4.onMediaAttached = function(t4, e5) {
            this.media = e5.media, this.media.addEventListener("waiting", this.onWaiting), this.media.addEventListener("playing", this.onPlaying);
          }, e4.onMediaDetached = function() {
            this.media && (this.media.removeEventListener("waiting", this.onWaiting), this.media.removeEventListener("playing", this.onPlaying), this.media = null);
          }, e4.onBufferCreated = function(t4, e5) {
            var r3, i3;
            this.audioBuffer = null === (r3 = e5.tracks.audio) || void 0 === r3 ? void 0 : r3.buffer, this.videoBuffer = null === (i3 = e5.tracks.video) || void 0 === i3 ? void 0 : i3.buffer;
          }, e4.createData = function() {
            var t4;
            return { v: 1, sf: Yr.HLS, sid: this.sid, cid: this.cid, pr: null === (t4 = this.media) || void 0 === t4 ? void 0 : t4.playbackRate, mtp: this.hls.bandwidthEstimate / 1e3 };
          }, e4.apply = function(e5, r3) {
            void 0 === r3 && (r3 = {}), Zr(r3, this.createData());
            var i3 = r3.ot === Wr.INIT || r3.ot === Wr.VIDEO || r3.ot === Wr.MUXED;
            if (this.starved && i3 && (r3.bs = true, r3.su = true, this.starved = false), null == r3.su && (r3.su = this.buffering), this.useHeaders) {
              var n2 = t3.toHeaders(r3);
              if (!Object.keys(n2).length)
                return;
              e5.headers || (e5.headers = {}), Zr(e5.headers, n2);
            } else {
              var a3 = t3.toQuery(r3);
              if (!a3)
                return;
              e5.url = t3.appendQueryToUri(e5.url, a3);
            }
          }, e4.getObjectType = function(t4) {
            var e5 = t4.type;
            return "subtitle" === e5 ? Wr.TIMED_TEXT : "initSegment" === t4.sn ? Wr.INIT : "audio" === e5 ? Wr.AUDIO : "main" === e5 ? this.hls.audioTracks.length ? Wr.VIDEO : Wr.MUXED : void 0;
          }, e4.getTopBandwidth = function(t4) {
            var e5, r3 = 0, i3 = this.hls;
            if (t4 === Wr.AUDIO)
              e5 = i3.audioTracks;
            else {
              var n2 = i3.maxAutoLevel, a3 = n2 > -1 ? n2 + 1 : i3.levels.length;
              e5 = i3.levels.slice(0, a3);
            }
            for (var s2, o2 = Qr(e5); !(s2 = o2()).done; ) {
              var l2 = s2.value;
              l2.bitrate > r3 && (r3 = l2.bitrate);
            }
            return r3 > 0 ? r3 : NaN;
          }, e4.getBufferLength = function(t4) {
            var e5 = this.hls.media, r3 = t4 === Wr.AUDIO ? this.audioBuffer : this.videoBuffer;
            return r3 && e5 ? 1e3 * mt.bufferInfo(r3, e5.currentTime, this.config.maxBufferHole).len : NaN;
          }, e4.createPlaylistLoader = function() {
            var t4 = this.config.pLoader, e5 = this.applyPlaylistData, r3 = t4 || this.config.loader;
            return function() {
              function t5(t6) {
                this.loader = void 0, this.loader = new r3(t6);
              }
              var i3 = t5.prototype;
              return i3.destroy = function() {
                this.loader.destroy();
              }, i3.abort = function() {
                this.loader.abort();
              }, i3.load = function(t6, r4, i4) {
                e5(t6), this.loader.load(t6, r4, i4);
              }, Xr(t5, [{ key: "stats", get: function() {
                return this.loader.stats;
              } }, { key: "context", get: function() {
                return this.loader.context;
              } }]), t5;
            }();
          }, e4.createFragmentLoader = function() {
            var t4 = this.config.fLoader, e5 = this.applyFragmentData, r3 = t4 || this.config.loader;
            return function() {
              function t5(t6) {
                this.loader = void 0, this.loader = new r3(t6);
              }
              var i3 = t5.prototype;
              return i3.destroy = function() {
                this.loader.destroy();
              }, i3.abort = function() {
                this.loader.abort();
              }, i3.load = function(t6, r4, i4) {
                e5(t6), this.loader.load(t6, r4, i4);
              }, Xr(t5, [{ key: "stats", get: function() {
                return this.loader.stats;
              } }, { key: "context", get: function() {
                return this.loader.context;
              } }]), t5;
            }();
          }, t3.uuid = function() {
            var t4 = URL.createObjectURL(new Blob()), e5 = t4.toString();
            return URL.revokeObjectURL(t4), e5.slice(e5.lastIndexOf("/") + 1);
          }, t3.serialize = function(t4) {
            for (var e5, r3 = [], i3 = function(t5) {
              return !Number.isNaN(t5) && null != t5 && "" !== t5 && false !== t5;
            }, n2 = function(t5) {
              return Math.round(t5);
            }, a3 = function(t5) {
              return 100 * n2(t5 / 100);
            }, s2 = { br: n2, d: n2, bl: a3, dl: a3, mtp: a3, nor: function(t5) {
              return encodeURIComponent(t5);
            }, rtp: a3, tb: n2 }, o2 = Qr(Object.keys(t4 || {}).sort()); !(e5 = o2()).done; ) {
              var l2 = e5.value, u2 = t4[l2];
              if (i3(u2) && !("v" === l2 && 1 === u2 || "pr" == l2 && 1 === u2)) {
                var d3 = s2[l2];
                d3 && (u2 = d3(u2));
                var h2, c3 = typeof u2;
                h2 = "ot" === l2 || "sf" === l2 || "st" === l2 ? l2 + "=" + u2 : "boolean" === c3 ? l2 : "number" === c3 ? l2 + "=" + u2 : l2 + "=" + JSON.stringify(u2), r3.push(h2);
              }
            }
            return r3.join(",");
          }, t3.toHeaders = function(e5) {
            for (var r3 = {}, i3 = ["Object", "Request", "Session", "Status"], n2 = [{}, {}, {}, {}], a3 = { br: 0, d: 0, ot: 0, tb: 0, bl: 1, dl: 1, mtp: 1, nor: 1, nrr: 1, su: 1, cid: 2, pr: 2, sf: 2, sid: 2, st: 2, v: 2, bs: 3, rtp: 3 }, s2 = 0, o2 = Object.keys(e5); s2 < o2.length; s2++) {
              var l2 = o2[s2];
              n2[null != a3[l2] ? a3[l2] : 1][l2] = e5[l2];
            }
            for (var u2 = 0; u2 < n2.length; u2++) {
              var d3 = t3.serialize(n2[u2]);
              d3 && (r3["CMCD-" + i3[u2]] = d3);
            }
            return r3;
          }, t3.toQuery = function(e5) {
            return "CMCD=" + encodeURIComponent(t3.serialize(e5));
          }, t3.appendQueryToUri = function(t4, e5) {
            if (!e5)
              return t4;
            var r3 = t4.includes("?") ? "&" : "?";
            return "" + t4 + r3 + e5;
          }, t3;
        }(), ti = r2(408), ei = /^age:\s*[\d.]+\s*$/m;
        const ri = function() {
          function t3(t4) {
            this.xhrSetup = void 0, this.requestTimeout = void 0, this.retryTimeout = void 0, this.retryDelay = void 0, this.config = null, this.callbacks = null, this.context = void 0, this.loader = null, this.stats = void 0, this.xhrSetup = t4 ? t4.xhrSetup : null, this.stats = new ti.LoadStats(), this.retryDelay = 0;
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            this.callbacks = null, this.abortInternal(), this.loader = null, this.config = null;
          }, e4.abortInternal = function() {
            var t4 = this.loader;
            self.clearTimeout(this.requestTimeout), self.clearTimeout(this.retryTimeout), t4 && (t4.onreadystatechange = null, t4.onprogress = null, 4 !== t4.readyState && (this.stats.aborted = true, t4.abort()));
          }, e4.abort = function() {
            var t4;
            this.abortInternal(), null !== (t4 = this.callbacks) && void 0 !== t4 && t4.onAbort && this.callbacks.onAbort(this.stats, this.context, this.loader);
          }, e4.load = function(t4, e5, r3) {
            if (this.stats.loading.start)
              throw new Error("Loader can only be used once.");
            this.stats.loading.start = self.performance.now(), this.context = t4, this.config = e5, this.callbacks = r3, this.retryDelay = e5.retryDelay, this.loadInternal();
          }, e4.loadInternal = function() {
            var t4 = this.config, e5 = this.context;
            if (t4) {
              var r3 = this.loader = new self.XMLHttpRequest(), i3 = this.stats;
              i3.loading.first = 0, i3.loaded = 0;
              var n2 = this.xhrSetup;
              try {
                if (n2)
                  try {
                    n2(r3, e5.url);
                  } catch (t5) {
                    r3.open("GET", e5.url, true), n2(r3, e5.url);
                  }
                r3.readyState || r3.open("GET", e5.url, true);
                var a3 = this.context.headers;
                if (a3)
                  for (var s2 in a3)
                    r3.setRequestHeader(s2, a3[s2]);
              } catch (t5) {
                return void this.callbacks.onError({ code: r3.status, text: t5.message }, e5, r3);
              }
              e5.rangeEnd && r3.setRequestHeader("Range", "bytes=" + e5.rangeStart + "-" + (e5.rangeEnd - 1)), r3.onreadystatechange = this.readystatechange.bind(this), r3.onprogress = this.loadprogress.bind(this), r3.responseType = e5.responseType, self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), t4.timeout), r3.send();
            }
          }, e4.readystatechange = function() {
            var t4 = this.context, e5 = this.loader, r3 = this.stats;
            if (t4 && e5) {
              var i3 = e5.readyState, n2 = this.config;
              if (!r3.aborted && i3 >= 2)
                if (self.clearTimeout(this.requestTimeout), 0 === r3.loading.first && (r3.loading.first = Math.max(self.performance.now(), r3.loading.start)), 4 === i3) {
                  e5.onreadystatechange = null, e5.onprogress = null;
                  var a3 = e5.status, s2 = "arraybuffer" === e5.responseType;
                  if (a3 >= 200 && a3 < 300 && (s2 && e5.response || null !== e5.responseText)) {
                    var o2, u2;
                    if (r3.loading.end = Math.max(self.performance.now(), r3.loading.first), u2 = s2 ? (o2 = e5.response).byteLength : (o2 = e5.responseText).length, r3.loaded = r3.total = u2, !this.callbacks)
                      return;
                    var d3 = this.callbacks.onProgress;
                    if (d3 && d3(r3, t4, o2, e5), !this.callbacks)
                      return;
                    var h2 = { url: e5.responseURL, data: o2 };
                    this.callbacks.onSuccess(h2, r3, t4, e5);
                  } else
                    r3.retry >= n2.maxRetry || a3 >= 400 && a3 < 499 ? (l.logger.error(a3 + " while loading " + t4.url), this.callbacks.onError({ code: a3, text: e5.statusText }, t4, e5)) : (l.logger.warn(a3 + " while loading " + t4.url + ", retrying in " + this.retryDelay + "..."), this.abortInternal(), this.loader = null, self.clearTimeout(this.retryTimeout), this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay), this.retryDelay = Math.min(2 * this.retryDelay, n2.maxRetryDelay), r3.retry++);
                } else
                  self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), n2.timeout);
            }
          }, e4.loadtimeout = function() {
            l.logger.warn("timeout while loading " + this.context.url);
            var t4 = this.callbacks;
            t4 && (this.abortInternal(), t4.onTimeout(this.stats, this.context, this.loader));
          }, e4.loadprogress = function(t4) {
            var e5 = this.stats;
            e5.loaded = t4.loaded, t4.lengthComputable && (e5.total = t4.total);
          }, e4.getCacheAge = function() {
            var t4 = null;
            if (this.loader && ei.test(this.loader.getAllResponseHeaders())) {
              var e5 = this.loader.getResponseHeader("age");
              t4 = e5 ? parseFloat(e5) : null;
            }
            return t4;
          }, t3;
        }();
        function ii(t3) {
          var e4 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return ii = function(t4) {
            if (null === t4 || (r3 = t4, -1 === Function.toString.call(r3).indexOf("[native code]")))
              return t4;
            var r3;
            if ("function" != typeof t4)
              throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e4) {
              if (e4.has(t4))
                return e4.get(t4);
              e4.set(t4, i3);
            }
            function i3() {
              return ni(t4, arguments, oi(this).constructor);
            }
            return i3.prototype = Object.create(t4.prototype, { constructor: { value: i3, enumerable: false, writable: true, configurable: true } }), si(i3, t4);
          }, ii(t3);
        }
        function ni(t3, e4, r3) {
          return ni = ai() ? Reflect.construct.bind() : function(t4, e5, r4) {
            var i3 = [null];
            i3.push.apply(i3, e5);
            var n2 = new (Function.bind.apply(t4, i3))();
            return r4 && si(n2, r4.prototype), n2;
          }, ni.apply(null, arguments);
        }
        function ai() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }
        function si(t3, e4) {
          return si = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, si(t3, e4);
        }
        function oi(t3) {
          return oi = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          }, oi(t3);
        }
        function li() {
          return li = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, li.apply(this, arguments);
        }
        var ui = function() {
          function t3(t4) {
            this.fetchSetup = void 0, this.requestTimeout = void 0, this.request = void 0, this.response = void 0, this.controller = void 0, this.context = void 0, this.config = null, this.callbacks = null, this.stats = void 0, this.loader = null, this.fetchSetup = t4.fetchSetup || di, this.controller = new self.AbortController(), this.stats = new ti.LoadStats();
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
            this.loader = this.callbacks = null, this.abortInternal();
          }, e4.abortInternal = function() {
            var t4 = this.response;
            t4 && t4.ok || (this.stats.aborted = true, this.controller.abort());
          }, e4.abort = function() {
            var t4;
            this.abortInternal(), null !== (t4 = this.callbacks) && void 0 !== t4 && t4.onAbort && this.callbacks.onAbort(this.stats, this.context, this.response);
          }, e4.load = function(t4, e5, r3) {
            var i3 = this, n2 = this.stats;
            if (n2.loading.start)
              throw new Error("Loader can only be used once.");
            n2.loading.start = self.performance.now();
            var s2 = function(t5, e6) {
              var r4 = { method: "GET", mode: "cors", credentials: "same-origin", signal: e6, headers: new self.Headers(li({}, t5.headers)) };
              return t5.rangeEnd && r4.headers.set("Range", "bytes=" + t5.rangeStart + "-" + String(t5.rangeEnd - 1)), r4;
            }(t4, this.controller.signal), o2 = r3.onProgress, l2 = "arraybuffer" === t4.responseType, u2 = l2 ? "byteLength" : "length";
            this.context = t4, this.config = e5, this.callbacks = r3, this.request = this.fetchSetup(t4, s2), self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(function() {
              i3.abortInternal(), r3.onTimeout(n2, t4, i3.response);
            }, e5.timeout), self.fetch(this.request).then(function(r4) {
              if (i3.response = i3.loader = r4, !r4.ok) {
                var s3 = r4.status, u3 = r4.statusText;
                throw new hi(u3 || "fetch, bad network response", s3, r4);
              }
              return n2.loading.first = Math.max(self.performance.now(), n2.loading.start), n2.total = parseInt(r4.headers.get("Content-Length") || "0"), o2 && (0, a2.isFiniteNumber)(e5.highWaterMark) ? i3.loadProgressively(r4, n2, t4, e5.highWaterMark, o2) : l2 ? r4.arrayBuffer() : r4.text();
            }).then(function(s3) {
              var l3 = i3.response;
              self.clearTimeout(i3.requestTimeout), n2.loading.end = Math.max(self.performance.now(), n2.loading.first);
              var d3 = s3[u2];
              d3 && (n2.loaded = n2.total = d3);
              var h2 = { url: l3.url, data: s3 };
              o2 && !(0, a2.isFiniteNumber)(e5.highWaterMark) && o2(n2, t4, s3, l3), r3.onSuccess(h2, n2, t4, l3);
            }).catch(function(e6) {
              if (self.clearTimeout(i3.requestTimeout), !n2.aborted) {
                var a3 = e6 && e6.code || 0, s3 = e6 ? e6.message : null;
                r3.onError({ code: a3, text: s3 }, t4, e6 ? e6.details : null);
              }
            });
          }, e4.getCacheAge = function() {
            var t4 = null;
            if (this.response) {
              var e5 = this.response.headers.get("age");
              t4 = e5 ? parseFloat(e5) : null;
            }
            return t4;
          }, e4.loadProgressively = function(t4, e5, r3, i3, n2) {
            void 0 === i3 && (i3 = 0);
            var a3 = new Te(), s2 = t4.body.getReader();
            return function o2() {
              return s2.read().then(function(s3) {
                if (s3.done)
                  return a3.dataLength && n2(e5, r3, a3.flush(), t4), Promise.resolve(new ArrayBuffer(0));
                var l2 = s3.value, u2 = l2.length;
                return e5.loaded += u2, u2 < i3 || a3.dataLength ? (a3.push(l2), a3.dataLength >= i3 && n2(e5, r3, a3.flush(), t4)) : n2(e5, r3, l2, t4), o2();
              }).catch(function() {
                return Promise.reject();
              });
            }();
          }, t3;
        }();
        function di(t3, e4) {
          return new self.Request(t3.url, e4);
        }
        var hi = function(t3) {
          var e4, r3;
          function i3(e5, r4, i4) {
            var n2;
            return (n2 = t3.call(this, e5) || this).code = void 0, n2.details = void 0, n2.code = r4, n2.details = i4, n2;
          }
          return r3 = t3, (e4 = i3).prototype = Object.create(r3.prototype), e4.prototype.constructor = e4, si(e4, r3), i3;
        }(ii(Error));
        const ci = ui;
        var fi = /\s/;
        function gi() {
          return gi = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, gi.apply(this, arguments);
        }
        function vi(t3, e4) {
          var r3 = Object.keys(t3);
          if (Object.getOwnPropertySymbols) {
            var i3 = Object.getOwnPropertySymbols(t3);
            e4 && (i3 = i3.filter(function(e5) {
              return Object.getOwnPropertyDescriptor(t3, e5).enumerable;
            })), r3.push.apply(r3, i3);
          }
          return r3;
        }
        function pi(t3) {
          for (var e4 = 1; e4 < arguments.length; e4++) {
            var r3 = null != arguments[e4] ? arguments[e4] : {};
            e4 % 2 ? vi(Object(r3), true).forEach(function(e5) {
              mi(t3, e5, r3[e5]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : vi(Object(r3)).forEach(function(e5) {
              Object.defineProperty(t3, e5, Object.getOwnPropertyDescriptor(r3, e5));
            });
          }
          return t3;
        }
        function mi(t3, e4, r3) {
          return e4 in t3 ? Object.defineProperty(t3, e4, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e4] = r3, t3;
        }
        var yi = pi(pi({ autoStartLoad: true, startPosition: -1, defaultAudioCodec: void 0, debug: false, capLevelOnFPSDrop: false, capLevelToPlayerSize: false, ignoreDevicePixelRatio: false, initialLiveManifestSize: 1, maxBufferLength: 30, backBufferLength: 1 / 0, maxBufferSize: 6e7, maxBufferHole: 0.1, highBufferWatchdogPeriod: 2, nudgeOffset: 0.1, nudgeMaxRetry: 3, maxFragLookUpTolerance: 0.25, liveSyncDurationCount: 3, liveMaxLatencyDurationCount: 1 / 0, liveSyncDuration: void 0, liveMaxLatencyDuration: void 0, maxLiveSyncPlaybackRate: 1, liveDurationInfinity: false, liveBackBufferLength: null, maxMaxBufferLength: 600, enableWorker: true, enableSoftwareAES: true, manifestLoadingTimeOut: 1e4, manifestLoadingMaxRetry: 1, manifestLoadingRetryDelay: 1e3, manifestLoadingMaxRetryTimeout: 64e3, startLevel: void 0, levelLoadingTimeOut: 1e4, levelLoadingMaxRetry: 4, levelLoadingRetryDelay: 1e3, levelLoadingMaxRetryTimeout: 64e3, fragLoadingTimeOut: 2e4, fragLoadingMaxRetry: 6, fragLoadingRetryDelay: 1e3, fragLoadingMaxRetryTimeout: 64e3, startFragPrefetch: false, fpsDroppedMonitoringPeriod: 5e3, fpsDroppedMonitoringThreshold: 0.2, appendErrorMaxRetry: 3, loader: ri, fLoader: void 0, pLoader: void 0, xhrSetup: void 0, licenseXhrSetup: void 0, licenseResponseCallback: void 0, abrController: Ee, bufferController: Ge, capLevelController: Br, fpsController: Gr, stretchShortVideoTrack: false, maxAudioFramesDrift: 1, forceKeyFrameOnDiscontinuity: true, abrEwmaFastLive: 3, abrEwmaSlowLive: 9, abrEwmaFastVoD: 3, abrEwmaSlowVoD: 9, abrEwmaDefaultEstimate: 5e5, abrBandWidthFactor: 0.95, abrBandWidthUpFactor: 0.7, abrMaxWithRealBitrate: false, maxStarvationDelay: 4, maxLoadingDelay: 4, minAutoBitrate: 0, emeEnabled: false, widevineLicenseUrl: void 0, drmSystemOptions: {}, requestMediaKeySystemAccessFunc: Hr, testBandwidth: true, progressive: false, lowLatencyMode: true, cmcd: void 0, enableDateRangeMetadataCues: true, enableEmsgMetadataCues: true, enableID3MetadataCues: true }, { cueHandler: { newCue: function(t3, e4, r3, i3) {
          for (var n2, a3, s2, o2, l2, u2 = [], d3 = self.VTTCue || self.TextTrackCue, h2 = 0; h2 < i3.rows.length; h2++)
            if (s2 = true, o2 = 0, l2 = "", !(n2 = i3.rows[h2]).isEmpty()) {
              for (var c3 = 0; c3 < n2.chars.length; c3++)
                fi.test(n2.chars[c3].uchar) && s2 ? o2++ : (l2 += n2.chars[c3].uchar, s2 = false);
              n2.cueStartTime = e4, e4 === r3 && (r3 += 1e-4), o2 >= 16 ? o2-- : o2++;
              var f3 = pr(l2.trim()), g2 = Lr(e4, r3, f3);
              t3 && t3.cues && t3.cues.getCueById(g2) || ((a3 = new d3(e4, r3, f3)).id = g2, a3.line = h2 + 1, a3.align = "left", a3.position = 10 + Math.min(80, 10 * Math.floor(8 * o2 / 32)), u2.push(a3));
            }
          return t3 && u2.length && (u2.sort(function(t4, e5) {
            return "auto" === t4.line || "auto" === e5.line ? 0 : t4.line > 8 && e5.line > 8 ? e5.line - t4.line : t4.line - e5.line;
          }), u2.forEach(function(e5) {
            return N(t3, e5);
          })), u2;
        } }, enableWebVTT: true, enableIMSC1: true, enableCEA708Captions: true, captionsTextTrack1Label: "English", captionsTextTrack1LanguageCode: "en", captionsTextTrack2Label: "Spanish", captionsTextTrack2LanguageCode: "es", captionsTextTrack3Label: "Unknown CC", captionsTextTrack3LanguageCode: "", captionsTextTrack4Label: "Unknown CC", captionsTextTrack4LanguageCode: "", renderTextTracksNatively: true }), {}, { subtitleStreamController: Ce, subtitleTrackController: Fe, timelineController: Mr, audioStreamController: De, audioTrackController: ke, emeController: Vr, cmcdController: Jr });
        function Ei(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        var Ti = function() {
          function t3(e5) {
            void 0 === e5 && (e5 = {}), this.config = void 0, this.userConfig = void 0, this.coreComponents = void 0, this.networkControllers = void 0, this._emitter = new ue.EventEmitter(), this._autoLevelCapping = void 0, this.abrController = void 0, this.bufferController = void 0, this.capLevelController = void 0, this.latencyController = void 0, this.levelController = void 0, this.streamController = void 0, this.audioTrackController = void 0, this.subtitleTrackController = void 0, this.emeController = void 0, this.cmcdController = void 0, this._media = null, this.url = null;
            var r4 = this.config = function(t4, e6) {
              if ((e6.liveSyncDurationCount || e6.liveMaxLatencyDurationCount) && (e6.liveSyncDuration || e6.liveMaxLatencyDuration))
                throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
              if (void 0 !== e6.liveMaxLatencyDurationCount && (void 0 === e6.liveSyncDurationCount || e6.liveMaxLatencyDurationCount <= e6.liveSyncDurationCount))
                throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
              if (void 0 !== e6.liveMaxLatencyDuration && (void 0 === e6.liveSyncDuration || e6.liveMaxLatencyDuration <= e6.liveSyncDuration))
                throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
              return gi({}, t4, e6);
            }(t3.DefaultConfig, e5);
            this.userConfig = e5, (0, l.enableLogs)(r4.debug, "Hls instance"), this._autoLevelCapping = -1, r4.progressive && function(t4) {
              var e6 = t4.loader;
              e6 !== ci && e6 !== ri ? (l.logger.log("[config]: Custom loader detected, cannot enable progressive streaming"), t4.progressive = false) : function() {
                if (self.fetch && self.AbortController && self.ReadableStream && self.Request)
                  try {
                    return new self.ReadableStream({}), true;
                  } catch (t5) {
                  }
                return false;
              }() && (t4.loader = ci, t4.progressive = true, t4.enableSoftwareAES = true, l.logger.log("[config]: Progressive streaming enabled, using FetchLoader"));
            }(r4);
            var i4 = r4.abrController, n2 = r4.bufferController, a4 = r4.capLevelController, s2 = r4.fpsController, o2 = this.abrController = new i4(this), u2 = this.bufferController = new n2(this), d3 = this.capLevelController = new a4(this), h2 = new s2(this), c3 = new P(this), f3 = new F(this), g2 = new W(this), v2 = this.levelController = new ht(this), p2 = new ct(this), m2 = this.streamController = new ve(this, p2);
            d3.setStreamController(m2), h2.setStreamController(m2);
            var y2 = [c3, f3, v2, m2];
            this.networkControllers = y2;
            var E2 = [o2, u2, d3, h2, g2, p2];
            this.audioTrackController = this.createController(r4.audioTrackController, null, y2), this.createController(r4.audioStreamController, p2, y2), this.subtitleTrackController = this.createController(r4.subtitleTrackController, null, y2), this.createController(r4.subtitleStreamController, p2, y2), this.createController(r4.timelineController, null, E2), this.emeController = this.createController(r4.emeController, null, E2), this.cmcdController = this.createController(r4.cmcdController, null, E2), this.latencyController = this.createController(z, null, E2), this.coreComponents = E2;
          }
          t3.isSupported = function() {
            return function() {
              var t4 = te();
              if (!t4)
                return false;
              var e5 = ee(), r4 = t4 && "function" == typeof t4.isTypeSupported && t4.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'), i4 = !e5 || e5.prototype && "function" == typeof e5.prototype.appendBuffer && "function" == typeof e5.prototype.remove;
              return !!r4 && !!i4;
            }();
          };
          var e4, r3, i3, a3 = t3.prototype;
          return a3.createController = function(t4, e5, r4) {
            if (t4) {
              var i4 = e5 ? new t4(this, e5) : new t4(this);
              return r4 && r4.push(i4), i4;
            }
            return null;
          }, a3.on = function(t4, e5, r4) {
            void 0 === r4 && (r4 = this), this._emitter.on(t4, e5, r4);
          }, a3.once = function(t4, e5, r4) {
            void 0 === r4 && (r4 = this), this._emitter.once(t4, e5, r4);
          }, a3.removeAllListeners = function(t4) {
            this._emitter.removeAllListeners(t4);
          }, a3.off = function(t4, e5, r4, i4) {
            void 0 === r4 && (r4 = this), this._emitter.off(t4, e5, r4, i4);
          }, a3.listeners = function(t4) {
            return this._emitter.listeners(t4);
          }, a3.emit = function(t4, e5, r4) {
            return this._emitter.emit(t4, e5, r4);
          }, a3.trigger = function(t4, e5) {
            if (this.config.debug)
              return this.emit(t4, t4, e5);
            try {
              return this.emit(t4, t4, e5);
            } catch (e6) {
              l.logger.error("An internal error happened while handling event " + t4 + '. Error message: "' + e6.message + '". Here is a stacktrace:', e6), this.trigger(s.Events.ERROR, { type: o.ErrorTypes.OTHER_ERROR, details: o.ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: t4, error: e6 });
            }
            return false;
          }, a3.listenerCount = function(t4) {
            return this._emitter.listenerCount(t4);
          }, a3.destroy = function() {
            l.logger.log("destroy"), this.trigger(s.Events.DESTROYING, void 0), this.detachMedia(), this.removeAllListeners(), this._autoLevelCapping = -1, this.url = null, this.networkControllers.forEach(function(t4) {
              return t4.destroy();
            }), this.networkControllers.length = 0, this.coreComponents.forEach(function(t4) {
              return t4.destroy();
            }), this.coreComponents.length = 0;
          }, a3.attachMedia = function(t4) {
            l.logger.log("attachMedia"), this._media = t4, this.trigger(s.Events.MEDIA_ATTACHING, { media: t4 });
          }, a3.detachMedia = function() {
            l.logger.log("detachMedia"), this.trigger(s.Events.MEDIA_DETACHING, void 0), this._media = null;
          }, a3.loadSource = function(t4) {
            this.stopLoad();
            var e5 = this.media, r4 = this.url, i4 = this.url = n.buildAbsoluteURL(self.location.href, t4, { alwaysNormalize: true });
            l.logger.log("loadSource:" + i4), e5 && r4 && r4 !== i4 && this.bufferController.hasSourceTypes() && (this.detachMedia(), this.attachMedia(e5)), this.trigger(s.Events.MANIFEST_LOADING, { url: t4 });
          }, a3.startLoad = function(t4) {
            void 0 === t4 && (t4 = -1), l.logger.log("startLoad(" + t4 + ")"), this.networkControllers.forEach(function(e5) {
              e5.startLoad(t4);
            });
          }, a3.stopLoad = function() {
            l.logger.log("stopLoad"), this.networkControllers.forEach(function(t4) {
              t4.stopLoad();
            });
          }, a3.swapAudioCodec = function() {
            l.logger.log("swapAudioCodec"), this.streamController.swapAudioCodec();
          }, a3.recoverMediaError = function() {
            l.logger.log("recoverMediaError");
            var t4 = this._media;
            this.detachMedia(), t4 && this.attachMedia(t4);
          }, a3.removeLevel = function(t4, e5) {
            void 0 === e5 && (e5 = 0), this.levelController.removeLevel(t4, e5);
          }, e4 = t3, i3 = [{ key: "version", get: function() {
            return "1.2.9";
          } }, { key: "Events", get: function() {
            return s.Events;
          } }, { key: "ErrorTypes", get: function() {
            return o.ErrorTypes;
          } }, { key: "ErrorDetails", get: function() {
            return o.ErrorDetails;
          } }, { key: "DefaultConfig", get: function() {
            return t3.defaultConfig ? t3.defaultConfig : yi;
          }, set: function(e5) {
            t3.defaultConfig = e5;
          } }], (r3 = [{ key: "levels", get: function() {
            return this.levelController.levels || [];
          } }, { key: "currentLevel", get: function() {
            return this.streamController.currentLevel;
          }, set: function(t4) {
            l.logger.log("set currentLevel:" + t4), this.loadLevel = t4, this.abrController.clearTimer(), this.streamController.immediateLevelSwitch();
          } }, { key: "nextLevel", get: function() {
            return this.streamController.nextLevel;
          }, set: function(t4) {
            l.logger.log("set nextLevel:" + t4), this.levelController.manualLevel = t4, this.streamController.nextLevelSwitch();
          } }, { key: "loadLevel", get: function() {
            return this.levelController.level;
          }, set: function(t4) {
            l.logger.log("set loadLevel:" + t4), this.levelController.manualLevel = t4;
          } }, { key: "nextLoadLevel", get: function() {
            return this.levelController.nextLoadLevel;
          }, set: function(t4) {
            this.levelController.nextLoadLevel = t4;
          } }, { key: "firstLevel", get: function() {
            return Math.max(this.levelController.firstLevel, this.minAutoLevel);
          }, set: function(t4) {
            l.logger.log("set firstLevel:" + t4), this.levelController.firstLevel = t4;
          } }, { key: "startLevel", get: function() {
            return this.levelController.startLevel;
          }, set: function(t4) {
            l.logger.log("set startLevel:" + t4), -1 !== t4 && (t4 = Math.max(t4, this.minAutoLevel)), this.levelController.startLevel = t4;
          } }, { key: "capLevelToPlayerSize", get: function() {
            return this.config.capLevelToPlayerSize;
          }, set: function(t4) {
            var e5 = !!t4;
            e5 !== this.config.capLevelToPlayerSize && (e5 ? this.capLevelController.startCapping() : (this.capLevelController.stopCapping(), this.autoLevelCapping = -1, this.streamController.nextLevelSwitch()), this.config.capLevelToPlayerSize = e5);
          } }, { key: "autoLevelCapping", get: function() {
            return this._autoLevelCapping;
          }, set: function(t4) {
            this._autoLevelCapping !== t4 && (l.logger.log("set autoLevelCapping:" + t4), this._autoLevelCapping = t4);
          } }, { key: "bandwidthEstimate", get: function() {
            var t4 = this.abrController.bwEstimator;
            return t4 ? t4.getEstimate() : NaN;
          } }, { key: "autoLevelEnabled", get: function() {
            return -1 === this.levelController.manualLevel;
          } }, { key: "manualLevel", get: function() {
            return this.levelController.manualLevel;
          } }, { key: "minAutoLevel", get: function() {
            var t4 = this.levels, e5 = this.config.minAutoBitrate;
            if (!t4)
              return 0;
            for (var r4 = t4.length, i4 = 0; i4 < r4; i4++)
              if (t4[i4].maxBitrate >= e5)
                return i4;
            return 0;
          } }, { key: "maxAutoLevel", get: function() {
            var t4 = this.levels, e5 = this.autoLevelCapping;
            return -1 === e5 && t4 && t4.length ? t4.length - 1 : e5;
          } }, { key: "nextAutoLevel", get: function() {
            return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);
          }, set: function(t4) {
            this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, t4);
          } }, { key: "playingDate", get: function() {
            return this.streamController.currentProgramDateTime;
          } }, { key: "mainForwardBufferInfo", get: function() {
            return this.streamController.getMainFwdBufferInfo();
          } }, { key: "audioTracks", get: function() {
            var t4 = this.audioTrackController;
            return t4 ? t4.audioTracks : [];
          } }, { key: "audioTrack", get: function() {
            var t4 = this.audioTrackController;
            return t4 ? t4.audioTrack : -1;
          }, set: function(t4) {
            var e5 = this.audioTrackController;
            e5 && (e5.audioTrack = t4);
          } }, { key: "subtitleTracks", get: function() {
            var t4 = this.subtitleTrackController;
            return t4 ? t4.subtitleTracks : [];
          } }, { key: "subtitleTrack", get: function() {
            var t4 = this.subtitleTrackController;
            return t4 ? t4.subtitleTrack : -1;
          }, set: function(t4) {
            var e5 = this.subtitleTrackController;
            e5 && (e5.subtitleTrack = t4);
          } }, { key: "media", get: function() {
            return this._media;
          } }, { key: "subtitleDisplay", get: function() {
            var t4 = this.subtitleTrackController;
            return !!t4 && t4.subtitleDisplay;
          }, set: function(t4) {
            var e5 = this.subtitleTrackController;
            e5 && (e5.subtitleDisplay = t4);
          } }, { key: "lowLatencyMode", get: function() {
            return this.config.lowLatencyMode;
          }, set: function(t4) {
            this.config.lowLatencyMode = t4;
          } }, { key: "liveSyncPosition", get: function() {
            return this.latencyController.liveSyncPosition;
          } }, { key: "latency", get: function() {
            return this.latencyController.latency;
          } }, { key: "maxLatency", get: function() {
            return this.latencyController.maxLatency;
          } }, { key: "targetLatency", get: function() {
            return this.latencyController.targetLatency;
          } }, { key: "drift", get: function() {
            return this.latencyController.drift;
          } }, { key: "forceStartLoad", get: function() {
            return this.streamController.forceStartLoad;
          } }]) && Ei(e4.prototype, r3), i3 && Ei(e4, i3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }();
        Ti.defaultConfig = void 0;
      }, 923: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { BaseSegment: () => f2, ElementaryStreamTypes: () => i2, Fragment: () => g, Part: () => v });
        var i2, n = r2(965), a2 = r2(945), s = r2(93), o = r2(960), l = r2(408);
        function u(t3, e4) {
          t3.prototype = Object.create(e4.prototype), t3.prototype.constructor = t3, d2(t3, e4);
        }
        function d2(t3, e4) {
          return d2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e5) {
            return t4.__proto__ = e5, t4;
          }, d2(t3, e4);
        }
        function h(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        function c2(t3, e4, r3) {
          return e4 && h(t3.prototype, e4), r3 && h(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
        }
        !function(t3) {
          t3.AUDIO = "audio", t3.VIDEO = "video", t3.AUDIOVIDEO = "audiovideo";
        }(i2 || (i2 = {}));
        var f2 = function() {
          function t3(t4) {
            var e4;
            this._byteRange = null, this._url = null, this.baseurl = void 0, this.relurl = void 0, this.elementaryStreams = ((e4 = {})[i2.AUDIO] = null, e4[i2.VIDEO] = null, e4[i2.AUDIOVIDEO] = null, e4), this.baseurl = t4;
          }
          return t3.prototype.setByteRange = function(t4, e4) {
            var r3 = t4.split("@", 2), i3 = [];
            1 === r3.length ? i3[0] = e4 ? e4.byteRangeEndOffset : 0 : i3[0] = parseInt(r3[1]), i3[1] = parseInt(r3[0]) + i3[0], this._byteRange = i3;
          }, c2(t3, [{ key: "byteRange", get: function() {
            return this._byteRange ? this._byteRange : [];
          } }, { key: "byteRangeStartOffset", get: function() {
            return this.byteRange[0];
          } }, { key: "byteRangeEndOffset", get: function() {
            return this.byteRange[1];
          } }, { key: "url", get: function() {
            return !this._url && this.baseurl && this.relurl && (this._url = (0, a2.buildAbsoluteURL)(this.baseurl, this.relurl, { alwaysNormalize: true })), this._url || "";
          }, set: function(t4) {
            this._url = t4;
          } }]), t3;
        }(), g = function(t3) {
          function e4(e5, r4) {
            var i3;
            return (i3 = t3.call(this, r4) || this)._decryptdata = null, i3.rawProgramDateTime = null, i3.programDateTime = null, i3.tagList = [], i3.duration = 0, i3.sn = 0, i3.levelkey = void 0, i3.type = void 0, i3.loader = null, i3.level = -1, i3.cc = 0, i3.startPTS = void 0, i3.endPTS = void 0, i3.appendedPTS = void 0, i3.startDTS = void 0, i3.endDTS = void 0, i3.start = 0, i3.deltaPTS = void 0, i3.maxStartPTS = void 0, i3.minEndPTS = void 0, i3.stats = new l.LoadStats(), i3.urlId = 0, i3.data = void 0, i3.bitrateTest = false, i3.title = null, i3.initSegment = null, i3.type = e5, i3;
          }
          u(e4, t3);
          var r3 = e4.prototype;
          return r3.createInitializationVector = function(t4) {
            for (var e5 = new Uint8Array(16), r4 = 12; r4 < 16; r4++)
              e5[r4] = t4 >> 8 * (15 - r4) & 255;
            return e5;
          }, r3.setDecryptDataFromLevelKey = function(t4, e5) {
            var r4 = t4;
            return "AES-128" === (null == t4 ? void 0 : t4.method) && t4.uri && !t4.iv && ((r4 = o.LevelKey.fromURI(t4.uri)).method = t4.method, r4.iv = this.createInitializationVector(e5), r4.keyFormat = "identity"), r4;
          }, r3.setElementaryStreamInfo = function(t4, e5, r4, i3, n2, a3) {
            void 0 === a3 && (a3 = false);
            var s2 = this.elementaryStreams, o2 = s2[t4];
            o2 ? (o2.startPTS = Math.min(o2.startPTS, e5), o2.endPTS = Math.max(o2.endPTS, r4), o2.startDTS = Math.min(o2.startDTS, i3), o2.endDTS = Math.max(o2.endDTS, n2)) : s2[t4] = { startPTS: e5, endPTS: r4, startDTS: i3, endDTS: n2, partial: a3 };
          }, r3.clearElementaryStreamInfo = function() {
            var t4 = this.elementaryStreams;
            t4[i2.AUDIO] = null, t4[i2.VIDEO] = null, t4[i2.AUDIOVIDEO] = null;
          }, c2(e4, [{ key: "decryptdata", get: function() {
            if (!this.levelkey && !this._decryptdata)
              return null;
            if (!this._decryptdata && this.levelkey) {
              var t4 = this.sn;
              "number" != typeof t4 && (this.levelkey && "AES-128" === this.levelkey.method && !this.levelkey.iv && s.logger.warn('missing IV for initialization segment with method="' + this.levelkey.method + '" - compliance issue'), t4 = 0), this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, t4);
            }
            return this._decryptdata;
          } }, { key: "end", get: function() {
            return this.start + this.duration;
          } }, { key: "endProgramDateTime", get: function() {
            if (null === this.programDateTime)
              return null;
            if (!(0, n.isFiniteNumber)(this.programDateTime))
              return null;
            var t4 = (0, n.isFiniteNumber)(this.duration) ? this.duration : 0;
            return this.programDateTime + 1e3 * t4;
          } }, { key: "encrypted", get: function() {
            var t4;
            return !(null === (t4 = this.decryptdata) || void 0 === t4 || !t4.keyFormat || !this.decryptdata.uri);
          } }]), e4;
        }(f2), v = function(t3) {
          function e4(e5, r3, i3, n2, a3) {
            var s2;
            (s2 = t3.call(this, i3) || this).fragOffset = 0, s2.duration = 0, s2.gap = false, s2.independent = false, s2.relurl = void 0, s2.fragment = void 0, s2.index = void 0, s2.stats = new l.LoadStats(), s2.duration = e5.decimalFloatingPoint("DURATION"), s2.gap = e5.bool("GAP"), s2.independent = e5.bool("INDEPENDENT"), s2.relurl = e5.enumeratedString("URI"), s2.fragment = r3, s2.index = n2;
            var o2 = e5.enumeratedString("BYTERANGE");
            return o2 && s2.setByteRange(o2, a3), a3 && (s2.fragOffset = a3.fragOffset + a3.duration), s2;
          }
          return u(e4, t3), c2(e4, [{ key: "start", get: function() {
            return this.fragment.start + this.fragOffset;
          } }, { key: "end", get: function() {
            return this.start + this.duration;
          } }, { key: "loaded", get: function() {
            var t4 = this.elementaryStreams;
            return !!(t4.audio || t4.video || t4.audiovideo);
          } }]), e4;
        }(f2);
      }, 960: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { LevelKey: () => a2 });
        var i2 = r2(945);
        function n(t3, e4) {
          for (var r3 = 0; r3 < e4.length; r3++) {
            var i3 = e4[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
          }
        }
        var a2 = function() {
          function t3(t4, e5) {
            this._uri = null, this.method = null, this.keyFormat = null, this.keyFormatVersions = null, this.keyID = null, this.key = null, this.iv = null, this._uri = e5 ? (0, i2.buildAbsoluteURL)(t4, e5, { alwaysNormalize: true }) : t4;
          }
          var e4, r3;
          return t3.fromURL = function(e5, r4) {
            return new t3(e5, r4);
          }, t3.fromURI = function(e5) {
            return new t3(e5);
          }, e4 = t3, (r3 = [{ key: "uri", get: function() {
            return this._uri;
          } }]) && n(e4.prototype, r3), Object.defineProperty(e4, "prototype", { writable: false }), t3;
        }();
      }, 408: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { LoadStats: () => i2 });
        var i2 = function() {
          this.aborted = false, this.loaded = 0, this.retry = 0, this.total = 0, this.chunkCount = 0, this.bwEstimate = 0, this.loading = { start: 0, first: 0, end: 0 }, this.parsing = { start: 0, end: 0 }, this.buffering = { start: 0, first: 0, end: 0 };
        };
      }, 965: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { MAX_SAFE_INTEGER: () => n, isFiniteNumber: () => i2 });
        var i2 = Number.isFinite || function(t3) {
          return "number" == typeof t3 && isFinite(t3);
        }, n = Number.MAX_SAFE_INTEGER || 9007199254740991;
      }, 524: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { default: () => p, flushTextTrackMetadataCueSamples: () => y, flushTextTrackUserdataCueSamples: () => E, normalizePts: () => m });
        var i2 = r2(965);
        const n = function() {
          function t3() {
          }
          return t3.getSilentFrame = function(t4, e4) {
            if ("mp4a.40.2" === t4) {
              if (1 === e4)
                return new Uint8Array([0, 200, 0, 128, 35, 128]);
              if (2 === e4)
                return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
              if (3 === e4)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
              if (4 === e4)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
              if (5 === e4)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
              if (6 === e4)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
            } else {
              if (1 === e4)
                return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              if (2 === e4)
                return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              if (3 === e4)
                return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
            }
          }, t3;
        }();
        var a2 = Math.pow(2, 32) - 1, s = function() {
          function t3() {
          }
          return t3.init = function() {
            var e4;
            for (e4 in t3.types = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], ".mp3": [], mvex: [], mvhd: [], pasp: [], sdtp: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [], smhd: [] }, t3.types)
              t3.types.hasOwnProperty(e4) && (t3.types[e4] = [e4.charCodeAt(0), e4.charCodeAt(1), e4.charCodeAt(2), e4.charCodeAt(3)]);
            var r3 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), i3 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
            t3.HDLR_TYPES = { video: r3, audio: i3 };
            var n2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), a3 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
            t3.STTS = t3.STSC = t3.STCO = a3, t3.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), t3.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), t3.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), t3.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
            var s2 = new Uint8Array([105, 115, 111, 109]), o2 = new Uint8Array([97, 118, 99, 49]), l2 = new Uint8Array([0, 0, 0, 1]);
            t3.FTYP = t3.box(t3.types.ftyp, s2, l2, s2, o2), t3.DINF = t3.box(t3.types.dinf, t3.box(t3.types.dref, n2));
          }, t3.box = function(t4) {
            for (var e4 = 8, r3 = arguments.length, i3 = new Array(r3 > 1 ? r3 - 1 : 0), n2 = 1; n2 < r3; n2++)
              i3[n2 - 1] = arguments[n2];
            for (var a3 = i3.length, s2 = a3; a3--; )
              e4 += i3[a3].byteLength;
            var o2 = new Uint8Array(e4);
            for (o2[0] = e4 >> 24 & 255, o2[1] = e4 >> 16 & 255, o2[2] = e4 >> 8 & 255, o2[3] = 255 & e4, o2.set(t4, 4), a3 = 0, e4 = 8; a3 < s2; a3++)
              o2.set(i3[a3], e4), e4 += i3[a3].byteLength;
            return o2;
          }, t3.hdlr = function(e4) {
            return t3.box(t3.types.hdlr, t3.HDLR_TYPES[e4]);
          }, t3.mdat = function(e4) {
            return t3.box(t3.types.mdat, e4);
          }, t3.mdhd = function(e4, r3) {
            r3 *= e4;
            var i3 = Math.floor(r3 / (a2 + 1)), n2 = Math.floor(r3 % (a2 + 1));
            return t3.box(t3.types.mdhd, new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e4 >> 24 & 255, e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4, i3 >> 24, i3 >> 16 & 255, i3 >> 8 & 255, 255 & i3, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2, 85, 196, 0, 0]));
          }, t3.mdia = function(e4) {
            return t3.box(t3.types.mdia, t3.mdhd(e4.timescale, e4.duration), t3.hdlr(e4.type), t3.minf(e4));
          }, t3.mfhd = function(e4) {
            return t3.box(t3.types.mfhd, new Uint8Array([0, 0, 0, 0, e4 >> 24, e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4]));
          }, t3.minf = function(e4) {
            return "audio" === e4.type ? t3.box(t3.types.minf, t3.box(t3.types.smhd, t3.SMHD), t3.DINF, t3.stbl(e4)) : t3.box(t3.types.minf, t3.box(t3.types.vmhd, t3.VMHD), t3.DINF, t3.stbl(e4));
          }, t3.moof = function(e4, r3, i3) {
            return t3.box(t3.types.moof, t3.mfhd(e4), t3.traf(i3, r3));
          }, t3.moov = function(e4) {
            for (var r3 = e4.length, i3 = []; r3--; )
              i3[r3] = t3.trak(e4[r3]);
            return t3.box.apply(null, [t3.types.moov, t3.mvhd(e4[0].timescale, e4[0].duration)].concat(i3).concat(t3.mvex(e4)));
          }, t3.mvex = function(e4) {
            for (var r3 = e4.length, i3 = []; r3--; )
              i3[r3] = t3.trex(e4[r3]);
            return t3.box.apply(null, [t3.types.mvex].concat(i3));
          }, t3.mvhd = function(e4, r3) {
            r3 *= e4;
            var i3 = Math.floor(r3 / (a2 + 1)), n2 = Math.floor(r3 % (a2 + 1)), s2 = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e4 >> 24 & 255, e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4, i3 >> 24, i3 >> 16 & 255, i3 >> 8 & 255, 255 & i3, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
            return t3.box(t3.types.mvhd, s2);
          }, t3.sdtp = function(e4) {
            var r3, i3, n2 = e4.samples || [], a3 = new Uint8Array(4 + n2.length);
            for (r3 = 0; r3 < n2.length; r3++)
              i3 = n2[r3].flags, a3[r3 + 4] = i3.dependsOn << 4 | i3.isDependedOn << 2 | i3.hasRedundancy;
            return t3.box(t3.types.sdtp, a3);
          }, t3.stbl = function(e4) {
            return t3.box(t3.types.stbl, t3.stsd(e4), t3.box(t3.types.stts, t3.STTS), t3.box(t3.types.stsc, t3.STSC), t3.box(t3.types.stsz, t3.STSZ), t3.box(t3.types.stco, t3.STCO));
          }, t3.avc1 = function(e4) {
            var r3, i3, n2, a3 = [], s2 = [];
            for (r3 = 0; r3 < e4.sps.length; r3++)
              n2 = (i3 = e4.sps[r3]).byteLength, a3.push(n2 >>> 8 & 255), a3.push(255 & n2), a3 = a3.concat(Array.prototype.slice.call(i3));
            for (r3 = 0; r3 < e4.pps.length; r3++)
              n2 = (i3 = e4.pps[r3]).byteLength, s2.push(n2 >>> 8 & 255), s2.push(255 & n2), s2 = s2.concat(Array.prototype.slice.call(i3));
            var o2 = t3.box(t3.types.avcC, new Uint8Array([1, a3[3], a3[4], a3[5], 255, 224 | e4.sps.length].concat(a3).concat([e4.pps.length]).concat(s2))), l2 = e4.width, u2 = e4.height, d3 = e4.pixelRatio[0], h2 = e4.pixelRatio[1];
            return t3.box(t3.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l2 >> 8 & 255, 255 & l2, u2 >> 8 & 255, 255 & u2, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 18, 100, 97, 105, 108, 121, 109, 111, 116, 105, 111, 110, 47, 104, 108, 115, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), o2, t3.box(t3.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])), t3.box(t3.types.pasp, new Uint8Array([d3 >> 24, d3 >> 16 & 255, d3 >> 8 & 255, 255 & d3, h2 >> 24, h2 >> 16 & 255, h2 >> 8 & 255, 255 & h2])));
          }, t3.esds = function(t4) {
            var e4 = t4.config.length;
            return new Uint8Array([0, 0, 0, 0, 3, 23 + e4, 0, 1, 0, 4, 15 + e4, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([e4]).concat(t4.config).concat([6, 1, 2]));
          }, t3.mp4a = function(e4) {
            var r3 = e4.samplerate;
            return t3.box(t3.types.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, e4.channelCount, 0, 16, 0, 0, 0, 0, r3 >> 8 & 255, 255 & r3, 0, 0]), t3.box(t3.types.esds, t3.esds(e4)));
          }, t3.mp3 = function(e4) {
            var r3 = e4.samplerate;
            return t3.box(t3.types[".mp3"], new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, e4.channelCount, 0, 16, 0, 0, 0, 0, r3 >> 8 & 255, 255 & r3, 0, 0]));
          }, t3.stsd = function(e4) {
            return "audio" === e4.type ? "mp3" === e4.segmentCodec && "mp3" === e4.codec ? t3.box(t3.types.stsd, t3.STSD, t3.mp3(e4)) : t3.box(t3.types.stsd, t3.STSD, t3.mp4a(e4)) : t3.box(t3.types.stsd, t3.STSD, t3.avc1(e4));
          }, t3.tkhd = function(e4) {
            var r3 = e4.id, i3 = e4.duration * e4.timescale, n2 = e4.width, s2 = e4.height, o2 = Math.floor(i3 / (a2 + 1)), l2 = Math.floor(i3 % (a2 + 1));
            return t3.box(t3.types.tkhd, new Uint8Array([1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, r3 >> 24 & 255, r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3, 0, 0, 0, 0, o2 >> 24, o2 >> 16 & 255, o2 >> 8 & 255, 255 & o2, l2 >> 24, l2 >> 16 & 255, l2 >> 8 & 255, 255 & l2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, n2 >> 8 & 255, 255 & n2, 0, 0, s2 >> 8 & 255, 255 & s2, 0, 0]));
          }, t3.traf = function(e4, r3) {
            var i3 = t3.sdtp(e4), n2 = e4.id, s2 = Math.floor(r3 / (a2 + 1)), o2 = Math.floor(r3 % (a2 + 1));
            return t3.box(t3.types.traf, t3.box(t3.types.tfhd, new Uint8Array([0, 0, 0, 0, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2])), t3.box(t3.types.tfdt, new Uint8Array([1, 0, 0, 0, s2 >> 24, s2 >> 16 & 255, s2 >> 8 & 255, 255 & s2, o2 >> 24, o2 >> 16 & 255, o2 >> 8 & 255, 255 & o2])), t3.trun(e4, i3.length + 16 + 20 + 8 + 16 + 8 + 8), i3);
          }, t3.trak = function(e4) {
            return e4.duration = e4.duration || 4294967295, t3.box(t3.types.trak, t3.tkhd(e4), t3.mdia(e4));
          }, t3.trex = function(e4) {
            var r3 = e4.id;
            return t3.box(t3.types.trex, new Uint8Array([0, 0, 0, 0, r3 >> 24, r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]));
          }, t3.trun = function(e4, r3) {
            var i3, n2, a3, s2, o2, l2, u2 = e4.samples || [], d3 = u2.length, h2 = 12 + 16 * d3, c3 = new Uint8Array(h2);
            for (r3 += 8 + h2, c3.set(["video" === e4.type ? 1 : 0, 0, 15, 1, d3 >>> 24 & 255, d3 >>> 16 & 255, d3 >>> 8 & 255, 255 & d3, r3 >>> 24 & 255, r3 >>> 16 & 255, r3 >>> 8 & 255, 255 & r3], 0), i3 = 0; i3 < d3; i3++)
              a3 = (n2 = u2[i3]).duration, s2 = n2.size, o2 = n2.flags, l2 = n2.cts, c3.set([a3 >>> 24 & 255, a3 >>> 16 & 255, a3 >>> 8 & 255, 255 & a3, s2 >>> 24 & 255, s2 >>> 16 & 255, s2 >>> 8 & 255, 255 & s2, o2.isLeading << 2 | o2.dependsOn, o2.isDependedOn << 6 | o2.hasRedundancy << 4 | o2.paddingValue << 1 | o2.isNonSync, 61440 & o2.degradPrio, 15 & o2.degradPrio, l2 >>> 24 & 255, l2 >>> 16 & 255, l2 >>> 8 & 255, 255 & l2], 12 + 16 * i3);
            return t3.box(t3.types.trun, c3);
          }, t3.initSegment = function(e4) {
            t3.types || t3.init();
            var r3 = t3.moov(e4), i3 = new Uint8Array(t3.FTYP.byteLength + r3.byteLength);
            return i3.set(t3.FTYP), i3.set(r3, t3.FTYP.byteLength), i3;
          }, t3;
        }();
        s.types = void 0, s.HDLR_TYPES = void 0, s.STTS = void 0, s.STSC = void 0, s.STCO = void 0, s.STSZ = void 0, s.VMHD = void 0, s.SMHD = void 0, s.STSD = void 0, s.FTYP = void 0, s.DINF = void 0;
        const o = s;
        var l = r2(851), u = r2(973), d2 = r2(93), h = r2(308), c2 = r2(673);
        function f2() {
          return f2 = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = arguments[e4];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, f2.apply(this, arguments);
        }
        var g = null, v = null, p = function() {
          function t3(t4, e5, r3, i3) {
            if (void 0 === i3 && (i3 = ""), this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.ISGenerated = false, this._initPTS = void 0, this._initDTS = void 0, this.nextAvcDts = null, this.nextAudioPts = null, this.videoSampleDuration = null, this.isAudioContiguous = false, this.isVideoContiguous = false, this.observer = t4, this.config = e5, this.typeSupported = r3, this.ISGenerated = false, null === g) {
              var n2 = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
              g = n2 ? parseInt(n2[1]) : 0;
            }
            if (null === v) {
              var a3 = navigator.userAgent.match(/Safari\/(\d+)/i);
              v = a3 ? parseInt(a3[1]) : 0;
            }
          }
          var e4 = t3.prototype;
          return e4.destroy = function() {
          }, e4.resetTimeStamp = function(t4) {
            d2.logger.log("[mp4-remuxer]: initPTS & initDTS reset"), this._initPTS = this._initDTS = t4;
          }, e4.resetNextTimestamp = function() {
            d2.logger.log("[mp4-remuxer]: reset next timestamp"), this.isVideoContiguous = false, this.isAudioContiguous = false;
          }, e4.resetInitSegment = function() {
            d2.logger.log("[mp4-remuxer]: ISGenerated flag reset"), this.ISGenerated = false;
          }, e4.getVideoStartPts = function(t4) {
            var e5 = false, r3 = t4.reduce(function(t5, r4) {
              var i3 = r4.pts - t5;
              return i3 < -4294967296 ? (e5 = true, m(t5, r4.pts)) : i3 > 0 ? t5 : r4.pts;
            }, t4[0].pts);
            return e5 && d2.logger.debug("PTS rollover detected"), r3;
          }, e4.remux = function(t4, e5, r3, i3, n2, a3, s2, o2) {
            var l2, u2, c3, f3, g2, v2, p2 = n2, T2 = n2, S2 = t4.pid > -1, b2 = e5.pid > -1, L = e5.samples.length, D = t4.samples.length > 0, A = s2 && L > 0 || L > 1;
            if ((!S2 || D) && (!b2 || A) || this.ISGenerated || s2) {
              this.ISGenerated || (c3 = this.generateIS(t4, e5, n2));
              var R, k2 = this.isVideoContiguous, I = -1;
              if (A && (I = function(t5) {
                for (var e6 = 0; e6 < t5.length; e6++)
                  if (t5[e6].key)
                    return e6;
                return -1;
              }(e5.samples), !k2 && this.config.forceKeyFrameOnDiscontinuity))
                if (v2 = true, I > 0) {
                  d2.logger.warn("[mp4-remuxer]: Dropped " + I + " out of " + L + " video samples due to a missing keyframe");
                  var _ = this.getVideoStartPts(e5.samples);
                  e5.samples = e5.samples.slice(I), e5.dropped += I, R = T2 += (e5.samples[0].pts - _) / e5.inputTimeScale;
                } else
                  -1 === I && (d2.logger.warn("[mp4-remuxer]: No keyframe found out of " + L + " video samples"), v2 = false);
              if (this.ISGenerated) {
                if (D && A) {
                  var C = this.getVideoStartPts(e5.samples), w = (m(t4.samples[0].pts, C) - C) / e5.inputTimeScale;
                  p2 += Math.max(0, w), T2 += Math.max(0, -w);
                }
                if (D) {
                  if (t4.samplerate || (d2.logger.warn("[mp4-remuxer]: regenerate InitSegment as audio detected"), c3 = this.generateIS(t4, e5, n2)), u2 = this.remuxAudio(t4, p2, this.isAudioContiguous, a3, b2 || A || o2 === h.PlaylistLevelType.AUDIO ? T2 : void 0), A) {
                    var O = u2 ? u2.endPTS - u2.startPTS : 0;
                    e5.inputTimeScale || (d2.logger.warn("[mp4-remuxer]: regenerate InitSegment as video detected"), c3 = this.generateIS(t4, e5, n2)), l2 = this.remuxVideo(e5, T2, k2, O);
                  }
                } else
                  A && (l2 = this.remuxVideo(e5, T2, k2, 0));
                l2 && (l2.firstKeyFrame = I, l2.independent = -1 !== I, l2.firstKeyFramePTS = R);
              }
            }
            return this.ISGenerated && (r3.samples.length && (g2 = y(r3, n2, this._initPTS, this._initDTS)), i3.samples.length && (f3 = E(i3, n2, this._initPTS))), { audio: u2, video: l2, initSegment: c3, independent: v2, text: f3, id3: g2 };
          }, e4.generateIS = function(t4, e5, r3) {
            var n2, a3, s2, l2 = t4.samples, u2 = e5.samples, d3 = this.typeSupported, h2 = {}, c3 = !(0, i2.isFiniteNumber)(this._initPTS), f3 = "audio/mp4";
            if (c3 && (n2 = a3 = 1 / 0), t4.config && l2.length && (t4.timescale = t4.samplerate, "mp3" === t4.segmentCodec && (d3.mpeg ? (f3 = "audio/mpeg", t4.codec = "") : d3.mp3 && (t4.codec = "mp3")), h2.audio = { id: "audio", container: f3, codec: t4.codec, initSegment: "mp3" === t4.segmentCodec && d3.mpeg ? new Uint8Array(0) : o.initSegment([t4]), metadata: { channelCount: t4.channelCount } }, c3 && (s2 = t4.inputTimeScale, n2 = a3 = l2[0].pts - Math.round(s2 * r3))), e5.sps && e5.pps && u2.length && (e5.timescale = e5.inputTimeScale, h2.video = { id: "main", container: "video/mp4", codec: e5.codec, initSegment: o.initSegment([e5]), metadata: { width: e5.width, height: e5.height } }, c3)) {
              s2 = e5.inputTimeScale;
              var g2 = this.getVideoStartPts(u2), v2 = Math.round(s2 * r3);
              a3 = Math.min(a3, m(u2[0].dts, g2) - v2), n2 = Math.min(n2, g2 - v2);
            }
            if (Object.keys(h2).length)
              return this.ISGenerated = true, c3 && (this._initPTS = n2, this._initDTS = a3), { tracks: h2, initPTS: n2, timescale: s2 };
          }, e4.remuxVideo = function(t4, e5, r3, i3) {
            var n2, a3, s2 = t4.inputTimeScale, h2 = t4.samples, p2 = [], y2 = h2.length, E2 = this._initPTS, S2 = this.nextAvcDts, b2 = 8, L = this.videoSampleDuration, D = Number.POSITIVE_INFINITY, A = Number.NEGATIVE_INFINITY, R = false;
            r3 && null !== S2 || (S2 = e5 * s2 - (h2[0].pts - m(h2[0].dts, h2[0].pts)));
            for (var k2 = 0; k2 < y2; k2++) {
              var I = h2[k2];
              I.pts = m(I.pts - E2, S2), I.dts = m(I.dts - E2, S2), I.dts < h2[k2 > 0 ? k2 - 1 : k2].dts && (R = true);
            }
            R && h2.sort(function(t5, e6) {
              var r4 = t5.dts - e6.dts, i4 = t5.pts - e6.pts;
              return r4 || i4;
            }), n2 = h2[0].dts;
            var _ = h2[h2.length - 1].dts - n2, C = _ ? Math.round(_ / (y2 - 1)) : L || t4.inputTimeScale / 30;
            if (r3) {
              var w = n2 - S2, O = w > C, x = w < -1;
              if ((O || x) && (O ? d2.logger.warn("AVC: " + (0, c2.toMsFromMpegTsClock)(w, true) + " ms (" + w + "dts) hole between fragments detected, filling it") : d2.logger.warn("AVC: " + (0, c2.toMsFromMpegTsClock)(-w, true) + " ms (" + w + "dts) overlapping between fragments detected"), !x || S2 > h2[0].pts)) {
                n2 = S2;
                var P = h2[0].pts - w;
                h2[0].dts = n2, h2[0].pts = P, d2.logger.log("Video: First PTS/DTS adjusted: " + (0, c2.toMsFromMpegTsClock)(P, true) + "/" + (0, c2.toMsFromMpegTsClock)(n2, true) + ", delta: " + (0, c2.toMsFromMpegTsClock)(w, true) + " ms");
              }
            }
            n2 = Math.max(0, n2);
            for (var F = 0, M = 0, N = 0; N < y2; N++) {
              for (var U = h2[N], B = U.units, G = B.length, K = 0, H = 0; H < G; H++)
                K += B[H].data.length;
              M += K, F += G, U.length = K, U.dts = Math.max(U.dts, n2), D = Math.min(U.pts, D), A = Math.max(U.pts, A);
            }
            a3 = h2[y2 - 1].dts;
            var j, V = M + 4 * F + 8;
            try {
              j = new Uint8Array(V);
            } catch (t5) {
              return void this.observer.emit(l.Events.ERROR, l.Events.ERROR, { type: u.ErrorTypes.MUX_ERROR, details: u.ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: V, reason: "fail allocating video mdat " + V });
            }
            var W = new DataView(j.buffer);
            W.setUint32(0, V), j.set(o.types.mdat, 4);
            for (var Y = false, q = Number.POSITIVE_INFINITY, z = Number.POSITIVE_INFINITY, X = Number.NEGATIVE_INFINITY, Q = Number.NEGATIVE_INFINITY, $ = 0; $ < y2; $++) {
              for (var Z = h2[$], J = Z.units, tt = 0, et = 0, rt = J.length; et < rt; et++) {
                var it = J[et], nt = it.data, at = it.data.byteLength;
                W.setUint32(b2, at), b2 += 4, j.set(nt, b2), b2 += at, tt += 4 + at;
              }
              var st = void 0;
              if ($ < y2 - 1)
                L = h2[$ + 1].dts - Z.dts, st = h2[$ + 1].pts - Z.pts;
              else {
                var ot = this.config, lt = $ > 0 ? Z.dts - h2[$ - 1].dts : C;
                if (st = $ > 0 ? Z.pts - h2[$ - 1].pts : C, ot.stretchShortVideoTrack && null !== this.nextAudioPts) {
                  var ut = Math.floor(ot.maxBufferHole * s2), dt = (i3 ? D + i3 * s2 : this.nextAudioPts) - Z.pts;
                  dt > ut ? ((L = dt - lt) < 0 ? L = lt : Y = true, d2.logger.log("[mp4-remuxer]: It is approximately " + dt / 90 + " ms to the next segment; using duration " + L / 90 + " ms for the last video frame.")) : L = lt;
                } else
                  L = lt;
              }
              var ht = Math.round(Z.pts - Z.dts);
              q = Math.min(q, L), X = Math.max(X, L), z = Math.min(z, st), Q = Math.max(Q, st), p2.push(new T(Z.key, L, tt, ht));
            }
            if (p2.length) {
              if (g) {
                if (g < 70) {
                  var ct = p2[0].flags;
                  ct.dependsOn = 2, ct.isNonSync = 0;
                }
              } else if (v && Q - z < X - q && C / X < 0.025 && 0 === p2[0].cts) {
                d2.logger.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");
                for (var ft = n2, gt = 0, vt = p2.length; gt < vt; gt++) {
                  var pt = ft + p2[gt].duration, mt = ft + p2[gt].cts;
                  if (gt < vt - 1) {
                    var yt = pt + p2[gt + 1].cts;
                    p2[gt].duration = yt - mt;
                  } else
                    p2[gt].duration = gt ? p2[gt - 1].duration : C;
                  p2[gt].cts = 0, ft = pt;
                }
              }
            }
            L = Y || !L ? C : L, this.nextAvcDts = S2 = a3 + L, this.videoSampleDuration = L, this.isVideoContiguous = true;
            var Et = { data1: o.moof(t4.sequenceNumber++, n2, f2({}, t4, { samples: p2 })), data2: j, startPTS: D / s2, endPTS: (A + L) / s2, startDTS: n2 / s2, endDTS: S2 / s2, type: "video", hasAudio: false, hasVideo: true, nb: p2.length, dropped: t4.dropped };
            return t4.samples = [], t4.dropped = 0, Et;
          }, e4.remuxAudio = function(t4, e5, r3, i3, a3) {
            var s2 = t4.inputTimeScale, h2 = s2 / (t4.samplerate ? t4.samplerate : s2), c3 = "aac" === t4.segmentCodec ? 1024 : 1152, g2 = c3 * h2, v2 = this._initPTS, p2 = "mp3" === t4.segmentCodec && this.typeSupported.mpeg, y2 = [], E2 = void 0 !== a3, S2 = t4.samples, b2 = p2 ? 0 : 8, L = this.nextAudioPts || -1, D = e5 * s2;
            if (this.isAudioContiguous = r3 = r3 || S2.length && L > 0 && (i3 && Math.abs(D - L) < 9e3 || Math.abs(m(S2[0].pts - v2, D) - L) < 20 * g2), S2.forEach(function(t5) {
              t5.pts = m(t5.pts - v2, D);
            }), !r3 || L < 0) {
              if (S2 = S2.filter(function(t5) {
                return t5.pts >= 0;
              }), !S2.length)
                return;
              L = 0 === a3 ? 0 : i3 && !E2 ? Math.max(0, D) : S2[0].pts;
            }
            if ("aac" === t4.segmentCodec)
              for (var A = this.config.maxAudioFramesDrift, R = 0, k2 = L; R < S2.length; R++) {
                var I = S2[R], _ = I.pts, C = _ - k2, w = Math.abs(1e3 * C / s2);
                if (C <= -A * g2 && E2)
                  0 === R && (d2.logger.warn("Audio frame @ " + (_ / s2).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1e3 * C / s2) + " ms."), this.nextAudioPts = L = k2 = _);
                else if (C >= A * g2 && w < 1e4 && E2) {
                  var O = Math.round(C / g2);
                  (k2 = _ - O * g2) < 0 && (O--, k2 += g2), 0 === R && (this.nextAudioPts = L = k2), d2.logger.warn("[mp4-remuxer]: Injecting " + O + " audio frame @ " + (k2 / s2).toFixed(3) + "s due to " + Math.round(1e3 * C / s2) + " ms gap.");
                  for (var x = 0; x < O; x++) {
                    var P = Math.max(k2, 0), F = n.getSilentFrame(t4.manifestCodec || t4.codec, t4.channelCount);
                    F || (d2.logger.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead."), F = I.unit.subarray()), S2.splice(R, 0, { unit: F, pts: P }), k2 += g2, R++;
                  }
                }
                I.pts = k2, k2 += g2;
              }
            for (var M, N = null, U = null, B = 0, G = S2.length; G--; )
              B += S2[G].unit.byteLength;
            for (var K = 0, H = S2.length; K < H; K++) {
              var j = S2[K], V = j.unit, W = j.pts;
              if (null !== U)
                y2[K - 1].duration = Math.round((W - U) / h2);
              else {
                if (r3 && "aac" === t4.segmentCodec && (W = L), N = W, !(B > 0))
                  return;
                B += b2;
                try {
                  M = new Uint8Array(B);
                } catch (t5) {
                  return void this.observer.emit(l.Events.ERROR, l.Events.ERROR, { type: u.ErrorTypes.MUX_ERROR, details: u.ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: B, reason: "fail allocating audio mdat " + B });
                }
                p2 || (new DataView(M.buffer).setUint32(0, B), M.set(o.types.mdat, 4));
              }
              M.set(V, b2);
              var Y = V.byteLength;
              b2 += Y, y2.push(new T(true, c3, Y, 0)), U = W;
            }
            var q = y2.length;
            if (q) {
              var z = y2[y2.length - 1];
              this.nextAudioPts = L = U + h2 * z.duration;
              var X = p2 ? new Uint8Array(0) : o.moof(t4.sequenceNumber++, N / h2, f2({}, t4, { samples: y2 }));
              t4.samples = [];
              var Q = N / s2, $ = L / s2, Z = { data1: X, data2: M, startPTS: Q, endPTS: $, startDTS: Q, endDTS: $, type: "audio", hasAudio: true, hasVideo: false, nb: q };
              return this.isAudioContiguous = true, Z;
            }
          }, e4.remuxEmptyAudio = function(t4, e5, r3, i3) {
            var a3 = t4.inputTimeScale, s2 = a3 / (t4.samplerate ? t4.samplerate : a3), o2 = this.nextAudioPts, l2 = (null !== o2 ? o2 : i3.startDTS * a3) + this._initDTS, u2 = i3.endDTS * a3 + this._initDTS, h2 = 1024 * s2, c3 = Math.ceil((u2 - l2) / h2), f3 = n.getSilentFrame(t4.manifestCodec || t4.codec, t4.channelCount);
            if (d2.logger.warn("[mp4-remuxer]: remux empty Audio"), f3) {
              for (var g2 = [], v2 = 0; v2 < c3; v2++) {
                var p2 = l2 + v2 * h2;
                g2.push({ unit: f3, pts: p2, dts: p2 });
              }
              return t4.samples = g2, this.remuxAudio(t4, e5, r3, false);
            }
            d2.logger.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");
          }, t3;
        }();
        function m(t3, e4) {
          var r3;
          if (null === e4)
            return t3;
          for (r3 = e4 < t3 ? -8589934592 : 8589934592; Math.abs(t3 - e4) > 4294967296; )
            t3 += r3;
          return t3;
        }
        function y(t3, e4, r3, i3) {
          var n2 = t3.samples.length;
          if (n2) {
            for (var a3 = t3.inputTimeScale, s2 = 0; s2 < n2; s2++) {
              var o2 = t3.samples[s2];
              o2.pts = m(o2.pts - r3, e4 * a3) / a3, o2.dts = m(o2.dts - i3, e4 * a3) / a3;
            }
            var l2 = t3.samples;
            return t3.samples = [], { samples: l2 };
          }
        }
        function E(t3, e4, r3) {
          var i3 = t3.samples.length;
          if (i3) {
            for (var n2 = t3.inputTimeScale, a3 = 0; a3 < i3; a3++) {
              var s2 = t3.samples[a3];
              s2.pts = m(s2.pts - r3, e4 * n2) / n2;
            }
            t3.samples.sort(function(t4, e5) {
              return t4.pts - e5.pts;
            });
            var o2 = t3.samples;
            return t3.samples = [], { samples: o2 };
          }
        }
        var T = function(t3, e4, r3, i3) {
          this.size = void 0, this.duration = void 0, this.cts = void 0, this.flags = void 0, this.duration = e4, this.size = r3, this.cts = i3, this.flags = new S(t3);
        }, S = function(t3) {
          this.isLeading = 0, this.isDependedOn = 0, this.hasRedundancy = 0, this.degradPrio = 0, this.dependsOn = 1, this.isNonSync = 1, this.dependsOn = t3 ? 2 : 1, this.isNonSync = t3 ? 0 : 1;
        };
      }, 856: (t2, e3, r2) => {
        "use strict";
        var i2;
        r2.r(e3), r2.d(e3, { MetadataSchema: () => i2 }), function(t3) {
          t3.audioId3 = "org.id3", t3.dateRange = "com.apple.quicktime.HLS", t3.emsg = "https://aomedia.org/emsg/ID3";
        }(i2 || (i2 = {}));
      }, 308: (t2, e3, r2) => {
        "use strict";
        var i2, n;
        r2.r(e3), r2.d(e3, { PlaylistContextType: () => i2, PlaylistLevelType: () => n }), function(t3) {
          t3.MANIFEST = "manifest", t3.LEVEL = "level", t3.AUDIO_TRACK = "audioTrack", t3.SUBTITLE_TRACK = "subtitleTrack";
        }(i2 || (i2 = {})), function(t3) {
          t3.MAIN = "main", t3.AUDIO = "audio", t3.SUBTITLE = "subtitle";
        }(n || (n = {}));
      }, 93: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { enableLogs: () => o, logger: () => l });
        var i2 = function() {
        }, n = { trace: i2, debug: i2, log: i2, warn: i2, info: i2, error: i2 }, a2 = n;
        function s(t3) {
          var e4 = self.console[t3];
          return e4 ? e4.bind(self.console, "[" + t3 + "] >") : i2;
        }
        function o(t3, e4) {
          if (self.console && true === t3 || "object" == typeof t3) {
            !function(t4) {
              for (var e5 = arguments.length, r3 = new Array(e5 > 1 ? e5 - 1 : 0), i3 = 1; i3 < e5; i3++)
                r3[i3 - 1] = arguments[i3];
              r3.forEach(function(e6) {
                a2[e6] = t4[e6] ? t4[e6].bind(t4) : s(e6);
              });
            }(t3, "debug", "log", "info", "warn", "error");
            try {
              a2.log('Debug logs enabled for "' + e4 + '"');
            } catch (t4) {
              a2 = n;
            }
          } else
            a2 = n;
        }
        var l = n;
      }, 63: (t2, e3, r2) => {
        "use strict";
        r2.r(e3), r2.d(e3, { RemuxerTrackIdConfig: () => l, appendUint8Array: () => b2, bin2str: () => u, computeRawDurationFromSamples: () => E, discardEPB: () => R, findBox: () => g, getDuration: () => y, getStartDTS: () => m, offsetStartDTS: () => T, parseEmsg: () => k2, parseInitSegment: () => p, parseSEIMessageFromNALu: () => A, parseSamples: () => L, parseSegmentIndex: () => v, readSint32: () => c2, readUint16: () => d2, readUint32: () => h, segmentValidRange: () => S, writeUint32: () => f2 });
        var i2 = r2(145), n = r2(923), a2 = r2(181), s = Math.pow(2, 32) - 1, o = [].push, l = { video: 1, audio: 2, id3: 3, text: 4 };
        function u(t3) {
          return String.fromCharCode.apply(null, t3);
        }
        function d2(t3, e4) {
          var r3 = t3[e4] << 8 | t3[e4 + 1];
          return r3 < 0 ? 65536 + r3 : r3;
        }
        function h(t3, e4) {
          var r3 = c2(t3, e4);
          return r3 < 0 ? 4294967296 + r3 : r3;
        }
        function c2(t3, e4) {
          return t3[e4] << 24 | t3[e4 + 1] << 16 | t3[e4 + 2] << 8 | t3[e4 + 3];
        }
        function f2(t3, e4, r3) {
          t3[e4] = r3 >> 24, t3[e4 + 1] = r3 >> 16 & 255, t3[e4 + 2] = r3 >> 8 & 255, t3[e4 + 3] = 255 & r3;
        }
        function g(t3, e4) {
          var r3 = [];
          if (!e4.length)
            return r3;
          for (var i3 = t3.byteLength, n2 = 0; n2 < i3; ) {
            var a3 = h(t3, n2), s2 = a3 > 1 ? n2 + a3 : i3;
            if (u(t3.subarray(n2 + 4, n2 + 8)) === e4[0])
              if (1 === e4.length)
                r3.push(t3.subarray(n2 + 8, s2));
              else {
                var l2 = g(t3.subarray(n2 + 8, s2), e4.slice(1));
                l2.length && o.apply(r3, l2);
              }
            n2 = s2;
          }
          return r3;
        }
        function v(t3) {
          var e4 = [], r3 = t3[0], i3 = 8, n2 = h(t3, i3);
          i3 += 4, i3 += 0 === r3 ? 8 : 16, i3 += 2;
          var a3 = t3.length + 0, s2 = d2(t3, i3);
          i3 += 2;
          for (var o2 = 0; o2 < s2; o2++) {
            var l2 = i3, u2 = h(t3, l2);
            l2 += 4;
            var c3 = 2147483647 & u2;
            if (1 == (2147483648 & u2) >>> 31)
              return console.warn("SIDX has hierarchical references (not supported)"), null;
            var f3 = h(t3, l2);
            l2 += 4, e4.push({ referenceSize: c3, subsegmentDuration: f3, info: { duration: f3 / n2, start: a3, end: a3 + c3 - 1 } }), a3 += c3, i3 = l2 += 4;
          }
          return { earliestPresentationTime: 0, timescale: n2, version: r3, referencesCount: s2, references: e4 };
        }
        function p(t3) {
          for (var e4 = [], r3 = g(t3, ["moov", "trak"]), i3 = 0; i3 < r3.length; i3++) {
            var a3 = r3[i3], s2 = g(a3, ["tkhd"])[0];
            if (s2) {
              var o2 = s2[0], l2 = 0 === o2 ? 12 : 20, d3 = h(s2, l2), c3 = g(a3, ["mdia", "mdhd"])[0];
              if (c3) {
                var f3 = h(c3, l2 = 0 === (o2 = c3[0]) ? 12 : 20), v2 = g(a3, ["mdia", "hdlr"])[0];
                if (v2) {
                  var p2 = u(v2.subarray(8, 12)), m2 = { soun: n.ElementaryStreamTypes.AUDIO, vide: n.ElementaryStreamTypes.VIDEO }[p2];
                  if (m2) {
                    var y2 = g(a3, ["mdia", "minf", "stbl", "stsd"])[0], E2 = void 0;
                    y2 && (E2 = u(y2.subarray(12, 16))), e4[d3] = { timescale: f3, type: m2 }, e4[m2] = { timescale: f3, id: d3, codec: E2 };
                  }
                }
              }
            }
          }
          return g(t3, ["moov", "mvex", "trex"]).forEach(function(t4) {
            var r4 = h(t4, 4), i4 = e4[r4];
            i4 && (i4.default = { duration: h(t4, 12), flags: h(t4, 20) });
          }), e4;
        }
        function m(t3, e4) {
          return g(e4, ["moof", "traf"]).reduce(function(e5, r3) {
            var i3 = g(r3, ["tfdt"])[0], n2 = i3[0], a3 = g(r3, ["tfhd"]).reduce(function(e6, r4) {
              var a4 = h(r4, 4), s2 = t3[a4];
              if (s2) {
                var o2 = h(i3, 4);
                1 === n2 && (o2 *= Math.pow(2, 32), o2 += h(i3, 8));
                var l2 = o2 / (s2.timescale || 9e4);
                if (isFinite(l2) && (null === e6 || l2 < e6))
                  return l2;
              }
              return e6;
            }, null);
            return null !== a3 && isFinite(a3) && (null === e5 || a3 < e5) ? a3 : e5;
          }, null) || 0;
        }
        function y(t3, e4) {
          for (var r3 = 0, i3 = 0, a3 = 0, s2 = g(t3, ["moof", "traf"]), o2 = 0; o2 < s2.length; o2++) {
            var l2 = s2[o2], u2 = g(l2, ["tfhd"])[0], d3 = e4[h(u2, 4)];
            if (d3) {
              var c3 = d3.default, f3 = h(u2, 0) | (null == c3 ? void 0 : c3.flags), p2 = null == c3 ? void 0 : c3.duration;
              8 & f3 && (p2 = h(u2, 2 & f3 ? 12 : 8));
              for (var m2 = d3.timescale || 9e4, y2 = g(l2, ["trun"]), T2 = 0; T2 < y2.length; T2++)
                !(r3 = E(y2[T2])) && p2 && (r3 = p2 * h(y2[T2], 4)), d3.type === n.ElementaryStreamTypes.VIDEO ? i3 += r3 / m2 : d3.type === n.ElementaryStreamTypes.AUDIO && (a3 += r3 / m2);
            }
          }
          if (0 === i3 && 0 === a3) {
            for (var S2 = 0, b3 = g(t3, ["sidx"]), L2 = 0; L2 < b3.length; L2++) {
              var D2 = v(b3[L2]);
              null != D2 && D2.references && (S2 += D2.references.reduce(function(t4, e5) {
                return t4 + e5.info.duration || 0;
              }, 0));
            }
            return S2;
          }
          return i3 || a3;
        }
        function E(t3) {
          var e4 = h(t3, 0), r3 = 8;
          1 & e4 && (r3 += 4), 4 & e4 && (r3 += 4);
          for (var i3 = 0, n2 = h(t3, 4), a3 = 0; a3 < n2; a3++)
            256 & e4 && (i3 += h(t3, r3), r3 += 4), 512 & e4 && (r3 += 4), 1024 & e4 && (r3 += 4), 2048 & e4 && (r3 += 4);
          return i3;
        }
        function T(t3, e4, r3) {
          g(e4, ["moof", "traf"]).forEach(function(e5) {
            g(e5, ["tfhd"]).forEach(function(i3) {
              var n2 = h(i3, 4), a3 = t3[n2];
              if (a3) {
                var o2 = a3.timescale || 9e4;
                g(e5, ["tfdt"]).forEach(function(t4) {
                  var e6 = t4[0], i4 = h(t4, 4);
                  if (0 === e6)
                    i4 -= r3 * o2, f2(t4, 4, i4 = Math.max(i4, 0));
                  else {
                    i4 *= Math.pow(2, 32), i4 += h(t4, 8), i4 -= r3 * o2, i4 = Math.max(i4, 0);
                    var n3 = Math.floor(i4 / (s + 1)), a4 = Math.floor(i4 % (s + 1));
                    f2(t4, 4, n3), f2(t4, 8, a4);
                  }
                });
              }
            });
          });
        }
        function S(t3) {
          var e4 = { valid: null, remainder: null }, r3 = g(t3, ["moof"]);
          if (!r3)
            return e4;
          if (r3.length < 2)
            return e4.remainder = t3, e4;
          var n2 = r3[r3.length - 1];
          return e4.valid = (0, i2.sliceUint8)(t3, 0, n2.byteOffset - 8), e4.remainder = (0, i2.sliceUint8)(t3, n2.byteOffset - 8), e4;
        }
        function b2(t3, e4) {
          var r3 = new Uint8Array(t3.length + e4.length);
          return r3.set(t3), r3.set(e4, t3.length), r3;
        }
        function L(t3, e4) {
          var r3 = [], i3 = e4.samples, a3 = e4.timescale, s2 = e4.id, o2 = false;
          return g(i3, ["moof"]).map(function(l2) {
            var u2 = l2.byteOffset - 8;
            g(l2, ["traf"]).map(function(l3) {
              var d3 = g(l3, ["tfdt"]).map(function(t4) {
                var e5 = t4[0], r4 = h(t4, 4);
                return 1 === e5 && (r4 *= Math.pow(2, 32), r4 += h(t4, 8)), r4 / a3;
              })[0];
              return void 0 !== d3 && (t3 = d3), g(l3, ["tfhd"]).map(function(d4) {
                var f3 = h(d4, 4), v2 = 16777215 & h(d4, 0), p2 = 0, m2 = 0 != (16 & v2), y2 = 0, E2 = 0 != (32 & v2), T2 = 8;
                f3 === s2 && (0 != (1 & v2) && (T2 += 8), 0 != (2 & v2) && (T2 += 4), 0 != (8 & v2) && (p2 = h(d4, T2), T2 += 4), m2 && (y2 = h(d4, T2), T2 += 4), E2 && (T2 += 4), "video" === e4.type && (o2 = function(t4) {
                  if (!t4)
                    return false;
                  var e5 = t4.indexOf("."), r4 = e5 < 0 ? t4 : t4.substring(0, e5);
                  return "hvc1" === r4 || "hev1" === r4 || "dvh1" === r4 || "dvhe" === r4;
                }(e4.codec)), g(l3, ["trun"]).map(function(s3) {
                  var l4 = s3[0], d5 = 16777215 & h(s3, 0), f4 = 0 != (1 & d5), g2 = 0, v3 = 0 != (4 & d5), m3 = 0 != (256 & d5), E3 = 0, T3 = 0 != (512 & d5), S2 = 0, b3 = 0 != (1024 & d5), L2 = 0 != (2048 & d5), R2 = 0, k3 = h(s3, 4), I = 8;
                  f4 && (g2 = h(s3, I), I += 4), v3 && (I += 4);
                  for (var _ = g2 + u2, C = 0; C < k3; C++) {
                    if (m3 ? (E3 = h(s3, I), I += 4) : E3 = p2, T3 ? (S2 = h(s3, I), I += 4) : S2 = y2, b3 && (I += 4), L2 && (R2 = 0 === l4 ? h(s3, I) : c2(s3, I), I += 4), e4.type === n.ElementaryStreamTypes.VIDEO)
                      for (var w = 0; w < S2; ) {
                        var O = h(i3, _);
                        D(o2, i3[_ += 4]) && A(i3.subarray(_, _ + O), o2 ? 2 : 1, t3 + R2 / a3, r3), _ += O, w += O + 4;
                      }
                    t3 += E3 / a3;
                  }
                }));
              });
            });
          }), r3;
        }
        function D(t3, e4) {
          if (t3) {
            var r3 = e4 >> 1 & 63;
            return 39 === r3 || 40 === r3;
          }
          return 6 == (31 & e4);
        }
        function A(t3, e4, r3, i3) {
          var n2 = R(t3), s2 = 0;
          s2 += e4;
          for (var o2 = 0, l2 = 0, u2 = false, c3 = 0; s2 < n2.length; ) {
            o2 = 0;
            do {
              if (s2 >= n2.length)
                break;
              o2 += c3 = n2[s2++];
            } while (255 === c3);
            l2 = 0;
            do {
              if (s2 >= n2.length)
                break;
              l2 += c3 = n2[s2++];
            } while (255 === c3);
            var f3 = n2.length - s2;
            if (!u2 && 4 === o2 && s2 < n2.length) {
              if (u2 = true, 181 === n2[s2++]) {
                var g2 = d2(n2, s2);
                if (s2 += 2, 49 === g2) {
                  var v2 = h(n2, s2);
                  if (s2 += 4, 1195456820 === v2) {
                    var p2 = n2[s2++];
                    if (3 === p2) {
                      var m2 = n2[s2++], y2 = 64 & m2, E2 = y2 ? 2 + 3 * (31 & m2) : 0, T2 = new Uint8Array(E2);
                      if (y2) {
                        T2[0] = m2;
                        for (var S2 = 1; S2 < E2; S2++)
                          T2[S2] = n2[s2++];
                      }
                      i3.push({ type: p2, payloadType: o2, pts: r3, bytes: T2 });
                    }
                  }
                }
              }
            } else if (5 === o2 && l2 < f3) {
              if (u2 = true, l2 > 16) {
                for (var b3 = [], L2 = 0; L2 < 16; L2++) {
                  var D2 = n2[s2++].toString(16);
                  b3.push(1 == D2.length ? "0" + D2 : D2), 3 !== L2 && 5 !== L2 && 7 !== L2 && 9 !== L2 || b3.push("-");
                }
                for (var A2 = l2 - 16, k3 = new Uint8Array(A2), I = 0; I < A2; I++)
                  k3[I] = n2[s2++];
                i3.push({ payloadType: o2, pts: r3, uuid: b3.join(""), userData: (0, a2.utf8ArrayToStr)(k3), userDataBytes: k3 });
              }
            } else if (l2 < f3)
              s2 += l2;
            else if (l2 > f3)
              break;
          }
        }
        function R(t3) {
          for (var e4 = t3.byteLength, r3 = [], i3 = 1; i3 < e4 - 2; )
            0 === t3[i3] && 0 === t3[i3 + 1] && 3 === t3[i3 + 2] ? (r3.push(i3 + 2), i3 += 2) : i3++;
          if (0 === r3.length)
            return t3;
          var n2 = e4 - r3.length, a3 = new Uint8Array(n2), s2 = 0;
          for (i3 = 0; i3 < n2; s2++, i3++)
            s2 === r3[0] && (s2++, r3.shift()), a3[i3] = t3[s2];
          return a3;
        }
        function k2(t3) {
          var e4 = t3[0], r3 = "", i3 = "", n2 = 0, a3 = 0, s2 = 0, o2 = 0, l2 = 0, d3 = 0;
          if (0 === e4) {
            for (; "\0" !== u(t3.subarray(d3, d3 + 1)); )
              r3 += u(t3.subarray(d3, d3 + 1)), d3 += 1;
            for (r3 += u(t3.subarray(d3, d3 + 1)), d3 += 1; "\0" !== u(t3.subarray(d3, d3 + 1)); )
              i3 += u(t3.subarray(d3, d3 + 1)), d3 += 1;
            i3 += u(t3.subarray(d3, d3 + 1)), d3 += 1, n2 = h(t3, 12), a3 = h(t3, 16), o2 = h(t3, 20), l2 = h(t3, 24), d3 = 28;
          } else if (1 === e4) {
            n2 = h(t3, d3 += 4);
            var c3 = h(t3, d3 += 4), f3 = h(t3, d3 += 4);
            for (d3 += 4, s2 = Math.pow(2, 32) * c3 + f3, Number.isSafeInteger(s2) || (s2 = Number.MAX_SAFE_INTEGER, console.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box")), o2 = h(t3, d3), l2 = h(t3, d3 += 4), d3 += 4; "\0" !== u(t3.subarray(d3, d3 + 1)); )
              r3 += u(t3.subarray(d3, d3 + 1)), d3 += 1;
            for (r3 += u(t3.subarray(d3, d3 + 1)), d3 += 1; "\0" !== u(t3.subarray(d3, d3 + 1)); )
              i3 += u(t3.subarray(d3, d3 + 1)), d3 += 1;
            i3 += u(t3.subarray(d3, d3 + 1)), d3 += 1;
          }
          return { schemeIdUri: r3, value: i3, timeScale: n2, presentationTime: s2, presentationTimeDelta: a3, eventDuration: o2, id: l2, payload: t3.subarray(d3, t3.byteLength) };
        }
      }, 673: (t2, e3, r2) => {
        "use strict";
        function i2(t3, e4, r3, i3) {
          void 0 === r3 && (r3 = 1), void 0 === i3 && (i3 = false);
          var n2 = t3 * e4 * r3;
          return i3 ? Math.round(n2) : n2;
        }
        function n(t3, e4, r3, n2) {
          return void 0 === r3 && (r3 = 1), void 0 === n2 && (n2 = false), i2(t3, e4, 1 / r3, n2);
        }
        function a2(t3, e4) {
          return void 0 === e4 && (e4 = false), i2(t3, 1e3, 1 / 9e4, e4);
        }
        function s(t3, e4) {
          return void 0 === e4 && (e4 = 1), i2(t3, 9e4, 1 / e4);
        }
        r2.r(e3), r2.d(e3, { toMpegTsClockFromTimescale: () => s, toMsFromMpegTsClock: () => a2, toTimescaleFromBase: () => i2, toTimescaleFromScale: () => n });
      }, 145: (t2, e3, r2) => {
        "use strict";
        function i2(t3, e4, r3) {
          return Uint8Array.prototype.slice ? t3.slice(e4, r3) : new Uint8Array(Array.prototype.slice.call(t3, e4, r3));
        }
        r2.r(e3), r2.d(e3, { sliceUint8: () => i2 });
      }, 729: (t2) => {
        "use strict";
        var e3 = Object.prototype.hasOwnProperty, r2 = "~";
        function i2() {
        }
        function n(t3, e4, r3) {
          this.fn = t3, this.context = e4, this.once = r3 || false;
        }
        function a2(t3, e4, i3, a3, s2) {
          if ("function" != typeof i3)
            throw new TypeError("The listener must be a function");
          var o2 = new n(i3, a3 || t3, s2), l = r2 ? r2 + e4 : e4;
          return t3._events[l] ? t3._events[l].fn ? t3._events[l] = [t3._events[l], o2] : t3._events[l].push(o2) : (t3._events[l] = o2, t3._eventsCount++), t3;
        }
        function s(t3, e4) {
          0 == --t3._eventsCount ? t3._events = new i2() : delete t3._events[e4];
        }
        function o() {
          this._events = new i2(), this._eventsCount = 0;
        }
        Object.create && (i2.prototype = /* @__PURE__ */ Object.create(null), new i2().__proto__ || (r2 = false)), o.prototype.eventNames = function() {
          var t3, i3, n2 = [];
          if (0 === this._eventsCount)
            return n2;
          for (i3 in t3 = this._events)
            e3.call(t3, i3) && n2.push(r2 ? i3.slice(1) : i3);
          return Object.getOwnPropertySymbols ? n2.concat(Object.getOwnPropertySymbols(t3)) : n2;
        }, o.prototype.listeners = function(t3) {
          var e4 = r2 ? r2 + t3 : t3, i3 = this._events[e4];
          if (!i3)
            return [];
          if (i3.fn)
            return [i3.fn];
          for (var n2 = 0, a3 = i3.length, s2 = new Array(a3); n2 < a3; n2++)
            s2[n2] = i3[n2].fn;
          return s2;
        }, o.prototype.listenerCount = function(t3) {
          var e4 = r2 ? r2 + t3 : t3, i3 = this._events[e4];
          return i3 ? i3.fn ? 1 : i3.length : 0;
        }, o.prototype.emit = function(t3, e4, i3, n2, a3, s2) {
          var o2 = r2 ? r2 + t3 : t3;
          if (!this._events[o2])
            return false;
          var l, u, d2 = this._events[o2], h = arguments.length;
          if (d2.fn) {
            switch (d2.once && this.removeListener(t3, d2.fn, void 0, true), h) {
              case 1:
                return d2.fn.call(d2.context), true;
              case 2:
                return d2.fn.call(d2.context, e4), true;
              case 3:
                return d2.fn.call(d2.context, e4, i3), true;
              case 4:
                return d2.fn.call(d2.context, e4, i3, n2), true;
              case 5:
                return d2.fn.call(d2.context, e4, i3, n2, a3), true;
              case 6:
                return d2.fn.call(d2.context, e4, i3, n2, a3, s2), true;
            }
            for (u = 1, l = new Array(h - 1); u < h; u++)
              l[u - 1] = arguments[u];
            d2.fn.apply(d2.context, l);
          } else {
            var c2, f2 = d2.length;
            for (u = 0; u < f2; u++)
              switch (d2[u].once && this.removeListener(t3, d2[u].fn, void 0, true), h) {
                case 1:
                  d2[u].fn.call(d2[u].context);
                  break;
                case 2:
                  d2[u].fn.call(d2[u].context, e4);
                  break;
                case 3:
                  d2[u].fn.call(d2[u].context, e4, i3);
                  break;
                case 4:
                  d2[u].fn.call(d2[u].context, e4, i3, n2);
                  break;
                default:
                  if (!l)
                    for (c2 = 1, l = new Array(h - 1); c2 < h; c2++)
                      l[c2 - 1] = arguments[c2];
                  d2[u].fn.apply(d2[u].context, l);
              }
          }
          return true;
        }, o.prototype.on = function(t3, e4, r3) {
          return a2(this, t3, e4, r3, false);
        }, o.prototype.once = function(t3, e4, r3) {
          return a2(this, t3, e4, r3, true);
        }, o.prototype.removeListener = function(t3, e4, i3, n2) {
          var a3 = r2 ? r2 + t3 : t3;
          if (!this._events[a3])
            return this;
          if (!e4)
            return s(this, a3), this;
          var o2 = this._events[a3];
          if (o2.fn)
            o2.fn !== e4 || n2 && !o2.once || i3 && o2.context !== i3 || s(this, a3);
          else {
            for (var l = 0, u = [], d2 = o2.length; l < d2; l++)
              (o2[l].fn !== e4 || n2 && !o2[l].once || i3 && o2[l].context !== i3) && u.push(o2[l]);
            u.length ? this._events[a3] = 1 === u.length ? u[0] : u : s(this, a3);
          }
          return this;
        }, o.prototype.removeAllListeners = function(t3) {
          var e4;
          return t3 ? (e4 = r2 ? r2 + t3 : t3, this._events[e4] && s(this, e4)) : (this._events = new i2(), this._eventsCount = 0), this;
        }, o.prototype.off = o.prototype.removeListener, o.prototype.addListener = o.prototype.on, o.prefixed = r2, o.EventEmitter = o, t2.exports = o;
      }, 945: function(t2) {
        var e3, r2, i2, n, a2;
        e3 = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, r2 = /^(?=([^\/?#]*))\1([^]*)$/, i2 = /(?:\/|^)\.(?=\/)/g, n = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, a2 = { buildAbsoluteURL: function(t3, e4, i3) {
          if (i3 = i3 || {}, t3 = t3.trim(), !(e4 = e4.trim())) {
            if (!i3.alwaysNormalize)
              return t3;
            var n2 = a2.parseURL(t3);
            if (!n2)
              throw new Error("Error trying to parse base URL.");
            return n2.path = a2.normalizePath(n2.path), a2.buildURLFromParts(n2);
          }
          var s = a2.parseURL(e4);
          if (!s)
            throw new Error("Error trying to parse relative URL.");
          if (s.scheme)
            return i3.alwaysNormalize ? (s.path = a2.normalizePath(s.path), a2.buildURLFromParts(s)) : e4;
          var o = a2.parseURL(t3);
          if (!o)
            throw new Error("Error trying to parse base URL.");
          if (!o.netLoc && o.path && "/" !== o.path[0]) {
            var l = r2.exec(o.path);
            o.netLoc = l[1], o.path = l[2];
          }
          o.netLoc && !o.path && (o.path = "/");
          var u = { scheme: o.scheme, netLoc: s.netLoc, path: null, params: s.params, query: s.query, fragment: s.fragment };
          if (!s.netLoc && (u.netLoc = o.netLoc, "/" !== s.path[0]))
            if (s.path) {
              var d2 = o.path, h = d2.substring(0, d2.lastIndexOf("/") + 1) + s.path;
              u.path = a2.normalizePath(h);
            } else
              u.path = o.path, s.params || (u.params = o.params, s.query || (u.query = o.query));
          return null === u.path && (u.path = i3.alwaysNormalize ? a2.normalizePath(s.path) : s.path), a2.buildURLFromParts(u);
        }, parseURL: function(t3) {
          var r3 = e3.exec(t3);
          return r3 ? { scheme: r3[1] || "", netLoc: r3[2] || "", path: r3[3] || "", params: r3[4] || "", query: r3[5] || "", fragment: r3[6] || "" } : null;
        }, normalizePath: function(t3) {
          for (t3 = t3.split("").reverse().join("").replace(i2, ""); t3.length !== (t3 = t3.replace(n, "")).length; )
            ;
          return t3.split("").reverse().join("");
        }, buildURLFromParts: function(t3) {
          return t3.scheme + t3.netLoc + t3.path + t3.params + t3.query + t3.fragment;
        } }, t2.exports = a2;
      } }, e2 = {};
      function r(i2) {
        var n = e2[i2];
        if (void 0 !== n)
          return n.exports;
        var a2 = e2[i2] = { exports: {} };
        return t[i2].call(a2.exports, a2, a2.exports, r), a2.exports;
      }
      r.m = t, r.n = (t2) => {
        var e3 = t2 && t2.__esModule ? () => t2.default : () => t2;
        return r.d(e3, { a: e3 }), e3;
      }, r.d = (t2, e3) => {
        for (var i2 in e3)
          r.o(e3, i2) && !r.o(t2, i2) && Object.defineProperty(t2, i2, { enumerable: true, get: e3[i2] });
      }, r.o = (t2, e3) => Object.prototype.hasOwnProperty.call(t2, e3), r.r = (t2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      };
      var i = r(817);
      return i.default;
    })());
  }
});

// node_modules/.pnpm/shaka-player@3.3.9/node_modules/shaka-player/dist/shaka-player.compiled.debug.js
var require_shaka_player_compiled_debug = __commonJS({
  "node_modules/.pnpm/shaka-player@3.3.9/node_modules/shaka-player/dist/shaka-player.compiled.debug.js"(exports, module) {
    (function() {
      var innerGlobal = typeof window != "undefined" ? window : global;
      var exportTo = {};
      (function(window, global, module) {
        var $jscomp = $jscomp || {};
        $jscomp.scope = {};
        $jscomp.arrayIteratorImpl = function(a2) {
          var b2 = 0;
          return function() {
            return b2 < a2.length ? { done: false, value: a2[b2++] } : { done: true };
          };
        };
        $jscomp.arrayIterator = function(a2) {
          return { next: $jscomp.arrayIteratorImpl(a2) };
        };
        $jscomp.ASSUME_ES5 = false;
        $jscomp.ASSUME_NO_NATIVE_MAP = false;
        $jscomp.ASSUME_NO_NATIVE_SET = false;
        $jscomp.SIMPLE_FROUND_POLYFILL = false;
        $jscomp.ISOLATE_POLYFILLS = false;
        $jscomp.FORCE_POLYFILL_PROMISE = false;
        $jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = false;
        $jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(a2, b2, c2) {
          if (a2 == Array.prototype || a2 == Object.prototype)
            return a2;
          a2[b2] = c2.value;
          return a2;
        };
        $jscomp.getGlobal = function(a2) {
          a2 = ["object" == typeof globalThis && globalThis, a2, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
          for (var b2 = 0; b2 < a2.length; ++b2) {
            var c2 = a2[b2];
            if (c2 && c2.Math == Math)
              return c2;
          }
          throw Error("Cannot find global object");
        };
        $jscomp.global = $jscomp.getGlobal(this);
        $jscomp.IS_SYMBOL_NATIVE = "function" === typeof Symbol && "symbol" === typeof Symbol("x");
        $jscomp.TRUST_ES6_POLYFILLS = !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;
        $jscomp.polyfills = {};
        $jscomp.propertyToPolyfillSymbol = {};
        $jscomp.POLYFILL_PREFIX = "$jscp$";
        var $jscomp$lookupPolyfilledValue = function(a2, b2) {
          var c2 = $jscomp.propertyToPolyfillSymbol[b2];
          if (null == c2)
            return a2[b2];
          c2 = a2[c2];
          return void 0 !== c2 ? c2 : a2[b2];
        };
        $jscomp.polyfill = function(a2, b2, c2, d2) {
          b2 && ($jscomp.ISOLATE_POLYFILLS ? $jscomp.polyfillIsolated(a2, b2, c2, d2) : $jscomp.polyfillUnisolated(a2, b2, c2, d2));
        };
        $jscomp.polyfillUnisolated = function(a2, b2, c2, d2) {
          c2 = $jscomp.global;
          a2 = a2.split(".");
          for (d2 = 0; d2 < a2.length - 1; d2++) {
            var e2 = a2[d2];
            if (!(e2 in c2))
              return;
            c2 = c2[e2];
          }
          a2 = a2[a2.length - 1];
          d2 = c2[a2];
          b2 = b2(d2);
          b2 != d2 && null != b2 && $jscomp.defineProperty(c2, a2, { configurable: true, writable: true, value: b2 });
        };
        $jscomp.polyfillIsolated = function(a2, b2, c2, d2) {
          var e2 = a2.split(".");
          a2 = 1 === e2.length;
          d2 = e2[0];
          d2 = !a2 && d2 in $jscomp.polyfills ? $jscomp.polyfills : $jscomp.global;
          for (var f2 = 0; f2 < e2.length - 1; f2++) {
            var g = e2[f2];
            if (!(g in d2))
              return;
            d2 = d2[g];
          }
          e2 = e2[e2.length - 1];
          c2 = $jscomp.IS_SYMBOL_NATIVE && "es6" === c2 ? d2[e2] : null;
          b2 = b2(c2);
          null != b2 && (a2 ? $jscomp.defineProperty($jscomp.polyfills, e2, { configurable: true, writable: true, value: b2 }) : b2 !== c2 && (void 0 === $jscomp.propertyToPolyfillSymbol[e2] && (c2 = 1e9 * Math.random() >>> 0, $jscomp.propertyToPolyfillSymbol[e2] = $jscomp.IS_SYMBOL_NATIVE ? $jscomp.global.Symbol(e2) : $jscomp.POLYFILL_PREFIX + c2 + "$" + e2), $jscomp.defineProperty(d2, $jscomp.propertyToPolyfillSymbol[e2], { configurable: true, writable: true, value: b2 })));
        };
        $jscomp.initSymbol = function() {
        };
        $jscomp.polyfill("Symbol", function(a2) {
          if (a2)
            return a2;
          var b2 = function(f2, g) {
            this.$jscomp$symbol$id_ = f2;
            $jscomp.defineProperty(this, "description", { configurable: true, writable: true, value: g });
          };
          b2.prototype.toString = function() {
            return this.$jscomp$symbol$id_;
          };
          var c2 = "jscomp_symbol_" + (1e9 * Math.random() >>> 0) + "_", d2 = 0, e2 = function(f2) {
            if (this instanceof e2)
              throw new TypeError("Symbol is not a constructor");
            return new b2(c2 + (f2 || "") + "_" + d2++, f2);
          };
          return e2;
        }, "es6", "es3");
        $jscomp.polyfill(
          "Symbol.iterator",
          function(a2) {
            if (a2)
              return a2;
            a2 = Symbol("Symbol.iterator");
            for (var b2 = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c2 = 0; c2 < b2.length; c2++) {
              var d2 = $jscomp.global[b2[c2]];
              "function" === typeof d2 && "function" != typeof d2.prototype[a2] && $jscomp.defineProperty(d2.prototype, a2, { configurable: true, writable: true, value: function() {
                return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this));
              } });
            }
            return a2;
          },
          "es6",
          "es3"
        );
        $jscomp.iteratorPrototype = function(a2) {
          a2 = { next: a2 };
          a2[Symbol.iterator] = function() {
            return this;
          };
          return a2;
        };
        $jscomp.createTemplateTagFirstArg = function(a2) {
          return a2.raw = a2;
        };
        $jscomp.createTemplateTagFirstArgWithRaw = function(a2, b2) {
          a2.raw = b2;
          return a2;
        };
        $jscomp.makeIterator = function(a2) {
          var b2 = "undefined" != typeof Symbol && Symbol.iterator && a2[Symbol.iterator];
          return b2 ? b2.call(a2) : $jscomp.arrayIterator(a2);
        };
        $jscomp.arrayFromIterator = function(a2) {
          for (var b2, c2 = []; !(b2 = a2.next()).done; )
            c2.push(b2.value);
          return c2;
        };
        $jscomp.arrayFromIterable = function(a2) {
          return a2 instanceof Array ? a2 : $jscomp.arrayFromIterator($jscomp.makeIterator(a2));
        };
        $jscomp.objectCreate = $jscomp.ASSUME_ES5 || "function" == typeof Object.create ? Object.create : function(a2) {
          var b2 = function() {
          };
          b2.prototype = a2;
          return new b2();
        };
        $jscomp.getConstructImplementation = function() {
          function a2() {
            function c2() {
            }
            new c2();
            Reflect.construct(c2, [], function() {
            });
            return new c2() instanceof c2;
          }
          if ($jscomp.TRUST_ES6_POLYFILLS && "undefined" != typeof Reflect && Reflect.construct) {
            if (a2())
              return Reflect.construct;
            var b2 = Reflect.construct;
            return function(c2, d2, e2) {
              c2 = b2(c2, d2);
              e2 && Reflect.setPrototypeOf(c2, e2.prototype);
              return c2;
            };
          }
          return function(c2, d2, e2) {
            void 0 === e2 && (e2 = c2);
            e2 = $jscomp.objectCreate(e2.prototype || Object.prototype);
            return Function.prototype.apply.call(c2, e2, d2) || e2;
          };
        };
        $jscomp.construct = { valueOf: $jscomp.getConstructImplementation }.valueOf();
        $jscomp.underscoreProtoCanBeSet = function() {
          var a2 = { a: true }, b2 = {};
          try {
            return b2.__proto__ = a2, b2.a;
          } catch (c2) {
          }
          return false;
        };
        $jscomp.setPrototypeOf = $jscomp.TRUST_ES6_POLYFILLS && "function" == typeof Object.setPrototypeOf ? Object.setPrototypeOf : $jscomp.underscoreProtoCanBeSet() ? function(a2, b2) {
          a2.__proto__ = b2;
          if (a2.__proto__ !== b2)
            throw new TypeError(a2 + " is not extensible");
          return a2;
        } : null;
        $jscomp.inherits = function(a2, b2) {
          a2.prototype = $jscomp.objectCreate(b2.prototype);
          a2.prototype.constructor = a2;
          if ($jscomp.setPrototypeOf) {
            var c2 = $jscomp.setPrototypeOf;
            c2(a2, b2);
          } else
            for (c2 in b2)
              if ("prototype" != c2)
                if (Object.defineProperties) {
                  var d2 = Object.getOwnPropertyDescriptor(b2, c2);
                  d2 && Object.defineProperty(a2, c2, d2);
                } else
                  a2[c2] = b2[c2];
          a2.superClass_ = b2.prototype;
        };
        $jscomp.generator = {};
        $jscomp.generator.ensureIteratorResultIsObject_ = function(a2) {
          if (!(a2 instanceof Object))
            throw new TypeError("Iterator result " + a2 + " is not an object");
        };
        $jscomp.generator.Context = function() {
          this.isRunning_ = false;
          this.yieldAllIterator_ = null;
          this.yieldResult = void 0;
          this.nextAddress = 1;
          this.finallyAddress_ = this.catchAddress_ = 0;
          this.finallyContexts_ = this.abruptCompletion_ = null;
        };
        $jscomp.generator.Context.prototype.start_ = function() {
          if (this.isRunning_)
            throw new TypeError("Generator is already running");
          this.isRunning_ = true;
        };
        $jscomp.generator.Context.prototype.stop_ = function() {
          this.isRunning_ = false;
        };
        $jscomp.generator.Context.prototype.jumpToErrorHandler_ = function() {
          this.nextAddress = this.catchAddress_ || this.finallyAddress_;
        };
        $jscomp.generator.Context.prototype.next_ = function(a2) {
          this.yieldResult = a2;
        };
        $jscomp.generator.Context.prototype.throw_ = function(a2) {
          this.abruptCompletion_ = { exception: a2, isException: true };
          this.jumpToErrorHandler_();
        };
        $jscomp.generator.Context.prototype["return"] = function(a2) {
          this.abruptCompletion_ = { "return": a2 };
          this.nextAddress = this.finallyAddress_;
        };
        $jscomp.generator.Context.prototype.jumpThroughFinallyBlocks = function(a2) {
          this.abruptCompletion_ = { jumpTo: a2 };
          this.nextAddress = this.finallyAddress_;
        };
        $jscomp.generator.Context.prototype.yield = function(a2, b2) {
          this.nextAddress = b2;
          return { value: a2 };
        };
        $jscomp.generator.Context.prototype.yieldAll = function(a2, b2) {
          var c2 = $jscomp.makeIterator(a2), d2 = c2.next();
          $jscomp.generator.ensureIteratorResultIsObject_(d2);
          if (d2.done)
            this.yieldResult = d2.value, this.nextAddress = b2;
          else
            return this.yieldAllIterator_ = c2, this.yield(d2.value, b2);
        };
        $jscomp.generator.Context.prototype.jumpTo = function(a2) {
          this.nextAddress = a2;
        };
        $jscomp.generator.Context.prototype.jumpToEnd = function() {
          this.nextAddress = 0;
        };
        $jscomp.generator.Context.prototype.setCatchFinallyBlocks = function(a2, b2) {
          this.catchAddress_ = a2;
          void 0 != b2 && (this.finallyAddress_ = b2);
        };
        $jscomp.generator.Context.prototype.setFinallyBlock = function(a2) {
          this.catchAddress_ = 0;
          this.finallyAddress_ = a2 || 0;
        };
        $jscomp.generator.Context.prototype.leaveTryBlock = function(a2, b2) {
          this.nextAddress = a2;
          this.catchAddress_ = b2 || 0;
        };
        $jscomp.generator.Context.prototype.enterCatchBlock = function(a2) {
          this.catchAddress_ = a2 || 0;
          a2 = this.abruptCompletion_.exception;
          this.abruptCompletion_ = null;
          return a2;
        };
        $jscomp.generator.Context.prototype.enterFinallyBlock = function(a2, b2, c2) {
          c2 ? this.finallyContexts_[c2] = this.abruptCompletion_ : this.finallyContexts_ = [this.abruptCompletion_];
          this.catchAddress_ = a2 || 0;
          this.finallyAddress_ = b2 || 0;
        };
        $jscomp.generator.Context.prototype.leaveFinallyBlock = function(a2, b2) {
          var c2 = this.finallyContexts_.splice(b2 || 0)[0];
          if (c2 = this.abruptCompletion_ = this.abruptCompletion_ || c2) {
            if (c2.isException)
              return this.jumpToErrorHandler_();
            void 0 != c2.jumpTo && this.finallyAddress_ < c2.jumpTo ? (this.nextAddress = c2.jumpTo, this.abruptCompletion_ = null) : this.nextAddress = this.finallyAddress_;
          } else
            this.nextAddress = a2;
        };
        $jscomp.generator.Context.prototype.forIn = function(a2) {
          return new $jscomp.generator.Context.PropertyIterator(a2);
        };
        $jscomp.generator.Context.PropertyIterator = function(a2) {
          this.object_ = a2;
          this.properties_ = [];
          for (var b2 in a2)
            this.properties_.push(b2);
          this.properties_.reverse();
        };
        $jscomp.generator.Context.PropertyIterator.prototype.getNext = function() {
          for (; 0 < this.properties_.length; ) {
            var a2 = this.properties_.pop();
            if (a2 in this.object_)
              return a2;
          }
          return null;
        };
        $jscomp.generator.Engine_ = function(a2) {
          this.context_ = new $jscomp.generator.Context();
          this.program_ = a2;
        };
        $jscomp.generator.Engine_.prototype.next_ = function(a2) {
          this.context_.start_();
          if (this.context_.yieldAllIterator_)
            return this.yieldAllStep_(this.context_.yieldAllIterator_.next, a2, this.context_.next_);
          this.context_.next_(a2);
          return this.nextStep_();
        };
        $jscomp.generator.Engine_.prototype.return_ = function(a2) {
          this.context_.start_();
          var b2 = this.context_.yieldAllIterator_;
          if (b2)
            return this.yieldAllStep_("return" in b2 ? b2["return"] : function(c2) {
              return { value: c2, done: true };
            }, a2, this.context_["return"]);
          this.context_["return"](a2);
          return this.nextStep_();
        };
        $jscomp.generator.Engine_.prototype.throw_ = function(a2) {
          this.context_.start_();
          if (this.context_.yieldAllIterator_)
            return this.yieldAllStep_(this.context_.yieldAllIterator_["throw"], a2, this.context_.next_);
          this.context_.throw_(a2);
          return this.nextStep_();
        };
        $jscomp.generator.Engine_.prototype.yieldAllStep_ = function(a2, b2, c2) {
          try {
            var d2 = a2.call(this.context_.yieldAllIterator_, b2);
            $jscomp.generator.ensureIteratorResultIsObject_(d2);
            if (!d2.done)
              return this.context_.stop_(), d2;
            var e2 = d2.value;
          } catch (f2) {
            return this.context_.yieldAllIterator_ = null, this.context_.throw_(f2), this.nextStep_();
          }
          this.context_.yieldAllIterator_ = null;
          c2.call(this.context_, e2);
          return this.nextStep_();
        };
        $jscomp.generator.Engine_.prototype.nextStep_ = function() {
          for (; this.context_.nextAddress; )
            try {
              var a2 = this.program_(this.context_);
              if (a2)
                return this.context_.stop_(), { value: a2.value, done: false };
            } catch (b2) {
              this.context_.yieldResult = void 0, this.context_.throw_(b2);
            }
          this.context_.stop_();
          if (this.context_.abruptCompletion_) {
            a2 = this.context_.abruptCompletion_;
            this.context_.abruptCompletion_ = null;
            if (a2.isException)
              throw a2.exception;
            return { value: a2["return"], done: true };
          }
          return { value: void 0, done: true };
        };
        $jscomp.generator.Generator_ = function(a2) {
          this.next = function(b2) {
            return a2.next_(b2);
          };
          this["throw"] = function(b2) {
            return a2.throw_(b2);
          };
          this["return"] = function(b2) {
            return a2.return_(b2);
          };
          this[Symbol.iterator] = function() {
            return this;
          };
        };
        $jscomp.generator.createGenerator = function(a2, b2) {
          var c2 = new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(b2));
          $jscomp.setPrototypeOf && a2.prototype && $jscomp.setPrototypeOf(c2, a2.prototype);
          return c2;
        };
        $jscomp.asyncExecutePromiseGenerator = function(a2) {
          function b2(d2) {
            return a2.next(d2);
          }
          function c2(d2) {
            return a2["throw"](d2);
          }
          return new Promise(function(d2, e2) {
            function f2(g) {
              g.done ? d2(g.value) : Promise.resolve(g.value).then(b2, c2).then(f2, e2);
            }
            f2(a2.next());
          });
        };
        $jscomp.asyncExecutePromiseGeneratorFunction = function(a2) {
          return $jscomp.asyncExecutePromiseGenerator(a2());
        };
        $jscomp.asyncExecutePromiseGeneratorProgram = function(a2) {
          return $jscomp.asyncExecutePromiseGenerator(new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(a2)));
        };
        $jscomp.getRestArguments = function() {
          for (var a2 = Number(this), b2 = [], c2 = a2; c2 < arguments.length; c2++)
            b2[c2 - a2] = arguments[c2];
          return b2;
        };
        $jscomp.polyfill("Reflect", function(a2) {
          return a2 ? a2 : {};
        }, "es6", "es3");
        $jscomp.polyfill("Reflect.construct", function(a2) {
          return $jscomp.construct;
        }, "es6", "es3");
        $jscomp.polyfill("Reflect.setPrototypeOf", function(a2) {
          if (a2)
            return a2;
          if ($jscomp.setPrototypeOf) {
            var b2 = $jscomp.setPrototypeOf;
            return function(c2, d2) {
              try {
                return b2(c2, d2), true;
              } catch (e2) {
                return false;
              }
            };
          }
          return null;
        }, "es6", "es5");
        $jscomp.polyfill("Promise", function(a2) {
          function b2() {
            this.batch_ = null;
          }
          function c2(g) {
            return g instanceof e2 ? g : new e2(function(h, k2) {
              h(g);
            });
          }
          if (a2 && (!($jscomp.FORCE_POLYFILL_PROMISE || $jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION && "undefined" === typeof $jscomp.global.PromiseRejectionEvent) || !$jscomp.global.Promise || -1 === $jscomp.global.Promise.toString().indexOf("[native code]")))
            return a2;
          b2.prototype.asyncExecute = function(g) {
            if (null == this.batch_) {
              this.batch_ = [];
              var h = this;
              this.asyncExecuteFunction(function() {
                h.executeBatch_();
              });
            }
            this.batch_.push(g);
          };
          var d2 = $jscomp.global.setTimeout;
          b2.prototype.asyncExecuteFunction = function(g) {
            d2(g, 0);
          };
          b2.prototype.executeBatch_ = function() {
            for (; this.batch_ && this.batch_.length; ) {
              var g = this.batch_;
              this.batch_ = [];
              for (var h = 0; h < g.length; ++h) {
                var k2 = g[h];
                g[h] = null;
                try {
                  k2();
                } catch (l) {
                  this.asyncThrow_(l);
                }
              }
            }
            this.batch_ = null;
          };
          b2.prototype.asyncThrow_ = function(g) {
            this.asyncExecuteFunction(function() {
              throw g;
            });
          };
          var e2 = function(g) {
            this.state_ = 0;
            this.result_ = void 0;
            this.onSettledCallbacks_ = [];
            this.isRejectionHandled_ = false;
            var h = this.createResolveAndReject_();
            try {
              g(h.resolve, h.reject);
            } catch (k2) {
              h.reject(k2);
            }
          };
          e2.prototype.createResolveAndReject_ = function() {
            function g(l) {
              return function(m) {
                k2 || (k2 = true, l.call(h, m));
              };
            }
            var h = this, k2 = false;
            return { resolve: g(this.resolveTo_), reject: g(this.reject_) };
          };
          e2.prototype.resolveTo_ = function(g) {
            if (g === this)
              this.reject_(new TypeError("A Promise cannot resolve to itself"));
            else if (g instanceof e2)
              this.settleSameAsPromise_(g);
            else {
              a:
                switch (typeof g) {
                  case "object":
                    var h = null != g;
                    break a;
                  case "function":
                    h = true;
                    break a;
                  default:
                    h = false;
                }
              h ? this.resolveToNonPromiseObj_(g) : this.fulfill_(g);
            }
          };
          e2.prototype.resolveToNonPromiseObj_ = function(g) {
            var h = void 0;
            try {
              h = g.then;
            } catch (k2) {
              this.reject_(k2);
              return;
            }
            "function" == typeof h ? this.settleSameAsThenable_(h, g) : this.fulfill_(g);
          };
          e2.prototype.reject_ = function(g) {
            this.settle_(2, g);
          };
          e2.prototype.fulfill_ = function(g) {
            this.settle_(1, g);
          };
          e2.prototype.settle_ = function(g, h) {
            if (0 != this.state_)
              throw Error("Cannot settle(" + g + ", " + h + "): Promise already settled in state" + this.state_);
            this.state_ = g;
            this.result_ = h;
            2 === this.state_ && this.scheduleUnhandledRejectionCheck_();
            this.executeOnSettledCallbacks_();
          };
          e2.prototype.scheduleUnhandledRejectionCheck_ = function() {
            var g = this;
            d2(function() {
              if (g.notifyUnhandledRejection_()) {
                var h = $jscomp.global.console;
                "undefined" !== typeof h && h.error(g.result_);
              }
            }, 1);
          };
          e2.prototype.notifyUnhandledRejection_ = function() {
            if (this.isRejectionHandled_)
              return false;
            var g = $jscomp.global.CustomEvent, h = $jscomp.global.Event, k2 = $jscomp.global.dispatchEvent;
            if ("undefined" === typeof k2)
              return true;
            "function" === typeof g ? g = new g("unhandledrejection", { cancelable: true }) : "function" === typeof h ? g = new h("unhandledrejection", { cancelable: true }) : (g = $jscomp.global.document.createEvent("CustomEvent"), g.initCustomEvent("unhandledrejection", false, true, g));
            g.promise = this;
            g.reason = this.result_;
            return k2(g);
          };
          e2.prototype.executeOnSettledCallbacks_ = function() {
            if (null != this.onSettledCallbacks_) {
              for (var g = 0; g < this.onSettledCallbacks_.length; ++g)
                f2.asyncExecute(this.onSettledCallbacks_[g]);
              this.onSettledCallbacks_ = null;
            }
          };
          var f2 = new b2();
          e2.prototype.settleSameAsPromise_ = function(g) {
            var h = this.createResolveAndReject_();
            g.callWhenSettled_(h.resolve, h.reject);
          };
          e2.prototype.settleSameAsThenable_ = function(g, h) {
            var k2 = this.createResolveAndReject_();
            try {
              g.call(h, k2.resolve, k2.reject);
            } catch (l) {
              k2.reject(l);
            }
          };
          e2.prototype.then = function(g, h) {
            function k2(p, q) {
              return "function" == typeof p ? function(r) {
                try {
                  l(p(r));
                } catch (t) {
                  m(t);
                }
              } : q;
            }
            var l, m, n = new e2(function(p, q) {
              l = p;
              m = q;
            });
            this.callWhenSettled_(k2(g, l), k2(h, m));
            return n;
          };
          e2.prototype["catch"] = function(g) {
            return this.then(void 0, g);
          };
          e2.prototype.callWhenSettled_ = function(g, h) {
            function k2() {
              switch (l.state_) {
                case 1:
                  g(l.result_);
                  break;
                case 2:
                  h(l.result_);
                  break;
                default:
                  throw Error("Unexpected state: " + l.state_);
              }
            }
            var l = this;
            null == this.onSettledCallbacks_ ? f2.asyncExecute(k2) : this.onSettledCallbacks_.push(k2);
            this.isRejectionHandled_ = true;
          };
          e2.resolve = c2;
          e2.reject = function(g) {
            return new e2(function(h, k2) {
              k2(g);
            });
          };
          e2.race = function(g) {
            return new e2(function(h, k2) {
              for (var l = $jscomp.makeIterator(g), m = l.next(); !m.done; m = l.next())
                c2(m.value).callWhenSettled_(h, k2);
            });
          };
          e2.all = function(g) {
            var h = $jscomp.makeIterator(g), k2 = h.next();
            return k2.done ? c2([]) : new e2(function(l, m) {
              function n(r) {
                return function(t) {
                  p[r] = t;
                  q--;
                  0 == q && l(p);
                };
              }
              var p = [], q = 0;
              do
                p.push(void 0), q++, c2(k2.value).callWhenSettled_(n(p.length - 1), m), k2 = h.next();
              while (!k2.done);
            });
          };
          return e2;
        }, "es6", "es3");
        $jscomp.checkEs6ConformanceViaProxy = function() {
          try {
            var a2 = {}, b2 = Object.create(new $jscomp.global.Proxy(a2, { get: function(c2, d2, e2) {
              return c2 == a2 && "q" == d2 && e2 == b2;
            } }));
            return true === b2.q;
          } catch (c2) {
            return false;
          }
        };
        $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = false;
        $jscomp.ES6_CONFORMANCE = $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && $jscomp.checkEs6ConformanceViaProxy();
        $jscomp.owns = function(a2, b2) {
          return Object.prototype.hasOwnProperty.call(a2, b2);
        };
        $jscomp.polyfill("WeakMap", function(a2) {
          function b2() {
            if (!a2 || !Object.seal)
              return false;
            try {
              var l = Object.seal({}), m = Object.seal({}), n = new a2([[l, 2], [m, 3]]);
              if (2 != n.get(l) || 3 != n.get(m))
                return false;
              n["delete"](l);
              n.set(m, 4);
              return !n.has(l) && 4 == n.get(m);
            } catch (p) {
              return false;
            }
          }
          function c2() {
          }
          function d2(l) {
            var m = typeof l;
            return "object" === m && null !== l || "function" === m;
          }
          function e2(l) {
            if (!$jscomp.owns(l, g)) {
              var m = new c2();
              $jscomp.defineProperty(l, g, { value: m });
            }
          }
          function f2(l) {
            if (!$jscomp.ISOLATE_POLYFILLS) {
              var m = Object[l];
              m && (Object[l] = function(n) {
                if (n instanceof c2)
                  return n;
                Object.isExtensible(n) && e2(n);
                return m(n);
              });
            }
          }
          if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
            if (a2 && $jscomp.ES6_CONFORMANCE)
              return a2;
          } else if (b2())
            return a2;
          var g = "$jscomp_hidden_" + Math.random();
          f2("freeze");
          f2("preventExtensions");
          f2("seal");
          var h = 0, k2 = function(l) {
            this.id_ = (h += Math.random() + 1).toString();
            if (l) {
              l = $jscomp.makeIterator(l);
              for (var m; !(m = l.next()).done; )
                m = m.value, this.set(m[0], m[1]);
            }
          };
          k2.prototype.set = function(l, m) {
            if (!d2(l))
              throw Error("Invalid WeakMap key");
            e2(l);
            if (!$jscomp.owns(l, g))
              throw Error("WeakMap key fail: " + l);
            l[g][this.id_] = m;
            return this;
          };
          k2.prototype.get = function(l) {
            return d2(l) && $jscomp.owns(l, g) ? l[g][this.id_] : void 0;
          };
          k2.prototype.has = function(l) {
            return d2(l) && $jscomp.owns(l, g) && $jscomp.owns(l[g], this.id_);
          };
          k2.prototype["delete"] = function(l) {
            return d2(l) && $jscomp.owns(l, g) && $jscomp.owns(l[g], this.id_) ? delete l[g][this.id_] : false;
          };
          return k2;
        }, "es6", "es3");
        $jscomp.MapEntry = function() {
        };
        $jscomp.polyfill("Map", function(a2) {
          function b2() {
            if ($jscomp.ASSUME_NO_NATIVE_MAP || !a2 || "function" != typeof a2 || !a2.prototype.entries || "function" != typeof Object.seal)
              return false;
            try {
              var k2 = Object.seal({ x: 4 }), l = new a2($jscomp.makeIterator([[k2, "s"]]));
              if ("s" != l.get(k2) || 1 != l.size || l.get({ x: 4 }) || l.set({ x: 4 }, "t") != l || 2 != l.size)
                return false;
              var m = l.entries(), n = m.next();
              if (n.done || n.value[0] != k2 || "s" != n.value[1])
                return false;
              n = m.next();
              return n.done || 4 != n.value[0].x || "t" != n.value[1] || !m.next().done ? false : true;
            } catch (p) {
              return false;
            }
          }
          if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
            if (a2 && $jscomp.ES6_CONFORMANCE)
              return a2;
          } else if (b2())
            return a2;
          var c2 = /* @__PURE__ */ new WeakMap(), d2 = function(k2) {
            this.data_ = {};
            this.head_ = g();
            this.size = 0;
            if (k2) {
              k2 = $jscomp.makeIterator(k2);
              for (var l; !(l = k2.next()).done; )
                l = l.value, this.set(l[0], l[1]);
            }
          };
          d2.prototype.set = function(k2, l) {
            k2 = 0 === k2 ? 0 : k2;
            var m = e2(this, k2);
            m.list || (m.list = this.data_[m.id] = []);
            m.entry ? m.entry.value = l : (m.entry = { next: this.head_, previous: this.head_.previous, head: this.head_, key: k2, value: l }, m.list.push(m.entry), this.head_.previous.next = m.entry, this.head_.previous = m.entry, this.size++);
            return this;
          };
          d2.prototype["delete"] = function(k2) {
            k2 = e2(this, k2);
            return k2.entry && k2.list ? (k2.list.splice(k2.index, 1), k2.list.length || delete this.data_[k2.id], k2.entry.previous.next = k2.entry.next, k2.entry.next.previous = k2.entry.previous, k2.entry.head = null, this.size--, true) : false;
          };
          d2.prototype.clear = function() {
            this.data_ = {};
            this.head_ = this.head_.previous = g();
            this.size = 0;
          };
          d2.prototype.has = function(k2) {
            return !!e2(this, k2).entry;
          };
          d2.prototype.get = function(k2) {
            return (k2 = e2(this, k2).entry) && k2.value;
          };
          d2.prototype.entries = function() {
            return f2(this, function(k2) {
              return [k2.key, k2.value];
            });
          };
          d2.prototype.keys = function() {
            return f2(this, function(k2) {
              return k2.key;
            });
          };
          d2.prototype.values = function() {
            return f2(this, function(k2) {
              return k2.value;
            });
          };
          d2.prototype.forEach = function(k2, l) {
            for (var m = this.entries(), n; !(n = m.next()).done; )
              n = n.value, k2.call(l, n[1], n[0], this);
          };
          d2.prototype[Symbol.iterator] = d2.prototype.entries;
          var e2 = function(k2, l) {
            var m = l && typeof l;
            "object" == m || "function" == m ? c2.has(l) ? m = c2.get(l) : (m = "" + ++h, c2.set(l, m)) : m = "p_" + l;
            var n = k2.data_[m];
            if (n && $jscomp.owns(k2.data_, m))
              for (var p = 0; p < n.length; p++) {
                var q = n[p];
                if (l !== l && q.key !== q.key || l === q.key)
                  return { id: m, list: n, index: p, entry: q };
              }
            return { id: m, list: n, index: -1, entry: void 0 };
          }, f2 = function(k2, l) {
            var m = k2.head_;
            return $jscomp.iteratorPrototype(function() {
              if (m) {
                for (; m.head != k2.head_; )
                  m = m.previous;
                for (; m.next != m.head; )
                  return m = m.next, { done: false, value: l(m) };
                m = null;
              }
              return { done: true, value: void 0 };
            });
          }, g = function() {
            var k2 = {};
            return k2.previous = k2.next = k2.head = k2;
          }, h = 0;
          return d2;
        }, "es6", "es3");
        $jscomp.polyfill("Set", function(a2) {
          function b2() {
            if ($jscomp.ASSUME_NO_NATIVE_SET || !a2 || "function" != typeof a2 || !a2.prototype.entries || "function" != typeof Object.seal)
              return false;
            try {
              var d2 = Object.seal({ x: 4 }), e2 = new a2($jscomp.makeIterator([d2]));
              if (!e2.has(d2) || 1 != e2.size || e2.add(d2) != e2 || 1 != e2.size || e2.add({ x: 4 }) != e2 || 2 != e2.size)
                return false;
              var f2 = e2.entries(), g = f2.next();
              if (g.done || g.value[0] != d2 || g.value[1] != d2)
                return false;
              g = f2.next();
              return g.done || g.value[0] == d2 || 4 != g.value[0].x || g.value[1] != g.value[0] ? false : f2.next().done;
            } catch (h) {
              return false;
            }
          }
          if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
            if (a2 && $jscomp.ES6_CONFORMANCE)
              return a2;
          } else if (b2())
            return a2;
          var c2 = function(d2) {
            this.map_ = /* @__PURE__ */ new Map();
            if (d2) {
              d2 = $jscomp.makeIterator(d2);
              for (var e2; !(e2 = d2.next()).done; )
                this.add(e2.value);
            }
            this.size = this.map_.size;
          };
          c2.prototype.add = function(d2) {
            d2 = 0 === d2 ? 0 : d2;
            this.map_.set(d2, d2);
            this.size = this.map_.size;
            return this;
          };
          c2.prototype["delete"] = function(d2) {
            d2 = this.map_["delete"](d2);
            this.size = this.map_.size;
            return d2;
          };
          c2.prototype.clear = function() {
            this.map_.clear();
            this.size = 0;
          };
          c2.prototype.has = function(d2) {
            return this.map_.has(d2);
          };
          c2.prototype.entries = function() {
            return this.map_.entries();
          };
          c2.prototype.values = function() {
            return this.map_.values();
          };
          c2.prototype.keys = c2.prototype.values;
          c2.prototype[Symbol.iterator] = c2.prototype.values;
          c2.prototype.forEach = function(d2, e2) {
            var f2 = this;
            this.map_.forEach(function(g) {
              return d2.call(e2, g, g, f2);
            });
          };
          return c2;
        }, "es6", "es3");
        $jscomp.findInternal = function(a2, b2, c2) {
          a2 instanceof String && (a2 = String(a2));
          for (var d2 = a2.length, e2 = 0; e2 < d2; e2++) {
            var f2 = a2[e2];
            if (b2.call(c2, f2, e2, a2))
              return { i: e2, v: f2 };
          }
          return { i: -1, v: void 0 };
        };
        $jscomp.polyfill("Array.prototype.findIndex", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            return $jscomp.findInternal(this, b2, c2).i;
          };
        }, "es6", "es3");
        $jscomp.polyfill("Object.is", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            return b2 === c2 ? 0 !== b2 || 1 / b2 === 1 / c2 : b2 !== b2 && c2 !== c2;
          };
        }, "es6", "es3");
        $jscomp.polyfill("Array.prototype.includes", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            var d2 = this;
            d2 instanceof String && (d2 = String(d2));
            var e2 = d2.length, f2 = c2 || 0;
            for (0 > f2 && (f2 = Math.max(f2 + e2, 0)); f2 < e2; f2++) {
              var g = d2[f2];
              if (g === b2 || Object.is(g, b2))
                return true;
            }
            return false;
          };
        }, "es7", "es3");
        $jscomp.checkStringArgs = function(a2, b2, c2) {
          if (null == a2)
            throw new TypeError("The 'this' value for String.prototype." + c2 + " must not be null or undefined");
          if (b2 instanceof RegExp)
            throw new TypeError("First argument to String.prototype." + c2 + " must not be a regular expression");
          return a2 + "";
        };
        $jscomp.polyfill("String.prototype.includes", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            return -1 !== $jscomp.checkStringArgs(this, b2, "includes").indexOf(b2, c2 || 0);
          };
        }, "es6", "es3");
        $jscomp.polyfill("Array.prototype.find", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            return $jscomp.findInternal(this, b2, c2).v;
          };
        }, "es6", "es3");
        $jscomp.polyfill("String.prototype.startsWith", function(a2) {
          return a2 ? a2 : function(b2, c2) {
            var d2 = $jscomp.checkStringArgs(this, b2, "startsWith");
            b2 += "";
            for (var e2 = d2.length, f2 = b2.length, g = Math.max(0, Math.min(c2 | 0, d2.length)), h = 0; h < f2 && g < e2; )
              if (d2[g++] != b2[h++])
                return false;
            return h >= f2;
          };
        }, "es6", "es3");
        $jscomp.iteratorFromArray = function(a2, b2) {
          a2 instanceof String && (a2 += "");
          var c2 = 0, d2 = false, e2 = { next: function() {
            if (!d2 && c2 < a2.length) {
              var f2 = c2++;
              return { value: b2(f2, a2[f2]), done: false };
            }
            d2 = true;
            return { done: true, value: void 0 };
          } };
          e2[Symbol.iterator] = function() {
            return e2;
          };
          return e2;
        };
        $jscomp.polyfill("Array.prototype.keys", function(a2) {
          return a2 ? a2 : function() {
            return $jscomp.iteratorFromArray(this, function(b2) {
              return b2;
            });
          };
        }, "es6", "es3");
        $jscomp.assign = $jscomp.TRUST_ES6_POLYFILLS && "function" == typeof Object.assign ? Object.assign : function(a2, b2) {
          for (var c2 = 1; c2 < arguments.length; c2++) {
            var d2 = arguments[c2];
            if (d2)
              for (var e2 in d2)
                $jscomp.owns(d2, e2) && (a2[e2] = d2[e2]);
          }
          return a2;
        };
        $jscomp.polyfill("Object.assign", function(a2) {
          return a2 || $jscomp.assign;
        }, "es6", "es3");
        $jscomp.polyfill("Array.from", function(a2) {
          return a2 ? a2 : function(b2, c2, d2) {
            c2 = null != c2 ? c2 : function(h) {
              return h;
            };
            var e2 = [], f2 = "undefined" != typeof Symbol && Symbol.iterator && b2[Symbol.iterator];
            if ("function" == typeof f2) {
              b2 = f2.call(b2);
              for (var g = 0; !(f2 = b2.next()).done; )
                e2.push(c2.call(d2, f2.value, g++));
            } else
              for (f2 = b2.length, g = 0; g < f2; g++)
                e2.push(c2.call(d2, b2[g], g));
            return e2;
          };
        }, "es6", "es3");
        $jscomp.polyfill("Array.prototype.values", function(a2) {
          return a2 ? a2 : function() {
            return $jscomp.iteratorFromArray(this, function(b2, c2) {
              return c2;
            });
          };
        }, "es8", "es3");
        $jscomp.polyfill("Promise.prototype.finally", function(a2) {
          return a2 ? a2 : function(b2) {
            return this.then(function(c2) {
              return Promise.resolve(b2()).then(function() {
                return c2;
              });
            }, function(c2) {
              return Promise.resolve(b2()).then(function() {
                throw c2;
              });
            });
          };
        }, "es9", "es3");
        $jscomp.polyfill("Array.prototype.entries", function(a2) {
          return a2 ? a2 : function() {
            return $jscomp.iteratorFromArray(this, function(b2, c2) {
              return [b2, c2];
            });
          };
        }, "es6", "es3");
        $jscomp.polyfill("String.prototype.repeat", function(a2) {
          return a2 ? a2 : function(b2) {
            var c2 = $jscomp.checkStringArgs(this, null, "repeat");
            if (0 > b2 || 1342177279 < b2)
              throw new RangeError("Invalid count value");
            b2 |= 0;
            for (var d2 = ""; b2; )
              if (b2 & 1 && (d2 += c2), b2 >>>= 1)
                c2 += c2;
            return d2;
          };
        }, "es6", "es3");
        $jscomp.polyfill("Number.isNaN", function(a2) {
          return a2 ? a2 : function(b2) {
            return "number" === typeof b2 && isNaN(b2);
          };
        }, "es6", "es3");
        $jscomp.polyfill("Object.values", function(a2) {
          return a2 ? a2 : function(b2) {
            var c2 = [], d2;
            for (d2 in b2)
              $jscomp.owns(b2, d2) && c2.push(b2[d2]);
            return c2;
          };
        }, "es8", "es3");
        $jscomp.polyfill("Math.log2", function(a2) {
          return a2 ? a2 : function(b2) {
            return Math.log(b2) / Math.LN2;
          };
        }, "es6", "es3");
        $jscomp.polyfill("Object.entries", function(a2) {
          return a2 ? a2 : function(b2) {
            var c2 = [], d2;
            for (d2 in b2)
              $jscomp.owns(b2, d2) && c2.push([d2, b2[d2]]);
            return c2;
          };
        }, "es8", "es3");
        var COMPILED = true, goog = goog || {};
        goog.global = this || self;
        goog.exportPath_ = function(a2, b2, c2, d2) {
          a2 = a2.split(".");
          d2 = d2 || goog.global;
          a2[0] in d2 || "undefined" == typeof d2.execScript || d2.execScript("var " + a2[0]);
          for (var e2; a2.length && (e2 = a2.shift()); )
            if (a2.length || void 0 === b2)
              d2 = d2[e2] && d2[e2] !== Object.prototype[e2] ? d2[e2] : d2[e2] = {};
            else if (!c2 && goog.isObject(b2) && goog.isObject(d2[e2]))
              for (var f2 in b2)
                b2.hasOwnProperty(f2) && (d2[e2][f2] = b2[f2]);
            else
              d2[e2] = b2;
        };
        goog.define = function(a2, b2) {
          var c2 = b2;
          if (!COMPILED) {
            var d2 = goog.global.CLOSURE_UNCOMPILED_DEFINES, e2 = goog.global.CLOSURE_DEFINES;
            d2 && void 0 === d2.nodeType && Object.prototype.hasOwnProperty.call(d2, a2) ? c2 = d2[a2] : e2 && void 0 === e2.nodeType && Object.prototype.hasOwnProperty.call(e2, a2) && (c2 = e2[a2]);
          }
          return c2;
        };
        goog.FEATURESET_YEAR = 2012;
        goog.DEBUG = true;
        goog.LOCALE = "en";
        goog.getLocale = function() {
          return goog.LOCALE;
        };
        goog.TRUSTED_SITE = true;
        goog.DISALLOW_TEST_ONLY_CODE = COMPILED && !goog.DEBUG;
        goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = false;
        goog.provide = function(a2) {
          if (goog.isInModuleLoader_())
            throw Error("goog.provide cannot be used within a module.");
          if (!COMPILED && goog.isProvided_(a2))
            throw Error('Namespace "' + a2 + '" already declared.');
          goog.constructNamespace_(a2);
        };
        goog.constructNamespace_ = function(a2, b2, c2) {
          if (!COMPILED) {
            delete goog.implicitNamespaces_[a2];
            for (var d2 = a2; (d2 = d2.substring(0, d2.lastIndexOf("."))) && !goog.getObjectByName(d2); )
              goog.implicitNamespaces_[d2] = true;
          }
          goog.exportPath_(a2, b2, c2);
        };
        goog.NONCE_PATTERN_ = /^[\w+/_-]+[=]{0,2}$/;
        goog.getScriptNonce_ = function(a2) {
          a2 = (a2 || goog.global).document;
          return (a2 = a2.querySelector && a2.querySelector("script[nonce]")) && (a2 = a2.nonce || a2.getAttribute("nonce")) && goog.NONCE_PATTERN_.test(a2) ? a2 : "";
        };
        goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
        goog.module = function(a2) {
          if ("string" !== typeof a2 || !a2 || -1 == a2.search(goog.VALID_MODULE_RE_))
            throw Error("Invalid module identifier");
          if (!goog.isInGoogModuleLoader_())
            throw Error("Module " + a2 + " has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
          if (goog.moduleLoaderState_.moduleName)
            throw Error("goog.module may only be called once per module.");
          goog.moduleLoaderState_.moduleName = a2;
          if (!COMPILED) {
            if (goog.isProvided_(a2))
              throw Error('Namespace "' + a2 + '" already declared.');
            delete goog.implicitNamespaces_[a2];
          }
        };
        goog.module.get = function(a2) {
          return goog.module.getInternal_(a2);
        };
        goog.module.getInternal_ = function(a2) {
          if (!COMPILED) {
            if (a2 in goog.loadedModules_)
              return goog.loadedModules_[a2].exports;
            if (!goog.implicitNamespaces_[a2])
              return a2 = goog.getObjectByName(a2), null != a2 ? a2 : null;
          }
          return null;
        };
        goog.ModuleType = { ES6: "es6", GOOG: "goog" };
        goog.moduleLoaderState_ = null;
        goog.isInModuleLoader_ = function() {
          return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
        };
        goog.isInGoogModuleLoader_ = function() {
          return !!goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
        };
        goog.isInEs6ModuleLoader_ = function() {
          if (goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.ES6)
            return true;
          var a2 = goog.global.$jscomp;
          return a2 ? "function" != typeof a2.getCurrentModulePath ? false : !!a2.getCurrentModulePath() : false;
        };
        goog.module.declareLegacyNamespace = function() {
          if (!COMPILED && !goog.isInGoogModuleLoader_())
            throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");
          if (!COMPILED && !goog.moduleLoaderState_.moduleName)
            throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");
          goog.moduleLoaderState_.declareLegacyNamespace = true;
        };
        goog.declareModuleId = function(a2) {
          if (!COMPILED) {
            if (!goog.isInEs6ModuleLoader_())
              throw Error("goog.declareModuleId may only be called from within an ES6 module");
            if (goog.moduleLoaderState_ && goog.moduleLoaderState_.moduleName)
              throw Error("goog.declareModuleId may only be called once per module.");
            if (a2 in goog.loadedModules_)
              throw Error('Module with namespace "' + a2 + '" already exists.');
          }
          if (goog.moduleLoaderState_)
            goog.moduleLoaderState_.moduleName = a2;
          else {
            var b2 = goog.global.$jscomp;
            if (!b2 || "function" != typeof b2.getCurrentModulePath)
              throw Error('Module with namespace "' + a2 + '" has been loaded incorrectly.');
            b2 = b2.require(b2.getCurrentModulePath());
            goog.loadedModules_[a2] = { exports: b2, type: goog.ModuleType.ES6, moduleId: a2 };
          }
        };
        goog.setTestOnly = function(a2) {
          if (goog.DISALLOW_TEST_ONLY_CODE)
            throw a2 = a2 || "", Error("Importing test-only code into non-debug environment" + (a2 ? ": " + a2 : "."));
        };
        goog.forwardDeclare = function(a2) {
        };
        COMPILED || (goog.isProvided_ = function(a2) {
          return a2 in goog.loadedModules_ || !goog.implicitNamespaces_[a2] && null != goog.getObjectByName(a2);
        }, goog.implicitNamespaces_ = { "goog.module": true });
        goog.getObjectByName = function(a2, b2) {
          for (var c2 = a2.split("."), d2 = b2 || goog.global, e2 = 0; e2 < c2.length; e2++)
            if (d2 = d2[c2[e2]], null == d2)
              return null;
          return d2;
        };
        goog.addDependency = function(a2, b2, c2, d2) {
          !COMPILED && goog.DEPENDENCIES_ENABLED && goog.debugLoader_.addDependency(a2, b2, c2, d2);
        };
        goog.ENABLE_DEBUG_LOADER = false;
        goog.logToConsole_ = function(a2) {
          goog.global.console && goog.global.console.error(a2);
        };
        goog.require = function(a2) {
          if (!COMPILED) {
            goog.ENABLE_DEBUG_LOADER && goog.debugLoader_.requested(a2);
            if (goog.isProvided_(a2)) {
              if (goog.isInModuleLoader_())
                return goog.module.getInternal_(a2);
            } else if (goog.ENABLE_DEBUG_LOADER) {
              var b2 = goog.moduleLoaderState_;
              goog.moduleLoaderState_ = null;
              try {
                goog.debugLoader_.load_(a2);
              } finally {
                goog.moduleLoaderState_ = b2;
              }
            }
            return null;
          }
        };
        goog.requireType = function(a2) {
          return {};
        };
        goog.basePath = "";
        goog.nullFunction = function() {
        };
        goog.abstractMethod = function() {
          throw Error("unimplemented abstract method");
        };
        goog.addSingletonGetter = function(a2) {
          a2.instance_ = void 0;
          a2.getInstance = function() {
            if (a2.instance_)
              return a2.instance_;
            goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a2);
            return a2.instance_ = new a2();
          };
        };
        goog.instantiatedSingletons_ = [];
        goog.LOAD_MODULE_USING_EVAL = true;
        goog.SEAL_MODULE_EXPORTS = goog.DEBUG;
        goog.loadedModules_ = {};
        goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
        goog.TRANSPILE = "detect";
        goog.ASSUME_ES_MODULES_TRANSPILED = false;
        goog.TRANSPILE_TO_LANGUAGE = "";
        goog.TRANSPILER = "transpile.js";
        goog.TRUSTED_TYPES_POLICY_NAME = "goog";
        goog.hasBadLetScoping = null;
        goog.loadModule = function(a2) {
          var b2 = goog.moduleLoaderState_;
          try {
            goog.moduleLoaderState_ = { moduleName: "", declareLegacyNamespace: false, type: goog.ModuleType.GOOG };
            var c2 = {}, d2 = c2;
            if ("function" === typeof a2)
              d2 = a2.call(void 0, d2);
            else if ("string" === typeof a2)
              d2 = goog.loadModuleFromSource_.call(void 0, d2, a2);
            else
              throw Error("Invalid module definition");
            var e2 = goog.moduleLoaderState_.moduleName;
            if ("string" === typeof e2 && e2)
              goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(e2, d2, c2 !== d2) : goog.SEAL_MODULE_EXPORTS && Object.seal && "object" == typeof d2 && null != d2 && Object.seal(d2), goog.loadedModules_[e2] = { exports: d2, type: goog.ModuleType.GOOG, moduleId: goog.moduleLoaderState_.moduleName };
            else
              throw Error('Invalid module name "' + e2 + '"');
          } finally {
            goog.moduleLoaderState_ = b2;
          }
        };
        goog.loadModuleFromSource_ = function(a, b) {
          eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(b));
          return a;
        };
        goog.normalizePath_ = function(a2) {
          a2 = a2.split("/");
          for (var b2 = 0; b2 < a2.length; )
            "." == a2[b2] ? a2.splice(b2, 1) : b2 && ".." == a2[b2] && a2[b2 - 1] && ".." != a2[b2 - 1] ? a2.splice(--b2, 2) : b2++;
          return a2.join("/");
        };
        goog.loadFileSync_ = function(a2) {
          if (goog.global.CLOSURE_LOAD_FILE_SYNC)
            return goog.global.CLOSURE_LOAD_FILE_SYNC(a2);
          try {
            var b2 = new goog.global.XMLHttpRequest();
            b2.open("get", a2, false);
            b2.send();
            return 0 == b2.status || 200 == b2.status ? b2.responseText : null;
          } catch (c2) {
            return null;
          }
        };
        goog.transpile_ = function(a2, b2, c2) {
          var d2 = goog.global.$jscomp;
          d2 || (goog.global.$jscomp = d2 = {});
          var e2 = d2.transpile;
          if (!e2) {
            var f2 = goog.basePath + goog.TRANSPILER, g = goog.loadFileSync_(f2);
            if (g) {
              (function() {
                (0, eval)(g + "\n//# sourceURL=" + f2);
              }).call(goog.global);
              if (goog.global.$gwtExport && goog.global.$gwtExport.$jscomp && !goog.global.$gwtExport.$jscomp.transpile)
                throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: ' + JSON.stringify(goog.global.$gwtExport));
              goog.global.$jscomp.transpile = goog.global.$gwtExport.$jscomp.transpile;
              d2 = goog.global.$jscomp;
              e2 = d2.transpile;
            }
          }
          e2 || (e2 = d2.transpile = function(h, k2) {
            goog.logToConsole_(k2 + " requires transpilation but no transpiler was found.");
            return h;
          });
          return e2(a2, b2, c2);
        };
        goog.typeOf = function(a2) {
          var b2 = typeof a2;
          return "object" != b2 ? b2 : a2 ? Array.isArray(a2) ? "array" : b2 : "null";
        };
        goog.isArrayLike = function(a2) {
          var b2 = goog.typeOf(a2);
          return "array" == b2 || "object" == b2 && "number" == typeof a2.length;
        };
        goog.isDateLike = function(a2) {
          return goog.isObject(a2) && "function" == typeof a2.getFullYear;
        };
        goog.isObject = function(a2) {
          var b2 = typeof a2;
          return "object" == b2 && null != a2 || "function" == b2;
        };
        goog.getUid = function(a2) {
          return Object.prototype.hasOwnProperty.call(a2, goog.UID_PROPERTY_) && a2[goog.UID_PROPERTY_] || (a2[goog.UID_PROPERTY_] = ++goog.uidCounter_);
        };
        goog.hasUid = function(a2) {
          return !!a2[goog.UID_PROPERTY_];
        };
        goog.removeUid = function(a2) {
          null !== a2 && "removeAttribute" in a2 && a2.removeAttribute(goog.UID_PROPERTY_);
          try {
            delete a2[goog.UID_PROPERTY_];
          } catch (b2) {
          }
        };
        goog.UID_PROPERTY_ = "closure_uid_" + (1e9 * Math.random() >>> 0);
        goog.uidCounter_ = 0;
        goog.cloneObject = function(a2) {
          var b2 = goog.typeOf(a2);
          if ("object" == b2 || "array" == b2) {
            if ("function" === typeof a2.clone)
              return a2.clone();
            if ("undefined" !== typeof Map && a2 instanceof Map)
              return new Map(a2);
            if ("undefined" !== typeof Set && a2 instanceof Set)
              return new Set(a2);
            b2 = "array" == b2 ? [] : {};
            for (var c2 in a2)
              b2[c2] = goog.cloneObject(a2[c2]);
            return b2;
          }
          return a2;
        };
        goog.bindNative_ = function(a2, b2, c2) {
          return a2.call.apply(a2.bind, arguments);
        };
        goog.bindJs_ = function(a2, b2, c2) {
          if (!a2)
            throw Error();
          if (2 < arguments.length) {
            var d2 = Array.prototype.slice.call(arguments, 2);
            return function() {
              var e2 = Array.prototype.slice.call(arguments);
              Array.prototype.unshift.apply(e2, d2);
              return a2.apply(b2, e2);
            };
          }
          return function() {
            return a2.apply(b2, arguments);
          };
        };
        goog.bind = function(a2, b2, c2) {
          Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
          return goog.bind.apply(null, arguments);
        };
        goog.partial = function(a2, b2) {
          var c2 = Array.prototype.slice.call(arguments, 1);
          return function() {
            var d2 = c2.slice();
            d2.push.apply(d2, arguments);
            return a2.apply(this, d2);
          };
        };
        goog.mixin = function(a2, b2) {
          for (var c2 in b2)
            a2[c2] = b2[c2];
        };
        goog.now = function() {
          return Date.now();
        };
        goog.globalEval = function(a2) {
          (0, eval)(a2);
        };
        goog.getCssName = function(a2, b2) {
          if ("." == String(a2).charAt(0))
            throw Error('className passed in goog.getCssName must not start with ".". You passed: ' + a2);
          var c2 = function(e2) {
            return goog.cssNameMapping_[e2] || e2;
          }, d2 = function(e2) {
            e2 = e2.split("-");
            for (var f2 = [], g = 0; g < e2.length; g++)
              f2.push(c2(e2[g]));
            return f2.join("-");
          };
          d2 = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? c2 : d2 : function(e2) {
            return e2;
          };
          d2 = b2 ? a2 + "-" + d2(b2) : d2(a2);
          return goog.global.CLOSURE_CSS_NAME_MAP_FN ? goog.global.CLOSURE_CSS_NAME_MAP_FN(d2) : d2;
        };
        goog.setCssNameMapping = function(a2, b2) {
          goog.cssNameMapping_ = a2;
          goog.cssNameMappingStyle_ = b2;
        };
        !COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
        goog.getMsg = function(a2, b2, c2) {
          c2 && c2.html && (a2 = a2.replace(/</g, "&lt;"));
          c2 && c2.unescapeHtmlEntities && (a2 = a2.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&apos;/g, "'").replace(/&quot;/g, '"').replace(/&amp;/g, "&"));
          b2 && (a2 = a2.replace(/\{\$([^}]+)}/g, function(d2, e2) {
            return null != b2 && e2 in b2 ? b2[e2] : d2;
          }));
          return a2;
        };
        goog.getMsgWithFallback = function(a2, b2) {
          return a2;
        };
        goog.exportSymbol = function(a2, b2, c2) {
          goog.exportPath_(a2, b2, true, c2);
        };
        goog.exportProperty = function(a2, b2, c2) {
          a2[b2] = c2;
        };
        goog.inherits = function(a2, b2) {
          function c2() {
          }
          c2.prototype = b2.prototype;
          a2.superClass_ = b2.prototype;
          a2.prototype = new c2();
          a2.prototype.constructor = a2;
          a2.base = function(d2, e2, f2) {
            for (var g = Array(arguments.length - 2), h = 2; h < arguments.length; h++)
              g[h - 2] = arguments[h];
            return b2.prototype[e2].apply(d2, g);
          };
        };
        goog.scope = function(a2) {
          if (goog.isInModuleLoader_())
            throw Error("goog.scope is not supported within a module.");
          a2.call(goog.global);
        };
        COMPILED || (goog.global.COMPILED = COMPILED);
        goog.defineClass = function(a2, b2) {
          var c2 = b2.constructor, d2 = b2.statics;
          c2 && c2 != Object.prototype.constructor || (c2 = function() {
            throw Error("cannot instantiate an interface (no constructor defined).");
          });
          c2 = goog.defineClass.createSealingConstructor_(c2, a2);
          a2 && goog.inherits(c2, a2);
          delete b2.constructor;
          delete b2.statics;
          goog.defineClass.applyProperties_(c2.prototype, b2);
          null != d2 && (d2 instanceof Function ? d2(c2) : goog.defineClass.applyProperties_(c2, d2));
          return c2;
        };
        goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;
        goog.defineClass.createSealingConstructor_ = function(a2, b2) {
          return goog.defineClass.SEAL_CLASS_INSTANCES ? function() {
            var c2 = a2.apply(this, arguments) || this;
            c2[goog.UID_PROPERTY_] = c2[goog.UID_PROPERTY_];
            return c2;
          } : a2;
        };
        goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
        goog.defineClass.applyProperties_ = function(a2, b2) {
          for (var c2 in b2)
            Object.prototype.hasOwnProperty.call(b2, c2) && (a2[c2] = b2[c2]);
          for (var d2 = 0; d2 < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; d2++)
            c2 = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d2], Object.prototype.hasOwnProperty.call(b2, c2) && (a2[c2] = b2[c2]);
        };
        goog.identity_ = function(a2) {
          return a2;
        };
        goog.createTrustedTypesPolicy = function(a2) {
          var b2 = null, c2 = goog.global.trustedTypes;
          if (!c2 || !c2.createPolicy)
            return b2;
          try {
            b2 = c2.createPolicy(a2, { createHTML: goog.identity_, createScript: goog.identity_, createScriptURL: goog.identity_ });
          } catch (d2) {
            goog.logToConsole_(d2.message);
          }
          return b2;
        };
        !COMPILED && goog.DEPENDENCIES_ENABLED && (goog.isEdge_ = function() {
          return !!(goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent : "").match(/Edge\/(\d+)(\.\d)*/i);
        }, goog.inHtmlDocument_ = function() {
          var a2 = goog.global.document;
          return null != a2 && "write" in a2;
        }, goog.isDocumentLoading_ = function() {
          var a2 = goog.global.document;
          return a2.attachEvent ? "complete" != a2.readyState : "loading" == a2.readyState;
        }, goog.findBasePath_ = function() {
          if (void 0 != goog.global.CLOSURE_BASE_PATH && "string" === typeof goog.global.CLOSURE_BASE_PATH)
            goog.basePath = goog.global.CLOSURE_BASE_PATH;
          else if (goog.inHtmlDocument_()) {
            var a2 = goog.global.document, b2 = a2.currentScript;
            a2 = b2 ? [b2] : a2.getElementsByTagName("SCRIPT");
            for (b2 = a2.length - 1; 0 <= b2; --b2) {
              var c2 = a2[b2].src, d2 = c2.lastIndexOf("?");
              d2 = -1 == d2 ? c2.length : d2;
              if ("base.js" == c2.substr(d2 - 7, 7)) {
                goog.basePath = c2.substr(0, d2 - 7);
                break;
              }
            }
          }
        }, goog.findBasePath_(), goog.Transpiler = function() {
          this.requiresTranspilation_ = null;
          this.transpilationTarget_ = goog.TRANSPILE_TO_LANGUAGE;
        }, goog.Transpiler.prototype.createRequiresTranspilation_ = function() {
          function a(f2, g) {
            e ? d[f2] = true : g() ? (c = f2, d[f2] = false) : e = d[f2] = true;
          }
          function b(f) {
            try {
              return !!eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(f));
            } catch (g) {
              return false;
            }
          }
          var c = "es3", d = { es3: false }, e = false;
          a("es5", function() {
            return b("[1,].length==1");
          });
          a("es6", function() {
            return goog.isEdge_() ? false : b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()');
          });
          a("es7", function() {
            return b("2**3==8");
          });
          a("es8", function() {
            return b("async()=>1,1");
          });
          a("es9", function() {
            return b("({...rest}={}),1");
          });
          a("es_2019", function() {
            return b('let r;try{r="\u2029"}catch{};r');
          });
          a("es_2020", function() {
            return b("null?.x??1");
          });
          a("es_next", function() {
            return false;
          });
          return { target: c, map: d };
        }, goog.Transpiler.prototype.needsTranspile = function(a2, b2) {
          if ("always" == goog.TRANSPILE)
            return true;
          if ("never" == goog.TRANSPILE)
            return false;
          if (!this.requiresTranspilation_) {
            var c2 = this.createRequiresTranspilation_();
            this.requiresTranspilation_ = c2.map;
            this.transpilationTarget_ = this.transpilationTarget_ || c2.target;
          }
          if (a2 in this.requiresTranspilation_)
            return this.requiresTranspilation_[a2] ? true : !goog.inHtmlDocument_() || "es6" != b2 || "noModule" in goog.global.document.createElement("script") ? false : true;
          throw Error("Unknown language mode: " + a2);
        }, goog.Transpiler.prototype.transpile = function(a2, b2) {
          return goog.transpile_(a2, b2, this.transpilationTarget_);
        }, goog.transpiler_ = new goog.Transpiler(), goog.protectScriptTag_ = function(a2) {
          return a2.replace(
            /<\/(SCRIPT)/ig,
            "\\x3c/$1"
          );
        }, goog.DebugLoader_ = function() {
          this.dependencies_ = {};
          this.idToPath_ = {};
          this.written_ = {};
          this.loadingDeps_ = [];
          this.depsToLoad_ = [];
          this.paused_ = false;
          this.factory_ = new goog.DependencyFactory(goog.transpiler_);
          this.deferredCallbacks_ = {};
          this.deferredQueue_ = [];
        }, goog.DebugLoader_.prototype.bootstrap = function(a2, b2) {
          function c2() {
            d2 && (goog.global.setTimeout(d2, 0), d2 = null);
          }
          var d2 = b2;
          if (a2.length) {
            for (var e2 = [], f2 = 0; f2 < a2.length; f2++) {
              var g = this.getPathFromDeps_(a2[f2]);
              if (!g)
                throw Error("Unregonized namespace: " + a2[f2]);
              e2.push(this.dependencies_[g]);
            }
            g = goog.require;
            var h = 0;
            for (f2 = 0; f2 < a2.length; f2++)
              g(a2[f2]), e2[f2].onLoad(function() {
                ++h == a2.length && c2();
              });
          } else
            c2();
        }, goog.DebugLoader_.prototype.loadClosureDeps = function() {
          this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath + "deps.js"), "deps.js", [], [], {}, false));
          this.loadDeps_();
        }, goog.DebugLoader_.prototype.requested = function(a2, b2) {
          var c2 = this.getPathFromDeps_(a2);
          if (c2 && (b2 || this.areDepsLoaded_(this.dependencies_[c2].requires))) {
            var d2 = this.deferredCallbacks_[c2];
            d2 && (delete this.deferredCallbacks_[c2], d2());
          }
        }, goog.DebugLoader_.prototype.setDependencyFactory = function(a2) {
          this.factory_ = a2;
        }, goog.DebugLoader_.prototype.load_ = function(a2) {
          if (this.getPathFromDeps_(a2)) {
            var b2 = this, c2 = [], d2 = function(e2) {
              var f2 = b2.getPathFromDeps_(e2);
              if (!f2)
                throw Error("Bad dependency path or symbol: " + e2);
              if (!b2.written_[f2]) {
                b2.written_[f2] = true;
                e2 = b2.dependencies_[f2];
                for (f2 = 0; f2 < e2.requires.length; f2++)
                  goog.isProvided_(e2.requires[f2]) || d2(e2.requires[f2]);
                c2.push(e2);
              }
            };
            d2(a2);
            a2 = !!this.depsToLoad_.length;
            this.depsToLoad_ = this.depsToLoad_.concat(c2);
            this.paused_ || a2 || this.loadDeps_();
          } else
            goog.logToConsole_("goog.require could not find: " + a2);
        }, goog.DebugLoader_.prototype.loadDeps_ = function() {
          for (var a2 = this, b2 = this.paused_; this.depsToLoad_.length && !b2; )
            (function() {
              var c2 = false, d2 = a2.depsToLoad_.shift(), e2 = false;
              a2.loading_(d2);
              var f2 = {
                pause: function() {
                  if (c2)
                    throw Error("Cannot call pause after the call to load.");
                  b2 = true;
                },
                resume: function() {
                  c2 ? a2.resume_() : b2 = false;
                },
                loaded: function() {
                  if (e2)
                    throw Error("Double call to loaded.");
                  e2 = true;
                  a2.loaded_(d2);
                },
                pending: function() {
                  for (var g = [], h = 0; h < a2.loadingDeps_.length; h++)
                    g.push(a2.loadingDeps_[h]);
                  return g;
                },
                setModuleState: function(g) {
                  goog.moduleLoaderState_ = { type: g, moduleName: "", declareLegacyNamespace: false };
                },
                registerEs6ModuleExports: function(g, h, k2) {
                  k2 && (goog.loadedModules_[k2] = { exports: h, type: goog.ModuleType.ES6, moduleId: k2 || "" });
                },
                registerGoogModuleExports: function(g, h) {
                  goog.loadedModules_[g] = { exports: h, type: goog.ModuleType.GOOG, moduleId: g };
                },
                clearModuleState: function() {
                  goog.moduleLoaderState_ = null;
                },
                defer: function(g) {
                  if (c2)
                    throw Error("Cannot register with defer after the call to load.");
                  a2.defer_(d2, g);
                },
                areDepsLoaded: function() {
                  return a2.areDepsLoaded_(d2.requires);
                }
              };
              try {
                d2.load(f2);
              } finally {
                c2 = true;
              }
            })();
          b2 && this.pause_();
        }, goog.DebugLoader_.prototype.pause_ = function() {
          this.paused_ = true;
        }, goog.DebugLoader_.prototype.resume_ = function() {
          this.paused_ && (this.paused_ = false, this.loadDeps_());
        }, goog.DebugLoader_.prototype.loading_ = function(a2) {
          this.loadingDeps_.push(a2);
        }, goog.DebugLoader_.prototype.loaded_ = function(a2) {
          for (var b2 = 0; b2 < this.loadingDeps_.length; b2++)
            if (this.loadingDeps_[b2] == a2) {
              this.loadingDeps_.splice(
                b2,
                1
              );
              break;
            }
          for (b2 = 0; b2 < this.deferredQueue_.length; b2++)
            if (this.deferredQueue_[b2] == a2.path) {
              this.deferredQueue_.splice(b2, 1);
              break;
            }
          if (this.loadingDeps_.length == this.deferredQueue_.length && !this.depsToLoad_.length)
            for (; this.deferredQueue_.length; )
              this.requested(this.deferredQueue_.shift(), true);
          a2.loaded();
        }, goog.DebugLoader_.prototype.areDepsLoaded_ = function(a2) {
          for (var b2 = 0; b2 < a2.length; b2++) {
            var c2 = this.getPathFromDeps_(a2[b2]);
            if (!c2 || !(c2 in this.deferredCallbacks_ || goog.isProvided_(a2[b2])))
              return false;
          }
          return true;
        }, goog.DebugLoader_.prototype.getPathFromDeps_ = function(a2) {
          return a2 in this.idToPath_ ? this.idToPath_[a2] : a2 in this.dependencies_ ? a2 : null;
        }, goog.DebugLoader_.prototype.defer_ = function(a2, b2) {
          this.deferredCallbacks_[a2.path] = b2;
          this.deferredQueue_.push(a2.path);
        }, goog.LoadController = function() {
        }, goog.LoadController.prototype.pause = function() {
        }, goog.LoadController.prototype.resume = function() {
        }, goog.LoadController.prototype.loaded = function() {
        }, goog.LoadController.prototype.pending = function() {
        }, goog.LoadController.prototype.registerEs6ModuleExports = function(a2, b2, c2) {
        }, goog.LoadController.prototype.setModuleState = function(a2) {
        }, goog.LoadController.prototype.clearModuleState = function() {
        }, goog.LoadController.prototype.defer = function(a2) {
        }, goog.LoadController.prototype.areDepsLoaded = function() {
        }, goog.Dependency = function(a2, b2, c2, d2, e2) {
          this.path = a2;
          this.relativePath = b2;
          this.provides = c2;
          this.requires = d2;
          this.loadFlags = e2;
          this.loaded_ = false;
          this.loadCallbacks_ = [];
        }, goog.Dependency.prototype.getPathName = function() {
          var a2 = this.path, b2 = a2.indexOf("://");
          0 <= b2 && (a2 = a2.substring(b2 + 3), b2 = a2.indexOf("/"), 0 <= b2 && (a2 = a2.substring(b2 + 1)));
          return a2;
        }, goog.Dependency.prototype.onLoad = function(a2) {
          this.loaded_ ? a2() : this.loadCallbacks_.push(a2);
        }, goog.Dependency.prototype.loaded = function() {
          this.loaded_ = true;
          var a2 = this.loadCallbacks_;
          this.loadCallbacks_ = [];
          for (var b2 = 0; b2 < a2.length; b2++)
            a2[b2]();
        }, goog.Dependency.defer_ = false, goog.Dependency.callbackMap_ = {}, goog.Dependency.registerCallback_ = function(a2) {
          var b2 = Math.random().toString(32);
          goog.Dependency.callbackMap_[b2] = a2;
          return b2;
        }, goog.Dependency.unregisterCallback_ = function(a2) {
          delete goog.Dependency.callbackMap_[a2];
        }, goog.Dependency.callback_ = function(a2, b2) {
          if (a2 in goog.Dependency.callbackMap_) {
            for (var c2 = goog.Dependency.callbackMap_[a2], d2 = [], e2 = 1; e2 < arguments.length; e2++)
              d2.push(arguments[e2]);
            c2.apply(void 0, d2);
          } else
            throw Error("Callback key " + a2 + " does not exist (was base.js loaded more than once?).");
        }, goog.Dependency.prototype.load = function(a2) {
          if (goog.global.CLOSURE_IMPORT_SCRIPT)
            goog.global.CLOSURE_IMPORT_SCRIPT(this.path) ? a2.loaded() : a2.pause();
          else if (goog.inHtmlDocument_()) {
            var b2 = goog.global.document;
            if ("complete" == b2.readyState && !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
              if (/\bdeps.js$/.test(this.path)) {
                a2.loaded();
                return;
              }
              throw Error('Cannot write "' + this.path + '" after document load');
            }
            var c2 = goog.getScriptNonce_();
            if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && goog.isDocumentLoading_()) {
              var d2 = function(h) {
                h.readyState && "complete" != h.readyState ? h.onload = d2 : (goog.Dependency.unregisterCallback_(e2), a2.loaded());
              };
              var e2 = goog.Dependency.registerCallback_(d2);
              c2 = c2 ? ' nonce="' + c2 + '"' : "";
              var f2 = '<script src="' + this.path + '"' + c2 + (goog.Dependency.defer_ ? " defer" : "") + ' id="script-' + e2 + '"><\/script>';
              f2 += "<script" + c2 + ">";
              f2 = goog.Dependency.defer_ ? f2 + ("document.getElementById('script-" + e2 + "').onload = function() {\n  goog.Dependency.callback_('" + e2 + "', this);\n};\n") : f2 + ("goog.Dependency.callback_('" + e2 + "', document.getElementById('script-" + e2 + "'));");
              f2 += "<\/script>";
              b2.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(f2) : f2);
            } else {
              var g = b2.createElement("script");
              g.defer = goog.Dependency.defer_;
              g.async = false;
              c2 && (g.nonce = c2);
              g.onload = function() {
                g.onload = null;
                a2.loaded();
              };
              g.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path) : this.path;
              b2.head.appendChild(g);
            }
          } else
            goog.logToConsole_("Cannot use default debug loader outside of HTML documents."), "deps.js" == this.relativePath ? (goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."), a2.loaded()) : a2.pause();
        }, goog.Es6ModuleDependency = function(a2, b2, c2, d2, e2) {
          goog.Dependency.call(
            this,
            a2,
            b2,
            c2,
            d2,
            e2
          );
        }, goog.inherits(goog.Es6ModuleDependency, goog.Dependency), goog.Es6ModuleDependency.prototype.load = function(a2) {
          function b2(l, m) {
            var n = "", p = goog.getScriptNonce_();
            p && (n = ' nonce="' + p + '"');
            n = m ? '<script type="module" crossorigin' + n + ">" + m + "<\/script>" : '<script type="module" crossorigin src="' + l + '"' + n + "><\/script>";
            d2.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(n) : n);
          }
          function c2(l, m) {
            var n = d2.createElement("script");
            n.defer = true;
            n.async = false;
            n.type = "module";
            n.setAttribute(
              "crossorigin",
              true
            );
            var p = goog.getScriptNonce_();
            p && (n.nonce = p);
            m ? n.text = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScript(m) : m : n.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(l) : l;
            d2.head.appendChild(n);
          }
          if (goog.global.CLOSURE_IMPORT_SCRIPT)
            goog.global.CLOSURE_IMPORT_SCRIPT(this.path) ? a2.loaded() : a2.pause();
          else if (goog.inHtmlDocument_()) {
            var d2 = goog.global.document, e2 = this;
            if (goog.isDocumentLoading_()) {
              var f2 = b2;
              goog.Dependency.defer_ = true;
            } else
              f2 = c2;
            var g = goog.Dependency.registerCallback_(function() {
              goog.Dependency.unregisterCallback_(g);
              a2.setModuleState(goog.ModuleType.ES6);
            });
            f2(void 0, 'goog.Dependency.callback_("' + g + '")');
            f2(this.path, void 0);
            var h = goog.Dependency.registerCallback_(function(l) {
              goog.Dependency.unregisterCallback_(h);
              a2.registerEs6ModuleExports(e2.path, l, goog.moduleLoaderState_.moduleName);
            });
            f2(void 0, 'import * as m from "' + this.path + '"; goog.Dependency.callback_("' + h + '", m)');
            var k2 = goog.Dependency.registerCallback_(function() {
              goog.Dependency.unregisterCallback_(k2);
              a2.clearModuleState();
              a2.loaded();
            });
            f2(void 0, 'goog.Dependency.callback_("' + k2 + '")');
          } else
            goog.logToConsole_("Cannot use default debug loader outside of HTML documents."), a2.pause();
        }, goog.TransformedDependency = function(a2, b2, c2, d2, e2) {
          goog.Dependency.call(this, a2, b2, c2, d2, e2);
          this.contents_ = null;
          this.lazyFetch_ = !goog.inHtmlDocument_() || !("noModule" in goog.global.document.createElement("script"));
        }, goog.inherits(goog.TransformedDependency, goog.Dependency), goog.TransformedDependency.prototype.load = function(a2) {
          function b2() {
            e2.contents_ = goog.loadFileSync_(e2.path);
            e2.contents_ && (e2.contents_ = e2.transform(e2.contents_), e2.contents_ && (e2.contents_ += "\n//# sourceURL=" + e2.path));
          }
          function c2() {
            e2.lazyFetch_ && b2();
            if (e2.contents_) {
              f2 && a2.setModuleState(goog.ModuleType.ES6);
              try {
                var l = e2.contents_;
                e2.contents_ = null;
                goog.globalEval(goog.CLOSURE_EVAL_PREFILTER_.createScript(l));
                if (f2)
                  var m = goog.moduleLoaderState_.moduleName;
              } finally {
                f2 && a2.clearModuleState();
              }
              f2 && goog.global.$jscomp.require.ensure([e2.getPathName()], function() {
                a2.registerEs6ModuleExports(e2.path, goog.global.$jscomp.require(e2.getPathName()), m);
              });
              a2.loaded();
            }
          }
          function d2() {
            var l = goog.global.document, m = goog.Dependency.registerCallback_(function() {
              goog.Dependency.unregisterCallback_(m);
              c2();
            }), n = goog.getScriptNonce_();
            n = "<script" + (n ? ' nonce="' + n + '"' : "") + ">" + goog.protectScriptTag_('goog.Dependency.callback_("' + m + '");') + "<\/script>";
            l.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(n) : n);
          }
          var e2 = this;
          if (goog.global.CLOSURE_IMPORT_SCRIPT)
            b2(), this.contents_ && goog.global.CLOSURE_IMPORT_SCRIPT("", this.contents_) ? (this.contents_ = null, a2.loaded()) : a2.pause();
          else {
            var f2 = this.loadFlags.module == goog.ModuleType.ES6;
            this.lazyFetch_ || b2();
            var g = 1 < a2.pending().length;
            if (goog.Dependency.defer_ && (g || goog.isDocumentLoading_()))
              a2.defer(function() {
                c2();
              });
            else {
              var h = goog.global.document;
              g = goog.inHtmlDocument_() && ("ActiveXObject" in goog.global || goog.isEdge_());
              if (f2 && goog.inHtmlDocument_() && goog.isDocumentLoading_() && !g) {
                goog.Dependency.defer_ = true;
                a2.pause();
                var k2 = h.onreadystatechange;
                h.onreadystatechange = function() {
                  "interactive" == h.readyState && (h.onreadystatechange = k2, c2(), a2.resume());
                  "function" === typeof k2 && k2.apply(void 0, arguments);
                };
              } else
                goog.inHtmlDocument_() && goog.isDocumentLoading_() ? d2() : c2();
            }
          }
        }, goog.TransformedDependency.prototype.transform = function(a2) {
        }, goog.TranspiledDependency = function(a2, b2, c2, d2, e2, f2) {
          goog.TransformedDependency.call(this, a2, b2, c2, d2, e2);
          this.transpiler = f2;
        }, goog.inherits(goog.TranspiledDependency, goog.TransformedDependency), goog.TranspiledDependency.prototype.transform = function(a2) {
          return this.transpiler.transpile(a2, this.getPathName());
        }, goog.PreTranspiledEs6ModuleDependency = function(a2, b2, c2, d2, e2) {
          goog.TransformedDependency.call(this, a2, b2, c2, d2, e2);
        }, goog.inherits(goog.PreTranspiledEs6ModuleDependency, goog.TransformedDependency), goog.PreTranspiledEs6ModuleDependency.prototype.transform = function(a2) {
          return a2;
        }, goog.GoogModuleDependency = function(a2, b2, c2, d2, e2, f2, g) {
          goog.TransformedDependency.call(this, a2, b2, c2, d2, e2);
          this.needsTranspile_ = f2;
          this.transpiler_ = g;
        }, goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency), goog.GoogModuleDependency.prototype.transform = function(a2) {
          this.needsTranspile_ && (a2 = this.transpiler_.transpile(a2, this.getPathName()));
          return goog.LOAD_MODULE_USING_EVAL && void 0 !== goog.global.JSON ? "goog.loadModule(" + goog.global.JSON.stringify(a2 + "\n//# sourceURL=" + this.path + "\n") + ");" : 'goog.loadModule(function(exports) {"use strict";' + a2 + "\n;return exports});\n//# sourceURL=" + this.path + "\n";
        }, goog.DebugLoader_.prototype.addDependency = function(a2, b2, c2, d2) {
          b2 = b2 || [];
          a2 = a2.replace(/\\/g, "/");
          var e2 = goog.normalizePath_(goog.basePath + a2);
          d2 && "boolean" !== typeof d2 || (d2 = d2 ? { module: goog.ModuleType.GOOG } : {});
          c2 = this.factory_.createDependency(e2, a2, b2, c2, d2, goog.transpiler_.needsTranspile(d2.lang || "es3", d2.module));
          this.dependencies_[e2] = c2;
          for (c2 = 0; c2 < b2.length; c2++)
            this.idToPath_[b2[c2]] = e2;
          this.idToPath_[a2] = e2;
        }, goog.DependencyFactory = function(a2) {
          this.transpiler = a2;
        }, goog.DependencyFactory.prototype.createDependency = function(a2, b2, c2, d2, e2, f2) {
          return e2.module == goog.ModuleType.GOOG ? new goog.GoogModuleDependency(a2, b2, c2, d2, e2, f2, this.transpiler) : f2 ? new goog.TranspiledDependency(a2, b2, c2, d2, e2, this.transpiler) : e2.module == goog.ModuleType.ES6 ? "never" == goog.TRANSPILE && goog.ASSUME_ES_MODULES_TRANSPILED ? new goog.PreTranspiledEs6ModuleDependency(a2, b2, c2, d2, e2) : new goog.Es6ModuleDependency(a2, b2, c2, d2, e2) : new goog.Dependency(a2, b2, c2, d2, e2);
        }, goog.debugLoader_ = new goog.DebugLoader_(), goog.loadClosureDeps = function() {
          goog.debugLoader_.loadClosureDeps();
        }, goog.setDependencyFactory = function(a2) {
          goog.debugLoader_.setDependencyFactory(a2);
        }, goog.TRUSTED_TYPES_POLICY_ = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#base") : null, goog.global.CLOSURE_NO_DEPS || goog.debugLoader_.loadClosureDeps(), goog.bootstrap = function(a2, b2) {
          goog.debugLoader_.bootstrap(a2, b2);
        });
        if (!COMPILED) {
          var isChrome87 = false;
          try {
            isChrome87 = eval(goog.global.trustedTypes.emptyScript) !== goog.global.trustedTypes.emptyScript;
          } catch (a2) {
          }
          goog.CLOSURE_EVAL_PREFILTER_ = goog.global.trustedTypes && isChrome87 && goog.createTrustedTypesPolicy("goog#base#devonly#eval") || { createScript: goog.identity_ };
        }
        ;
        goog.asserts = function() {
        };
        goog.asserts.assert = function(a2, b2) {
        };
        goog.asserts.ENABLE_ASSERTS = true;
        goog.asserts.ENABLE_ASSERTS && console.assert && console.assert.bind && (goog.asserts.assert = console.assert.bind(console));
        var shaka = { abr: {} };
        shaka.abr.Ewma = function(a2) {
          goog.asserts.assert(0 < a2, "expected halfLife to be positive");
          this.alpha_ = Math.exp(Math.log(0.5) / a2);
          this.totalWeight_ = this.estimate_ = 0;
        };
        shaka.abr.Ewma.prototype.updateAlpha = function(a2) {
          goog.asserts.assert(0 < a2, "expected halfLife to be positive");
          this.alpha_ = Math.exp(Math.log(0.5) / a2);
        };
        shaka.abr.Ewma.prototype.sample = function(a2, b2) {
          var c2 = Math.pow(this.alpha_, a2);
          c2 = b2 * (1 - c2) + c2 * this.estimate_;
          isNaN(c2) || (this.estimate_ = c2, this.totalWeight_ += a2);
        };
        shaka.abr.Ewma.prototype.getEstimate = function() {
          return this.estimate_ / (1 - Math.pow(this.alpha_, this.totalWeight_));
        };
        shaka.abr.EwmaBandwidthEstimator = function() {
          this.fast_ = new shaka.abr.Ewma(2);
          this.slow_ = new shaka.abr.Ewma(5);
          this.bytesSampled_ = 0;
          this.minTotalBytes_ = 128e3;
          this.minBytes_ = 16e3;
        };
        shaka.abr.EwmaBandwidthEstimator.prototype.configure = function(a2) {
          this.minTotalBytes_ = a2.minTotalBytes;
          this.minBytes_ = a2.minBytes;
          this.fast_.updateAlpha(a2.fastHalfLife);
          this.slow_.updateAlpha(a2.slowHalfLife);
        };
        shaka.abr.EwmaBandwidthEstimator.prototype.sample = function(a2, b2) {
          if (!(b2 < this.minBytes_)) {
            var c2 = 8e3 * b2 / a2, d2 = a2 / 1e3;
            this.bytesSampled_ += b2;
            this.fast_.sample(d2, c2);
            this.slow_.sample(d2, c2);
          }
        };
        shaka.abr.EwmaBandwidthEstimator.prototype.getBandwidthEstimate = function(a2) {
          return this.bytesSampled_ < this.minTotalBytes_ ? a2 : Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
        };
        shaka.abr.EwmaBandwidthEstimator.prototype.hasGoodEstimate = function() {
          return this.bytesSampled_ >= this.minTotalBytes_;
        };
        shaka.log = function() {
        };
        shaka.log.alwaysError = function() {
        };
        shaka.log.alwaysWarn = function() {
        };
        shaka.log.warnOnce = function(a2) {
          var b2 = $jscomp.getRestArguments.apply(1, arguments);
          shaka.log.oneTimeWarningIssued_.has(a2) || (shaka.log.oneTimeWarningIssued_.add(a2), shaka.log.alwaysWarn.apply(shaka.log, $jscomp.arrayFromIterable(b2)));
        };
        shaka.log.error = function() {
        };
        shaka.log.warning = function() {
        };
        shaka.log.info = function() {
        };
        shaka.log.debug = function() {
        };
        shaka.log.v1 = function() {
        };
        shaka.log.v2 = function() {
        };
        shaka.log.Level = { NONE: 0, ERROR: 1, WARNING: 2, INFO: 3, DEBUG: 4, V1: 5, V2: 6 };
        shaka.log.MAX_LOG_LEVEL = 4;
        shaka.log.oneTimeWarningIssued_ = /* @__PURE__ */ new Set();
        if (window.console && window.console.log.bind) {
          var $jscomp$compprop0 = {};
          shaka.log.logMap_ = ($jscomp$compprop0[shaka.log.Level.ERROR] = console.error.bind(console), $jscomp$compprop0[shaka.log.Level.WARNING] = console.warn.bind(console), $jscomp$compprop0[shaka.log.Level.INFO] = console.info.bind(console), $jscomp$compprop0[shaka.log.Level.DEBUG] = console.log.bind(console), $jscomp$compprop0[shaka.log.Level.V1] = console.debug.bind(console), $jscomp$compprop0[shaka.log.Level.V2] = console.debug.bind(console), $jscomp$compprop0);
          shaka.log.alwaysWarn = shaka.log.logMap_[shaka.log.Level.WARNING];
          shaka.log.alwaysError = shaka.log.logMap_[shaka.log.Level.ERROR];
          goog.DEBUG ? (goog.exportSymbol("shaka.log", shaka.log), shaka.log.setLevel = function(a2) {
            var b2 = function(c2) {
              return c2 <= a2 ? (goog.asserts.assert(shaka.log.logMap_[c2], "Unexpected log level"), shaka.log.logMap_[c2]) : function() {
              };
            };
            shaka.log.currentLevel = a2;
            shaka.log.error = b2(shaka.log.Level.ERROR);
            shaka.log.warning = b2(shaka.log.Level.WARNING);
            shaka.log.info = b2(shaka.log.Level.INFO);
            shaka.log.debug = b2(shaka.log.Level.DEBUG);
            shaka.log.v1 = b2(shaka.log.Level.V1);
            shaka.log.v2 = b2(shaka.log.Level.V2);
          }, shaka.log.setLevel(shaka.log.MAX_LOG_LEVEL)) : (shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.ERROR && (shaka.log.error = shaka.log.logMap_[shaka.log.Level.ERROR]), shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.WARNING && (shaka.log.warning = shaka.log.logMap_[shaka.log.Level.WARNING]), shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.INFO && (shaka.log.info = shaka.log.logMap_[shaka.log.Level.INFO]), shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.DEBUG && (shaka.log.debug = shaka.log.logMap_[shaka.log.Level.DEBUG]), shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.V1 && (shaka.log.v1 = shaka.log.logMap_[shaka.log.Level.V1]), shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.V2 && (shaka.log.v2 = shaka.log.logMap_[shaka.log.Level.V2]));
        }
        ;
        shaka.util = {};
        shaka.util.ArrayUtils = function() {
        };
        shaka.util.ArrayUtils.defaultEquals = function(a2, b2) {
          return "number" === typeof a2 && "number" === typeof b2 && isNaN(a2) && isNaN(b2) ? true : a2 === b2;
        };
        shaka.util.ArrayUtils.remove = function(a2, b2) {
          var c2 = a2.indexOf(b2);
          -1 < c2 && a2.splice(c2, 1);
        };
        shaka.util.ArrayUtils.count = function(a2, b2) {
          for (var c2 = 0, d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next())
            c2 += b2(e2.value) ? 1 : 0;
          return c2;
        };
        shaka.util.ArrayUtils.hasSameElements = function(a2, b2, c2) {
          c2 || (c2 = shaka.util.ArrayUtils.defaultEquals);
          if (a2.length != b2.length)
            return false;
          b2 = b2.slice();
          var d2 = {};
          a2 = $jscomp.makeIterator(a2);
          for (var e2 = a2.next(); !e2.done; d2 = { $jscomp$loop$prop$item$574: d2.$jscomp$loop$prop$item$574 }, e2 = a2.next()) {
            d2.$jscomp$loop$prop$item$574 = e2.value;
            e2 = b2.findIndex(function(f2) {
              return function(g) {
                return c2(f2.$jscomp$loop$prop$item$574, g);
              };
            }(d2));
            if (-1 == e2)
              return false;
            b2[e2] = b2[b2.length - 1];
            b2.pop();
          }
          return 0 == b2.length;
        };
        shaka.util.ArrayUtils.equal = function(a2, b2, c2) {
          c2 || (c2 = shaka.util.ArrayUtils.defaultEquals);
          if (a2.length != b2.length)
            return false;
          for (var d2 = 0; d2 < a2.length; d2++)
            if (!c2(a2[d2], b2[d2]))
              return false;
          return true;
        };
        shaka.text = {};
        shaka.text.Cue = function(a2, b2, c2) {
          var d2 = shaka.text.Cue;
          this.startTime = a2;
          this.direction = d2.direction.HORIZONTAL_LEFT_TO_RIGHT;
          this.endTime = b2;
          this.payload = c2;
          this.region = new shaka.text.CueRegion();
          this.position = null;
          this.positionAlign = d2.positionAlign.AUTO;
          this.size = 0;
          this.textAlign = d2.textAlign.CENTER;
          this.writingMode = d2.writingMode.HORIZONTAL_TOP_TO_BOTTOM;
          this.lineInterpretation = d2.lineInterpretation.LINE_NUMBER;
          this.line = null;
          this.lineHeight = "";
          this.lineAlign = d2.lineAlign.START;
          this.displayAlign = d2.displayAlign.AFTER;
          this.fontSize = this.textStrokeWidth = this.textStrokeColor = this.border = this.backgroundImage = this.backgroundColor = this.color = "";
          this.fontWeight = d2.fontWeight.NORMAL;
          this.fontStyle = d2.fontStyle.NORMAL;
          this.linePadding = this.letterSpacing = this.fontFamily = "";
          this.opacity = 1;
          this.textDecoration = [];
          this.wrapLine = true;
          this.id = "";
          this.nestedCues = [];
          this.spacer = this.lineBreak = this.isContainer = false;
          this.cellResolution = { columns: 32, rows: 15 };
        };
        shaka.text.Cue.lineBreak = function(a2, b2) {
          var c2 = new shaka.text.Cue(a2, b2, "");
          c2.lineBreak = true;
          return c2;
        };
        shaka.text.Cue.prototype.clone = function() {
          var a2 = new shaka.text.Cue(0, 0, ""), b2;
          for (b2 in this)
            a2[b2] = this[b2], a2[b2] && a2[b2].constructor == Array && (a2[b2] = a2[b2].slice());
          return a2;
        };
        shaka.text.Cue.equal = function(a2, b2) {
          if (a2.startTime != b2.startTime || a2.endTime != b2.endTime || a2.payload != b2.payload)
            return false;
          for (var c2 in a2)
            if ("startTime" != c2 && "endTime" != c2 && "payload" != c2) {
              if ("nestedCues" == c2) {
                if (!shaka.util.ArrayUtils.equal(a2.nestedCues, b2.nestedCues, shaka.text.Cue.equal))
                  return false;
              } else if ("region" == c2 || "cellResolution" == c2)
                for (var d2 in a2[c2]) {
                  if (a2[c2][d2] != b2[c2][d2])
                    return false;
                }
              else if (Array.isArray(a2[c2])) {
                if (!shaka.util.ArrayUtils.equal(a2[c2], b2[c2]))
                  return false;
              } else if (a2[c2] != b2[c2])
                return false;
            }
          return true;
        };
        goog.exportSymbol("shaka.text.Cue", shaka.text.Cue);
        shaka.text.Cue.positionAlign = { LEFT: "line-left", RIGHT: "line-right", CENTER: "center", AUTO: "auto" };
        goog.exportProperty(shaka.text.Cue, "positionAlign", shaka.text.Cue.positionAlign);
        shaka.text.Cue.textAlign = { LEFT: "left", RIGHT: "right", CENTER: "center", START: "start", END: "end" };
        goog.exportProperty(shaka.text.Cue, "textAlign", shaka.text.Cue.textAlign);
        shaka.text.Cue.displayAlign = { BEFORE: "before", CENTER: "center", AFTER: "after" };
        goog.exportProperty(shaka.text.Cue, "displayAlign", shaka.text.Cue.displayAlign);
        shaka.text.Cue.direction = { HORIZONTAL_LEFT_TO_RIGHT: "ltr", HORIZONTAL_RIGHT_TO_LEFT: "rtl" };
        goog.exportProperty(shaka.text.Cue, "direction", shaka.text.Cue.direction);
        shaka.text.Cue.writingMode = { HORIZONTAL_TOP_TO_BOTTOM: "horizontal-tb", VERTICAL_LEFT_TO_RIGHT: "vertical-lr", VERTICAL_RIGHT_TO_LEFT: "vertical-rl" };
        goog.exportProperty(shaka.text.Cue, "writingMode", shaka.text.Cue.writingMode);
        shaka.text.Cue.lineInterpretation = { LINE_NUMBER: 0, PERCENTAGE: 1 };
        goog.exportProperty(shaka.text.Cue, "lineInterpretation", shaka.text.Cue.lineInterpretation);
        shaka.text.Cue.lineAlign = { CENTER: "center", START: "start", END: "end" };
        goog.exportProperty(shaka.text.Cue, "lineAlign", shaka.text.Cue.lineAlign);
        shaka.text.Cue.defaultTextColor = { white: "#FFF", lime: "#0F0", cyan: "#0FF", red: "#F00", yellow: "#FF0", magenta: "#F0F", blue: "#00F", black: "#000" };
        goog.exportProperty(shaka.text.Cue, "defaultTextColor", shaka.text.Cue.defaultTextColor);
        shaka.text.Cue.defaultTextBackgroundColor = { bg_white: "#FFF", bg_lime: "#0F0", bg_cyan: "#0FF", bg_red: "#F00", bg_yellow: "#FF0", bg_magenta: "#F0F", bg_blue: "#00F", bg_black: "#000" };
        goog.exportProperty(shaka.text.Cue, "defaultTextBackgroundColor", shaka.text.Cue.defaultTextBackgroundColor);
        shaka.text.Cue.fontWeight = { NORMAL: 400, BOLD: 700 };
        goog.exportProperty(shaka.text.Cue, "fontWeight", shaka.text.Cue.fontWeight);
        shaka.text.Cue.fontStyle = { NORMAL: "normal", ITALIC: "italic", OBLIQUE: "oblique" };
        goog.exportProperty(shaka.text.Cue, "fontStyle", shaka.text.Cue.fontStyle);
        shaka.text.Cue.textDecoration = { UNDERLINE: "underline", LINE_THROUGH: "lineThrough", OVERLINE: "overline" };
        goog.exportProperty(shaka.text.Cue, "textDecoration", shaka.text.Cue.textDecoration);
        shaka.text.CueRegion = function() {
          var a2 = shaka.text.CueRegion;
          this.id = "";
          this.regionAnchorY = this.regionAnchorX = this.viewportAnchorY = this.viewportAnchorX = 0;
          this.height = this.width = 100;
          this.viewportAnchorUnits = this.widthUnits = this.heightUnits = a2.units.PERCENTAGE;
          this.scroll = a2.scrollMode.NONE;
        };
        goog.exportSymbol("shaka.text.CueRegion", shaka.text.CueRegion);
        shaka.text.CueRegion.units = { PX: 0, PERCENTAGE: 1, LINES: 2 };
        goog.exportProperty(shaka.text.CueRegion, "units", shaka.text.CueRegion.units);
        shaka.text.CueRegion.scrollMode = { NONE: "", UP: "up" };
        goog.exportProperty(shaka.text.CueRegion, "scrollMode", shaka.text.CueRegion.scrollMode);
        shaka.util.BufferUtils = function() {
        };
        shaka.util.BufferUtils.equal = function(a2, b2) {
          var c2 = shaka.util.BufferUtils;
          if (!a2 && !b2)
            return true;
          if (!a2 || !b2 || a2.byteLength != b2.byteLength)
            return false;
          if (c2.unsafeGetArrayBuffer_(a2) == c2.unsafeGetArrayBuffer_(b2) && (a2.byteOffset || 0) == (b2.byteOffset || 0))
            return true;
          c2 = shaka.util.BufferUtils.toUint8(a2);
          for (var d2 = shaka.util.BufferUtils.toUint8(b2), e2 = 0; e2 < a2.byteLength; e2++)
            if (c2[e2] != d2[e2])
              return false;
          return true;
        };
        shaka.util.BufferUtils.unsafeGetArrayBuffer_ = function(a2) {
          return a2 instanceof ArrayBuffer ? a2 : a2.buffer;
        };
        shaka.util.BufferUtils.toArrayBuffer = function(a2) {
          return a2 instanceof ArrayBuffer ? a2 : 0 == a2.byteOffset && a2.byteLength == a2.buffer.byteLength ? a2.buffer : new Uint8Array(a2).buffer;
        };
        shaka.util.BufferUtils.toUint8 = function(a2, b2, c2) {
          c2 = void 0 === c2 ? Infinity : c2;
          return shaka.util.BufferUtils.view_(a2, void 0 === b2 ? 0 : b2, c2, Uint8Array);
        };
        shaka.util.BufferUtils.toDataView = function(a2, b2, c2) {
          c2 = void 0 === c2 ? Infinity : c2;
          return shaka.util.BufferUtils.view_(a2, void 0 === b2 ? 0 : b2, c2, DataView);
        };
        shaka.util.BufferUtils.view_ = function(a2, b2, c2, d2) {
          var e2 = shaka.util.BufferUtils.unsafeGetArrayBuffer_(a2), f2 = (a2.byteOffset || 0) + a2.byteLength;
          a2 = Math.max(0, Math.min((a2.byteOffset || 0) + b2, f2));
          return new d2(e2, a2, Math.min(a2 + Math.max(c2, 0), f2) - a2);
        };
        goog.exportSymbol("shaka.util.BufferUtils", shaka.util.BufferUtils);
        goog.exportProperty(shaka.util.BufferUtils, "toDataView", shaka.util.BufferUtils.toDataView);
        goog.exportProperty(shaka.util.BufferUtils, "toUint8", shaka.util.BufferUtils.toUint8);
        goog.exportProperty(shaka.util.BufferUtils, "toArrayBuffer", shaka.util.BufferUtils.toArrayBuffer);
        goog.exportProperty(shaka.util.BufferUtils, "equal", shaka.util.BufferUtils.equal);
        shaka.deprecate = {};
        shaka.deprecate.Version = function(a2, b2) {
          this.major_ = a2;
          this.minor_ = b2;
        };
        shaka.deprecate.Version.prototype.major = function() {
          return this.major_;
        };
        shaka.deprecate.Version.prototype.minor = function() {
          return this.minor_;
        };
        shaka.deprecate.Version.prototype.compareTo = function(a2) {
          var b2 = this.minor_ - a2.minor_;
          return this.major_ - a2.major_ || b2;
        };
        shaka.deprecate.Version.prototype.toString = function() {
          return "v" + this.major_ + "." + this.minor_;
        };
        shaka.deprecate.Version.parse = function(a2) {
          a2 = a2.substring(1).split(".", 2);
          return new shaka.deprecate.Version(Number(a2[0]), Number(a2[1]));
        };
        shaka.deprecate.Enforcer = function(a2, b2, c2) {
          this.libraryVersion_ = a2;
          this.onPending_ = b2;
          this.onExpired_ = c2;
        };
        shaka.deprecate.Enforcer.prototype.enforce = function(a2, b2, c2) {
          (0 < a2.compareTo(this.libraryVersion_) ? this.onPending_ : this.onExpired_)(this.libraryVersion_, a2, b2, c2);
        };
        shaka.Deprecate = function() {
        };
        shaka.Deprecate.init = function(a2) {
          goog.asserts.assert(null == shaka.Deprecate.enforcer_, "Deprecate.init should only be called once.");
          shaka.Deprecate.enforcer_ = new shaka.deprecate.Enforcer(shaka.deprecate.Version.parse(a2), shaka.Deprecate.onPending_, shaka.Deprecate.onExpired_);
        };
        shaka.Deprecate.deprecateFeature = function(a2, b2, c2) {
          var d2 = shaka.Deprecate.enforcer_;
          goog.asserts.assert(d2, "Missing deprecation enforcer. Was |init| called?");
          a2 = new shaka.deprecate.Version(a2, 0);
          d2.enforce(a2, b2, c2);
        };
        shaka.Deprecate.onPending_ = function(a2, b2, c2, d2) {
          shaka.log.alwaysWarn([c2, "has been deprecated and will be removed in", b2, ". We are currently at version", a2, ". Additional information:", d2].join(" "));
        };
        shaka.Deprecate.onExpired_ = function(a2, b2, c2, d2) {
          a2 = [c2, "has been deprecated and has been removed in", b2, ". We are now at version", a2, ". Additional information:", d2].join("");
          shaka.log.alwaysError(a2);
          goog.asserts.assert(false, a2);
        };
        shaka.Deprecate.enforcer_ = null;
        shaka.util.Functional = function() {
        };
        shaka.util.Functional.createFallbackPromiseChain = function(a2, b2) {
          return a2.reduce(function(c2, d2) {
            return c2["catch"](function() {
              return b2(d2);
            });
          }, Promise.reject());
        };
        shaka.util.Functional.collapseArrays = function(a2, b2) {
          return a2.concat(b2);
        };
        shaka.util.Functional.ignored = function() {
        };
        shaka.util.Functional.noop = function() {
        };
        shaka.util.Functional.isNotNull = function(a2) {
          return null != a2;
        };
        shaka.util.Functional.callFactory = function(a2) {
          var b2 = Object.create(a2.prototype || Object.prototype);
          try {
            var c2 = a2.call(b2);
            c2 || (shaka.Deprecate.deprecateFeature(4, "Factories requiring new", "Factories should be plain functions"), c2 = b2);
          } catch (d2) {
            shaka.Deprecate.deprecateFeature(4, "Factories requiring new", "Factories should be plain functions"), c2 = new a2();
          }
          return c2;
        };
        shaka.util.IDestroyable = function() {
        };
        shaka.util.IDestroyable.prototype.destroy = function() {
        };
        shaka.dependencies = function() {
        };
        shaka.dependencies.add = function(a2, b2) {
          if (!shaka.dependencies.Allowed[a2])
            throw Error(a2 + " is not supported");
          shaka.dependencies.dependencies_.set(a2, function() {
            return b2;
          });
        };
        shaka.dependencies.has = function(a2) {
          return shaka.dependencies.dependencies_.has(a2);
        };
        shaka.dependencies.muxjs = function() {
          return shaka.dependencies.dependencies_.get(shaka.dependencies.Allowed.muxjs)();
        };
        goog.exportSymbol("shaka.dependencies", shaka.dependencies);
        goog.exportProperty(shaka.dependencies, "has", shaka.dependencies.has);
        goog.exportProperty(shaka.dependencies, "add", shaka.dependencies.add);
        shaka.dependencies.Allowed = { muxjs: "muxjs" };
        goog.exportProperty(shaka.dependencies, "Allowed", shaka.dependencies.Allowed);
        shaka.dependencies.dependencies_ = /* @__PURE__ */ new Map([[shaka.dependencies.Allowed.muxjs, function() {
          return window.muxjs;
        }]]);
        shaka.util.Error = function(a2, b2, c2) {
          var d2 = $jscomp.getRestArguments.apply(3, arguments);
          this.severity = a2;
          this.category = b2;
          this.code = c2;
          this.data = d2;
          this.handled = false;
          if (goog.DEBUG) {
            var e2 = d2 = "UNKNOWN", f2;
            for (f2 in shaka.util.Error.Category)
              shaka.util.Error.Category[f2] == this.category && (d2 = f2);
            for (var g in shaka.util.Error.Code)
              shaka.util.Error.Code[g] == this.code && (e2 = g);
            this.message = "Shaka Error " + d2 + "." + e2 + " (" + this.data.toString() + ")";
            if (shaka.util.Error.createStack)
              try {
                throw Error(this.message);
              } catch (h) {
                this.stack = h.stack;
              }
          }
        };
        shaka.util.Error.prototype.toString = function() {
          return "shaka.util.Error " + JSON.stringify(this, null, "  ");
        };
        goog.exportSymbol("shaka.util.Error", shaka.util.Error);
        goog.DEBUG && (shaka.util.Error.createStack = true);
        shaka.util.Error.Severity = { RECOVERABLE: 1, CRITICAL: 2 };
        goog.exportProperty(shaka.util.Error, "Severity", shaka.util.Error.Severity);
        shaka.util.Error.Category = { NETWORK: 1, TEXT: 2, MEDIA: 3, MANIFEST: 4, STREAMING: 5, DRM: 6, PLAYER: 7, CAST: 8, STORAGE: 9, ADS: 10 };
        goog.exportProperty(shaka.util.Error, "Category", shaka.util.Error.Category);
        shaka.util.Error.Code = {
          UNSUPPORTED_SCHEME: 1e3,
          BAD_HTTP_STATUS: 1001,
          HTTP_ERROR: 1002,
          TIMEOUT: 1003,
          MALFORMED_DATA_URI: 1004,
          REQUEST_FILTER_ERROR: 1006,
          RESPONSE_FILTER_ERROR: 1007,
          MALFORMED_TEST_URI: 1008,
          UNEXPECTED_TEST_REQUEST: 1009,
          ATTEMPTS_EXHAUSTED: 1010,
          INVALID_TEXT_HEADER: 2e3,
          INVALID_TEXT_CUE: 2001,
          UNABLE_TO_DETECT_ENCODING: 2003,
          BAD_ENCODING: 2004,
          INVALID_XML: 2005,
          INVALID_MP4_TTML: 2007,
          INVALID_MP4_VTT: 2008,
          UNABLE_TO_EXTRACT_CUE_START_TIME: 2009,
          INVALID_MP4_CEA: 2010,
          TEXT_COULD_NOT_GUESS_MIME_TYPE: 2011,
          CANNOT_ADD_EXTERNAL_TEXT_TO_SRC_EQUALS: 2012,
          TEXT_ONLY_WEBVTT_SRC_EQUALS: 2013,
          MISSING_TEXT_PLUGIN: 2014,
          CHAPTERS_TRACK_FAILED: 2015,
          BUFFER_READ_OUT_OF_BOUNDS: 3e3,
          JS_INTEGER_OVERFLOW: 3001,
          EBML_OVERFLOW: 3002,
          EBML_BAD_FLOATING_POINT_SIZE: 3003,
          MP4_SIDX_WRONG_BOX_TYPE: 3004,
          MP4_SIDX_INVALID_TIMESCALE: 3005,
          MP4_SIDX_TYPE_NOT_SUPPORTED: 3006,
          WEBM_CUES_ELEMENT_MISSING: 3007,
          WEBM_EBML_HEADER_ELEMENT_MISSING: 3008,
          WEBM_SEGMENT_ELEMENT_MISSING: 3009,
          WEBM_INFO_ELEMENT_MISSING: 3010,
          WEBM_DURATION_ELEMENT_MISSING: 3011,
          WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING: 3012,
          WEBM_CUE_TIME_ELEMENT_MISSING: 3013,
          MEDIA_SOURCE_OPERATION_FAILED: 3014,
          MEDIA_SOURCE_OPERATION_THREW: 3015,
          VIDEO_ERROR: 3016,
          QUOTA_EXCEEDED_ERROR: 3017,
          TRANSMUXING_FAILED: 3018,
          CONTENT_TRANSFORMATION_FAILED: 3019,
          UNABLE_TO_GUESS_MANIFEST_TYPE: 4e3,
          DASH_INVALID_XML: 4001,
          DASH_NO_SEGMENT_INFO: 4002,
          DASH_EMPTY_ADAPTATION_SET: 4003,
          DASH_EMPTY_PERIOD: 4004,
          DASH_WEBM_MISSING_INIT: 4005,
          DASH_UNSUPPORTED_CONTAINER: 4006,
          DASH_PSSH_BAD_ENCODING: 4007,
          DASH_NO_COMMON_KEY_SYSTEM: 4008,
          DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED: 4009,
          DASH_CONFLICTING_KEY_IDS: 4010,
          RESTRICTIONS_CANNOT_BE_MET: 4012,
          HLS_PLAYLIST_HEADER_MISSING: 4015,
          INVALID_HLS_TAG: 4016,
          HLS_INVALID_PLAYLIST_HIERARCHY: 4017,
          DASH_DUPLICATE_REPRESENTATION_ID: 4018,
          HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND: 4020,
          HLS_MASTER_PLAYLIST_NOT_PROVIDED: 4022,
          HLS_REQUIRED_ATTRIBUTE_MISSING: 4023,
          HLS_REQUIRED_TAG_MISSING: 4024,
          HLS_COULD_NOT_GUESS_CODECS: 4025,
          HLS_KEYFORMATS_NOT_SUPPORTED: 4026,
          DASH_UNSUPPORTED_XLINK_ACTUATE: 4027,
          DASH_XLINK_DEPTH_LIMIT: 4028,
          HLS_COULD_NOT_PARSE_SEGMENT_START_TIME: 4030,
          CONTENT_UNSUPPORTED_BY_BROWSER: 4032,
          CANNOT_ADD_EXTERNAL_TEXT_TO_LIVE_STREAM: 4033,
          HLS_AES_128_ENCRYPTION_NOT_SUPPORTED: 4034,
          HLS_INTERNAL_SKIP_STREAM: 4035,
          NO_VARIANTS: 4036,
          PERIOD_FLATTENING_FAILED: 4037,
          INCONSISTENT_DRM_ACROSS_PERIODS: 4038,
          HLS_VARIABLE_NOT_FOUND: 4039,
          STREAMING_ENGINE_STARTUP_INVALID_STATE: 5006,
          NO_RECOGNIZED_KEY_SYSTEMS: 6e3,
          REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE: 6001,
          FAILED_TO_CREATE_CDM: 6002,
          FAILED_TO_ATTACH_TO_VIDEO: 6003,
          INVALID_SERVER_CERTIFICATE: 6004,
          FAILED_TO_CREATE_SESSION: 6005,
          FAILED_TO_GENERATE_LICENSE_REQUEST: 6006,
          LICENSE_REQUEST_FAILED: 6007,
          LICENSE_RESPONSE_REJECTED: 6008,
          ENCRYPTED_CONTENT_WITHOUT_DRM_INFO: 6010,
          NO_LICENSE_SERVER_GIVEN: 6012,
          OFFLINE_SESSION_REMOVED: 6013,
          EXPIRED: 6014,
          SERVER_CERTIFICATE_REQUIRED: 6015,
          INIT_DATA_TRANSFORM_ERROR: 6016,
          SERVER_CERTIFICATE_REQUEST_FAILED: 6017,
          LOAD_INTERRUPTED: 7e3,
          OPERATION_ABORTED: 7001,
          NO_VIDEO_ELEMENT: 7002,
          OBJECT_DESTROYED: 7003,
          CONTENT_NOT_LOADED: 7004,
          CAST_API_UNAVAILABLE: 8e3,
          NO_CAST_RECEIVERS: 8001,
          ALREADY_CASTING: 8002,
          UNEXPECTED_CAST_ERROR: 8003,
          CAST_CANCELED_BY_USER: 8004,
          CAST_CONNECTION_TIMED_OUT: 8005,
          CAST_RECEIVER_APP_UNAVAILABLE: 8006,
          STORAGE_NOT_SUPPORTED: 9e3,
          INDEXED_DB_ERROR: 9001,
          DEPRECATED_OPERATION_ABORTED: 9002,
          REQUESTED_ITEM_NOT_FOUND: 9003,
          MALFORMED_OFFLINE_URI: 9004,
          CANNOT_STORE_LIVE_OFFLINE: 9005,
          NO_INIT_DATA_FOR_OFFLINE: 9007,
          LOCAL_PLAYER_INSTANCE_REQUIRED: 9008,
          NEW_KEY_OPERATION_NOT_SUPPORTED: 9011,
          KEY_NOT_FOUND: 9012,
          MISSING_STORAGE_CELL: 9013,
          STORAGE_LIMIT_REACHED: 9014,
          DOWNLOAD_SIZE_CALLBACK_ERROR: 9015,
          MODIFY_OPERATION_NOT_SUPPORTED: 9016,
          CS_IMA_SDK_MISSING: 1e4,
          CS_AD_MANAGER_NOT_INITIALIZED: 10001,
          SS_IMA_SDK_MISSING: 10002,
          SS_AD_MANAGER_NOT_INITIALIZED: 10003,
          CURRENT_DAI_REQUEST_NOT_FINISHED: 10004
        };
        goog.exportProperty(shaka.util.Error, "Code", shaka.util.Error.Code);
        goog.uri = {};
        goog.uri.utils = {};
        goog.uri.utils.splitRe_ = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$");
        goog.uri.utils.ComponentIndex = { SCHEME: 1, USER_INFO: 2, DOMAIN: 3, PORT: 4, PATH: 5, QUERY_DATA: 6, FRAGMENT: 7 };
        goog.uri.utils.split = function(a2) {
          return a2.match(goog.uri.utils.splitRe_);
        };
        goog.Uri = function(a2) {
          var b2;
          a2 instanceof goog.Uri ? (this.setScheme(a2.getScheme()), this.setUserInfo(a2.getUserInfo()), this.setDomain(a2.getDomain()), this.setPort(a2.getPort()), this.setPath(a2.getPath()), this.setQueryData(a2.getQueryData().clone()), this.setFragment(a2.getFragment())) : a2 && (b2 = goog.uri.utils.split(String(a2))) ? (this.setScheme(b2[goog.uri.utils.ComponentIndex.SCHEME] || "", true), this.setUserInfo(b2[goog.uri.utils.ComponentIndex.USER_INFO] || "", true), this.setDomain(b2[goog.uri.utils.ComponentIndex.DOMAIN] || "", true), this.setPort(b2[goog.uri.utils.ComponentIndex.PORT]), this.setPath(b2[goog.uri.utils.ComponentIndex.PATH] || "", true), this.setQueryData(b2[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true), this.setFragment(b2[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true)) : this.queryData_ = new goog.Uri.QueryData(null, null);
        };
        goog.Uri.prototype.scheme_ = "";
        goog.Uri.prototype.userInfo_ = "";
        goog.Uri.prototype.domain_ = "";
        goog.Uri.prototype.port_ = null;
        goog.Uri.prototype.path_ = "";
        goog.Uri.prototype.fragment_ = "";
        goog.Uri.prototype.toString = function() {
          var a2 = [], b2 = this.getScheme();
          b2 && a2.push(goog.Uri.encodeSpecialChars_(b2, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ":");
          if (b2 = this.getDomain()) {
            a2.push("//");
            var c2 = this.getUserInfo();
            c2 && a2.push(goog.Uri.encodeSpecialChars_(c2, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), "@");
            a2.push(goog.Uri.removeDoubleEncoding_(encodeURIComponent(b2)));
            b2 = this.getPort();
            null != b2 && a2.push(":", String(b2));
          }
          if (b2 = this.getPath())
            this.hasDomain() && "/" != b2.charAt(0) && a2.push("/"), a2.push(goog.Uri.encodeSpecialChars_(
              b2,
              "/" == b2.charAt(0) ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_,
              true
            ));
          (b2 = this.getEncodedQuery()) && a2.push("?", b2);
          (b2 = this.getFragment()) && a2.push("#", goog.Uri.encodeSpecialChars_(b2, goog.Uri.reDisallowedInFragment_));
          return a2.join("");
        };
        goog.Uri.prototype.resolve = function(a2) {
          var b2 = this.clone();
          "data" === b2.scheme_ && (b2 = new goog.Uri());
          var c2 = a2.hasScheme();
          c2 ? b2.setScheme(a2.getScheme()) : c2 = a2.hasUserInfo();
          c2 ? b2.setUserInfo(a2.getUserInfo()) : c2 = a2.hasDomain();
          c2 ? b2.setDomain(a2.getDomain()) : c2 = a2.hasPort();
          var d2 = a2.getPath();
          if (c2)
            b2.setPort(a2.getPort());
          else if (c2 = a2.hasPath()) {
            if ("/" != d2.charAt(0))
              if (this.hasDomain() && !this.hasPath())
                d2 = "/" + d2;
              else {
                var e2 = b2.getPath().lastIndexOf("/");
                -1 != e2 && (d2 = b2.getPath().substr(0, e2 + 1) + d2);
              }
            d2 = goog.Uri.removeDotSegments(d2);
          }
          c2 ? b2.setPath(d2) : c2 = a2.hasQuery();
          c2 ? b2.setQueryData(a2.getQueryData().clone()) : c2 = a2.hasFragment();
          c2 && b2.setFragment(a2.getFragment());
          return b2;
        };
        goog.Uri.prototype.clone = function() {
          return new goog.Uri(this);
        };
        goog.Uri.prototype.getScheme = function() {
          return this.scheme_;
        };
        goog.Uri.prototype.setScheme = function(a2, b2) {
          if (this.scheme_ = b2 ? goog.Uri.decodeOrEmpty_(a2, true) : a2)
            this.scheme_ = this.scheme_.replace(/:$/, "");
          return this;
        };
        goog.Uri.prototype.hasScheme = function() {
          return !!this.scheme_;
        };
        goog.Uri.prototype.getUserInfo = function() {
          return this.userInfo_;
        };
        goog.Uri.prototype.setUserInfo = function(a2, b2) {
          this.userInfo_ = b2 ? goog.Uri.decodeOrEmpty_(a2) : a2;
          return this;
        };
        goog.Uri.prototype.hasUserInfo = function() {
          return !!this.userInfo_;
        };
        goog.Uri.prototype.getDomain = function() {
          return this.domain_;
        };
        goog.Uri.prototype.setDomain = function(a2, b2) {
          this.domain_ = b2 ? goog.Uri.decodeOrEmpty_(a2, true) : a2;
          return this;
        };
        goog.Uri.prototype.hasDomain = function() {
          return !!this.domain_;
        };
        goog.Uri.prototype.getPort = function() {
          return this.port_;
        };
        goog.Uri.prototype.setPort = function(a2) {
          if (a2) {
            a2 = Number(a2);
            if (isNaN(a2) || 0 > a2)
              throw Error("Bad port number " + a2);
            this.port_ = a2;
          } else
            this.port_ = null;
          return this;
        };
        goog.Uri.prototype.hasPort = function() {
          return null != this.port_;
        };
        goog.Uri.prototype.getPath = function() {
          return this.path_;
        };
        goog.Uri.prototype.setPath = function(a2, b2) {
          this.path_ = b2 ? goog.Uri.decodeOrEmpty_(a2, true) : a2;
          return this;
        };
        goog.Uri.prototype.hasPath = function() {
          return !!this.path_;
        };
        goog.Uri.prototype.hasQuery = function() {
          return "" !== this.queryData_.toString();
        };
        goog.Uri.prototype.setQueryData = function(a2, b2) {
          a2 instanceof goog.Uri.QueryData ? this.queryData_ = a2 : (b2 || (a2 = goog.Uri.encodeSpecialChars_(a2, goog.Uri.reDisallowedInQuery_)), this.queryData_ = new goog.Uri.QueryData(a2, null));
          return this;
        };
        goog.Uri.prototype.getEncodedQuery = function() {
          return this.queryData_.toString();
        };
        goog.Uri.prototype.getDecodedQuery = function() {
          return this.queryData_.toDecodedString();
        };
        goog.Uri.prototype.getQueryData = function() {
          return this.queryData_;
        };
        goog.Uri.prototype.getFragment = function() {
          return this.fragment_;
        };
        goog.Uri.prototype.setFragment = function(a2, b2) {
          this.fragment_ = b2 ? goog.Uri.decodeOrEmpty_(a2) : a2;
          return this;
        };
        goog.Uri.prototype.hasFragment = function() {
          return !!this.fragment_;
        };
        goog.Uri.removeDotSegments = function(a2) {
          if (".." == a2 || "." == a2)
            return "";
          if (-1 == a2.indexOf("./") && -1 == a2.indexOf("/."))
            return a2;
          var b2 = 0 == a2.lastIndexOf("/", 0);
          a2 = a2.split("/");
          for (var c2 = [], d2 = 0; d2 < a2.length; ) {
            var e2 = a2[d2++];
            "." == e2 ? b2 && d2 == a2.length && c2.push("") : ".." == e2 ? ((1 < c2.length || 1 == c2.length && "" != c2[0]) && c2.pop(), b2 && d2 == a2.length && c2.push("")) : (c2.push(e2), b2 = true);
          }
          return c2.join("/");
        };
        goog.Uri.decodeOrEmpty_ = function(a2, b2) {
          return a2 ? b2 ? decodeURI(a2) : decodeURIComponent(a2) : "";
        };
        goog.Uri.encodeSpecialChars_ = function(a2, b2, c2) {
          return null != a2 ? (a2 = encodeURI(a2).replace(b2, goog.Uri.encodeChar_), c2 && (a2 = goog.Uri.removeDoubleEncoding_(a2)), a2) : null;
        };
        goog.Uri.encodeChar_ = function(a2) {
          a2 = a2.charCodeAt(0);
          return "%" + (a2 >> 4 & 15).toString(16) + (a2 & 15).toString(16);
        };
        goog.Uri.removeDoubleEncoding_ = function(a2) {
          return a2.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
        };
        goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
        goog.Uri.reDisallowedInRelativePath_ = /[#\?:]/g;
        goog.Uri.reDisallowedInAbsolutePath_ = /[#\?]/g;
        goog.Uri.reDisallowedInQuery_ = /[#\?@]/g;
        goog.Uri.reDisallowedInFragment_ = /#/g;
        goog.Uri.QueryData = function(a2, b2) {
          this.encodedQuery_ = a2 || null;
        };
        goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
          if (!this.keyMap_ && (this.keyMap_ = {}, this.count_ = 0, this.encodedQuery_))
            for (var a2 = this.encodedQuery_.split("&"), b2 = 0; b2 < a2.length; b2++) {
              var c2 = a2[b2].indexOf("="), d2 = null;
              if (0 <= c2) {
                var e2 = a2[b2].substring(0, c2);
                d2 = a2[b2].substring(c2 + 1);
              } else
                e2 = a2[b2];
              e2 = decodeURIComponent(e2.replace(/\+/g, " "));
              d2 = d2 || "";
              this.add(e2, decodeURIComponent(d2.replace(/\+/g, " ")));
            }
        };
        goog.Uri.QueryData.prototype.keyMap_ = null;
        goog.Uri.QueryData.prototype.count_ = null;
        goog.Uri.QueryData.prototype.getCount = function() {
          this.ensureKeyMapInitialized_();
          return this.count_;
        };
        goog.Uri.QueryData.prototype.add = function(a2, b2) {
          this.ensureKeyMapInitialized_();
          this.encodedQuery_ = null;
          var c2 = this.keyMap_.hasOwnProperty(a2) && this.keyMap_[a2];
          c2 || (this.keyMap_[a2] = c2 = []);
          c2.push(b2);
          goog.asserts.assert(null != this.count_, "Should not be null.");
          this.count_++;
          return this;
        };
        goog.Uri.QueryData.prototype.set = function(a2, b2) {
          this.ensureKeyMapInitialized_();
          this.encodedQuery_ = null;
          this.keyMap_.hasOwnProperty(a2) ? this.keyMap_[a2] = [b2] : this.add(a2, b2);
          return this;
        };
        goog.Uri.QueryData.prototype.toString = function() {
          if (this.encodedQuery_)
            return this.encodedQuery_;
          if (!this.keyMap_)
            return "";
          var a2 = [], b2;
          for (b2 in this.keyMap_)
            for (var c2 = encodeURIComponent(b2), d2 = this.keyMap_[b2], e2 = 0; e2 < d2.length; e2++) {
              var f2 = c2;
              "" !== d2[e2] && (f2 += "=" + encodeURIComponent(d2[e2]));
              a2.push(f2);
            }
          return this.encodedQuery_ = a2.join("&");
        };
        goog.Uri.QueryData.prototype.toDecodedString = function() {
          return goog.Uri.decodeOrEmpty_(this.toString());
        };
        goog.Uri.QueryData.prototype.clone = function() {
          var a2 = new goog.Uri.QueryData();
          a2.encodedQuery_ = this.encodedQuery_;
          if (this.keyMap_) {
            var b2 = {}, c2;
            for (c2 in this.keyMap_)
              b2[c2] = this.keyMap_[c2].concat();
            a2.keyMap_ = b2;
            a2.count_ = this.count_;
          }
          return a2;
        };
        shaka.util.ManifestParserUtils = function() {
        };
        shaka.util.ManifestParserUtils.resolveUris = function(a2, b2) {
          var c2 = shaka.util.Functional;
          if (0 == b2.length)
            return a2;
          var d2 = b2.map(function(e2) {
            return new goog.Uri(e2);
          });
          return a2.map(function(e2) {
            return new goog.Uri(e2);
          }).map(function(e2) {
            return d2.map(function(f2) {
              return e2.resolve(f2);
            });
          }).reduce(c2.collapseArrays, []).map(function(e2) {
            return e2.toString();
          });
        };
        shaka.util.ManifestParserUtils.createDrmInfo = function(a2, b2) {
          return { keySystem: a2, licenseServerUri: "", distinctiveIdentifierRequired: false, persistentStateRequired: false, audioRobustness: "", videoRobustness: "", serverCertificate: null, serverCertificateUri: "", sessionType: "", initData: b2 || [], keyIds: /* @__PURE__ */ new Set() };
        };
        shaka.util.ManifestParserUtils.guessCodecs = function(a2, b2) {
          if (1 == b2.length)
            return b2[0];
          var c2 = shaka.util.ManifestParserUtils.guessCodecsSafe(a2, b2);
          if (null != c2)
            return c2;
          throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_COULD_NOT_GUESS_CODECS, b2);
        };
        shaka.util.ManifestParserUtils.guessCodecsSafe = function(a2, b2) {
          for (var c2 = $jscomp.makeIterator(shaka.util.ManifestParserUtils.CODEC_REGEXPS_BY_CONTENT_TYPE_[a2]), d2 = c2.next(); !d2.done; d2 = c2.next()) {
            d2 = d2.value;
            for (var e2 = $jscomp.makeIterator(b2), f2 = e2.next(); !f2.done; f2 = e2.next())
              if (f2 = f2.value, d2.test(f2.trim()))
                return f2.trim();
          }
          return a2 == shaka.util.ManifestParserUtils.ContentType.TEXT ? "" : null;
        };
        shaka.util.ManifestParserUtils.ContentType = { VIDEO: "video", AUDIO: "audio", TEXT: "text", IMAGE: "image", APPLICATION: "application" };
        shaka.util.ManifestParserUtils.TextStreamKind = { SUBTITLE: "subtitle", CLOSED_CAPTION: "caption" };
        shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS = 1 / 15;
        shaka.util.ManifestParserUtils.VIDEO_CODEC_REGEXPS_ = [/^avc/, /^hev/, /^hvc/, /^vp0?[89]/, /^av01/];
        shaka.util.ManifestParserUtils.AUDIO_CODEC_REGEXPS_ = [/^vorbis$/, /^opus$/, /^flac$/, /^mp4a/, /^[ae]c-3$/];
        shaka.util.ManifestParserUtils.TEXT_CODEC_REGEXPS_ = [/^vtt$/, /^wvtt/, /^stpp/];
        shaka.util.ManifestParserUtils.CODEC_REGEXPS_BY_CONTENT_TYPE_ = { audio: shaka.util.ManifestParserUtils.AUDIO_CODEC_REGEXPS_, video: shaka.util.ManifestParserUtils.VIDEO_CODEC_REGEXPS_, text: shaka.util.ManifestParserUtils.TEXT_CODEC_REGEXPS_ };
        shaka.util.PublicPromise = function() {
          var a2, b2, c2 = new Promise(function(d2, e2) {
            a2 = d2;
            b2 = e2;
          });
          c2.resolve = a2;
          c2.reject = b2;
          return c2;
        };
        shaka.util.PublicPromise.prototype.resolve = function(a2) {
        };
        shaka.util.PublicPromise.prototype.reject = function(a2) {
        };
        shaka.util.Lazy = function(a2) {
          this.gen_ = a2;
          this.value_ = void 0;
        };
        shaka.util.Lazy.prototype.value = function() {
          void 0 == this.value_ && (this.value_ = this.gen_(), goog.asserts.assert(void 0 != this.value_, "Unable to create lazy value"));
          return this.value_;
        };
        shaka.util.Lazy.prototype.reset = function() {
          this.value_ = void 0;
        };
        shaka.util.DelayedTick = function(a2) {
          this.onTick_ = a2;
          this.cancelPending_ = null;
        };
        shaka.util.DelayedTick.prototype.tickAfter = function(a2) {
          var b2 = this;
          this.stop();
          var c2 = true, d2 = null;
          this.cancelPending_ = function() {
            window.clearTimeout(d2);
            c2 = false;
          };
          d2 = window.setTimeout(function() {
            if (c2)
              b2.onTick_();
          }, 1e3 * a2);
          return this;
        };
        shaka.util.DelayedTick.prototype.stop = function() {
          this.cancelPending_ && (this.cancelPending_(), this.cancelPending_ = null);
        };
        shaka.util.Timer = function(a2) {
          this.onTick_ = a2;
          this.ticker_ = null;
        };
        shaka.util.Timer.prototype.tickNow = function() {
          this.stop();
          this.onTick_();
          return this;
        };
        shaka.util.Timer.prototype.tickAfter = function(a2) {
          var b2 = this;
          this.stop();
          this.ticker_ = new shaka.util.DelayedTick(function() {
            b2.onTick_();
          }).tickAfter(a2);
          return this;
        };
        shaka.util.Timer.prototype.tickEvery = function(a2) {
          var b2 = this;
          this.stop();
          this.ticker_ = new shaka.util.DelayedTick(function() {
            b2.ticker_.tickAfter(a2);
            b2.onTick_();
          }).tickAfter(a2);
          return this;
        };
        shaka.util.Timer.prototype.stop = function() {
          this.ticker_ && (this.ticker_.stop(), this.ticker_ = null);
        };
        goog.exportSymbol("shaka.util.Timer", shaka.util.Timer);
        goog.exportProperty(shaka.util.Timer.prototype, "stop", shaka.util.Timer.prototype.stop);
        goog.exportProperty(shaka.util.Timer.prototype, "tickEvery", shaka.util.Timer.prototype.tickEvery);
        goog.exportProperty(shaka.util.Timer.prototype, "tickAfter", shaka.util.Timer.prototype.tickAfter);
        goog.exportProperty(shaka.util.Timer.prototype, "tickNow", shaka.util.Timer.prototype.tickNow);
        shaka.util.Platform = function() {
        };
        shaka.util.Platform.supportsMediaSource = function() {
          return window.MediaSource && MediaSource.isTypeSupported ? true : false;
        };
        shaka.util.Platform.supportsMediaType = function(a2) {
          return "" != shaka.util.Platform.anyMediaElement().canPlayType(a2);
        };
        shaka.util.Platform.isEdge = function() {
          return navigator.userAgent.match(/Edge?\//) ? true : false;
        };
        shaka.util.Platform.isLegacyEdge = function() {
          return navigator.userAgent.match(/Edge\//) ? true : false;
        };
        shaka.util.Platform.isIE = function() {
          return shaka.util.Platform.userAgentContains_("Trident/");
        };
        shaka.util.Platform.isXboxOne = function() {
          return shaka.util.Platform.userAgentContains_("Xbox One");
        };
        shaka.util.Platform.isTizen = function() {
          return shaka.util.Platform.userAgentContains_("Tizen");
        };
        shaka.util.Platform.isTizen4 = function() {
          return shaka.util.Platform.userAgentContains_("Tizen 4");
        };
        shaka.util.Platform.isTizen3 = function() {
          return shaka.util.Platform.userAgentContains_("Tizen 3");
        };
        shaka.util.Platform.isTizen2 = function() {
          return shaka.util.Platform.userAgentContains_("Tizen 2");
        };
        shaka.util.Platform.isWebOS = function() {
          return shaka.util.Platform.userAgentContains_("Web0S");
        };
        shaka.util.Platform.isWebOS3 = function() {
          return shaka.util.Platform.userAgentContains_("Web0S") && shaka.util.Platform.userAgentContains_("Chrome/38.0.2125.122 Safari/537.36");
        };
        shaka.util.Platform.isChromecast = function() {
          return shaka.util.Platform.userAgentContains_("CrKey");
        };
        shaka.util.Platform.isChrome = function() {
          return shaka.util.Platform.userAgentContains_("Chrome") && !shaka.util.Platform.isEdge();
        };
        shaka.util.Platform.isApple = function() {
          return !!navigator.vendor && navigator.vendor.includes("Apple") && !shaka.util.Platform.isTizen() && !shaka.util.Platform.isEOS() && !shaka.util.Platform.isPS4();
        };
        shaka.util.Platform.isPS5 = function() {
          return shaka.util.Platform.userAgentContains_("PlayStation 5");
        };
        shaka.util.Platform.isPS4 = function() {
          return shaka.util.Platform.userAgentContains_("PlayStation 4");
        };
        shaka.util.Platform.safariVersion = function() {
          if (!shaka.util.Platform.isApple())
            return null;
          var a2 = navigator.userAgent.match(/Version\/(\d+)/);
          return a2 ? parseInt(a2[1], 10) : (a2 = navigator.userAgent.match(/OS (\d+)(?:_\d+)?/)) ? parseInt(a2[1], 10) : null;
        };
        shaka.util.Platform.isSafari = function() {
          return !!shaka.util.Platform.safariVersion();
        };
        shaka.util.Platform.isEOS = function() {
          return shaka.util.Platform.userAgentContains_("PC=EOS");
        };
        shaka.util.Platform.isMobile = function() {
          return /(?:iPhone|iPad|iPod|Android)/.test(navigator.userAgent) ? true : shaka.util.Platform.isApple() && 1 < navigator.maxTouchPoints;
        };
        shaka.util.Platform.userAgentContains_ = function(a2) {
          return (navigator.userAgent || "").includes(a2);
        };
        shaka.util.Platform.anyMediaElement = function() {
          var a2 = shaka.util.Platform;
          if (a2.cachedMediaElement_)
            return a2.cachedMediaElement_;
          a2.cacheExpirationTimer_ || (a2.cacheExpirationTimer_ = new shaka.util.Timer(function() {
            a2.cachedMediaElement_ = null;
          }));
          a2.cachedMediaElement_ = document.getElementsByTagName("video")[0] || document.getElementsByTagName("audio")[0];
          a2.cachedMediaElement_ || (a2.cachedMediaElement_ = document.createElement("video"));
          a2.cacheExpirationTimer_.tickAfter(1);
          return a2.cachedMediaElement_;
        };
        shaka.util.Platform.requiresEncryptionInfoInAllInitSegments = function() {
          var a2 = shaka.util.Platform;
          return a2.isTizen() || a2.isXboxOne();
        };
        shaka.util.Platform.cacheExpirationTimer_ = null;
        shaka.util.Platform.cachedMediaElement_ = null;
        shaka.util.StringUtils = function() {
        };
        shaka.util.StringUtils.fromUTF8 = function(a2) {
          if (!a2)
            return "";
          a2 = shaka.util.BufferUtils.toUint8(a2);
          239 == a2[0] && 187 == a2[1] && 191 == a2[2] && (a2 = a2.subarray(3));
          if (window.TextDecoder && !shaka.util.Platform.isPS4())
            return a2 = new TextDecoder().decode(a2), a2.includes("\uFFFD") && shaka.log.alwaysError('Decoded string contains an "unknown character" codepoint.  That probably means the UTF8 encoding was incorrect!'), a2;
          for (var b2 = "", c2 = 0; c2 < a2.length; ++c2) {
            var d2 = 65533;
            0 == (a2[c2] & 128) ? d2 = a2[c2] : a2.length >= c2 + 2 && 192 == (a2[c2] & 224) && 128 == (a2[c2 + 1] & 192) ? (d2 = (a2[c2] & 31) << 6 | a2[c2 + 1] & 63, c2 += 1) : a2.length >= c2 + 3 && 224 == (a2[c2] & 240) && 128 == (a2[c2 + 1] & 192) && 128 == (a2[c2 + 2] & 192) ? (d2 = (a2[c2] & 15) << 12 | (a2[c2 + 1] & 63) << 6 | a2[c2 + 2] & 63, c2 += 2) : a2.length >= c2 + 4 && 240 == (a2[c2] & 241) && 128 == (a2[c2 + 1] & 192) && 128 == (a2[c2 + 2] & 192) && 128 == (a2[c2 + 3] & 192) && (d2 = (a2[c2] & 7) << 18 | (a2[c2 + 1] & 63) << 12 | (a2[c2 + 2] & 63) << 6 | a2[c2 + 3] & 63, c2 += 3);
            if (65535 >= d2)
              b2 += String.fromCharCode(d2);
            else {
              d2 -= 65536;
              var e2 = d2 & 1023;
              b2 += String.fromCharCode(55296 + (d2 >> 10));
              b2 += String.fromCharCode(56320 + e2);
            }
          }
          return b2;
        };
        shaka.util.StringUtils.fromUTF16 = function(a2, b2, c2) {
          if (!a2)
            return "";
          if (!c2 && 0 != a2.byteLength % 2)
            throw shaka.log.error("Data has an incorrect length, must be even."), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.BAD_ENCODING);
          c2 = Math.floor(a2.byteLength / 2);
          var d2 = new Uint16Array(c2);
          a2 = shaka.util.BufferUtils.toDataView(a2);
          for (var e2 = 0; e2 < c2; e2++)
            d2[e2] = a2.getUint16(2 * e2, b2);
          return shaka.util.StringUtils.fromCharCode(d2);
        };
        shaka.util.StringUtils.fromBytesAutoDetect = function(a2) {
          var b2 = shaka.util.StringUtils;
          if (!a2)
            return "";
          var c2 = shaka.util.BufferUtils.toUint8(a2);
          if (239 == c2[0] && 187 == c2[1] && 191 == c2[2])
            return b2.fromUTF8(c2);
          if (254 == c2[0] && 255 == c2[1])
            return b2.fromUTF16(c2.subarray(2), false);
          if (255 == c2[0] && 254 == c2[1])
            return b2.fromUTF16(c2.subarray(2), true);
          var d2 = function(e2) {
            return c2.byteLength <= e2 || 32 <= c2[e2] && 126 >= c2[e2];
          };
          shaka.log.debug("Unable to find byte-order-mark, making an educated guess.");
          if (0 == c2[0] && 0 == c2[2])
            return b2.fromUTF16(a2, false);
          if (0 == c2[1] && 0 == c2[3])
            return b2.fromUTF16(a2, true);
          if (d2(0) && d2(1) && d2(2) && d2(3))
            return b2.fromUTF8(a2);
          throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.UNABLE_TO_DETECT_ENCODING);
        };
        shaka.util.StringUtils.toUTF8 = function(a2) {
          if (window.TextEncoder && !shaka.util.Platform.isPS4()) {
            var b2 = new TextEncoder();
            return shaka.util.BufferUtils.toArrayBuffer(b2.encode(a2));
          }
          a2 = encodeURIComponent(a2);
          a2 = unescape(a2);
          b2 = new Uint8Array(a2.length);
          for (var c2 = 0; c2 < a2.length; c2++)
            b2[c2] = a2[c2].charCodeAt(0);
          return shaka.util.BufferUtils.toArrayBuffer(b2);
        };
        shaka.util.StringUtils.toUTF16 = function(a2, b2) {
          for (var c2 = new ArrayBuffer(2 * a2.length), d2 = new DataView(c2), e2 = 0; e2 < a2.length; ++e2) {
            var f2 = a2.charCodeAt(e2);
            d2.setUint16(2 * e2, f2, b2);
          }
          return c2;
        };
        shaka.util.StringUtils.fromCharCode = function(a2) {
          return shaka.util.StringUtils.fromCharCodeImpl_.value()(a2);
        };
        shaka.util.StringUtils.resetFromCharCode = function() {
          shaka.util.StringUtils.fromCharCodeImpl_.reset();
        };
        goog.exportSymbol("shaka.util.StringUtils", shaka.util.StringUtils);
        goog.exportProperty(shaka.util.StringUtils, "resetFromCharCode", shaka.util.StringUtils.resetFromCharCode);
        goog.exportProperty(shaka.util.StringUtils, "toUTF16", shaka.util.StringUtils.toUTF16);
        goog.exportProperty(shaka.util.StringUtils, "toUTF8", shaka.util.StringUtils.toUTF8);
        goog.exportProperty(shaka.util.StringUtils, "fromBytesAutoDetect", shaka.util.StringUtils.fromBytesAutoDetect);
        goog.exportProperty(shaka.util.StringUtils, "fromUTF16", shaka.util.StringUtils.fromUTF16);
        goog.exportProperty(shaka.util.StringUtils, "fromUTF8", shaka.util.StringUtils.fromUTF8);
        shaka.util.StringUtils.fromCharCodeImpl_ = new shaka.util.Lazy(function() {
          for (var a2 = function(c2) {
            try {
              var d2 = new Uint8Array(c2), e2 = String.fromCharCode.apply(null, d2);
              goog.asserts.assert(e2, "Should get value");
              return 0 < e2.length;
            } catch (f2) {
              return false;
            }
          }, b2 = { $jscomp$loop$prop$size$576: 65536 }; 0 < b2.$jscomp$loop$prop$size$576; b2 = { $jscomp$loop$prop$size$576: b2.$jscomp$loop$prop$size$576 }, b2.$jscomp$loop$prop$size$576 /= 2)
            if (a2(b2.$jscomp$loop$prop$size$576))
              return function(c2) {
                return function(d2) {
                  for (var e2 = "", f2 = 0; f2 < d2.length; f2 += c2.$jscomp$loop$prop$size$576) {
                    var g = d2.subarray(f2, f2 + c2.$jscomp$loop$prop$size$576);
                    e2 += String.fromCharCode.apply(null, g);
                  }
                  return e2;
                };
              }(b2);
          goog.asserts.assert(false, "Unable to create a fromCharCode method");
          return null;
        });
        shaka.util.Uint8ArrayUtils = function() {
        };
        shaka.util.Uint8ArrayUtils.equal = function(a2, b2) {
          shaka.Deprecate.deprecateFeature(4, "shaka.util.Uint8ArrayUtils.equal", "Please use shaka.util.BufferUtils.equal instead.");
          return shaka.util.BufferUtils.equal(a2, b2);
        };
        shaka.util.Uint8ArrayUtils.toStandardBase64 = function(a2) {
          a2 = shaka.util.StringUtils.fromCharCode(shaka.util.BufferUtils.toUint8(a2));
          return btoa(a2);
        };
        shaka.util.Uint8ArrayUtils.toBase64 = function(a2, b2) {
          b2 = void 0 == b2 ? true : b2;
          var c2 = shaka.util.Uint8ArrayUtils.toStandardBase64(a2).replace(/\+/g, "-").replace(/\//g, "_");
          return b2 ? c2 : c2.replace(/[=]*$/, "");
        };
        shaka.util.Uint8ArrayUtils.fromBase64 = function(a2) {
          a2 = window.atob(a2.replace(/-/g, "+").replace(/_/g, "/"));
          for (var b2 = new Uint8Array(a2.length), c2 = 0; c2 < a2.length; ++c2)
            b2[c2] = a2.charCodeAt(c2);
          return b2;
        };
        shaka.util.Uint8ArrayUtils.fromHex = function(a2) {
          for (var b2 = a2.length / 2, c2 = new Uint8Array(b2), d2 = 0; d2 < b2; d2++)
            c2[d2] = window.parseInt(a2.substr(2 * d2, 2), 16);
          return c2;
        };
        shaka.util.Uint8ArrayUtils.toHex = function(a2) {
          var b2 = shaka.util.BufferUtils.toUint8(a2);
          a2 = "";
          b2 = $jscomp.makeIterator(b2);
          for (var c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, c2 = c2.toString(16), 1 == c2.length && (c2 = "0" + c2), a2 += c2;
          return a2;
        };
        shaka.util.Uint8ArrayUtils.concat = function() {
          for (var a2 = $jscomp.getRestArguments.apply(0, arguments), b2 = 0, c2 = $jscomp.makeIterator(a2), d2 = c2.next(); !d2.done; d2 = c2.next())
            b2 += d2.value.byteLength;
          b2 = new Uint8Array(b2);
          c2 = 0;
          a2 = $jscomp.makeIterator(a2);
          for (d2 = a2.next(); !d2.done; d2 = a2.next())
            d2 = d2.value, b2.set(shaka.util.BufferUtils.toUint8(d2), c2), c2 += d2.byteLength;
          return b2;
        };
        goog.exportSymbol("shaka.util.Uint8ArrayUtils", shaka.util.Uint8ArrayUtils);
        goog.exportProperty(shaka.util.Uint8ArrayUtils, "concat", shaka.util.Uint8ArrayUtils.concat);
        goog.exportProperty(shaka.util.Uint8ArrayUtils, "toHex", shaka.util.Uint8ArrayUtils.toHex);
        goog.exportProperty(shaka.util.Uint8ArrayUtils, "fromHex", shaka.util.Uint8ArrayUtils.fromHex);
        goog.exportProperty(shaka.util.Uint8ArrayUtils, "fromBase64", shaka.util.Uint8ArrayUtils.fromBase64);
        goog.exportProperty(shaka.util.Uint8ArrayUtils, "toBase64", shaka.util.Uint8ArrayUtils.toBase64);
        goog.exportProperty(shaka.util.Uint8ArrayUtils, "toStandardBase64", shaka.util.Uint8ArrayUtils.toStandardBase64);
        goog.exportProperty(shaka.util.Uint8ArrayUtils, "equal", shaka.util.Uint8ArrayUtils.equal);
        shaka.media = {};
        shaka.media.Transmuxer = function() {
          var a2 = this;
          this.muxjs_ = shaka.dependencies.muxjs();
          this.muxTransmuxer_ = new this.muxjs_.mp4.Transmuxer({ keepOriginalTimestamps: true });
          this.transmuxPromise_ = null;
          this.transmuxedData_ = [];
          this.captions_ = [];
          this.metadata_ = [];
          this.isTransmuxing_ = false;
          this.muxTransmuxer_.on("data", function(b2) {
            return a2.onTransmuxed_(b2);
          });
          this.muxTransmuxer_.on("done", function() {
            return a2.onTransmuxDone_();
          });
        };
        shaka.media.Transmuxer.prototype.destroy = function() {
          this.muxTransmuxer_.dispose();
          this.muxTransmuxer_ = null;
          return Promise.resolve();
        };
        shaka.media.Transmuxer.isSupported = function(a2, b2) {
          var c2 = shaka.media.Transmuxer;
          if (!shaka.dependencies.muxjs() || !c2.isTsContainer(a2))
            return false;
          if (b2)
            return MediaSource.isTypeSupported(c2.convertTsCodecs(b2, a2));
          var d2 = shaka.util.ManifestParserUtils.ContentType, e2 = c2.convertTsCodecs(d2.AUDIO, a2);
          c2 = c2.convertTsCodecs(d2.VIDEO, a2);
          return MediaSource.isTypeSupported(e2) || MediaSource.isTypeSupported(c2);
        };
        shaka.media.Transmuxer.isTsContainer = function(a2) {
          return "mp2t" == a2.toLowerCase().split(";")[0].split("/")[1];
        };
        shaka.media.Transmuxer.convertTsCodecs = function(a2, b2) {
          var c2 = shaka.util.ManifestParserUtils.ContentType, d2 = b2.replace(/mp2t/i, "mp4");
          a2 == c2.AUDIO && (d2 = d2.replace("video", "audio"));
          if (c2 = /avc1\.(66|77|100)\.(\d+)/.exec(d2)) {
            var e2 = "avc1.", f2 = c2[1];
            "66" == f2 ? e2 += "4200" : "77" == f2 ? e2 += "4d00" : (goog.asserts.assert("100" == f2, "Legacy avc1 parsing code out of sync with regex!"), e2 += "6400");
            f2 = Number(c2[2]);
            goog.asserts.assert(256 > f2, "Invalid legacy avc1 level number!");
            e2 += (f2 >> 4).toString(16);
            e2 += (f2 & 15).toString(16);
            d2 = d2.replace(
              c2[0],
              e2
            );
          }
          return d2;
        };
        shaka.media.Transmuxer.prototype.transmux = function(a2) {
          goog.asserts.assert(!this.isTransmuxing_, "No transmuxing should be in progress.");
          this.isTransmuxing_ = true;
          this.transmuxPromise_ = new shaka.util.PublicPromise();
          this.transmuxedData_ = [];
          this.captions_ = [];
          this.metadata_ = [];
          a2 = shaka.util.BufferUtils.toUint8(a2);
          this.muxTransmuxer_.push(a2);
          this.muxTransmuxer_.flush();
          this.isTransmuxing_ && this.transmuxPromise_.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.TRANSMUXING_FAILED));
          return this.transmuxPromise_;
        };
        shaka.media.Transmuxer.prototype.onTransmuxed_ = function(a2) {
          this.captions_ = a2.captions;
          this.metadata_ = a2.metadata;
          this.transmuxedData_.push(shaka.util.Uint8ArrayUtils.concat(a2.initSegment, a2.data));
        };
        shaka.media.Transmuxer.prototype.onTransmuxDone_ = function() {
          var a2 = { data: shaka.util.Uint8ArrayUtils.concat.apply(shaka.util.Uint8ArrayUtils, $jscomp.arrayFromIterable(this.transmuxedData_)), captions: this.captions_, metadata: this.metadata_ };
          this.transmuxPromise_.resolve(a2);
          this.isTransmuxing_ = false;
        };
        shaka.util.MimeUtils = function() {
        };
        shaka.util.MimeUtils.getFullType = function(a2, b2) {
          var c2 = a2;
          b2 && (c2 += '; codecs="' + b2 + '"');
          return c2;
        };
        shaka.util.MimeUtils.getFullOrConvertedType = function(a2, b2, c2) {
          a2 = shaka.util.MimeUtils.getFullType(a2, b2);
          b2 = shaka.util.ManifestParserUtils.ContentType;
          if (shaka.media.Transmuxer.isTsContainer(a2)) {
            if (shaka.dependencies.muxjs())
              return shaka.media.Transmuxer.convertTsCodecs(c2, a2);
          } else if (c2 == b2.AUDIO)
            return a2.replace("video", "audio");
          return a2;
        };
        shaka.util.MimeUtils.getExtendedType = function(a2) {
          var b2 = [a2.mimeType];
          shaka.util.MimeUtils.EXTENDED_MIME_PARAMETERS_.forEach(function(c2, d2) {
            var e2 = a2[d2];
            e2 && b2.push(c2 + '="' + e2 + '"');
          });
          "PQ" == a2.hdr && b2.push('eotf="smpte2084"');
          return b2.join(";");
        };
        shaka.util.MimeUtils.getContainerType = function(a2) {
          return a2.split(";")[0].split("/")[1];
        };
        shaka.util.MimeUtils.splitCodecs = function(a2) {
          return a2.split(",");
        };
        shaka.util.MimeUtils.getNormalizedCodec = function(a2) {
          var b2 = shaka.util.MimeUtils.getCodecParts_(a2);
          a2 = b2[0];
          b2 = b2[1].toLowerCase();
          switch (true) {
            case ("mp4a" === a2 && "69" === b2):
            case ("mp4a" === a2 && "6b" === b2):
              return "mp3";
            case ("mp4a" === a2 && "66" === b2):
            case ("mp4a" === a2 && "67" === b2):
            case ("mp4a" === a2 && "68" === b2):
            case ("mp4a" === a2 && "40.2" === b2):
            case ("mp4a" === a2 && "40.02" === b2):
            case ("mp4a" === a2 && "40.5" === b2):
            case ("mp4a" === a2 && "40.05" === b2):
            case ("mp4a" === a2 && "40.29" === b2):
            case ("mp4a" === a2 && "40.42" === b2):
              return "aac";
            case ("mp4a" === a2 && "a5" === b2):
              return "ac-3";
            case ("mp4a" === a2 && "a6" === b2):
              return "ec-3";
            case ("mp4a" === a2 && "b2" === b2):
              return "dtsx";
            case ("mp4a" === a2 && "a9" === b2):
              return "dtsc";
            case "avc1" === a2:
            case "avc3" === a2:
              return "avc";
            case "hvc1" === a2:
            case "hev1" === a2:
              return "hevc";
            case "dvh1" === a2:
            case "dvhe" === a2:
              return "dovi";
          }
          return a2;
        };
        shaka.util.MimeUtils.getCodecBase = function(a2) {
          return shaka.util.MimeUtils.getCodecParts_(a2)[0];
        };
        shaka.util.MimeUtils.getBasicType = function(a2) {
          return a2.split(";")[0];
        };
        shaka.util.MimeUtils.getCodecs = function(a2) {
          a2 = a2.split(/ *; */);
          a2.shift();
          return (a2 = a2.find(function(b2) {
            return b2.startsWith("codecs=");
          })) ? a2.split("=")[1].replace(/^"|"$/g, "") : "";
        };
        shaka.util.MimeUtils.getCodecParts_ = function(a2) {
          var b2 = a2.split(".");
          a2 = b2[0];
          b2.shift();
          b2 = b2.join(".");
          return [a2, b2];
        };
        shaka.util.MimeUtils.EXTENDED_MIME_PARAMETERS_ = (/* @__PURE__ */ new Map()).set("codecs", "codecs").set("frameRate", "framerate").set("bandwidth", "bitrate").set("width", "width").set("height", "height").set("channelsCount", "channels");
        shaka.util.MimeUtils.CEA608_CLOSED_CAPTION_MIMETYPE = "application/cea-608";
        shaka.util.MimeUtils.CEA708_CLOSED_CAPTION_MIMETYPE = "application/cea-708";
        shaka.text.TextEngine = function(a2) {
          this.parser_ = null;
          this.displayer_ = a2;
          this.appendWindowStart_ = this.timestampOffset_ = 0;
          this.appendWindowEnd_ = Infinity;
          this.bufferEnd_ = this.bufferStart_ = null;
          this.selectedClosedCaptionId_ = "";
          this.closedCaptionsMap_ = /* @__PURE__ */ new Map();
        };
        shaka.text.TextEngine.registerParser = function(a2, b2) {
          shaka.text.TextEngine.parserMap_[a2] = b2;
        };
        shaka.text.TextEngine.unregisterParser = function(a2) {
          delete shaka.text.TextEngine.parserMap_[a2];
        };
        shaka.text.TextEngine.findParser = function(a2) {
          return shaka.text.TextEngine.parserMap_[a2];
        };
        shaka.text.TextEngine.isTypeSupported = function(a2) {
          return shaka.text.TextEngine.parserMap_[a2] || a2 == shaka.util.MimeUtils.CEA608_CLOSED_CAPTION_MIMETYPE || a2 == shaka.util.MimeUtils.CEA708_CLOSED_CAPTION_MIMETYPE ? true : false;
        };
        shaka.text.TextEngine.prototype.destroy = function() {
          this.displayer_ = this.parser_ = null;
          this.closedCaptionsMap_.clear();
          return Promise.resolve();
        };
        shaka.text.TextEngine.prototype.setDisplayer = function(a2) {
          this.displayer_ = a2;
        };
        shaka.text.TextEngine.prototype.initParser = function(a2) {
          a2 != shaka.util.MimeUtils.CEA608_CLOSED_CAPTION_MIMETYPE && a2 != shaka.util.MimeUtils.CEA708_CLOSED_CAPTION_MIMETYPE && (a2 = shaka.text.TextEngine.parserMap_[a2], goog.asserts.assert(a2, "Text type negotiation should have happened already"), this.parser_ = shaka.util.Functional.callFactory(a2));
        };
        shaka.text.TextEngine.prototype.appendBuffer = function(a2, b2, c2) {
          var d2 = this, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            if (1 == h.nextAddress)
              return goog.asserts.assert(d2.parser_, "The parser should already be initialized"), h.yield(Promise.resolve(), 2);
            if (!d2.parser_ || !d2.displayer_)
              return h["return"]();
            if (null == b2 || null == c2)
              return d2.parser_.parseInit(shaka.util.BufferUtils.toUint8(a2)), h["return"]();
            e2 = { periodStart: d2.timestampOffset_, segmentStart: b2, segmentEnd: c2 };
            f2 = d2.parser_.parseMedia(
              shaka.util.BufferUtils.toUint8(a2),
              e2
            );
            g = f2.filter(function(k2) {
              return k2.startTime >= d2.appendWindowStart_ && k2.startTime < d2.appendWindowEnd_;
            });
            d2.displayer_.append(g);
            null == d2.bufferStart_ ? d2.bufferStart_ = Math.max(b2, d2.appendWindowStart_) : (goog.asserts.assert(null != d2.bufferEnd_, "There should already be a buffered range end."), goog.asserts.assert(1 >= b2 - d2.bufferEnd_, "There should not be a gap in text references >1s"));
            d2.bufferEnd_ = Math.min(c2, d2.appendWindowEnd_);
            h.jumpToEnd();
          });
        };
        shaka.text.TextEngine.prototype.remove = function(a2, b2) {
          var c2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return d2.yield(Promise.resolve(), 2);
            c2.displayer_ && c2.displayer_.remove(a2, b2) && (null == c2.bufferStart_ ? goog.asserts.assert(null == c2.bufferEnd_, "end must be null if startTime is null") : (goog.asserts.assert(null != c2.bufferEnd_, "end must be non-null if startTime is non-null"), b2 <= c2.bufferStart_ || a2 >= c2.bufferEnd_ || (a2 <= c2.bufferStart_ && b2 >= c2.bufferEnd_ ? c2.bufferStart_ = c2.bufferEnd_ = null : a2 <= c2.bufferStart_ && b2 < c2.bufferEnd_ ? c2.bufferStart_ = b2 : a2 > c2.bufferStart_ && b2 >= c2.bufferEnd_ ? c2.bufferEnd_ = a2 : goog.asserts.assert(false, "removal from the middle is not supported by TextEngine"))));
            d2.jumpToEnd();
          });
        };
        shaka.text.TextEngine.prototype.setTimestampOffset = function(a2) {
          this.timestampOffset_ = a2;
        };
        shaka.text.TextEngine.prototype.setAppendWindow = function(a2, b2) {
          this.appendWindowStart_ = a2;
          this.appendWindowEnd_ = b2;
        };
        shaka.text.TextEngine.prototype.bufferStart = function() {
          return this.bufferStart_;
        };
        shaka.text.TextEngine.prototype.bufferEnd = function() {
          return this.bufferEnd_;
        };
        shaka.text.TextEngine.prototype.isBuffered = function(a2) {
          return null == this.bufferStart_ || null == this.bufferEnd_ ? false : a2 >= this.bufferStart_ && a2 < this.bufferEnd_;
        };
        shaka.text.TextEngine.prototype.bufferedAheadOf = function(a2) {
          if (null == this.bufferEnd_ || this.bufferEnd_ < a2)
            return 0;
          goog.asserts.assert(null != this.bufferStart_, "start should not be null if end is not null");
          return this.bufferEnd_ - Math.max(a2, this.bufferStart_);
        };
        shaka.text.TextEngine.prototype.setSelectedClosedCaptionId = function(a2, b2) {
          this.selectedClosedCaptionId_ = a2;
          var c2 = this.closedCaptionsMap_.get(a2);
          if (c2)
            for (var d2 = $jscomp.makeIterator(c2.keys()), e2 = d2.next(); !e2.done; e2 = d2.next())
              (e2 = c2.get(e2.value).filter(function(f2) {
                return f2.endTime <= b2;
              })) && this.displayer_.append(e2);
        };
        shaka.text.TextEngine.prototype.convertMuxjsCaptionsToShakaCaptions = function(a2) {
          var b2 = [];
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next()) {
            c2 = c2.value;
            var d2 = new shaka.text.Cue(c2.startTime, c2.endTime, c2.text);
            b2.push({ stream: c2.stream, cue: d2 });
          }
          return b2;
        };
        shaka.text.TextEngine.prototype.applyVideoTimestampOffsetRecursive_ = function(a2, b2) {
          a2.startTime += b2;
          a2.endTime += b2;
          for (var c2 = $jscomp.makeIterator(a2.nestedCues), d2 = c2.next(); !d2.done; d2 = c2.next())
            this.applyVideoTimestampOffsetRecursive_(d2.value, b2);
        };
        shaka.text.TextEngine.prototype.storeAndAppendClosedCaptions = function(a2, b2, c2, d2) {
          var e2 = b2 + " " + c2, f2 = /* @__PURE__ */ new Map();
          a2 = $jscomp.makeIterator(a2);
          for (var g = a2.next(); !g.done; g = a2.next()) {
            var h = g.value;
            g = h.stream;
            h = h.cue;
            f2.has(g) || f2.set(g, /* @__PURE__ */ new Map());
            f2.get(g).has(e2) || f2.get(g).set(e2, []);
            this.applyVideoTimestampOffsetRecursive_(h, d2);
            h.startTime >= this.appendWindowStart_ && h.startTime < this.appendWindowEnd_ && (f2.get(g).get(e2).push(h), g == this.selectedClosedCaptionId_ && this.displayer_.append([h]));
          }
          d2 = $jscomp.makeIterator(f2.keys());
          for (e2 = d2.next(); !e2.done; e2 = d2.next())
            for (e2 = e2.value, this.closedCaptionsMap_.has(e2) || this.closedCaptionsMap_.set(e2, /* @__PURE__ */ new Map()), a2 = $jscomp.makeIterator(f2.get(e2).keys()), g = a2.next(); !g.done; g = a2.next())
              g = g.value, h = f2.get(e2).get(g), this.closedCaptionsMap_.get(e2).set(g, h);
          this.bufferStart_ = null == this.bufferStart_ ? Math.max(b2, this.appendWindowStart_) : Math.min(this.bufferStart_, Math.max(b2, this.appendWindowStart_));
          this.bufferEnd_ = Math.max(this.bufferEnd_, Math.min(c2, this.appendWindowEnd_));
        };
        shaka.text.TextEngine.prototype.getNumberOfClosedCaptionChannels = function() {
          return this.closedCaptionsMap_.size;
        };
        shaka.text.TextEngine.prototype.getNumberOfClosedCaptionsInChannel = function(a2) {
          return (a2 = this.closedCaptionsMap_.get(a2)) ? a2.size : 0;
        };
        goog.exportSymbol("shaka.text.TextEngine", shaka.text.TextEngine);
        goog.exportProperty(shaka.text.TextEngine.prototype, "destroy", shaka.text.TextEngine.prototype.destroy);
        goog.exportProperty(shaka.text.TextEngine, "findParser", shaka.text.TextEngine.findParser);
        goog.exportProperty(shaka.text.TextEngine, "unregisterParser", shaka.text.TextEngine.unregisterParser);
        goog.exportProperty(shaka.text.TextEngine, "registerParser", shaka.text.TextEngine.registerParser);
        shaka.text.TextEngine.parserMap_ = {};
        shaka.util.LanguageUtils = function() {
        };
        shaka.util.LanguageUtils.areLocaleCompatible = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils;
          a2 = c2.normalize(a2);
          b2 = c2.normalize(b2);
          return a2 == b2;
        };
        shaka.util.LanguageUtils.areLanguageCompatible = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils;
          a2 = c2.normalize(a2);
          b2 = c2.normalize(b2);
          var d2 = c2.disassembleLocale_(a2);
          c2 = c2.disassembleLocale_(b2);
          return d2[0] == c2[0];
        };
        shaka.util.LanguageUtils.isParentOf = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils;
          a2 = c2.normalize(a2);
          b2 = c2.normalize(b2);
          var d2 = c2.disassembleLocale_(a2);
          c2 = c2.disassembleLocale_(b2);
          return d2[0] == c2[0] && 1 == d2.length && 2 == c2.length;
        };
        shaka.util.LanguageUtils.isSiblingOf = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils;
          a2 = c2.normalize(a2);
          b2 = c2.normalize(b2);
          var d2 = c2.disassembleLocale_(a2);
          c2 = c2.disassembleLocale_(b2);
          return 2 == d2.length && 2 == c2.length && d2[0] == c2[0];
        };
        shaka.util.LanguageUtils.normalize = function(a2) {
          var b2 = shaka.util.LanguageUtils, c2 = a2.split("-");
          a2 = c2[0] || "";
          c2 = c2[1] || "";
          a2 = a2.toLowerCase();
          a2 = b2.isoMap_.get(a2) || a2;
          return (c2 = c2.toUpperCase()) ? a2 + "-" + c2 : a2;
        };
        shaka.util.LanguageUtils.areSiblings = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils, d2 = c2.getBase(a2);
          c2 = c2.getBase(b2);
          return a2 != d2 && b2 != c2 && d2 == c2;
        };
        shaka.util.LanguageUtils.relatedness = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils;
          a2 = c2.normalize(a2);
          b2 = c2.normalize(b2);
          return b2 == a2 ? 4 : c2.isParentOf(b2, a2) ? 3 : c2.isSiblingOf(b2, a2) ? 2 : c2.isParentOf(a2, b2) ? 1 : 0;
        };
        shaka.util.LanguageUtils.getBase = function(a2) {
          var b2 = shaka.util.LanguageUtils, c2 = a2.indexOf("-");
          a2 = 0 <= c2 ? a2.substring(0, c2) : a2;
          a2 = a2.toLowerCase();
          return a2 = b2.isoMap_.get(a2) || a2;
        };
        shaka.util.LanguageUtils.getLocaleForText = function(a2) {
          var b2 = shaka.util.LanguageUtils;
          goog.asserts.assert(a2.type == shaka.util.ManifestParserUtils.ContentType.TEXT, "Can only get language from text streams");
          return b2.normalize(a2.language || "und");
        };
        shaka.util.LanguageUtils.getLocaleForVariant = function(a2) {
          var b2 = shaka.util.LanguageUtils;
          return a2.language ? b2.normalize(a2.language) : a2.audio && a2.audio.language ? b2.normalize(a2.audio.language) : a2.video && a2.video.language ? b2.normalize(a2.video.language) : "und";
        };
        shaka.util.LanguageUtils.findClosestLocale = function(a2, b2) {
          for (var c2 = shaka.util.LanguageUtils, d2 = c2.normalize(a2), e2 = /* @__PURE__ */ new Set(), f2 = $jscomp.makeIterator(b2), g = f2.next(); !g.done; g = f2.next())
            e2.add(c2.normalize(g.value));
          f2 = $jscomp.makeIterator(e2);
          for (g = f2.next(); !g.done; g = f2.next())
            if (g = g.value, g == d2)
              return g;
          f2 = $jscomp.makeIterator(e2);
          for (g = f2.next(); !g.done; g = f2.next())
            if (g = g.value, c2.isParentOf(g, d2))
              return g;
          f2 = $jscomp.makeIterator(e2);
          for (g = f2.next(); !g.done; g = f2.next())
            if (g = g.value, c2.isSiblingOf(g, d2))
              return g;
          e2 = $jscomp.makeIterator(e2);
          for (g = e2.next(); !g.done; g = e2.next())
            if (g = g.value, c2.isParentOf(d2, g))
              return g;
          return null;
        };
        shaka.util.LanguageUtils.disassembleLocale_ = function(a2) {
          var b2 = a2.split("-");
          goog.asserts.assert(2 >= b2.length, ["Locales should not have more than 2 components. ", a2, " has too many components."].join());
          return b2;
        };
        goog.exportSymbol("shaka.util.LanguageUtils", shaka.util.LanguageUtils);
        goog.exportProperty(shaka.util.LanguageUtils, "findClosestLocale", shaka.util.LanguageUtils.findClosestLocale);
        goog.exportProperty(shaka.util.LanguageUtils, "getLocaleForVariant", shaka.util.LanguageUtils.getLocaleForVariant);
        goog.exportProperty(shaka.util.LanguageUtils, "getLocaleForText", shaka.util.LanguageUtils.getLocaleForText);
        goog.exportProperty(shaka.util.LanguageUtils, "getBase", shaka.util.LanguageUtils.getBase);
        goog.exportProperty(shaka.util.LanguageUtils, "relatedness", shaka.util.LanguageUtils.relatedness);
        goog.exportProperty(shaka.util.LanguageUtils, "areSiblings", shaka.util.LanguageUtils.areSiblings);
        goog.exportProperty(shaka.util.LanguageUtils, "normalize", shaka.util.LanguageUtils.normalize);
        goog.exportProperty(shaka.util.LanguageUtils, "isSiblingOf", shaka.util.LanguageUtils.isSiblingOf);
        goog.exportProperty(shaka.util.LanguageUtils, "isParentOf", shaka.util.LanguageUtils.isParentOf);
        goog.exportProperty(shaka.util.LanguageUtils, "areLanguageCompatible", shaka.util.LanguageUtils.areLanguageCompatible);
        goog.exportProperty(shaka.util.LanguageUtils, "areLocaleCompatible", shaka.util.LanguageUtils.areLocaleCompatible);
        shaka.util.LanguageUtils.isoMap_ = /* @__PURE__ */ new Map([["aar", "aa"], ["abk", "ab"], ["afr", "af"], ["aka", "ak"], ["alb", "sq"], ["amh", "am"], ["ara", "ar"], ["arg", "an"], ["arm", "hy"], ["asm", "as"], ["ava", "av"], ["ave", "ae"], ["aym", "ay"], ["aze", "az"], ["bak", "ba"], ["bam", "bm"], ["baq", "eu"], ["bel", "be"], ["ben", "bn"], ["bih", "bh"], ["bis", "bi"], ["bod", "bo"], ["bos", "bs"], ["bre", "br"], ["bul", "bg"], ["bur", "my"], ["cat", "ca"], ["ces", "cs"], ["cha", "ch"], ["che", "ce"], ["chi", "zh"], ["chu", "cu"], ["chv", "cv"], ["cor", "kw"], ["cos", "co"], [
          "cre",
          "cr"
        ], ["cym", "cy"], ["cze", "cs"], ["dan", "da"], ["deu", "de"], ["div", "dv"], ["dut", "nl"], ["dzo", "dz"], ["ell", "el"], ["eng", "en"], ["epo", "eo"], ["est", "et"], ["eus", "eu"], ["ewe", "ee"], ["fao", "fo"], ["fas", "fa"], ["fij", "fj"], ["fin", "fi"], ["fra", "fr"], ["fre", "fr"], ["fry", "fy"], ["ful", "ff"], ["geo", "ka"], ["ger", "de"], ["gla", "gd"], ["gle", "ga"], ["glg", "gl"], ["glv", "gv"], ["gre", "el"], ["grn", "gn"], ["guj", "gu"], ["hat", "ht"], ["hau", "ha"], ["heb", "he"], ["her", "hz"], ["hin", "hi"], ["hmo", "ho"], ["hrv", "hr"], ["hun", "hu"], [
          "hye",
          "hy"
        ], ["ibo", "ig"], ["ice", "is"], ["ido", "io"], ["iii", "ii"], ["iku", "iu"], ["ile", "ie"], ["ina", "ia"], ["ind", "id"], ["ipk", "ik"], ["isl", "is"], ["ita", "it"], ["jav", "jv"], ["jpn", "ja"], ["kal", "kl"], ["kan", "kn"], ["kas", "ks"], ["kat", "ka"], ["kau", "kr"], ["kaz", "kk"], ["khm", "km"], ["kik", "ki"], ["kin", "rw"], ["kir", "ky"], ["kom", "kv"], ["kon", "kg"], ["kor", "ko"], ["kua", "kj"], ["kur", "ku"], ["lao", "lo"], ["lat", "la"], ["lav", "lv"], ["lim", "li"], ["lin", "ln"], ["lit", "lt"], ["ltz", "lb"], ["lub", "lu"], ["lug", "lg"], ["mac", "mk"], [
          "mah",
          "mh"
        ], ["mal", "ml"], ["mao", "mi"], ["mar", "mr"], ["may", "ms"], ["mkd", "mk"], ["mlg", "mg"], ["mlt", "mt"], ["mon", "mn"], ["mri", "mi"], ["msa", "ms"], ["mya", "my"], ["nau", "na"], ["nav", "nv"], ["nbl", "nr"], ["nde", "nd"], ["ndo", "ng"], ["nep", "ne"], ["nld", "nl"], ["nno", "nn"], ["nob", "nb"], ["nor", "no"], ["nya", "ny"], ["oci", "oc"], ["oji", "oj"], ["ori", "or"], ["orm", "om"], ["oss", "os"], ["pan", "pa"], ["per", "fa"], ["pli", "pi"], ["pol", "pl"], ["por", "pt"], ["pus", "ps"], ["que", "qu"], ["roh", "rm"], ["ron", "ro"], ["rum", "ro"], ["run", "rn"], [
          "rus",
          "ru"
        ], ["sag", "sg"], ["san", "sa"], ["sin", "si"], ["slk", "sk"], ["slo", "sk"], ["slv", "sl"], ["sme", "se"], ["smo", "sm"], ["sna", "sn"], ["snd", "sd"], ["som", "so"], ["sot", "st"], ["spa", "es"], ["sqi", "sq"], ["srd", "sc"], ["srp", "sr"], ["ssw", "ss"], ["sun", "su"], ["swa", "sw"], ["swe", "sv"], ["tah", "ty"], ["tam", "ta"], ["tat", "tt"], ["tel", "te"], ["tgk", "tg"], ["tgl", "tl"], ["tha", "th"], ["tib", "bo"], ["tir", "ti"], ["ton", "to"], ["tsn", "tn"], ["tso", "ts"], ["tuk", "tk"], ["tur", "tr"], ["twi", "tw"], ["uig", "ug"], ["ukr", "uk"], ["urd", "ur"], [
          "uzb",
          "uz"
        ], ["ven", "ve"], ["vie", "vi"], ["vol", "vo"], ["wel", "cy"], ["wln", "wa"], ["wol", "wo"], ["xho", "xh"], ["yid", "yi"], ["yor", "yo"], ["zha", "za"], ["zho", "zh"], ["zul", "zu"]]);
        shaka.util.MultiMap = function() {
          this.map_ = {};
        };
        shaka.util.MultiMap.prototype.push = function(a2, b2) {
          this.map_.hasOwnProperty(a2) ? this.map_[a2].push(b2) : this.map_[a2] = [b2];
        };
        shaka.util.MultiMap.prototype.get = function(a2) {
          return (a2 = this.map_[a2]) ? a2.slice() : null;
        };
        shaka.util.MultiMap.prototype.getAll = function() {
          var a2 = [], b2;
          for (b2 in this.map_)
            a2.push.apply(a2, $jscomp.arrayFromIterable(this.map_[b2]));
          return a2;
        };
        shaka.util.MultiMap.prototype.remove = function(a2, b2) {
          a2 in this.map_ && (this.map_[a2] = this.map_[a2].filter(function(c2) {
            return c2 != b2;
          }), 0 == this.map_[a2].length && delete this.map_[a2]);
        };
        shaka.util.MultiMap.prototype.clear = function() {
          this.map_ = {};
        };
        shaka.util.MultiMap.prototype.forEach = function(a2) {
          for (var b2 in this.map_)
            a2(b2, this.map_[b2]);
        };
        shaka.util.MultiMap.prototype.size = function() {
          return Object.keys(this.map_).length;
        };
        shaka.util.MultiMap.prototype.keys = function() {
          return Object.keys(this.map_);
        };
        shaka.util.StreamUtils = function() {
        };
        shaka.util.StreamUtils.chooseCodecsAndFilterManifest = function(a2, b2, c2, d2, e2) {
          var f2 = shaka.util.StreamUtils, g = a2.variants;
          if (b2.length || c2.length)
            g = f2.choosePreferredCodecs(g, b2, c2);
          g = f2.filterVariantsByAudioChannelCount(g, d2);
          b2 = f2.getVariantsByCodecs_(g);
          b2 = f2.filterVariantsByDensity_(b2);
          var h = f2.chooseCodecsByDecodingAttributes_(b2, e2);
          a2.variants = a2.variants.filter(function(k2) {
            if (f2.getVariantCodecs_(k2) == h)
              return true;
            shaka.log.debug("Dropping Variant (better codec available)", k2);
            return false;
          });
        };
        shaka.util.StreamUtils.getVariantsByCodecs_ = function(a2) {
          var b2 = new shaka.util.MultiMap();
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next()) {
            c2 = c2.value;
            var d2 = shaka.util.StreamUtils.getVariantCodecs_(c2);
            b2.push(d2, c2);
          }
          return b2;
        };
        shaka.util.StreamUtils.filterVariantsByDensity_ = function(a2) {
          var b2 = 0, c2 = /* @__PURE__ */ new Map(), d2 = a2.size();
          a2.forEach(function(e2, f2) {
            for (var g = $jscomp.makeIterator(f2), h = g.next(); !h.done; h = g.next()) {
              h = h.value;
              var k2 = h.video;
              if (k2 && k2.width && k2.height) {
                k2 = k2.width * k2.height * (k2.frameRate || 1);
                c2.has(k2) || c2.set(k2, new shaka.util.MultiMap());
                var l = c2.get(k2);
                l.push(e2, h);
                l.size() === d2 && (b2 = Math.max(b2, k2));
              }
            }
          });
          return b2 ? c2.get(b2) : a2;
        };
        shaka.util.StreamUtils.choosePreferredCodecs = function(a2, b2, c2) {
          var d2 = {};
          b2 = $jscomp.makeIterator(b2);
          for (var e2 = b2.next(); !e2.done; d2 = { $jscomp$loop$prop$videoCodec$578: d2.$jscomp$loop$prop$videoCodec$578 }, e2 = b2.next())
            if (d2.$jscomp$loop$prop$videoCodec$578 = e2.value, e2 = a2.filter(function(f2) {
              return function(g) {
                return g.video && g.video.codecs.startsWith(f2.$jscomp$loop$prop$videoCodec$578);
              };
            }(d2)), e2.length) {
              a2 = e2;
              break;
            }
          d2 = {};
          c2 = $jscomp.makeIterator(c2);
          for (b2 = c2.next(); !b2.done; d2 = { $jscomp$loop$prop$audioCodec$580: d2.$jscomp$loop$prop$audioCodec$580 }, b2 = c2.next())
            if (d2.$jscomp$loop$prop$audioCodec$580 = b2.value, b2 = a2.filter(function(f2) {
              return function(g) {
                return g.audio && g.audio.codecs.startsWith(f2.$jscomp$loop$prop$audioCodec$580);
              };
            }(d2)), b2.length) {
              a2 = b2;
              break;
            }
          return a2;
        };
        shaka.util.StreamUtils.chooseCodecsByDecodingAttributes_ = function(a2, b2) {
          for (var c2 = shaka.util.StreamUtils, d2 = $jscomp.makeIterator(b2), e2 = d2.next(); !e2.done; e2 = d2.next())
            if (e2 = e2.value, e2 == c2.DecodingAttributes.SMOOTH || e2 == c2.DecodingAttributes.POWER) {
              if (a2 = c2.chooseCodecsByMediaCapabilitiesInfo_(a2, e2), 1 == a2.size())
                return a2.keys()[0];
            } else if (e2 == c2.DecodingAttributes.BANDWIDTH)
              break;
          return c2.findCodecsByLowestBandwidth_(a2);
        };
        shaka.util.StreamUtils.chooseCodecsByMediaCapabilitiesInfo_ = function(a2, b2) {
          var c2 = 0, d2 = new shaka.util.MultiMap();
          a2.forEach(function(e2, f2) {
            for (var g = 0, h = 0, k2 = $jscomp.makeIterator(f2), l = k2.next(); !l.done; l = k2.next())
              l = l.value, l.decodingInfos.length && (g += l.decodingInfos[0][b2] ? 1 : 0, h++);
            g /= h;
            shaka.log.debug("codecs", e2, "avg", b2, g);
            g > c2 ? (d2.clear(), d2.push(e2, f2), c2 = g) : g == c2 && d2.push(e2, f2);
          });
          return d2;
        };
        shaka.util.StreamUtils.findCodecsByLowestBandwidth_ = function(a2) {
          var b2 = "", c2 = Infinity;
          a2.forEach(function(d2, e2) {
            for (var f2 = 0, g = 0, h = $jscomp.makeIterator(e2), k2 = h.next(); !k2.done; k2 = h.next())
              f2 += k2.value.bandwidth || 0, ++g;
            f2 /= g;
            shaka.log.debug("codecs", d2, "avg bandwidth", f2);
            f2 < c2 && (b2 = d2, c2 = f2);
          });
          goog.asserts.assert("" !== b2, "Should have chosen codecs!");
          goog.asserts.assert(!isNaN(c2), "Bandwidth should be a number!");
          return b2;
        };
        shaka.util.StreamUtils.getVariantCodecs_ = function(a2) {
          var b2 = "";
          a2.video && (b2 = shaka.util.MimeUtils.getNormalizedCodec(a2.video.codecs));
          var c2 = "";
          a2.audio && (c2 = shaka.util.MimeUtils.getNormalizedCodec(a2.audio.codecs));
          return b2 + "-" + c2;
        };
        shaka.util.StreamUtils.filterByRestrictions = function(a2, b2, c2) {
          a2.variants = a2.variants.filter(function(d2) {
            return shaka.util.StreamUtils.meetsRestrictions(d2, b2, c2);
          });
        };
        shaka.util.StreamUtils.meetsRestrictions = function(a2, b2, c2) {
          var d2 = function(f2, g, h) {
            return f2 >= g && f2 <= h;
          }, e2 = a2.video;
          return e2 && e2.width && e2.height && (!d2(e2.width, b2.minWidth, Math.min(b2.maxWidth, c2.width)) || !d2(e2.height, b2.minHeight, Math.min(b2.maxHeight, c2.height)) || !d2(e2.width * e2.height, b2.minPixels, b2.maxPixels)) || a2 && a2.video && a2.video.frameRate && !d2(a2.video.frameRate, b2.minFrameRate, b2.maxFrameRate) || !d2(a2.bandwidth, b2.minBandwidth, b2.maxBandwidth) ? false : true;
        };
        shaka.util.StreamUtils.applyRestrictions = function(a2, b2, c2) {
          var d2 = false;
          a2 = $jscomp.makeIterator(a2);
          for (var e2 = a2.next(); !e2.done; e2 = a2.next()) {
            e2 = e2.value;
            var f2 = e2.allowedByApplication;
            e2.allowedByApplication = shaka.util.StreamUtils.meetsRestrictions(e2, b2, c2);
            f2 != e2.allowedByApplication && (d2 = true);
          }
          return d2;
        };
        shaka.util.StreamUtils.filterManifest = function(a2, b2, c2) {
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return d2.yield(shaka.util.StreamUtils.filterManifestByMediaCapabilities(c2, 0 < c2.offlineSessionIds.length), 2);
            shaka.util.StreamUtils.filterManifestByCurrentVariant(b2, c2);
            shaka.util.StreamUtils.filterTextStreams_(c2);
            shaka.util.StreamUtils.filterImageStreams_(c2);
            d2.jumpToEnd();
          });
        };
        shaka.util.StreamUtils.filterManifestByMediaCapabilities = function(a2, b2) {
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (1 == c2.nextAddress)
              return goog.asserts.assert(navigator.mediaCapabilities, "MediaCapabilities should be valid."), c2.yield(shaka.util.StreamUtils.getDecodingInfosForVariants(a2.variants, b2, false), 2);
            a2.variants = a2.variants.filter(function(d2) {
              var e2 = d2.video, f2 = shaka.util.ManifestParserUtils.ContentType;
              if (e2) {
                var g = shaka.util.StreamUtils.patchVp9(e2.codecs);
                if (e2.codecs.includes(",")) {
                  var h = e2.codecs.split(",");
                  g = shaka.util.ManifestParserUtils.guessCodecs(f2.VIDEO, h);
                  h = shaka.util.ManifestParserUtils.guessCodecs(f2.AUDIO, h);
                  h = shaka.util.MimeUtils.getFullOrConvertedType(e2.mimeType, h, f2.AUDIO);
                  if (!MediaSource.isTypeSupported(h))
                    return false;
                }
                g = shaka.util.MimeUtils.getFullOrConvertedType(e2.mimeType, g, f2.VIDEO);
                if (!MediaSource.isTypeSupported(g))
                  return false;
              }
              if (g = d2.audio) {
                if (h = shaka.util.StreamUtils.getCorrectAudioCodecs_(g.codecs), f2 = shaka.util.MimeUtils.getFullOrConvertedType(g.mimeType, h, f2.AUDIO), !MediaSource.isTypeSupported(f2))
                  return false;
              }
              if (shaka.util.Platform.isXboxOne() && e2 && (e2.width && 1920 < e2.width || e2.height && 1080 < e2.height) && e2.codecs.includes("avc1."))
                return shaka.log.debug("Dropping variant - not compatible with platform", shaka.util.StreamUtils.getVariantSummaryString_(d2)), false;
              (e2 = d2.decodingInfos.some(function(k2) {
                return k2.supported;
              })) || shaka.log.debug("Dropping variant - not compatible with platform", shaka.util.StreamUtils.getVariantSummaryString_(d2));
              return e2;
            });
            c2.jumpToEnd();
          });
        };
        shaka.util.StreamUtils.getDecodingInfosForVariants = function(a2, b2, c2) {
          var d2, e2, f2, g, h, k2, l, m, n, p, q;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(r) {
            if (d2 = a2.some(function(t) {
              return t.decodingInfos.length;
            }))
              return shaka.log.debug("Already got the variants' decodingInfo."), r["return"]();
            e2 = navigator.mediaCapabilities;
            f2 = [];
            g = function(t, u) {
              var v, y;
              return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
                if (1 == w.nextAddress)
                  return w.setCatchFinallyBlocks(2), w.yield(e2.decodingInfo(u), 4);
                if (2 != w.nextAddress)
                  return v = w.yieldResult, t.decodingInfos.push(v), w.leaveTryBlock(0);
                y = w.enterCatchBlock();
                shaka.log.info("MediaCapabilities.decodingInfo() failed.", JSON.stringify(u), y);
                w.jumpToEnd();
              });
            };
            h = $jscomp.makeIterator(a2);
            for (k2 = h.next(); !k2.done; k2 = h.next())
              for (l = k2.value, m = shaka.util.StreamUtils.getDecodingConfigs_(l, b2, c2), n = $jscomp.makeIterator(m), p = n.next(); !p.done; p = n.next())
                q = p.value, f2.push(g(l, q));
            return r.yield(Promise.all(f2), 0);
          });
        };
        shaka.util.StreamUtils.getDecodingConfigs_ = function(a2, b2, c2) {
          var d2 = a2.audio, e2 = a2.video, f2 = shaka.util.ManifestParserUtils.ContentType;
          c2 = { type: c2 ? "file" : "media-source" };
          if (e2) {
            var g = e2.codecs;
            if (e2.codecs.includes(",")) {
              var h = e2.codecs.split(",");
              g = shaka.util.ManifestParserUtils.guessCodecs(f2.VIDEO, h);
              g = shaka.util.StreamUtils.patchVp9(g);
              h = shaka.util.ManifestParserUtils.guessCodecs(f2.AUDIO, h);
              h = shaka.util.MimeUtils.getFullOrConvertedType(e2.mimeType, h, f2.AUDIO);
              c2.audio = { contentType: h, channels: 2, bitrate: a2.bandwidth || 1, samplerate: 1, spatialRendering: false };
            }
            g = shaka.util.StreamUtils.patchVp9(g);
            g = shaka.util.MimeUtils.getFullOrConvertedType(e2.mimeType, g, f2.VIDEO);
            c2.video = { contentType: g, width: e2.width || 64, height: e2.height || 64, bitrate: e2.bandwidth || a2.bandwidth || 1, framerate: e2.frameRate || 1 };
            if (e2.hdr)
              switch (e2.hdr) {
                case "SDR":
                  c2.video.transferFunction = "srgb";
                  break;
                case "PQ":
                  c2.video.transferFunction = "pq";
                  break;
                case "HLG":
                  c2.video.transferFunction = "hlg";
              }
          }
          d2 && (g = shaka.util.StreamUtils.getCorrectAudioCodecs_(d2.codecs), f2 = shaka.util.MimeUtils.getFullOrConvertedType(
            d2.mimeType,
            g,
            f2.AUDIO
          ), c2.audio = { contentType: f2, channels: d2.channelsCount || 2, bitrate: d2.bandwidth || a2.bandwidth || 1, samplerate: d2.audioSamplingRate || 1, spatialRendering: d2.spatialAudio });
          g = (a2.video ? a2.video.drmInfos : []).concat(a2.audio ? a2.audio.drmInfos : []);
          if (!g.length)
            return [c2];
          a2 = [];
          f2 = /* @__PURE__ */ new Map();
          g = $jscomp.makeIterator(g);
          for (var k2 = g.next(); !k2.done; k2 = g.next())
            h = k2.value, f2.get(h.keySystem) || f2.set(h.keySystem, []), f2.get(h.keySystem).push(h);
          g = b2 ? "required" : "optional";
          b2 = b2 ? ["persistent-license"] : ["temporary"];
          h = $jscomp.makeIterator(f2.keys());
          for (var l = h.next(); !l.done; l = h.next()) {
            var m = l.value;
            l = Object.assign({}, c2);
            var n = f2.get(m);
            m = { keySystem: m, initDataType: "cenc", persistentState: g, distinctiveIdentifier: "optional", sessionTypes: b2 };
            n = $jscomp.makeIterator(n);
            for (k2 = n.next(); !k2.done; k2 = n.next()) {
              k2 = k2.value;
              if (k2.initData && k2.initData.length) {
                for (var p = /* @__PURE__ */ new Set(), q = $jscomp.makeIterator(k2.initData), r = q.next(); !r.done; r = q.next())
                  p.add(r.value.initDataType);
                1 < p.size && shaka.log.v2(
                  "DrmInfo contains more than one initDataType,",
                  "and we use the initDataType of the first initData.",
                  k2
                );
                m.initDataType = k2.initData[0].initDataType;
              }
              k2.distinctiveIdentifierRequired && (m.distinctiveIdentifier = "required");
              k2.persistentStateRequired && (m.persistentState = "required");
              k2.sessionType && (m.sessionTypes = [k2.sessionType]);
              d2 && (m.audio ? m.audio.robustness = m.audio.robustness || k2.audioRobustness : m.audio = { robustness: k2.audioRobustness });
              e2 && (m.video ? m.video.robustness = m.video.robustness || k2.videoRobustness : m.video = { robustness: k2.videoRobustness });
            }
            l.keySystemConfiguration = m;
            a2.push(l);
          }
          return a2;
        };
        shaka.util.StreamUtils.getCorrectAudioCodecs_ = function(a2) {
          return shaka.util.Platform.isTizen() ? "ac-3" == a2.toLowerCase() ? "ec-3" : a2 : a2;
        };
        shaka.util.StreamUtils.patchVp9 = function(a2) {
          return "vp9" == a2 ? "vp09.00.41.08" : a2;
        };
        shaka.util.StreamUtils.filterManifestByCurrentVariant = function(a2, b2) {
          var c2 = shaka.util.StreamUtils;
          b2.variants = b2.variants.filter(function(d2) {
            var e2 = d2.audio;
            d2 = d2.video;
            return e2 && a2 && a2.audio && !c2.areStreamsCompatible_(e2, a2.audio) ? (shaka.log.debug("Droping variant - not compatible with active audio", "active audio", c2.getStreamSummaryString_(a2.audio), "variant.audio", c2.getStreamSummaryString_(e2)), false) : d2 && a2 && a2.video && !c2.areStreamsCompatible_(d2, a2.video) ? (shaka.log.debug(
              "Droping variant - not compatible with active video",
              "active video",
              c2.getStreamSummaryString_(a2.video),
              "variant.video",
              c2.getStreamSummaryString_(d2)
            ), false) : true;
          });
        };
        shaka.util.StreamUtils.filterTextStreams_ = function(a2) {
          a2.textStreams = a2.textStreams.filter(function(b2) {
            var c2 = shaka.util.MimeUtils.getFullType(b2.mimeType, b2.codecs);
            (c2 = shaka.text.TextEngine.isTypeSupported(c2)) || shaka.log.debug("Dropping text stream. Is not supported by the platform.", b2);
            return c2;
          });
        };
        shaka.util.StreamUtils.filterImageStreams_ = function(a2) {
          a2.imageStreams = a2.imageStreams.filter(function(b2) {
            var c2 = ["image/svg+xml", "image/png", "image/jpeg"], d2 = shaka.util.Platform;
            (d2.isWebOS() || d2.isTizen() || d2.isChromecast()) && c2.push("image/webp");
            (c2 = c2.includes(b2.mimeType)) || shaka.log.debug("Dropping image stream. Is not supported by the platform.", b2);
            return c2;
          });
        };
        shaka.util.StreamUtils.areStreamsCompatible_ = function(a2, b2) {
          return a2.mimeType != b2.mimeType || a2.codecs.split(".")[0] != b2.codecs.split(".")[0] ? false : true;
        };
        shaka.util.StreamUtils.variantToTrack = function(a2) {
          var b2 = a2.audio, c2 = a2.video, d2 = b2 ? b2.codecs : null, e2 = c2 ? c2.codecs : null, f2 = [];
          e2 && f2.push(e2);
          d2 && f2.push(d2);
          var g = [];
          c2 && g.push(c2.mimeType);
          b2 && g.push(b2.mimeType);
          g = g[0] || null;
          var h = [];
          b2 && h.push(b2.kind);
          c2 && h.push(c2.kind);
          h = h[0] || null;
          var k2 = /* @__PURE__ */ new Set();
          if (b2)
            for (var l = $jscomp.makeIterator(b2.roles), m = l.next(); !m.done; m = l.next())
              k2.add(m.value);
          if (c2)
            for (l = $jscomp.makeIterator(c2.roles), m = l.next(); !m.done; m = l.next())
              k2.add(m.value);
          a2 = {
            id: a2.id,
            active: false,
            type: "variant",
            bandwidth: a2.bandwidth,
            language: a2.language,
            label: null,
            kind: h,
            width: null,
            height: null,
            frameRate: null,
            pixelAspectRatio: null,
            hdr: null,
            mimeType: g,
            codecs: f2.join(", "),
            audioCodec: d2,
            videoCodec: e2,
            primary: a2.primary,
            roles: Array.from(k2),
            audioRoles: null,
            forced: false,
            videoId: null,
            audioId: null,
            channelsCount: null,
            audioSamplingRate: null,
            spatialAudio: false,
            tilesLayout: null,
            audioBandwidth: null,
            videoBandwidth: null,
            originalVideoId: null,
            originalAudioId: null,
            originalTextId: null,
            originalImageId: null
          };
          c2 && (a2.videoId = c2.id, a2.originalVideoId = c2.originalId, a2.width = c2.width || null, a2.height = c2.height || null, a2.frameRate = c2.frameRate || null, a2.pixelAspectRatio = c2.pixelAspectRatio || null, a2.videoBandwidth = c2.bandwidth || null);
          b2 && (a2.audioId = b2.id, a2.originalAudioId = b2.originalId, a2.channelsCount = b2.channelsCount, a2.audioSamplingRate = b2.audioSamplingRate, a2.audioBandwidth = b2.bandwidth || null, a2.spatialAudio = b2.spatialAudio, a2.label = b2.label, a2.audioRoles = b2.roles);
          return a2;
        };
        shaka.util.StreamUtils.textStreamToTrack = function(a2) {
          return {
            id: a2.id,
            active: false,
            type: shaka.util.ManifestParserUtils.ContentType.TEXT,
            bandwidth: 0,
            language: a2.language,
            label: a2.label,
            kind: a2.kind || null,
            width: null,
            height: null,
            frameRate: null,
            pixelAspectRatio: null,
            hdr: null,
            mimeType: a2.mimeType,
            codecs: a2.codecs || null,
            audioCodec: null,
            videoCodec: null,
            primary: a2.primary,
            roles: a2.roles,
            audioRoles: null,
            forced: a2.forced,
            videoId: null,
            audioId: null,
            channelsCount: null,
            audioSamplingRate: null,
            spatialAudio: false,
            tilesLayout: null,
            audioBandwidth: null,
            videoBandwidth: null,
            originalVideoId: null,
            originalAudioId: null,
            originalTextId: a2.originalId,
            originalImageId: null
          };
        };
        shaka.util.StreamUtils.imageStreamToTrack = function(a2) {
          var b2 = shaka.util.ManifestParserUtils.ContentType, c2 = a2.width || null, d2 = a2.height || null, e2 = null;
          a2.segmentIndex && (e2 = a2.segmentIndex.get(0));
          var f2 = a2.tilesLayout;
          e2 && (f2 = e2.getTilesLayout() || f2);
          f2 && null != c2 && (c2 /= Number(f2.split("x")[0]));
          f2 && null != d2 && (d2 /= Number(f2.split("x")[1]));
          return {
            id: a2.id,
            active: false,
            type: b2.IMAGE,
            bandwidth: a2.bandwidth || 0,
            language: "",
            label: null,
            kind: null,
            width: c2,
            height: d2,
            frameRate: null,
            pixelAspectRatio: null,
            hdr: null,
            mimeType: a2.mimeType,
            codecs: null,
            audioCodec: null,
            videoCodec: null,
            primary: false,
            roles: [],
            audioRoles: null,
            forced: false,
            videoId: null,
            audioId: null,
            channelsCount: null,
            audioSamplingRate: null,
            spatialAudio: false,
            tilesLayout: f2 || null,
            audioBandwidth: null,
            videoBandwidth: null,
            originalVideoId: null,
            originalAudioId: null,
            originalTextId: null,
            originalImageId: a2.originalId
          };
        };
        shaka.util.StreamUtils.html5TrackId = function(a2) {
          a2.__shaka_id || (a2.__shaka_id = shaka.util.StreamUtils.nextTrackId_++);
          return a2.__shaka_id;
        };
        shaka.util.StreamUtils.html5TextTrackToTrack = function(a2) {
          var b2 = shaka.util.MimeUtils.CEA608_CLOSED_CAPTION_MIMETYPE, c2 = shaka.util.StreamUtils.html5TrackToGenericShakaTrack_(a2);
          c2.active = "disabled" != a2.mode;
          c2.type = "text";
          c2.originalTextId = a2.id;
          "captions" == a2.kind && (c2.mimeType = b2);
          a2.kind && (c2.roles = [a2.kind]);
          "forced" == a2.kind && (c2.forced = true);
          return c2;
        };
        shaka.util.StreamUtils.html5AudioTrackToTrack = function(a2) {
          var b2 = shaka.util.StreamUtils.html5TrackToGenericShakaTrack_(a2);
          b2.active = a2.enabled;
          b2.type = "variant";
          b2.originalAudioId = a2.id;
          "main" == a2.kind && (b2.primary = true);
          a2.kind && (b2.roles = [a2.kind], b2.audioRoles = [a2.kind], b2.label = a2.label);
          return b2;
        };
        shaka.util.StreamUtils.html5TrackToGenericShakaTrack_ = function(a2) {
          return {
            id: shaka.util.StreamUtils.html5TrackId(a2),
            active: false,
            type: "",
            bandwidth: 0,
            language: shaka.util.LanguageUtils.normalize(a2.language),
            label: a2.label,
            kind: a2.kind,
            width: null,
            height: null,
            frameRate: null,
            pixelAspectRatio: null,
            hdr: null,
            mimeType: null,
            codecs: null,
            audioCodec: null,
            videoCodec: null,
            primary: false,
            roles: [],
            forced: false,
            audioRoles: null,
            videoId: null,
            audioId: null,
            channelsCount: null,
            audioSamplingRate: null,
            spatialAudio: false,
            tilesLayout: null,
            audioBandwidth: null,
            videoBandwidth: null,
            originalVideoId: null,
            originalAudioId: null,
            originalTextId: null,
            originalImageId: null
          };
        };
        shaka.util.StreamUtils.isPlayable = function(a2) {
          return a2.allowedByApplication && a2.allowedByKeySystem;
        };
        shaka.util.StreamUtils.getPlayableVariants = function(a2) {
          return a2.filter(function(b2) {
            return shaka.util.StreamUtils.isPlayable(b2);
          });
        };
        shaka.util.StreamUtils.filterVariantsByAudioChannelCount = function(a2, b2) {
          var c2 = a2.filter(function(g) {
            return g.audio && g.audio.channelsCount;
          }), d2 = /* @__PURE__ */ new Map();
          c2 = $jscomp.makeIterator(c2);
          for (var e2 = c2.next(); !e2.done; e2 = c2.next()) {
            e2 = e2.value;
            var f2 = e2.audio.channelsCount;
            goog.asserts.assert(null != f2, "Must have count after filtering!");
            d2.has(f2) || d2.set(f2, []);
            d2.get(f2).push(e2);
          }
          c2 = Array.from(d2.keys());
          if (0 == c2.length)
            return a2;
          e2 = c2.filter(function(g) {
            return g <= b2;
          });
          return e2.length ? d2.get(Math.max.apply(Math, $jscomp.arrayFromIterable(e2))) : d2.get(Math.min.apply(Math, $jscomp.arrayFromIterable(c2)));
        };
        shaka.util.StreamUtils.filterStreamsByLanguageAndRole = function(a2, b2, c2, d2) {
          var e2 = shaka.util.LanguageUtils, f2 = a2, g = a2.filter(function(l) {
            return l.primary;
          });
          g.length && (f2 = g);
          var h = f2.length ? f2[0].language : "";
          f2 = f2.filter(function(l) {
            return l.language == h;
          });
          if (b2) {
            var k2 = e2.findClosestLocale(e2.normalize(b2), a2.map(function(l) {
              return l.language;
            }));
            k2 && (f2 = a2.filter(function(l) {
              return e2.normalize(l.language) == k2;
            }));
          }
          f2 = f2.filter(function(l) {
            return l.forced == d2;
          });
          if (c2) {
            a2 = shaka.util.StreamUtils.filterTextStreamsByRole_(f2, c2);
            if (a2.length)
              return a2;
            shaka.log.warning("No exact match for the text role could be found.");
          } else if (a2 = f2.filter(function(l) {
            return 0 == l.roles.length;
          }), a2.length)
            return a2;
          a2 = f2.map(function(l) {
            return l.roles;
          }).reduce(shaka.util.Functional.collapseArrays, []);
          return a2.length ? shaka.util.StreamUtils.filterTextStreamsByRole_(f2, a2[0]) : f2;
        };
        shaka.util.StreamUtils.filterTextStreamsByRole_ = function(a2, b2) {
          return a2.filter(function(c2) {
            return c2.roles.includes(b2);
          });
        };
        shaka.util.StreamUtils.isAudio = function(a2) {
          return a2.type == shaka.util.ManifestParserUtils.ContentType.AUDIO;
        };
        shaka.util.StreamUtils.isVideo = function(a2) {
          return a2.type == shaka.util.ManifestParserUtils.ContentType.VIDEO;
        };
        shaka.util.StreamUtils.getVariantStreams = function(a2) {
          var b2 = [];
          a2.audio && b2.push(a2.audio);
          a2.video && b2.push(a2.video);
          return b2;
        };
        shaka.util.StreamUtils.getVariantSummaryString_ = function(a2) {
          var b2 = [];
          a2.audio && b2.push(shaka.util.StreamUtils.getStreamSummaryString_(a2.audio));
          a2.video && b2.push(shaka.util.StreamUtils.getStreamSummaryString_(a2.video));
          return b2.join(", ");
        };
        shaka.util.StreamUtils.getStreamSummaryString_ = function(a2) {
          return shaka.util.StreamUtils.isAudio(a2) ? "type=audio codecs=" + a2.codecs + " bandwidth=" + a2.bandwidth + " channelsCount=" + a2.channelsCount + " audioSamplingRate=" + a2.audioSamplingRate : shaka.util.StreamUtils.isVideo(a2) ? "type=video codecs=" + a2.codecs + " bandwidth=" + a2.bandwidth + " frameRate=" + a2.frameRate + " width=" + a2.width + " height=" + a2.height : "unexpected stream type";
        };
        shaka.util.StreamUtils.nextTrackId_ = 0;
        shaka.util.StreamUtils.DecodingAttributes = { SMOOTH: "smooth", POWER: "powerEfficient", BANDWIDTH: "bandwidth" };
        shaka.abr.SimpleAbrManager = function() {
          var a2 = this;
          this.switch_ = null;
          this.enabled_ = false;
          this.bandwidthEstimator_ = new shaka.abr.EwmaBandwidthEstimator();
          navigator.connection && navigator.connection.addEventListener("change", function() {
            if (a2.config_.useNetworkInformation && a2.enabled_) {
              a2.bandwidthEstimator_ = new shaka.abr.EwmaBandwidthEstimator();
              a2.config_ && a2.bandwidthEstimator_.configure(a2.config_.advanced);
              var b2 = a2.chooseVariant();
              b2 && a2.switch_(b2);
            }
          });
          this.variants_ = [];
          this.playbackRate_ = 1;
          this.startupComplete_ = false;
          this.config_ = this.lastTimeChosenMs_ = null;
        };
        shaka.abr.SimpleAbrManager.prototype.stop = function() {
          this.switch_ = null;
          this.enabled_ = false;
          this.variants_ = [];
          this.playbackRate_ = 1;
          this.lastTimeChosenMs_ = null;
        };
        shaka.abr.SimpleAbrManager.prototype.init = function(a2) {
          this.switch_ = a2;
        };
        shaka.abr.SimpleAbrManager.prototype.chooseVariant = function() {
          var a2 = shaka.abr.SimpleAbrManager, b2 = a2.filterAndSortVariants_(this.config_.restrictions, this.variants_), c2 = this.getDefaultBandwidth_();
          c2 = this.bandwidthEstimator_.getBandwidthEstimate(c2);
          this.variants_.length && !b2.length && (shaka.log.warning("No variants met the ABR restrictions. Choosing a variant by lowest bandwidth."), b2 = a2.filterAndSortVariants_(null, this.variants_), b2 = [b2[0]]);
          a2 = b2[0] || null;
          for (var d2 = 0; d2 < b2.length; d2++) {
            for (var e2 = b2[d2], f2 = isNaN(this.playbackRate_) ? 1 : Math.abs(this.playbackRate_), g = f2 * e2.bandwidth, h = g / this.config_.bandwidthDowngradeTarget, k2 = { bandwidth: Infinity }, l = d2 + 1; l < b2.length; l++)
              if (e2.bandwidth != b2[l].bandwidth) {
                k2 = b2[l];
                break;
              }
            f2 = f2 * k2.bandwidth / this.config_.bandwidthUpgradeTarget;
            shaka.log.v2("Bandwidth ranges:", (g / 1e6).toFixed(3), (h / 1e6).toFixed(3), (f2 / 1e6).toFixed(3));
            c2 >= h && c2 <= f2 && a2.bandwidth != e2.bandwidth && (a2 = e2);
          }
          this.lastTimeChosenMs_ = Date.now();
          return a2;
        };
        shaka.abr.SimpleAbrManager.prototype.enable = function() {
          this.enabled_ = true;
        };
        shaka.abr.SimpleAbrManager.prototype.disable = function() {
          this.enabled_ = false;
        };
        shaka.abr.SimpleAbrManager.prototype.segmentDownloaded = function(a2, b2) {
          shaka.log.v2("Segment downloaded:", "deltaTimeMs=" + a2, "numBytes=" + b2, "lastTimeChosenMs=" + this.lastTimeChosenMs_, "enabled=" + this.enabled_);
          goog.asserts.assert(0 <= a2, "expected a non-negative duration");
          this.bandwidthEstimator_.sample(a2, b2);
          null != this.lastTimeChosenMs_ && this.enabled_ && this.suggestStreams_();
        };
        shaka.abr.SimpleAbrManager.prototype.getBandwidthEstimate = function() {
          var a2 = this.getDefaultBandwidth_();
          return this.bandwidthEstimator_.getBandwidthEstimate(a2);
        };
        shaka.abr.SimpleAbrManager.prototype.setVariants = function(a2) {
          this.variants_ = a2;
        };
        shaka.abr.SimpleAbrManager.prototype.playbackRateChanged = function(a2) {
          this.playbackRate_ = a2;
        };
        shaka.abr.SimpleAbrManager.prototype.configure = function(a2) {
          this.config_ = a2;
          this.bandwidthEstimator_ && this.config_ && this.bandwidthEstimator_.configure(this.config_.advanced);
        };
        shaka.abr.SimpleAbrManager.prototype.suggestStreams_ = function() {
          shaka.log.v2("Suggesting Streams...");
          goog.asserts.assert(null != this.lastTimeChosenMs_, "lastTimeChosenMs_ should not be null");
          if (!this.startupComplete_) {
            if (!this.bandwidthEstimator_.hasGoodEstimate()) {
              shaka.log.v2("Still waiting for a good estimate...");
              return;
            }
            this.startupComplete_ = true;
          } else if (Date.now() - this.lastTimeChosenMs_ < 1e3 * this.config_.switchInterval) {
            shaka.log.v2("Still within switch interval...");
            return;
          }
          var a2 = this.chooseVariant(), b2 = this.getDefaultBandwidth_();
          b2 = this.bandwidthEstimator_.getBandwidthEstimate(b2);
          b2 = Math.round(b2 / 1e3);
          a2 && (shaka.log.debug("Calling switch_(), bandwidth=" + b2 + " kbps"), this.switch_(a2));
        };
        shaka.abr.SimpleAbrManager.prototype.getDefaultBandwidth_ = function() {
          var a2 = this.config_.defaultBandwidthEstimate;
          navigator.connection && navigator.connection.downlink && this.config_.useNetworkInformation && (a2 = 1e6 * navigator.connection.downlink);
          return a2;
        };
        shaka.abr.SimpleAbrManager.filterAndSortVariants_ = function(a2, b2) {
          a2 && (b2 = b2.filter(function(c2) {
            goog.asserts.assert(a2, "Restrictions should exist!");
            return shaka.util.StreamUtils.meetsRestrictions(c2, a2, { width: Infinity, height: Infinity });
          }));
          return b2.sort(function(c2, d2) {
            return c2.bandwidth - d2.bandwidth;
          });
        };
        goog.exportSymbol("shaka.abr.SimpleAbrManager", shaka.abr.SimpleAbrManager);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "configure", shaka.abr.SimpleAbrManager.prototype.configure);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "playbackRateChanged", shaka.abr.SimpleAbrManager.prototype.playbackRateChanged);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "setVariants", shaka.abr.SimpleAbrManager.prototype.setVariants);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "getBandwidthEstimate", shaka.abr.SimpleAbrManager.prototype.getBandwidthEstimate);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "segmentDownloaded", shaka.abr.SimpleAbrManager.prototype.segmentDownloaded);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "disable", shaka.abr.SimpleAbrManager.prototype.disable);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "enable", shaka.abr.SimpleAbrManager.prototype.enable);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "chooseVariant", shaka.abr.SimpleAbrManager.prototype.chooseVariant);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "init", shaka.abr.SimpleAbrManager.prototype.init);
        goog.exportProperty(shaka.abr.SimpleAbrManager.prototype, "stop", shaka.abr.SimpleAbrManager.prototype.stop);
        shaka.media.AdaptationSet = function(a2, b2) {
          this.root_ = a2;
          this.variants_ = /* @__PURE__ */ new Set([a2]);
          b2 = b2 || [];
          for (var c2 = $jscomp.makeIterator(b2), d2 = c2.next(); !d2.done; d2 = c2.next())
            this.add(d2.value);
        };
        shaka.media.AdaptationSet.prototype.add = function(a2) {
          if (this.canInclude(a2))
            return this.variants_.add(a2), true;
          shaka.log.warning("Rejecting variant - not compatible with root.");
          return false;
        };
        shaka.media.AdaptationSet.prototype.canInclude = function(a2) {
          return shaka.media.AdaptationSet.areAdaptable(this.root_, a2);
        };
        shaka.media.AdaptationSet.areAdaptable = function(a2, b2) {
          var c2 = shaka.media.AdaptationSet;
          if (!!a2.audio != !!b2.audio || !!a2.video != !!b2.video || a2.language != b2.language)
            return false;
          goog.asserts.assert(!!a2.audio == !!b2.audio, "Both should either have audio or not have audio.");
          if (a2.audio && b2.audio && !c2.areAudiosCompatible_(a2.audio, b2.audio))
            return false;
          goog.asserts.assert(!!a2.video == !!b2.video, "Both should either have video or not have video.");
          return a2.video && b2.video && !c2.areVideosCompatible_(a2.video, b2.video) ? false : true;
        };
        shaka.media.AdaptationSet.prototype.values = function() {
          return this.variants_.values();
        };
        shaka.media.AdaptationSet.areAudiosCompatible_ = function(a2, b2) {
          var c2 = shaka.media.AdaptationSet;
          return (!a2.channelsCount || !b2.channelsCount || 2 < a2.channelsCount || 2 < b2.channelsCount) && a2.channelsCount != b2.channelsCount || !c2.canTransitionBetween_(a2, b2) || !c2.areRolesEqual_(a2.roles, b2.roles) ? false : true;
        };
        shaka.media.AdaptationSet.areVideosCompatible_ = function(a2, b2) {
          var c2 = shaka.media.AdaptationSet;
          return c2.canTransitionBetween_(a2, b2) && c2.areRolesEqual_(a2.roles, b2.roles) ? true : false;
        };
        shaka.media.AdaptationSet.canTransitionBetween_ = function(a2, b2) {
          if (a2.mimeType != b2.mimeType)
            return false;
          var c2 = shaka.util.MimeUtils.splitCodecs(a2.codecs).map(function(f2) {
            return shaka.util.MimeUtils.getCodecBase(f2);
          }), d2 = shaka.util.MimeUtils.splitCodecs(b2.codecs).map(function(f2) {
            return shaka.util.MimeUtils.getCodecBase(f2);
          });
          if (c2.length != d2.length)
            return false;
          c2.sort();
          d2.sort();
          for (var e2 = 0; e2 < c2.length; e2++)
            if (c2[e2] != d2[e2])
              return false;
          return true;
        };
        shaka.media.AdaptationSet.areRolesEqual_ = function(a2, b2) {
          var c2 = new Set(a2), d2 = new Set(b2);
          c2["delete"]("main");
          d2["delete"]("main");
          if (c2.size != d2.size)
            return false;
          c2 = $jscomp.makeIterator(c2);
          for (var e2 = c2.next(); !e2.done; e2 = c2.next())
            if (!d2.has(e2.value))
              return false;
          return true;
        };
        shaka.media.AdaptationSetCriteria = function() {
        };
        shaka.media.AdaptationSetCriteria.prototype.create = function(a2) {
        };
        shaka.media.ExampleBasedCriteria = function(a2) {
          this.example_ = a2;
          this.fallback_ = new shaka.media.PreferenceBasedCriteria(a2.language, "", a2.audio && a2.audio.channelsCount ? a2.audio.channelsCount : 0, "");
        };
        shaka.media.ExampleBasedCriteria.prototype.create = function(a2) {
          var b2 = this, c2 = a2.filter(function(d2) {
            return shaka.media.AdaptationSet.areAdaptable(b2.example_, d2);
          });
          return c2.length ? new shaka.media.AdaptationSet(c2[0], c2) : this.fallback_.create(a2);
        };
        shaka.media.PreferenceBasedCriteria = function(a2, b2, c2, d2) {
          this.language_ = a2;
          this.role_ = b2;
          this.channelCount_ = c2;
          this.label_ = void 0 === d2 ? "" : d2;
        };
        shaka.media.PreferenceBasedCriteria.prototype.create = function(a2) {
          var b2 = shaka.media.PreferenceBasedCriteria, c2 = shaka.util.StreamUtils, d2 = [];
          d2 = b2.filterByLanguage_(a2, this.language_);
          var e2 = a2.filter(function(f2) {
            return f2.primary;
          });
          d2 = d2.length ? d2 : e2.length ? e2 : a2;
          a2 = b2.filterVariantsByRole_(d2, this.role_);
          a2.length ? d2 = a2 : shaka.log.warning("No exact match for variant role could be found.");
          this.channelCount_ && (c2 = c2.filterVariantsByAudioChannelCount(d2, this.channelCount_), c2.length ? d2 = c2 : shaka.log.warning("No exact match for the channel count could be found."));
          this.label_ && (b2 = b2.filterVariantsByLabel_(d2, this.label_), b2.length ? d2 = b2 : shaka.log.warning("No exact match for variant label could be found."));
          b2 = new shaka.media.AdaptationSet(d2[0]);
          d2 = $jscomp.makeIterator(d2);
          for (c2 = d2.next(); !c2.done; c2 = d2.next())
            c2 = c2.value, b2.canInclude(c2) && b2.add(c2);
          return b2;
        };
        shaka.media.PreferenceBasedCriteria.filterByLanguage_ = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils, d2 = c2.normalize(b2), e2 = c2.findClosestLocale(d2, a2.map(function(f2) {
            return c2.getLocaleForVariant(f2);
          }));
          return e2 ? a2.filter(function(f2) {
            return e2 == c2.getLocaleForVariant(f2);
          }) : [];
        };
        shaka.media.PreferenceBasedCriteria.filterVariantsByRole_ = function(a2, b2) {
          return a2.filter(function(c2) {
            return c2.audio ? b2 ? c2.audio.roles.includes(b2) : 0 == c2.audio.roles.length : false;
          });
        };
        shaka.media.PreferenceBasedCriteria.filterVariantsByLabel_ = function(a2, b2) {
          return a2.filter(function(c2) {
            if (!c2.audio)
              return false;
            c2 = c2.audio.label.toLowerCase();
            var d2 = b2.toLowerCase();
            return c2 == d2;
          });
        };
        shaka.media.BufferingObserver = function(a2, b2) {
          var c2 = shaka.media.BufferingObserver.State;
          this.previousState_ = c2.SATISFIED;
          this.thresholds_ = (/* @__PURE__ */ new Map()).set(c2.SATISFIED, b2).set(c2.STARVING, a2);
        };
        shaka.media.BufferingObserver.prototype.setThresholds = function(a2, b2) {
          var c2 = shaka.media.BufferingObserver.State;
          this.thresholds_.set(c2.SATISFIED, b2).set(c2.STARVING, a2);
        };
        shaka.media.BufferingObserver.prototype.update = function(a2, b2) {
          var c2 = shaka.media.BufferingObserver.State, d2 = this.thresholds_.get(this.previousState_), e2 = this.previousState_;
          this.previousState_ = c2 = b2 || a2 >= d2 ? c2.SATISFIED : c2.STARVING;
          return e2 != c2;
        };
        shaka.media.BufferingObserver.prototype.setState = function(a2) {
          this.previousState_ = a2;
        };
        shaka.media.BufferingObserver.prototype.getState = function() {
          return this.previousState_;
        };
        shaka.media.BufferingObserver.State = { STARVING: 0, SATISFIED: 1 };
        shaka.net = {};
        shaka.net.Backoff = function(a2, b2) {
          b2 = void 0 === b2 ? false : b2;
          var c2 = shaka.net.Backoff.defaultRetryParameters();
          this.maxAttempts_ = null == a2.maxAttempts ? c2.maxAttempts : a2.maxAttempts;
          goog.asserts.assert(1 <= this.maxAttempts_, "maxAttempts should be >= 1");
          this.baseDelay_ = null == a2.baseDelay ? c2.baseDelay : a2.baseDelay;
          goog.asserts.assert(0 <= this.baseDelay_, "baseDelay should be >= 0");
          this.fuzzFactor_ = null == a2.fuzzFactor ? c2.fuzzFactor : a2.fuzzFactor;
          goog.asserts.assert(0 <= this.fuzzFactor_, "fuzzFactor should be >= 0");
          this.backoffFactor_ = null == a2.backoffFactor ? c2.backoffFactor : a2.backoffFactor;
          goog.asserts.assert(0 <= this.backoffFactor_, "backoffFactor should be >= 0");
          this.numAttempts_ = 0;
          this.nextUnfuzzedDelay_ = this.baseDelay_;
          if (this.autoReset_ = b2)
            goog.asserts.assert(2 <= this.maxAttempts_, "maxAttempts must be >= 2 for autoReset == true"), this.numAttempts_ = 1;
        };
        shaka.net.Backoff.prototype.attempt = function() {
          var a2 = this, b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress) {
              if (a2.numAttempts_ >= a2.maxAttempts_)
                if (a2.autoReset_)
                  a2.reset_();
                else
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.ATTEMPTS_EXHAUSTED);
              b2 = a2.numAttempts_;
              a2.numAttempts_++;
              if (0 == b2)
                return goog.asserts.assert(!a2.autoReset_, "Failed to delay with auto-reset!"), d2["return"]();
              c2 = shaka.net.Backoff.fuzz_(
                a2.nextUnfuzzedDelay_,
                a2.fuzzFactor_
              );
              return d2.yield(new Promise(function(e2) {
                shaka.net.Backoff.defer(c2, e2);
              }), 2);
            }
            a2.nextUnfuzzedDelay_ *= a2.backoffFactor_;
            d2.jumpToEnd();
          });
        };
        shaka.net.Backoff.defaultRetryParameters = function() {
          return { maxAttempts: 2, baseDelay: 1e3, backoffFactor: 2, fuzzFactor: 0.5, timeout: 3e4, stallTimeout: 5e3, connectionTimeout: 1e4 };
        };
        shaka.net.Backoff.fuzz_ = function(a2, b2) {
          return a2 * (1 + (2 * Math.random() - 1) * b2);
        };
        shaka.net.Backoff.prototype.reset_ = function() {
          goog.asserts.assert(this.autoReset_, "Should only be used for auto-reset!");
          this.numAttempts_ = 1;
          this.nextUnfuzzedDelay_ = this.baseDelay_;
        };
        shaka.net.Backoff.defer = function(a2, b2) {
          new shaka.util.Timer(b2).tickAfter(a2 / 1e3);
        };
        shaka.util.AbortableOperation = function(a2, b2) {
          this.promise = a2;
          this.onAbort_ = b2;
          this.aborted_ = false;
        };
        shaka.util.AbortableOperation.failed = function(a2) {
          return new shaka.util.AbortableOperation(Promise.reject(a2), function() {
            return Promise.resolve();
          });
        };
        shaka.util.AbortableOperation.aborted = function() {
          var a2 = Promise.reject(shaka.util.AbortableOperation.abortError());
          a2["catch"](function() {
          });
          return new shaka.util.AbortableOperation(a2, function() {
            return Promise.resolve();
          });
        };
        shaka.util.AbortableOperation.abortError = function() {
          return new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.OPERATION_ABORTED);
        };
        shaka.util.AbortableOperation.completed = function(a2) {
          return new shaka.util.AbortableOperation(Promise.resolve(a2), function() {
            return Promise.resolve();
          });
        };
        shaka.util.AbortableOperation.notAbortable = function(a2) {
          return new shaka.util.AbortableOperation(a2, function() {
            return a2["catch"](function() {
            });
          });
        };
        shaka.util.AbortableOperation.prototype.abort = function() {
          this.aborted_ = true;
          return this.onAbort_();
        };
        shaka.util.AbortableOperation.all = function(a2) {
          return new shaka.util.AbortableOperation(Promise.all(a2.map(function(b2) {
            return b2.promise;
          })), function() {
            return Promise.all(a2.map(function(b2) {
              return b2.abort();
            }));
          });
        };
        shaka.util.AbortableOperation.prototype["finally"] = function(a2) {
          this.promise.then(function(b2) {
            return a2(true);
          }, function(b2) {
            return a2(false);
          });
          return this;
        };
        shaka.util.AbortableOperation.prototype.chain = function(a2, b2) {
          var c2 = this, d2 = new shaka.util.PublicPromise(), e2 = shaka.util.AbortableOperation.abortError(), f2 = function() {
            d2.reject(e2);
            return c2.abort();
          }, g = function(h) {
            return function(k2) {
              if (c2.aborted_ && h)
                d2.reject(e2);
              else {
                var l = h ? a2 : b2;
                l ? f2 = shaka.util.AbortableOperation.wrapChainCallback_(l, k2, d2) : (h ? d2.resolve : d2.reject)(k2);
              }
            };
          };
          this.promise.then(g(true), g(false));
          return new shaka.util.AbortableOperation(d2, function() {
            return f2();
          });
        };
        shaka.util.AbortableOperation.wrapChainCallback_ = function(a2, b2, c2) {
          try {
            var d2 = a2(b2);
            if (d2 && d2.promise && d2.abort)
              return c2.resolve(d2.promise), function() {
                return d2.abort();
              };
            c2.resolve(d2);
            return function() {
              return Promise.resolve(d2).then(function() {
              }, function() {
              });
            };
          } catch (e2) {
            return c2.reject(e2), function() {
              return Promise.resolve();
            };
          }
        };
        goog.exportSymbol("shaka.util.AbortableOperation", shaka.util.AbortableOperation);
        goog.exportProperty(shaka.util.AbortableOperation.prototype, "chain", shaka.util.AbortableOperation.prototype.chain);
        goog.exportProperty(shaka.util.AbortableOperation.prototype, "finally", shaka.util.AbortableOperation.prototype["finally"]);
        goog.exportProperty(shaka.util.AbortableOperation, "all", shaka.util.AbortableOperation.all);
        goog.exportProperty(shaka.util.AbortableOperation.prototype, "abort", shaka.util.AbortableOperation.prototype.abort);
        goog.exportProperty(shaka.util.AbortableOperation, "notAbortable", shaka.util.AbortableOperation.notAbortable);
        goog.exportProperty(shaka.util.AbortableOperation, "completed", shaka.util.AbortableOperation.completed);
        goog.exportProperty(shaka.util.AbortableOperation, "aborted", shaka.util.AbortableOperation.aborted);
        goog.exportProperty(shaka.util.AbortableOperation, "failed", shaka.util.AbortableOperation.failed);
        shaka.util.FakeEvent = function(a2, b2) {
          if (b2)
            if (b2 instanceof Map)
              for (var c2 = $jscomp.makeIterator(b2.keys()), d2 = c2.next(); !d2.done; d2 = c2.next())
                d2 = d2.value, Object.defineProperty(this, d2, { value: b2.get(d2), writable: true, enumerable: true });
            else
              for (d2 in c2 = shaka.util.FakeEvent.recastDictAsObject_(b2), c2)
                Object.defineProperty(this, d2, { value: c2[d2], writable: true, enumerable: true });
          this.defaultPrevented = this.cancelable = this.bubbles = false;
          this.timeStamp = window.performance && window.performance.now ? window.performance.now() : Date.now();
          this.type = a2;
          this.isTrusted = false;
          this.target = this.currentTarget = null;
          this.stopped = false;
        };
        shaka.util.FakeEvent.fromRealEvent = function(a2) {
          var b2 = new shaka.util.FakeEvent(a2.type), c2;
          for (c2 in a2)
            Object.defineProperty(b2, c2, { value: a2[c2], writable: true, enumerable: true });
          return b2;
        };
        shaka.util.FakeEvent.recastDictAsObject_ = function(a2) {
          goog.asserts.assert(!(a2 instanceof Map), "dict should not be a map");
          return a2;
        };
        shaka.util.FakeEvent.prototype.preventDefault = function() {
          this.cancelable && (this.defaultPrevented = true);
        };
        shaka.util.FakeEvent.prototype.stopImmediatePropagation = function() {
          this.stopped = true;
        };
        shaka.util.FakeEvent.prototype.stopPropagation = function() {
        };
        goog.exportSymbol("shaka.util.FakeEvent", shaka.util.FakeEvent);
        shaka.util.IReleasable = function() {
        };
        shaka.util.IReleasable.prototype.release = function() {
        };
        shaka.util.FakeEventTarget = function() {
          this.listeners_ = new shaka.util.MultiMap();
          this.dispatchTarget = this;
        };
        shaka.util.FakeEventTarget.prototype.addEventListener = function(a2, b2, c2) {
          this.listeners_ && this.listeners_.push(a2, b2);
        };
        shaka.util.FakeEventTarget.prototype.listenToAllEvents = function(a2) {
          this.addEventListener(shaka.util.FakeEventTarget.ALL_EVENTS_, a2);
        };
        shaka.util.FakeEventTarget.prototype.removeEventListener = function(a2, b2, c2) {
          this.listeners_ && this.listeners_.remove(a2, b2);
        };
        shaka.util.FakeEventTarget.prototype.dispatchEvent = function(a2) {
          goog.asserts.assert(a2 instanceof shaka.util.FakeEvent, "FakeEventTarget can only dispatch FakeEvents!");
          if (!this.listeners_)
            return true;
          var b2 = this.listeners_.get(a2.type) || [], c2 = this.listeners_.get(shaka.util.FakeEventTarget.ALL_EVENTS_);
          c2 && (b2 = b2.concat(c2));
          b2 = $jscomp.makeIterator(b2);
          for (c2 = b2.next(); !c2.done; c2 = b2.next()) {
            c2 = c2.value;
            a2.target = this.dispatchTarget;
            a2.currentTarget = this.dispatchTarget;
            try {
              c2.handleEvent ? c2.handleEvent(a2) : c2.call(this, a2);
            } catch (d2) {
              shaka.log.error(
                "Uncaught exception in event handler",
                d2,
                d2 ? d2.message : null,
                d2 ? d2.stack : null
              );
            }
            if (a2.stopped)
              break;
          }
          return a2.defaultPrevented;
        };
        shaka.util.FakeEventTarget.prototype.release = function() {
          this.listeners_ = null;
        };
        shaka.util.FakeEventTarget.ALL_EVENTS_ = "All";
        shaka.util.ObjectUtils = function() {
        };
        shaka.util.ObjectUtils.cloneObject = function(a2) {
          var b2 = /* @__PURE__ */ new Set(), c2 = function(d2) {
            switch (typeof d2) {
              case "undefined":
              case "boolean":
              case "number":
              case "string":
              case "symbol":
              case "function":
                return d2;
              default:
                if (!d2 || d2.buffer && d2.buffer.constructor == ArrayBuffer)
                  return d2;
                if (b2.has(d2))
                  return null;
                var e2 = d2.constructor == Array;
                if (d2.constructor != Object && !e2)
                  return null;
                b2.add(d2);
                var f2 = e2 ? [] : {}, g;
                for (g in d2)
                  f2[g] = c2(d2[g]);
                e2 && (f2.length = d2.length);
                return f2;
            }
          };
          return c2(a2);
        };
        shaka.util.ObjectUtils.shallowCloneObject = function(a2) {
          var b2 = {}, c2;
          for (c2 in a2)
            b2[c2] = a2[c2];
          return b2;
        };
        shaka.util.OperationManager = function() {
          this.operations_ = [];
        };
        shaka.util.OperationManager.prototype.manage = function(a2) {
          var b2 = this;
          this.operations_.push(a2["finally"](function() {
            shaka.util.ArrayUtils.remove(b2.operations_, a2);
          }));
        };
        shaka.util.OperationManager.prototype.destroy = function() {
          for (var a2 = [], b2 = $jscomp.makeIterator(this.operations_), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, c2.promise["catch"](function() {
            }), a2.push(c2.abort());
          this.operations_ = [];
          return Promise.all(a2);
        };
        shaka.net.NetworkingEngine = function(a2, b2, c2) {
          shaka.util.FakeEventTarget.call(this);
          this.destroyed_ = false;
          this.operationManager_ = new shaka.util.OperationManager();
          this.requestFilters_ = /* @__PURE__ */ new Set();
          this.responseFilters_ = /* @__PURE__ */ new Set();
          this.onProgressUpdated_ = a2 || null;
          this.onHeadersReceived_ = b2 || null;
          this.onDownloadFailed_ = c2 || null;
          this.forceHTTPS_ = false;
        };
        $jscomp.inherits(shaka.net.NetworkingEngine, shaka.util.FakeEventTarget);
        shaka.net.NetworkingEngine.prototype.setForceHTTPS = function(a2) {
          this.forceHTTPS_ = a2;
        };
        shaka.net.NetworkingEngine.registerScheme = function(a2, b2, c2, d2) {
          d2 = void 0 === d2 ? false : d2;
          goog.asserts.assert(void 0 == c2 || 0 < c2, "explicit priority must be > 0");
          c2 = c2 || shaka.net.NetworkingEngine.PluginPriority.APPLICATION;
          var e2 = shaka.net.NetworkingEngine.schemes_[a2];
          if (!e2 || c2 >= e2.priority)
            shaka.net.NetworkingEngine.schemes_[a2] = { priority: c2, plugin: b2, progressSupport: d2 };
        };
        shaka.net.NetworkingEngine.unregisterScheme = function(a2) {
          delete shaka.net.NetworkingEngine.schemes_[a2];
        };
        shaka.net.NetworkingEngine.prototype.registerRequestFilter = function(a2) {
          this.requestFilters_.add(a2);
        };
        shaka.net.NetworkingEngine.prototype.unregisterRequestFilter = function(a2) {
          this.requestFilters_["delete"](a2);
        };
        shaka.net.NetworkingEngine.prototype.clearAllRequestFilters = function() {
          this.requestFilters_.clear();
        };
        shaka.net.NetworkingEngine.prototype.registerResponseFilter = function(a2) {
          this.responseFilters_.add(a2);
        };
        shaka.net.NetworkingEngine.prototype.unregisterResponseFilter = function(a2) {
          this.responseFilters_["delete"](a2);
        };
        shaka.net.NetworkingEngine.prototype.clearAllResponseFilters = function() {
          this.responseFilters_.clear();
        };
        shaka.net.NetworkingEngine.defaultRetryParameters = function() {
          return shaka.net.Backoff.defaultRetryParameters();
        };
        shaka.net.NetworkingEngine.makeRequest = function(a2, b2, c2) {
          return { uris: a2, method: "GET", body: null, headers: {}, allowCrossSiteCredentials: false, retryParameters: b2, licenseRequestType: null, sessionId: null, streamDataCallback: void 0 === c2 ? null : c2 };
        };
        shaka.net.NetworkingEngine.prototype.destroy = function() {
          this.destroyed_ = true;
          this.requestFilters_.clear();
          this.responseFilters_.clear();
          shaka.util.FakeEventTarget.prototype.release.call(this);
          return this.operationManager_.destroy();
        };
        shaka.net.NetworkingEngine.prototype.request = function(a2, b2) {
          var c2 = this, d2 = shaka.util.ObjectUtils, e2 = new shaka.net.NetworkingEngine.NumBytesRemainingClass();
          if (this.destroyed_)
            return d2 = Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.OPERATION_ABORTED)), d2["catch"](function() {
            }), new shaka.net.NetworkingEngine.PendingRequest(d2, function() {
              return Promise.resolve();
            }, e2);
          goog.asserts.assert(b2.uris && b2.uris.length, "Request without URIs!");
          b2.method = b2.method || "GET";
          b2.headers = b2.headers || {};
          b2.retryParameters = b2.retryParameters ? d2.cloneObject(b2.retryParameters) : shaka.net.NetworkingEngine.defaultRetryParameters();
          b2.uris = d2.cloneObject(b2.uris);
          d2 = this.filterRequest_(a2, b2);
          var f2 = d2.chain(function() {
            return c2.makeRequestWithRetry_(a2, b2, e2);
          }), g = f2.chain(function(n) {
            return c2.filterResponse_(a2, n);
          }), h = Date.now(), k2 = 0;
          d2.promise.then(function() {
            k2 = Date.now() - h;
          }, function() {
          });
          var l = 0;
          f2.promise.then(function() {
            l = Date.now();
          }, function() {
          });
          var m = g.chain(function(n) {
            var p = Date.now() - l, q = n.response;
            q.timeMs += k2;
            q.timeMs += p;
            if (!n.gotProgress && c2.onProgressUpdated_ && !q.fromCache && a2 == shaka.net.NetworkingEngine.RequestType.SEGMENT)
              c2.onProgressUpdated_(q.timeMs, q.data.byteLength);
            return q;
          }, function(n) {
            n && (goog.asserts.assert(n instanceof shaka.util.Error, "Wrong error type"), n.severity = shaka.util.Error.Severity.CRITICAL);
            throw n;
          });
          d2 = new shaka.net.NetworkingEngine.PendingRequest(m.promise, function() {
            return m.abort();
          }, e2);
          this.operationManager_.manage(d2);
          return d2;
        };
        shaka.net.NetworkingEngine.prototype.filterRequest_ = function(a2, b2) {
          for (var c2 = shaka.util.AbortableOperation.completed(void 0), d2 = {}, e2 = $jscomp.makeIterator(this.requestFilters_), f2 = e2.next(); !f2.done; d2 = { $jscomp$loop$prop$requestFilter$582: d2.$jscomp$loop$prop$requestFilter$582 }, f2 = e2.next())
            d2.$jscomp$loop$prop$requestFilter$582 = f2.value, c2 = c2.chain(function(g) {
              return function() {
                b2.body && (b2.body = shaka.util.BufferUtils.toArrayBuffer(b2.body));
                return g.$jscomp$loop$prop$requestFilter$582(a2, b2);
              };
            }(d2));
          return c2.chain(
            void 0,
            function(g) {
              if (g instanceof shaka.util.Error && g.code == shaka.util.Error.Code.OPERATION_ABORTED)
                throw g;
              throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.REQUEST_FILTER_ERROR, g);
            }
          );
        };
        shaka.net.NetworkingEngine.prototype.makeRequestWithRetry_ = function(a2, b2, c2) {
          var d2 = new shaka.net.Backoff(b2.retryParameters, false);
          return this.send_(a2, b2, d2, 0, null, c2);
        };
        shaka.net.NetworkingEngine.prototype.send_ = function(a2, b2, c2, d2, e2, f2) {
          var g = this;
          this.forceHTTPS_ && (b2.uris[d2] = b2.uris[d2].replace("http://", "https://"));
          var h = new goog.Uri(b2.uris[d2]), k2 = h.getScheme(), l = false;
          k2 || (k2 = shaka.net.NetworkingEngine.getLocationProtocol_(), goog.asserts.assert(":" == k2[k2.length - 1], "location.protocol expected to end with a colon!"), k2 = k2.slice(0, -1), h.setScheme(k2), b2.uris[d2] = h.toString());
          k2 = k2.toLowerCase();
          var m = (k2 = shaka.net.NetworkingEngine.schemes_[k2]) ? k2.plugin : null;
          if (!m)
            return shaka.util.AbortableOperation.failed(new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.NETWORK,
              shaka.util.Error.Code.UNSUPPORTED_SCHEME,
              h
            ));
          var n = k2.progressSupport, p = null, q = null, r = false, t = false, u;
          return shaka.util.AbortableOperation.notAbortable(c2.attempt()).chain(function() {
            if (g.destroyed_)
              return shaka.util.AbortableOperation.aborted();
            u = Date.now();
            var v = shaka.net.NetworkingEngine.RequestType.SEGMENT, y = m(b2.uris[d2], b2, a2, function(z, A, C) {
              p && p.stop();
              q && q.tickAfter(x / 1e3);
              g.onProgressUpdated_ && a2 == v && (g.onProgressUpdated_(z, A), l = true, f2.setBytes(C));
            }, function(z) {
              if (g.onHeadersReceived_)
                g.onHeadersReceived_(
                  z,
                  b2,
                  a2
                );
              t = true;
            });
            if (!n)
              return y;
            var w = b2.retryParameters.connectionTimeout;
            w && (p = new shaka.util.Timer(function() {
              r = true;
              y.abort();
            }), p.tickAfter(w / 1e3));
            var x = b2.retryParameters.stallTimeout;
            x && (q = new shaka.util.Timer(function() {
              r = true;
              y.abort();
            }));
            return y;
          }).chain(function(v) {
            p && p.stop();
            q && q.stop();
            void 0 == v.timeMs && (v.timeMs = Date.now() - u);
            var y = { response: v, gotProgress: l };
            if (!t && g.onHeadersReceived_)
              g.onHeadersReceived_(v.headers, b2, a2);
            return y;
          }, function(v) {
            p && p.stop();
            q && q.stop();
            if (g.onDownloadFailed_) {
              var y = null, w = 0;
              v instanceof shaka.util.Error && (y = v, v.code == shaka.util.Error.Code.BAD_HTTP_STATUS && (w = v.data[1]));
              g.onDownloadFailed_(b2, y, w, r);
            }
            if (g.destroyed_)
              return shaka.util.AbortableOperation.aborted();
            r && (v = new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.TIMEOUT, b2.uris[d2], a2));
            if (v instanceof shaka.util.Error) {
              if (v.code == shaka.util.Error.Code.OPERATION_ABORTED)
                throw v;
              if (v.code == shaka.util.Error.Code.ATTEMPTS_EXHAUSTED)
                throw goog.asserts.assert(
                  e2,
                  "Should have last error"
                ), e2;
              if (v.severity == shaka.util.Error.Severity.RECOVERABLE)
                return y = (/* @__PURE__ */ new Map()).set("error", v), y = new shaka.util.FakeEvent("retry", y), g.dispatchEvent(y), d2 = (d2 + 1) % b2.uris.length, g.send_(a2, b2, c2, d2, v, f2);
            }
            throw v;
          });
        };
        shaka.net.NetworkingEngine.prototype.filterResponse_ = function(a2, b2) {
          for (var c2 = shaka.util.AbortableOperation.completed(void 0), d2 = {}, e2 = $jscomp.makeIterator(this.responseFilters_), f2 = e2.next(); !f2.done; d2 = { $jscomp$loop$prop$responseFilter$584: d2.$jscomp$loop$prop$responseFilter$584 }, f2 = e2.next())
            d2.$jscomp$loop$prop$responseFilter$584 = f2.value, c2 = c2.chain(function(g) {
              return function() {
                var h = b2.response;
                h.data && (h.data = shaka.util.BufferUtils.toArrayBuffer(h.data));
                return g.$jscomp$loop$prop$responseFilter$584(a2, h);
              };
            }(d2));
          return c2.chain(function() {
            return b2;
          }, function(g) {
            var h = shaka.util.Error.Severity.CRITICAL;
            if (g instanceof shaka.util.Error) {
              if (g.code == shaka.util.Error.Code.OPERATION_ABORTED)
                throw g;
              h = g.severity;
            }
            throw new shaka.util.Error(h, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.RESPONSE_FILTER_ERROR, g);
          });
        };
        shaka.net.NetworkingEngine.getLocationProtocol_ = function() {
          return location.protocol;
        };
        goog.exportSymbol("shaka.net.NetworkingEngine", shaka.net.NetworkingEngine);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "request", shaka.net.NetworkingEngine.prototype.request);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "destroy", shaka.net.NetworkingEngine.prototype.destroy);
        goog.exportProperty(shaka.net.NetworkingEngine, "makeRequest", shaka.net.NetworkingEngine.makeRequest);
        goog.exportProperty(shaka.net.NetworkingEngine, "defaultRetryParameters", shaka.net.NetworkingEngine.defaultRetryParameters);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "clearAllResponseFilters", shaka.net.NetworkingEngine.prototype.clearAllResponseFilters);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "unregisterResponseFilter", shaka.net.NetworkingEngine.prototype.unregisterResponseFilter);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "registerResponseFilter", shaka.net.NetworkingEngine.prototype.registerResponseFilter);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "clearAllRequestFilters", shaka.net.NetworkingEngine.prototype.clearAllRequestFilters);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "unregisterRequestFilter", shaka.net.NetworkingEngine.prototype.unregisterRequestFilter);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "registerRequestFilter", shaka.net.NetworkingEngine.prototype.registerRequestFilter);
        goog.exportProperty(shaka.net.NetworkingEngine, "unregisterScheme", shaka.net.NetworkingEngine.unregisterScheme);
        goog.exportProperty(shaka.net.NetworkingEngine, "registerScheme", shaka.net.NetworkingEngine.registerScheme);
        goog.exportProperty(shaka.net.NetworkingEngine.prototype, "setForceHTTPS", shaka.net.NetworkingEngine.prototype.setForceHTTPS);
        shaka.net.NetworkingEngine.NumBytesRemainingClass = function() {
          this.bytesToLoad_ = 0;
        };
        shaka.net.NetworkingEngine.NumBytesRemainingClass.prototype.setBytes = function(a2) {
          this.bytesToLoad_ = a2;
        };
        shaka.net.NetworkingEngine.NumBytesRemainingClass.prototype.getBytes = function() {
          return this.bytesToLoad_;
        };
        goog.exportProperty(shaka.net.NetworkingEngine, "NumBytesRemainingClass", shaka.net.NetworkingEngine.NumBytesRemainingClass);
        shaka.net.NetworkingEngine.PendingRequest = function(a2, b2, c2) {
          shaka.util.AbortableOperation.call(this, a2, b2);
          this.bytesRemaining_ = c2;
        };
        $jscomp.inherits(shaka.net.NetworkingEngine.PendingRequest, shaka.util.AbortableOperation);
        shaka.net.NetworkingEngine.PendingRequest.prototype.getBytesRemaining = function() {
          return this.bytesRemaining_.getBytes();
        };
        goog.exportProperty(shaka.net.NetworkingEngine, "PendingRequest", shaka.net.NetworkingEngine.PendingRequest);
        shaka.net.NetworkingEngine.RequestType = { MANIFEST: 0, SEGMENT: 1, LICENSE: 2, APP: 3, TIMING: 4, SERVER_CERTIFICATE: 5 };
        goog.exportProperty(shaka.net.NetworkingEngine, "RequestType", shaka.net.NetworkingEngine.RequestType);
        shaka.net.NetworkingEngine.PluginPriority = { FALLBACK: 1, PREFERRED: 2, APPLICATION: 3 };
        goog.exportProperty(shaka.net.NetworkingEngine, "PluginPriority", shaka.net.NetworkingEngine.PluginPriority);
        shaka.net.NetworkingEngine.schemes_ = {};
        shaka.util.Destroyer = function(a2) {
          this.destroyed_ = false;
          this.waitOnDestroy_ = new shaka.util.PublicPromise();
          this.onDestroy_ = a2;
        };
        shaka.util.Destroyer.prototype.destroyed = function() {
          return this.destroyed_;
        };
        shaka.util.Destroyer.prototype.destroy = function() {
          var a2 = this;
          if (this.destroyed_)
            return this.waitOnDestroy_;
          this.destroyed_ = true;
          return this.onDestroy_().then(function() {
            a2.waitOnDestroy_.resolve();
          }, function() {
            a2.waitOnDestroy_.resolve();
          });
        };
        shaka.util.Destroyer.prototype.ensureNotDestroyed = function(a2) {
          if (this.destroyed_) {
            if (a2 instanceof shaka.util.Error && a2.code == shaka.util.Error.Code.OBJECT_DESTROYED)
              throw a2;
            throw shaka.util.Destroyer.destroyedError(a2);
          }
        };
        shaka.util.Destroyer.destroyedError = function(a2) {
          return new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.OBJECT_DESTROYED, a2);
        };
        shaka.util.EventManager = function() {
          this.bindingMap_ = new shaka.util.MultiMap();
        };
        shaka.util.EventManager.prototype.release = function() {
          this.removeAll();
          this.bindingMap_ = null;
        };
        shaka.util.EventManager.prototype.listen = function(a2, b2, c2, d2) {
          this.bindingMap_ && (a2 = new shaka.util.EventManager.Binding_(a2, b2, c2, d2), this.bindingMap_.push(b2, a2));
        };
        shaka.util.EventManager.prototype.listenOnce = function(a2, b2, c2, d2) {
          var e2 = this, f2 = function(g) {
            e2.unlisten(a2, b2, f2);
            c2(g);
          };
          this.listen(a2, b2, f2, d2);
        };
        shaka.util.EventManager.prototype.unlisten = function(a2, b2, c2) {
          if (this.bindingMap_) {
            var d2 = this.bindingMap_.get(b2) || [];
            d2 = $jscomp.makeIterator(d2);
            for (var e2 = d2.next(); !e2.done; e2 = d2.next())
              e2 = e2.value, e2.target != a2 || c2 != e2.listener && c2 || (e2.unlisten(), this.bindingMap_.remove(b2, e2));
          }
        };
        shaka.util.EventManager.prototype.removeAll = function() {
          if (this.bindingMap_) {
            var a2 = this.bindingMap_.getAll();
            a2 = $jscomp.makeIterator(a2);
            for (var b2 = a2.next(); !b2.done; b2 = a2.next())
              b2.value.unlisten();
            this.bindingMap_.clear();
          }
        };
        goog.exportSymbol("shaka.util.EventManager", shaka.util.EventManager);
        goog.exportProperty(shaka.util.EventManager.prototype, "removeAll", shaka.util.EventManager.prototype.removeAll);
        goog.exportProperty(shaka.util.EventManager.prototype, "unlisten", shaka.util.EventManager.prototype.unlisten);
        goog.exportProperty(shaka.util.EventManager.prototype, "listenOnce", shaka.util.EventManager.prototype.listenOnce);
        goog.exportProperty(shaka.util.EventManager.prototype, "listen", shaka.util.EventManager.prototype.listen);
        goog.exportProperty(shaka.util.EventManager.prototype, "release", shaka.util.EventManager.prototype.release);
        shaka.util.EventManager.Binding_ = function(a2, b2, c2, d2) {
          this.target = a2;
          this.type = b2;
          this.listener = c2;
          this.options = shaka.util.EventManager.Binding_.convertOptions_(a2, d2);
          this.target.addEventListener(b2, c2, this.options);
        };
        shaka.util.EventManager.Binding_.prototype.unlisten = function() {
          goog.asserts.assert(this.target, "Missing target");
          this.target.removeEventListener(this.type, this.listener, this.options);
          this.listener = this.target = null;
          this.options = false;
        };
        shaka.util.EventManager.Binding_.convertOptions_ = function(a2, b2) {
          if (void 0 == b2)
            return false;
          if ("boolean" == typeof b2)
            return b2;
          var c2 = /* @__PURE__ */ new Set(["passive", "capture"]), d2 = Object.keys(b2).filter(function(e2) {
            return !c2.has(e2);
          });
          goog.asserts.assert(0 == d2.length, "Unsupported flag(s) to addEventListener: " + d2.join(","));
          return shaka.util.EventManager.Binding_.doesSupportObject_(a2) ? b2 : b2.capture || false;
        };
        shaka.util.EventManager.Binding_.doesSupportObject_ = function(a2) {
          var b2 = shaka.util.EventManager.Binding_.supportsObject_;
          if (void 0 == b2) {
            b2 = false;
            try {
              var c2 = {}, d2 = { get: function() {
                b2 = true;
                return false;
              } };
              Object.defineProperty(c2, "passive", d2);
              Object.defineProperty(c2, "capture", d2);
              d2 = function() {
              };
              a2.addEventListener("test", d2, c2);
              a2.removeEventListener("test", d2, c2);
            } catch (e2) {
              b2 = false;
            }
            shaka.util.EventManager.Binding_.supportsObject_ = b2;
          }
          return b2 || false;
        };
        shaka.util.EventManager.Binding_.supportsObject_ = void 0;
        shaka.util.FairPlayUtils = function() {
        };
        shaka.util.FairPlayUtils.defaultGetContentId = function(a2) {
          a2 = shaka.util.StringUtils.fromBytesAutoDetect(a2);
          return new goog.Uri(a2).getDomain();
        };
        shaka.util.FairPlayUtils.initDataTransform = function(a2, b2, c2) {
          if (!c2 || !c2.byteLength)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.SERVER_CERTIFICATE_REQUIRED);
          b2 = "string" == typeof b2 ? shaka.util.StringUtils.toUTF16(b2, true) : b2;
          a2 = shaka.util.StringUtils.fromBytesAutoDetect(a2);
          a2 = shaka.util.StringUtils.toUTF16(a2, true);
          var d2 = new Uint8Array(12 + a2.byteLength + b2.byteLength + c2.byteLength), e2 = 0, f2 = function(g) {
            shaka.util.BufferUtils.toDataView(d2).setUint32(
              e2,
              g.byteLength,
              true
            );
            e2 += 4;
            d2.set(shaka.util.BufferUtils.toUint8(g), e2);
            e2 += g.byteLength;
          };
          f2(a2);
          f2(b2);
          f2(c2);
          goog.asserts.assert(e2 == d2.length, "Inconsistent init data length");
          return d2;
        };
        goog.exportSymbol("shaka.util.FairPlayUtils", shaka.util.FairPlayUtils);
        goog.exportProperty(shaka.util.FairPlayUtils, "initDataTransform", shaka.util.FairPlayUtils.initDataTransform);
        goog.exportProperty(shaka.util.FairPlayUtils, "defaultGetContentId", shaka.util.FairPlayUtils.defaultGetContentId);
        shaka.util.Iterables = function() {
        };
        shaka.util.Iterables.map = function(a2, b2) {
          for (var c2 = [], d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next())
            c2.push(b2(e2.value));
          return c2;
        };
        shaka.util.Iterables.every = function(a2, b2) {
          for (var c2 = $jscomp.makeIterator(a2), d2 = c2.next(); !d2.done; d2 = c2.next())
            if (!b2(d2.value))
              return false;
          return true;
        };
        shaka.util.Iterables.some = function(a2, b2) {
          for (var c2 = $jscomp.makeIterator(a2), d2 = c2.next(); !d2.done; d2 = c2.next())
            if (b2(d2.value))
              return true;
          return false;
        };
        shaka.util.Iterables.filter = function(a2, b2) {
          for (var c2 = [], d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = e2.value, b2(e2) && c2.push(e2);
          return c2;
        };
        shaka.util.MapUtils = function() {
        };
        shaka.util.MapUtils.asMap = function(a2) {
          for (var b2 = /* @__PURE__ */ new Map(), c2 = $jscomp.makeIterator(Object.keys(a2)), d2 = c2.next(); !d2.done; d2 = c2.next())
            d2 = d2.value, b2.set(d2, a2[d2]);
          return b2;
        };
        shaka.util.MapUtils.asObject = function(a2) {
          var b2 = {};
          a2.forEach(function(c2, d2) {
            b2[d2] = c2;
          });
          return b2;
        };
        shaka.util.MapUtils.hasSameElements = function(a2, b2) {
          if (a2 || b2) {
            if (a2 && !b2 || b2 && !a2)
              return false;
          } else
            return true;
          if (a2.size != b2.size)
            return false;
          for (var c2 = $jscomp.makeIterator(a2), d2 = c2.next(); !d2.done; d2 = c2.next()) {
            var e2 = $jscomp.makeIterator(d2.value);
            d2 = e2.next().value;
            e2 = e2.next().value;
            if (!b2.has(d2))
              return false;
            d2 = b2.get(d2);
            if (d2 != e2 || void 0 == d2)
              return false;
          }
          return true;
        };
        shaka.media.DrmEngine = function(a2, b2) {
          var c2 = this;
          b2 = void 0 === b2 ? 1 : b2;
          this.playerInterface_ = a2;
          this.supportedTypes_ = /* @__PURE__ */ new Set();
          this.video_ = this.mediaKeys_ = null;
          this.initializedForStorage_ = this.initialized_ = false;
          this.licenseTimeSeconds_ = 0;
          this.currentDrmInfo_ = null;
          this.eventManager_ = new shaka.util.EventManager();
          this.activeSessions_ = /* @__PURE__ */ new Map();
          this.offlineSessionIds_ = [];
          this.allSessionsLoaded_ = new shaka.util.PublicPromise();
          this.config_ = null;
          this.onError_ = function(d2) {
            c2.allSessionsLoaded_.reject(d2);
            a2.onError(d2);
          };
          this.keyStatusByKeyId_ = /* @__PURE__ */ new Map();
          this.announcedKeyStatusByKeyId_ = /* @__PURE__ */ new Map();
          this.keyStatusTimer_ = new shaka.util.Timer(function() {
            return c2.processKeyStatusChanges_();
          });
          this.usePersistentLicenses_ = false;
          this.mediaKeyMessageEvents_ = [];
          this.initialRequestsSent_ = false;
          this.expirationTimer_ = new shaka.util.Timer(function() {
            c2.pollExpiration_();
          }).tickEvery(b2);
          this.allSessionsLoaded_["catch"](function() {
          });
          this.destroyer_ = new shaka.util.Destroyer(function() {
            return c2.destroyNow_();
          });
          this.srcEquals_ = false;
        };
        shaka.media.DrmEngine.prototype.destroy = function() {
          return this.destroyer_.destroy();
        };
        shaka.media.DrmEngine.prototype.destroyNow_ = function() {
          var a2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            switch (b2.nextAddress) {
              case 1:
                return a2.eventManager_.release(), a2.eventManager_ = null, a2.allSessionsLoaded_.reject(), a2.expirationTimer_.stop(), a2.expirationTimer_ = null, a2.keyStatusTimer_.stop(), a2.keyStatusTimer_ = null, b2.yield(a2.closeOpenSessions_(), 2);
              case 2:
                if (!a2.video_) {
                  b2.jumpTo(3);
                  break;
                }
                goog.asserts.assert(!a2.video_.src, "video src must be removed first!");
                b2.setCatchFinallyBlocks(4);
                return b2.yield(a2.video_.setMediaKeys(null), 6);
              case 6:
                b2.leaveTryBlock(5);
                break;
              case 4:
                b2.enterCatchBlock();
              case 5:
                a2.video_ = null;
              case 3:
                a2.currentDrmInfo_ = null, a2.supportedTypes_.clear(), a2.mediaKeys_ = null, a2.offlineSessionIds_ = [], a2.config_ = null, a2.onError_ = function() {
                }, a2.playerInterface_ = null, a2.srcEquals_ = false, b2.jumpToEnd();
            }
          });
        };
        shaka.media.DrmEngine.prototype.configure = function(a2) {
          this.config_ = a2;
        };
        shaka.media.DrmEngine.prototype.setSrcEquals = function(a2) {
          this.srcEquals_ = a2;
        };
        shaka.media.DrmEngine.prototype.initForStorage = function(a2, b2) {
          this.initializedForStorage_ = true;
          this.offlineSessionIds_ = [];
          this.usePersistentLicenses_ = b2;
          return this.init_(a2);
        };
        shaka.media.DrmEngine.prototype.initForPlayback = function(a2, b2) {
          this.offlineSessionIds_ = b2;
          this.usePersistentLicenses_ = 0 < b2.length;
          return this.init_(a2);
        };
        shaka.media.DrmEngine.prototype.initForRemoval = function(a2, b2, c2, d2, e2) {
          var f2 = /* @__PURE__ */ new Map();
          d2 = { audioCapabilities: d2, videoCapabilities: e2, distinctiveIdentifier: "optional", persistentState: "required", sessionTypes: ["persistent-license"], label: a2 };
          d2.drmInfos = [{ keySystem: a2, licenseServerUri: b2, distinctiveIdentifierRequired: false, persistentStateRequired: true, audioRobustness: "", videoRobustness: "", serverCertificate: c2, serverCertificateUri: "", initData: null, keyIds: null }];
          f2.set(a2, d2);
          return this.queryMediaKeys_(f2, []);
        };
        shaka.media.DrmEngine.prototype.init_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(u) {
            if (1 == u.nextAddress) {
              goog.asserts.assert(b2.config_, "DrmEngine configure() must be called before init()!");
              if (c2 = b2.configureClearKey_())
                for (d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next())
                  f2 = e2.value, f2.video && (f2.video.drmInfos = [c2]), f2.audio && (f2.audio.drmInfos = [c2]);
              g = a2.some(function(v) {
                return v.video && v.video.drmInfos.length || v.audio && v.audio.drmInfos.length ? true : false;
              });
              g || (h = shaka.util.MapUtils.asMap(b2.config_.servers), shaka.media.DrmEngine.replaceDrmInfo_(a2, h));
              k2 = $jscomp.makeIterator(a2);
              for (e2 = k2.next(); !e2.done; e2 = k2.next())
                for (l = e2.value, m = b2.getVariantDrmInfos_(l), n = $jscomp.makeIterator(m), p = n.next(); !p.done; p = n.next())
                  q = p.value, shaka.media.DrmEngine.fillInDrmInfoDefaults_(q, shaka.util.MapUtils.asMap(b2.config_.servers), shaka.util.MapUtils.asMap(b2.config_.advanced || {}));
              return u.yield(shaka.util.StreamUtils.getDecodingInfosForVariants(
                a2,
                b2.usePersistentLicenses_,
                b2.srcEquals_
              ), 2);
            }
            r = g || Object.keys(b2.config_.servers).length;
            if (!r)
              return b2.initialized_ = true, u["return"](Promise.resolve());
            t = b2.queryMediaKeys_(void 0, a2);
            return u["return"](g ? t : t["catch"](function() {
            }));
          });
        };
        shaka.media.DrmEngine.prototype.attach = function(a2) {
          var b2 = this, c2, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            if (1 == e2.nextAddress) {
              if (!b2.mediaKeys_)
                return b2.eventManager_.listenOnce(a2, "encrypted", function(f2) {
                  b2.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.ENCRYPTED_CONTENT_WITHOUT_DRM_INFO));
                }), e2["return"]();
              b2.video_ = a2;
              b2.eventManager_.listenOnce(b2.video_, "play", function() {
                return b2.onPlay_();
              });
              "webkitCurrentPlaybackTargetIsWireless" in b2.video_ && b2.eventManager_.listen(b2.video_, "webkitcurrentplaybacktargetiswirelesschanged", function() {
                return b2.closeOpenSessions_();
              });
              c2 = b2.video_.setMediaKeys(b2.mediaKeys_);
              c2 = c2["catch"](function(f2) {
                goog.asserts.assert(f2 instanceof Error, "Wrong error type!");
                return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.FAILED_TO_ATTACH_TO_VIDEO, f2.message));
              });
              return e2.yield(c2, 2);
            }
            b2.destroyer_.ensureNotDestroyed();
            b2.createOrLoad();
            b2.currentDrmInfo_.initData.length || b2.offlineSessionIds_.length || (d2 = function(f2) {
              return b2.newInitData(f2.initDataType, shaka.util.BufferUtils.toUint8(f2.initData));
            }, b2.eventManager_.listen(b2.video_, "encrypted", d2));
            e2.jumpToEnd();
          });
        };
        shaka.media.DrmEngine.prototype.setServerCertificate = function() {
          var a2 = this, b2, c2, d2, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            switch (h.nextAddress) {
              case 1:
                goog.asserts.assert(a2.initialized_, "Must call init() before setServerCertificate");
                if (!a2.mediaKeys_ || !a2.currentDrmInfo_)
                  return h["return"]();
                if (!a2.currentDrmInfo_.serverCertificateUri || a2.currentDrmInfo_.serverCertificate && a2.currentDrmInfo_.serverCertificate.length) {
                  h.jumpTo(2);
                  break;
                }
                b2 = shaka.net.NetworkingEngine.makeRequest(
                  [a2.currentDrmInfo_.serverCertificateUri],
                  a2.config_.retryParameters
                );
                h.setCatchFinallyBlocks(3);
                c2 = a2.playerInterface_.netEngine.request(shaka.net.NetworkingEngine.RequestType.SERVER_CERTIFICATE, b2);
                return h.yield(c2.promise, 5);
              case 5:
                d2 = h.yieldResult;
                a2.currentDrmInfo_.serverCertificate = shaka.util.BufferUtils.toUint8(d2.data);
                h.leaveTryBlock(4);
                break;
              case 3:
                throw e2 = h.enterCatchBlock(), goog.asserts.assert(e2 instanceof shaka.util.Error, "Wrong NetworkingEngine error type!"), new shaka.util.Error(
                  shaka.util.Error.Severity.CRITICAL,
                  shaka.util.Error.Category.DRM,
                  shaka.util.Error.Code.SERVER_CERTIFICATE_REQUEST_FAILED,
                  e2
                );
              case 4:
                if (a2.destroyer_.destroyed())
                  return h["return"]();
              case 2:
                if (!a2.currentDrmInfo_.serverCertificate || !a2.currentDrmInfo_.serverCertificate.length)
                  return h["return"]();
                h.setCatchFinallyBlocks(6);
                return h.yield(a2.mediaKeys_.setServerCertificate(a2.currentDrmInfo_.serverCertificate), 8);
              case 8:
                (f2 = h.yieldResult) || shaka.log.warning("Server certificates are not supported by the key system.  The server certificate has been ignored.");
                h.leaveTryBlock(0);
                break;
              case 6:
                throw g = h.enterCatchBlock(), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.INVALID_SERVER_CERTIFICATE, g.message);
            }
          });
        };
        shaka.media.DrmEngine.prototype.removeSession = function(a2) {
          var b2 = this, c2, d2, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            if (1 == f2.nextAddress)
              return goog.asserts.assert(b2.mediaKeys_, "Must call init() before removeSession"), f2.yield(b2.loadOfflineSession_(a2), 2);
            if (3 != f2.nextAddress) {
              c2 = f2.yieldResult;
              if (!c2)
                return shaka.log.v2("Ignoring attempt to remove missing session", a2), f2["return"]();
              d2 = [];
              if (e2 = b2.activeSessions_.get(c2))
                e2.updatePromise = new shaka.util.PublicPromise(), d2.push(e2.updatePromise);
              shaka.log.v2("Attempting to remove session", a2);
              d2.push(c2.remove());
              return f2.yield(Promise.all(d2), 3);
            }
            b2.activeSessions_["delete"](c2);
            f2.jumpToEnd();
          });
        };
        shaka.media.DrmEngine.prototype.createOrLoad = function() {
          for (var a2 = (this.currentDrmInfo_ ? this.currentDrmInfo_.initData : []) || [], b2 = $jscomp.makeIterator(a2), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, this.newInitData(c2.initDataType, c2.initData);
          b2 = $jscomp.makeIterator(this.offlineSessionIds_);
          for (c2 = b2.next(); !c2.done; c2 = b2.next())
            this.loadOfflineSession_(c2.value);
          a2.length || this.offlineSessionIds_.length || this.allSessionsLoaded_.resolve();
          return this.allSessionsLoaded_;
        };
        shaka.media.DrmEngine.prototype.newInitData = function(a2, b2) {
          var c2 = this.activeSessions_.values();
          c2 = $jscomp.makeIterator(c2);
          for (var d2 = c2.next(); !d2.done; d2 = c2.next())
            if (shaka.util.BufferUtils.equal(b2, d2.value.initData) && !shaka.util.Platform.isTizen2()) {
              shaka.log.debug("Ignoring duplicate init data.");
              return;
            }
          this.createSession(a2, b2, this.currentDrmInfo_.sessionType);
        };
        shaka.media.DrmEngine.prototype.initialized = function() {
          return this.initialized_;
        };
        shaka.media.DrmEngine.keySystem = function(a2) {
          return a2 ? a2.keySystem : "";
        };
        shaka.media.DrmEngine.isPlayReadyKeySystem = function(a2) {
          return a2 ? !!a2.match(/^com\.(microsoft|chromecast)\.playready/) : false;
        };
        shaka.media.DrmEngine.isFairPlayKeySystem = function(a2) {
          return a2 ? !!a2.match(/^com\.apple\.fps/) : false;
        };
        shaka.media.DrmEngine.prototype.willSupport = function(a2) {
          if (shaka.util.Platform.isLegacyEdge())
            return true;
          a2 = a2.toLowerCase();
          if (shaka.util.Platform.isTizen() && a2.includes('codecs="ac-3"')) {
            var b2 = a2.replace("ac-3", "ec-3");
            return this.supportedTypes_.has(a2) || this.supportedTypes_.has(b2);
          }
          return this.supportedTypes_.has(a2);
        };
        shaka.media.DrmEngine.prototype.getSessionIds = function() {
          var a2 = this.activeSessions_.keys();
          a2 = shaka.util.Iterables.map(a2, function(b2) {
            return b2.sessionId;
          });
          return Array.from(a2);
        };
        shaka.media.DrmEngine.prototype.getExpiration = function() {
          var a2 = Infinity, b2 = this.activeSessions_.keys();
          b2 = $jscomp.makeIterator(b2);
          for (var c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, isNaN(c2.expiration) || (a2 = Math.min(a2, c2.expiration));
          return a2;
        };
        shaka.media.DrmEngine.prototype.getLicenseTime = function() {
          return this.licenseTimeSeconds_ ? this.licenseTimeSeconds_ : NaN;
        };
        shaka.media.DrmEngine.prototype.getDrmInfo = function() {
          return this.currentDrmInfo_;
        };
        shaka.media.DrmEngine.prototype.getMediaKeys = function() {
          return this.mediaKeys_;
        };
        shaka.media.DrmEngine.prototype.getKeyStatuses = function() {
          return shaka.util.MapUtils.asObject(this.announcedKeyStatusByKeyId_);
        };
        shaka.media.DrmEngine.prototype.getMediaKeySessions = function() {
          return Array.from(this.activeSessions_.keys());
        };
        shaka.media.DrmEngine.computeMimeType_ = function(a2, b2) {
          var c2 = shaka.util.MimeUtils.getFullType(a2.mimeType, b2 || a2.codecs);
          return shaka.media.Transmuxer.isSupported(c2) ? shaka.media.Transmuxer.convertTsCodecs(a2.type, c2) : c2;
        };
        shaka.media.DrmEngine.prototype.queryMediaKeys_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(u) {
            switch (u.nextAddress) {
              case 1:
                d2 = /* @__PURE__ */ new Map();
                if (b2.length) {
                  e2 = c2.getKeySystemAccessFromVariants_(b2, d2);
                  u.jumpTo(2);
                  break;
                }
                return u.yield(c2.getKeySystemAccessByConfigs_(a2), 3);
              case 3:
                e2 = u.yieldResult;
              case 2:
                f2 = e2;
                if (!f2)
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE);
                c2.destroyer_.ensureNotDestroyed();
                u.setCatchFinallyBlocks(4);
                c2.supportedTypes_.clear();
                g = f2.getConfiguration();
                shaka.log.v2("Got MediaKeySystemAccess with configuration", g);
                h = g.audioCapabilities || [];
                k2 = g.videoCapabilities || [];
                l = $jscomp.makeIterator(h);
                for (m = l.next(); !m.done; m = l.next())
                  n = m.value, c2.supportedTypes_.add(n.contentType.toLowerCase());
                p = $jscomp.makeIterator(k2);
                for (m = p.next(); !m.done; m = p.next())
                  q = m.value, c2.supportedTypes_.add(q.contentType.toLowerCase());
                goog.asserts.assert(
                  c2.supportedTypes_.size,
                  "We should get at least one supported MIME type"
                );
                c2.currentDrmInfo_ = b2.length ? c2.createDrmInfoByInfos_(f2.keySystem, d2.get(f2.keySystem)) : shaka.media.DrmEngine.createDrmInfoByConfigs_(f2.keySystem, a2.get(f2.keySystem));
                if (!c2.currentDrmInfo_.licenseServerUri)
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.NO_LICENSE_SERVER_GIVEN, c2.currentDrmInfo_.keySystem);
                return u.yield(f2.createMediaKeys(), 6);
              case 6:
                return r = u.yieldResult, c2.destroyer_.ensureNotDestroyed(), shaka.log.info("Created MediaKeys object for key system", c2.currentDrmInfo_.keySystem), c2.mediaKeys_ = r, c2.initialized_ = true, u.yield(c2.setServerCertificate(), 7);
              case 7:
                c2.destroyer_.ensureNotDestroyed();
                u.leaveTryBlock(0);
                break;
              case 4:
                t = u.enterCatchBlock();
                c2.destroyer_.ensureNotDestroyed(t);
                c2.currentDrmInfo_ = null;
                c2.supportedTypes_.clear();
                if (t instanceof shaka.util.Error)
                  throw t;
                throw new shaka.util.Error(
                  shaka.util.Error.Severity.CRITICAL,
                  shaka.util.Error.Category.DRM,
                  shaka.util.Error.Code.FAILED_TO_CREATE_CDM,
                  t.message
                );
            }
          });
        };
        shaka.media.DrmEngine.prototype.getKeySystemAccessFromVariants_ = function(a2, b2) {
          for (var c2 = $jscomp.makeIterator(a2), d2 = c2.next(); !d2.done; d2 = c2.next()) {
            var e2 = this.getVariantDrmInfos_(d2.value);
            e2 = $jscomp.makeIterator(e2);
            for (d2 = e2.next(); !d2.done; d2 = e2.next()) {
              var f2 = d2.value;
              b2.has(f2.keySystem) || b2.set(f2.keySystem, []);
              b2.get(f2.keySystem).push(f2);
            }
          }
          if (1 == b2.size && b2.has(""))
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.NO_RECOGNIZED_KEY_SYSTEMS);
          c2 = {};
          e2 = $jscomp.makeIterator(this.config_.preferredKeySystems);
          for (f2 = e2.next(); !f2.done; c2 = { $jscomp$loop$prop$preferredKeySystem$586: c2.$jscomp$loop$prop$preferredKeySystem$586 }, f2 = e2.next())
            for (c2.$jscomp$loop$prop$preferredKeySystem$586 = f2.value, f2 = $jscomp.makeIterator(a2), d2 = f2.next(); !d2.done; d2 = f2.next())
              if (d2 = d2.value.decodingInfos.find(function(l) {
                return function(m) {
                  return m.supported && null != m.keySystemAccess && m.keySystemAccess.keySystem == l.$jscomp$loop$prop$preferredKeySystem$586;
                };
              }(c2)))
                return d2.keySystemAccess;
          c2 = $jscomp.makeIterator([true, false]);
          for (e2 = c2.next(); !e2.done; e2 = c2.next())
            for (e2 = e2.value, f2 = $jscomp.makeIterator(a2), d2 = f2.next(); !d2.done; d2 = f2.next()) {
              var g = $jscomp.makeIterator(d2.value.decodingInfos);
              for (d2 = g.next(); !d2.done; d2 = g.next()) {
                var h = d2.value;
                if (h.supported && h.keySystemAccess) {
                  d2 = b2.get(h.keySystemAccess.keySystem);
                  var k2 = $jscomp.makeIterator(d2);
                  for (d2 = k2.next(); !d2.done; d2 = k2.next())
                    if (!!d2.value.licenseServerUri == e2)
                      return h.keySystemAccess;
                }
              }
            }
          return null;
        };
        shaka.media.DrmEngine.prototype.getKeySystemAccessByConfigs_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
            switch (w.nextAddress) {
              case 1:
                if (1 == a2.size && a2.has(""))
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.NO_RECOGNIZED_KEY_SYSTEMS);
                d2 = $jscomp.makeIterator(a2.values());
                for (e2 = d2.next(); !e2.done; e2 = d2.next())
                  f2 = e2.value, 0 == f2.audioCapabilities.length && delete f2.audioCapabilities, 0 == f2.videoCapabilities.length && delete f2.videoCapabilities;
                g = $jscomp.makeIterator(b2.config_.preferredKeySystems);
                h = g.next();
              case 2:
                if (h.done) {
                  w.jumpTo(4);
                  break;
                }
                k2 = h.value;
                if (!a2.has(k2)) {
                  w.jumpTo(3);
                  break;
                }
                l = a2.get(k2);
                w.setCatchFinallyBlocks(6);
                return w.yield(navigator.requestMediaKeySystemAccess(k2, [l]), 8);
              case 8:
                return c2 = w.yieldResult, w["return"](c2);
              case 6:
                m = w.enterCatchBlock(), shaka.log.v2("Requesting", k2, "failed with config", l, m);
              case 7:
                b2.destroyer_.ensureNotDestroyed();
              case 3:
                h = g.next();
                w.jumpTo(2);
                break;
              case 4:
                n = $jscomp.makeIterator([true, false]), p = n.next();
              case 9:
                if (p.done) {
                  w.jumpTo(11);
                  break;
                }
                q = p.value;
                r = $jscomp.makeIterator(a2.keys());
                h = r.next();
              case 12:
                if (h.done) {
                  p = n.next();
                  w.jumpTo(9);
                  break;
                }
                t = h.value;
                u = a2.get(t);
                v = u.drmInfos.some(function(x) {
                  return !!x.licenseServerUri;
                });
                if (v != q) {
                  w.jumpTo(13);
                  break;
                }
                w.setCatchFinallyBlocks(15);
                return w.yield(navigator.requestMediaKeySystemAccess(t, [u]), 17);
              case 17:
                return c2 = w.yieldResult, w["return"](c2);
              case 15:
                y = w.enterCatchBlock(), shaka.log.v2(
                  "Requesting",
                  t,
                  "failed with config",
                  u,
                  y
                );
              case 16:
                b2.destroyer_.ensureNotDestroyed();
              case 13:
                h = r.next();
                w.jumpTo(12);
                break;
              case 11:
                return w["return"](c2);
            }
          });
        };
        shaka.media.DrmEngine.prototype.configureClearKey_ = function() {
          var a2 = shaka.util.MapUtils.asMap(this.config_.clearKeys);
          if (0 == a2.size)
            return null;
          var b2 = shaka.util.StringUtils, c2 = shaka.util.Uint8ArrayUtils, d2 = [], e2 = [];
          a2.forEach(function(g, h) {
            var k2 = c2.fromHex(h), l = c2.fromHex(g);
            k2 = { kty: "oct", kid: c2.toBase64(k2, false), k: c2.toBase64(l, false) };
            d2.push(k2);
            e2.push(k2.kid);
          });
          a2 = JSON.stringify({ keys: d2 });
          var f2 = JSON.stringify({ kids: e2 });
          b2 = [{ initData: shaka.util.BufferUtils.toUint8(b2.toUTF8(f2)), initDataType: "keyids" }];
          return {
            keySystem: "org.w3.clearkey",
            licenseServerUri: "data:application/json;base64," + window.btoa(a2),
            distinctiveIdentifierRequired: false,
            persistentStateRequired: false,
            audioRobustness: "",
            videoRobustness: "",
            serverCertificate: null,
            serverCertificateUri: "",
            sessionType: "",
            initData: b2,
            keyIds: new Set(e2)
          };
        };
        shaka.media.DrmEngine.prototype.loadOfflineSession_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            switch (h.nextAddress) {
              case 1:
                try {
                  shaka.log.v1("Attempting to load an offline session", a2), c2 = b2.mediaKeys_.createSession("persistent-license");
                } catch (k2) {
                  return d2 = new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.FAILED_TO_CREATE_SESSION, k2.message), b2.onError_(d2), h["return"](Promise.reject(d2));
                }
                b2.eventManager_.listen(
                  c2,
                  "message",
                  function(k2) {
                    return b2.onSessionMessage_(k2);
                  }
                );
                b2.eventManager_.listen(c2, "keystatuseschange", function(k2) {
                  return b2.onKeyStatusesChange_(k2);
                });
                e2 = { initData: null, loaded: false, oldExpiration: Infinity, updatePromise: null, type: "persistent-license" };
                b2.activeSessions_.set(c2, e2);
                h.setCatchFinallyBlocks(2);
                return h.yield(c2.load(a2), 4);
              case 4:
                f2 = h.yieldResult;
                b2.destroyer_.ensureNotDestroyed();
                shaka.log.v2("Loaded offline session", a2, f2);
                if (!f2)
                  return b2.activeSessions_["delete"](c2), b2.onError_(new shaka.util.Error(
                    shaka.util.Error.Severity.CRITICAL,
                    shaka.util.Error.Category.DRM,
                    shaka.util.Error.Code.OFFLINE_SESSION_REMOVED
                  )), h["return"](Promise.resolve());
                e2.loaded = true;
                b2.areAllSessionsLoaded_() && b2.allSessionsLoaded_.resolve();
                return h["return"](c2);
              case 2:
                g = h.enterCatchBlock(), b2.destroyer_.ensureNotDestroyed(g), b2.activeSessions_["delete"](c2), b2.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.FAILED_TO_CREATE_SESSION, g.message));
              case 3:
                return h["return"](Promise.resolve());
            }
          });
        };
        shaka.media.DrmEngine.prototype.createSession = function(a2, b2, c2) {
          var d2 = this;
          goog.asserts.assert(this.mediaKeys_, "mediaKeys_ should be valid when creating temporary session.");
          try {
            shaka.log.info("Creating new", c2, "session");
            var e2 = this.mediaKeys_.createSession(c2);
          } catch (f2) {
            this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.FAILED_TO_CREATE_SESSION, f2.message));
            return;
          }
          this.eventManager_.listen(e2, "message", function(f2) {
            return d2.onSessionMessage_(f2);
          });
          this.eventManager_.listen(e2, "keystatuseschange", function(f2) {
            return d2.onKeyStatusesChange_(f2);
          });
          this.activeSessions_.set(e2, { initData: b2, loaded: false, oldExpiration: Infinity, updatePromise: null, type: c2 });
          try {
            b2 = this.config_.initDataTransform(b2, a2, this.currentDrmInfo_);
          } catch (f2) {
            a2 = f2;
            f2 instanceof shaka.util.Error || (a2 = new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.INIT_DATA_TRANSFORM_ERROR, f2));
            this.onError_(a2);
            return;
          }
          this.config_.logLicenseExchange && (c2 = shaka.util.Uint8ArrayUtils.toBase64(b2), shaka.log.info("EME init data: type=", a2, "data=", c2));
          e2.generateRequest(a2, b2)["catch"](function(f2) {
            if (!d2.destroyer_.destroyed()) {
              goog.asserts.assert(f2 instanceof Error, "Wrong error type!");
              d2.activeSessions_["delete"](e2);
              var g = f2.errorCode;
              if (g && g.systemCode) {
                var h = g.systemCode;
                0 > h && (h += Math.pow(2, 32));
                h = "0x" + h.toString(16);
              }
              d2.onError_(new shaka.util.Error(
                shaka.util.Error.Severity.CRITICAL,
                shaka.util.Error.Category.DRM,
                shaka.util.Error.Code.FAILED_TO_GENERATE_LICENSE_REQUEST,
                f2.message,
                f2,
                h
              ));
            }
          });
        };
        shaka.media.DrmEngine.defaultInitDataTransform = function(a2, b2, c2) {
          "skd" == b2 && (b2 = c2.serverCertificate, c2 = shaka.util.FairPlayUtils.defaultGetContentId(a2), a2 = shaka.util.FairPlayUtils.initDataTransform(a2, c2, b2));
          return a2;
        };
        shaka.media.DrmEngine.prototype.onSessionMessage_ = function(a2) {
          this.delayLicenseRequest_() ? this.mediaKeyMessageEvents_.push(a2) : this.sendLicenseRequest_(a2);
        };
        shaka.media.DrmEngine.prototype.delayLicenseRequest_ = function() {
          return this.video_ ? this.config_.delayLicenseRequestUntilPlayed && this.video_.paused && !this.initialRequestsSent_ : false;
        };
        shaka.media.DrmEngine.prototype.sendLicenseRequest_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
            switch (w.nextAddress) {
              case 1:
                return c2 = a2.target, shaka.log.v1("Sending license request for session", c2.sessionId, "of type", a2.messageType), b2.config_.logLicenseExchange && (d2 = shaka.util.Uint8ArrayUtils.toBase64(a2.message), shaka.log.info("EME license request", d2)), e2 = b2.activeSessions_.get(c2), f2 = b2.currentDrmInfo_.licenseServerUri, g = b2.config_.advanced[b2.currentDrmInfo_.keySystem], "individualization-request" == a2.messageType && g && g.individualizationServer && (f2 = g.individualizationServer), h = shaka.net.NetworkingEngine.RequestType.LICENSE, k2 = shaka.net.NetworkingEngine.makeRequest([f2], b2.config_.retryParameters), k2.body = a2.message, k2.method = "POST", k2.licenseRequestType = a2.messageType, k2.sessionId = c2.sessionId, shaka.media.DrmEngine.isPlayReadyKeySystem(b2.currentDrmInfo_.keySystem) && b2.unpackPlayReadyRequest_(k2), l = Date.now(), w.setCatchFinallyBlocks(2), n = b2.playerInterface_.netEngine.request(h, k2), w.yield(n.promise, 4);
              case 4:
                m = w.yieldResult;
                w.leaveTryBlock(3);
                break;
              case 2:
                return p = w.enterCatchBlock(), goog.asserts.assert(p instanceof shaka.util.Error, "Wrong NetworkingEngine error type!"), q = new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.LICENSE_REQUEST_FAILED, p), b2.onError_(q), e2 && e2.updatePromise && e2.updatePromise.reject(q), w["return"]();
              case 3:
                if (b2.destroyer_.destroyed())
                  return w["return"]();
                b2.licenseTimeSeconds_ += (Date.now() - l) / 1e3;
                b2.config_.logLicenseExchange && (r = shaka.util.Uint8ArrayUtils.toBase64(m.data), shaka.log.info("EME license response", r));
                w.setCatchFinallyBlocks(5);
                shaka.log.v1("Updating session", c2.sessionId);
                return w.yield(c2.update(m.data), 7);
              case 7:
                w.leaveTryBlock(6);
                break;
              case 5:
                return t = w.enterCatchBlock(), u = new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.LICENSE_RESPONSE_REJECTED, t.message), b2.onError_(u), e2 && e2.updatePromise && e2.updatePromise.reject(u), w["return"]();
              case 6:
                if (b2.destroyer_.destroyed())
                  return w["return"]();
                v = new shaka.util.FakeEvent("drmsessionupdate");
                b2.playerInterface_.onEvent(v);
                e2 && (e2.updatePromise && e2.updatePromise.resolve(), y = new shaka.util.Timer(function() {
                  e2.loaded = true;
                  b2.areAllSessionsLoaded_() && b2.allSessionsLoaded_.resolve();
                }), y.tickAfter(shaka.media.DrmEngine.SESSION_LOAD_TIMEOUT_));
                w.jumpToEnd();
            }
          });
        };
        shaka.media.DrmEngine.prototype.unpackPlayReadyRequest_ = function(a2) {
          var b2 = shaka.util.StringUtils.fromUTF16(a2.body, true, true);
          if (b2.includes("PlayReadyKeyMessage")) {
            shaka.log.debug("Unwrapping PlayReady request.");
            b2 = new DOMParser().parseFromString(b2, "application/xml");
            var c2 = b2.getElementsByTagName("HttpHeader");
            c2 = $jscomp.makeIterator(c2);
            for (var d2 = c2.next(); !d2.done; d2 = c2.next()) {
              var e2 = d2.value;
              d2 = e2.getElementsByTagName("name")[0];
              e2 = e2.getElementsByTagName("value")[0];
              goog.asserts.assert(d2 && e2, "Malformed PlayReady headers!");
              a2.headers[d2.textContent] = e2.textContent;
            }
            b2 = b2.getElementsByTagName("Challenge")[0];
            goog.asserts.assert(b2, "Malformed PlayReady challenge!");
            goog.asserts.assert("base64encoded" == b2.getAttribute("encoding"), "Unexpected PlayReady challenge encoding!");
            a2.body = shaka.util.Uint8ArrayUtils.fromBase64(b2.textContent);
          } else
            shaka.log.debug("PlayReady request is already unwrapped."), a2.headers["Content-Type"] = "text/xml; charset=utf-8";
        };
        shaka.media.DrmEngine.prototype.onKeyStatusesChange_ = function(a2) {
          var b2 = this;
          a2 = a2.target;
          shaka.log.v2("Key status changed for session", a2.sessionId);
          var c2 = this.activeSessions_.get(a2), d2 = false;
          a2.keyStatuses.forEach(function(f2, g) {
            if ("string" == typeof g) {
              var h = g;
              g = f2;
              f2 = h;
            }
            if (shaka.media.DrmEngine.isPlayReadyKeySystem(b2.currentDrmInfo_.keySystem) && 16 == g.byteLength && (shaka.util.Platform.isEdge() || shaka.util.Platform.isPS4())) {
              h = shaka.util.BufferUtils.toDataView(g);
              var k2 = h.getUint32(0, true), l = h.getUint16(4, true), m = h.getUint16(
                6,
                true
              );
              h.setUint32(0, k2, false);
              h.setUint16(4, l, false);
              h.setUint16(6, m, false);
            }
            "status-pending" != f2 && (c2.loaded = true);
            c2 || goog.asserts.assert("usable" != f2, "Usable keys found in closed session");
            "expired" == f2 && (d2 = true);
            h = shaka.util.Uint8ArrayUtils.toHex(g);
            b2.keyStatusByKeyId_.set(h, f2);
          });
          var e2 = a2.expiration - Date.now();
          (0 > e2 || d2 && 1e3 > e2) && c2 && !c2.updatePromise && (shaka.log.debug("Session has expired", a2.sessionId), this.activeSessions_["delete"](a2), a2.close()["catch"](function() {
          }));
          this.areAllSessionsLoaded_() && (this.allSessionsLoaded_.resolve(), this.keyStatusTimer_.tickAfter(shaka.media.DrmEngine.KEY_STATUS_BATCH_TIME));
        };
        shaka.media.DrmEngine.prototype.processKeyStatusChanges_ = function() {
          var a2 = this.keyStatusByKeyId_, b2 = this.announcedKeyStatusByKeyId_;
          b2.clear();
          a2.forEach(function(c2, d2) {
            return b2.set(d2, c2);
          });
          a2 = Array.from(b2.values());
          if (a2.length && a2.every(function(c2) {
            return "expired" == c2;
          }))
            this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.DRM, shaka.util.Error.Code.EXPIRED));
          this.playerInterface_.onKeyStatus(shaka.util.MapUtils.asObject(b2));
        };
        shaka.media.DrmEngine.isBrowserSupported = function() {
          return !!window.MediaKeys && !!window.navigator && !!window.navigator.requestMediaKeySystemAccess && !!window.MediaKeySystemAccess && !!window.MediaKeySystemAccess.prototype.getConfiguration;
        };
        shaka.media.DrmEngine.probeSupport = function() {
          var a2, b2, c2, d2, e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            return 1 == k2.nextAddress ? (goog.asserts.assert(shaka.media.DrmEngine.isBrowserSupported(), "Must have basic EME support"), a2 = "org.w3.clearkey com.widevine.alpha com.microsoft.playready com.microsoft.playready.recommendation com.apple.fps.3_0 com.apple.fps.2_0 com.apple.fps.1_0 com.apple.fps com.adobe.primetime".split(" "), b2 = [{ contentType: 'video/mp4; codecs="avc1.42E01E"' }, { contentType: 'video/webm; codecs="vp8"' }], c2 = { initDataTypes: ["cenc"], videoCapabilities: b2 }, d2 = { videoCapabilities: b2, persistentState: "required", sessionTypes: ["persistent-license"] }, e2 = [d2, c2], f2 = /* @__PURE__ */ new Map(), g = function(l) {
              var m, n, p;
              return $jscomp.asyncExecutePromiseGeneratorProgram(function(q) {
                switch (q.nextAddress) {
                  case 1:
                    return q.setCatchFinallyBlocks(2), q.yield(navigator.requestMediaKeySystemAccess(l, e2), 4);
                  case 4:
                    return m = q.yieldResult, p = (n = m.getConfiguration().sessionTypes) ? n.includes("persistent-license") : false, shaka.util.Platform.isTizen3() && (p = false), f2.set(l, { persistentState: p }), q.yield(m.createMediaKeys(), 5);
                  case 5:
                    q.leaveTryBlock(0);
                    break;
                  case 2:
                    q.enterCatchBlock(), f2.set(l, null), q.jumpToEnd();
                }
              });
            }, h = a2.map(function(l) {
              return g(l);
            }), k2.yield(Promise.all(h), 2)) : k2["return"](shaka.util.MapUtils.asObject(f2));
          });
        };
        shaka.media.DrmEngine.prototype.onPlay_ = function() {
          for (var a2 = $jscomp.makeIterator(this.mediaKeyMessageEvents_), b2 = a2.next(); !b2.done; b2 = a2.next())
            this.sendLicenseRequest_(b2.value);
          this.initialRequestsSent_ = true;
          this.mediaKeyMessageEvents_ = [];
        };
        shaka.media.DrmEngine.prototype.closeSession_ = function(a2) {
          var b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return b2 = shaka.media.DrmEngine, c2 = new Promise(function(e2, f2) {
                new shaka.util.Timer(f2).tickAfter(b2.CLOSE_TIMEOUT_);
              }), d2.setCatchFinallyBlocks(2), d2.yield(Promise.race([Promise.all([a2.close(), a2.closed]), c2]), 4);
            if (2 != d2.nextAddress)
              return d2.leaveTryBlock(0);
            d2.enterCatchBlock();
            shaka.log.warning("Timeout waiting for session close");
            d2.jumpToEnd();
          });
        };
        shaka.media.DrmEngine.prototype.closeOpenSessions_ = function() {
          var a2 = this, b2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            b2 = Array.from(a2.activeSessions_.entries());
            a2.activeSessions_.clear();
            return c2.yield(Promise.all(b2.map(function(d2) {
              d2 = $jscomp.makeIterator(d2);
              var e2 = d2.next().value, f2 = d2.next().value, g;
              return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
                if (1 == h.nextAddress) {
                  h.setCatchFinallyBlocks(2);
                  if (!a2.initializedForStorage_ && !a2.offlineSessionIds_.includes(e2.sessionId) && "persistent-license" === f2.type)
                    return shaka.log.v1("Removing session", e2.sessionId), h.yield(e2.remove(), 5);
                  shaka.log.v1("Closing session", e2.sessionId, f2);
                  return h.yield(a2.closeSession_(e2), 5);
                }
                if (2 != h.nextAddress)
                  return h.leaveTryBlock(0);
                g = h.enterCatchBlock();
                shaka.log.error("Failed to close or remove the session", g);
                h.jumpToEnd();
              });
            })), 0);
          });
        };
        shaka.media.DrmEngine.prototype.supportsVariant = function(a2) {
          var b2 = a2.audio, c2 = a2.video;
          if (b2 && b2.encrypted && (b2 = shaka.media.DrmEngine.computeMimeType_(b2), !this.willSupport(b2)) || c2 && c2.encrypted && (c2 = shaka.media.DrmEngine.computeMimeType_(c2), !this.willSupport(c2)))
            return false;
          var d2 = shaka.media.DrmEngine.keySystem(this.currentDrmInfo_);
          a2 = this.getVariantDrmInfos_(a2);
          return 0 == a2.length || a2.some(function(e2) {
            return e2.keySystem == d2;
          });
        };
        shaka.media.DrmEngine.areDrmCompatible = function(a2, b2) {
          return a2.length && b2.length ? 0 < shaka.media.DrmEngine.getCommonDrmInfos(a2, b2).length : true;
        };
        shaka.media.DrmEngine.getCommonDrmInfos = function(a2, b2) {
          if (!a2.length)
            return b2;
          if (!b2.length)
            return a2;
          for (var c2 = [], d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next()) {
            e2 = e2.value;
            for (var f2 = {}, g = $jscomp.makeIterator(b2), h = g.next(); !h.done; f2 = { $jscomp$loop$prop$initData$588: f2.$jscomp$loop$prop$initData$588 }, h = g.next())
              if (h = h.value, e2.keySystem == h.keySystem) {
                f2.$jscomp$loop$prop$initData$588 = [];
                f2.$jscomp$loop$prop$initData$588 = f2.$jscomp$loop$prop$initData$588.concat(e2.initData || []);
                f2.$jscomp$loop$prop$initData$588 = f2.$jscomp$loop$prop$initData$588.concat(h.initData || []);
                f2.$jscomp$loop$prop$initData$588 = f2.$jscomp$loop$prop$initData$588.filter(function(k2) {
                  return function(l, m) {
                    return void 0 === l.keyId || m === k2.$jscomp$loop$prop$initData$588.findIndex(function(n) {
                      return n.keyId === l.keyId;
                    });
                  };
                }(f2));
                g = e2.keyIds && h.keyIds ? new Set([].concat($jscomp.arrayFromIterable(e2.keyIds), $jscomp.arrayFromIterable(h.keyIds))) : e2.keyIds || h.keyIds;
                c2.push({ keySystem: e2.keySystem, licenseServerUri: e2.licenseServerUri || h.licenseServerUri, distinctiveIdentifierRequired: e2.distinctiveIdentifierRequired || h.distinctiveIdentifierRequired, persistentStateRequired: e2.persistentStateRequired || h.persistentStateRequired, videoRobustness: e2.videoRobustness || h.videoRobustness, audioRobustness: e2.audioRobustness || h.audioRobustness, serverCertificate: e2.serverCertificate || h.serverCertificate, serverCertificateUri: e2.serverCertificateUri || h.serverCertificateUri, initData: f2.$jscomp$loop$prop$initData$588, keyIds: g });
                break;
              }
          }
          return c2;
        };
        shaka.media.DrmEngine.prototype.getVariantDrmInfos_ = function(a2) {
          return (a2.video ? a2.video.drmInfos : []).concat(a2.audio ? a2.audio.drmInfos : []);
        };
        shaka.media.DrmEngine.prototype.pollExpiration_ = function() {
          var a2 = this;
          this.activeSessions_.forEach(function(b2, c2) {
            var d2 = b2.oldExpiration, e2 = c2.expiration;
            isNaN(e2) && (e2 = Infinity);
            e2 != d2 && (a2.playerInterface_.onExpirationUpdated(c2.sessionId, e2), b2.oldExpiration = e2);
          });
        };
        shaka.media.DrmEngine.prototype.areAllSessionsLoaded_ = function() {
          var a2 = this.activeSessions_.values();
          return shaka.util.Iterables.every(a2, function(b2) {
            return b2.loaded;
          });
        };
        shaka.media.DrmEngine.replaceDrmInfo_ = function(a2, b2) {
          var c2 = [];
          b2.forEach(function(f2, g) {
            c2.push({ keySystem: g, licenseServerUri: f2, distinctiveIdentifierRequired: false, persistentStateRequired: false, audioRobustness: "", videoRobustness: "", serverCertificate: null, serverCertificateUri: "", initData: [], keyIds: /* @__PURE__ */ new Set() });
          });
          for (var d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = e2.value, e2.video && (e2.video.drmInfos = c2), e2.audio && (e2.audio.drmInfos = c2);
        };
        shaka.media.DrmEngine.prototype.createDrmInfoByInfos_ = function(a2, b2) {
          var c2 = [], d2 = [], e2 = [], f2 = [], g = /* @__PURE__ */ new Set();
          shaka.media.DrmEngine.processDrmInfos_(b2, c2, e2, d2, f2, g);
          1 < e2.length && shaka.log.warning("Multiple unique server certificates found! Only the first will be used.");
          1 < c2.length && shaka.log.warning("Multiple unique license server URIs found! Only the first will be used.");
          1 < d2.length && shaka.log.warning("Multiple unique server certificate URIs found! Only the first will be used.");
          var h = this.usePersistentLicenses_ ? "persistent-license" : "temporary";
          c2 = { keySystem: a2, licenseServerUri: c2[0], distinctiveIdentifierRequired: b2[0].distinctiveIdentifierRequired, persistentStateRequired: b2[0].persistentStateRequired, sessionType: b2[0].sessionType || h, audioRobustness: b2[0].audioRobustness || "", videoRobustness: b2[0].videoRobustness || "", serverCertificate: e2[0], serverCertificateUri: d2[0], initData: f2, keyIds: g };
          d2 = $jscomp.makeIterator(b2);
          for (e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = e2.value, e2.distinctiveIdentifierRequired && (c2.distinctiveIdentifierRequired = e2.distinctiveIdentifierRequired), e2.persistentStateRequired && (c2.persistentStateRequired = e2.persistentStateRequired);
          return c2;
        };
        shaka.media.DrmEngine.createDrmInfoByConfigs_ = function(a2, b2) {
          var c2 = [], d2 = [], e2 = [], f2 = [], g = /* @__PURE__ */ new Set();
          shaka.media.DrmEngine.processDrmInfos_(b2.drmInfos, c2, e2, d2, f2, g);
          1 < e2.length && shaka.log.warning("Multiple unique server certificates found! Only the first will be used.");
          1 < d2.length && shaka.log.warning("Multiple unique server certificate URIs found! Only the first will be used.");
          1 < c2.length && shaka.log.warning("Multiple unique license server URIs found! Only the first will be used.");
          return {
            keySystem: a2,
            licenseServerUri: c2[0],
            distinctiveIdentifierRequired: "required" == b2.distinctiveIdentifier,
            persistentStateRequired: "required" == b2.persistentState,
            sessionType: b2.sessionTypes[0] || "temporary",
            audioRobustness: (b2.audioCapabilities ? b2.audioCapabilities[0].robustness : "") || "",
            videoRobustness: (b2.videoCapabilities ? b2.videoCapabilities[0].robustness : "") || "",
            serverCertificate: e2[0],
            serverCertificateUri: d2[0],
            initData: f2,
            keyIds: g
          };
        };
        shaka.media.DrmEngine.processDrmInfos_ = function(a2, b2, c2, d2, e2, f2) {
          var g = {};
          a2 = $jscomp.makeIterator(a2);
          for (var h = a2.next(); !h.done; g = { $jscomp$loop$prop$drmInfo$590: g.$jscomp$loop$prop$drmInfo$590 }, h = a2.next()) {
            g.$jscomp$loop$prop$drmInfo$590 = h.value;
            b2.includes(g.$jscomp$loop$prop$drmInfo$590.licenseServerUri) || b2.push(g.$jscomp$loop$prop$drmInfo$590.licenseServerUri);
            d2.includes(g.$jscomp$loop$prop$drmInfo$590.serverCertificateUri) || d2.push(g.$jscomp$loop$prop$drmInfo$590.serverCertificateUri);
            g.$jscomp$loop$prop$drmInfo$590.serverCertificate && (c2.some(function(m) {
              return function(n) {
                return shaka.util.BufferUtils.equal(n, m.$jscomp$loop$prop$drmInfo$590.serverCertificate);
              };
            }(g)) || c2.push(g.$jscomp$loop$prop$drmInfo$590.serverCertificate));
            if (g.$jscomp$loop$prop$drmInfo$590.initData) {
              h = {};
              for (var k2 = $jscomp.makeIterator(g.$jscomp$loop$prop$drmInfo$590.initData), l = k2.next(); !l.done; h = { $jscomp$loop$prop$initDataOverride$592: h.$jscomp$loop$prop$initDataOverride$592 }, l = k2.next())
                h.$jscomp$loop$prop$initDataOverride$592 = l.value, e2.some(function(m) {
                  return function(n) {
                    var p = m.$jscomp$loop$prop$initDataOverride$592;
                    n = n.keyId && n.keyId == p.keyId ? true : n.initDataType == p.initDataType && shaka.util.BufferUtils.equal(n.initData, p.initData);
                    return n;
                  };
                }(h)) || e2.push(h.$jscomp$loop$prop$initDataOverride$592);
            }
            if (g.$jscomp$loop$prop$drmInfo$590.keyIds)
              for (h = $jscomp.makeIterator(g.$jscomp$loop$prop$drmInfo$590.keyIds), k2 = h.next(); !k2.done; k2 = h.next())
                f2.add(k2.value);
          }
        };
        shaka.media.DrmEngine.fillInDrmInfoDefaults_ = function(a2, b2, c2) {
          if (a2.keySystem && ("org.w3.clearkey" != a2.keySystem || !a2.licenseServerUri)) {
            b2.size && (b2 = b2.get(a2.keySystem) || "", a2.licenseServerUri = b2);
            a2.keyIds || (a2.keyIds = /* @__PURE__ */ new Set());
            if (c2 = c2.get(a2.keySystem))
              a2.distinctiveIdentifierRequired || (a2.distinctiveIdentifierRequired = c2.distinctiveIdentifierRequired), a2.persistentStateRequired || (a2.persistentStateRequired = c2.persistentStateRequired), a2.videoRobustness || (a2.videoRobustness = c2.videoRobustness), a2.audioRobustness || (a2.audioRobustness = c2.audioRobustness), a2.serverCertificate || (a2.serverCertificate = c2.serverCertificate), c2.sessionType && (a2.sessionType = c2.sessionType), a2.serverCertificateUri || (a2.serverCertificateUri = c2.serverCertificateUri);
            window.cast && window.cast.__platform__ && "com.microsoft.playready" == a2.keySystem && (a2.keySystem = "com.chromecast.playready");
          }
        };
        shaka.media.DrmEngine.CLOSE_TIMEOUT_ = 1;
        shaka.media.DrmEngine.SESSION_LOAD_TIMEOUT_ = 5;
        shaka.media.DrmEngine.KEY_STATUS_BATCH_TIME = 0.5;
        shaka.media.DrmEngine.DUMMY_KEY_ID = new shaka.util.Lazy(function() {
          return shaka.util.BufferUtils.toArrayBuffer(new Uint8Array([0]));
        });
        shaka.media.ManifestParser = function() {
        };
        shaka.media.ManifestParser.registerParserByExtension = function(a2, b2) {
          shaka.media.ManifestParser.parsersByExtension[a2] = b2;
        };
        shaka.media.ManifestParser.registerParserByMime = function(a2, b2) {
          shaka.media.ManifestParser.parsersByMime[a2] = b2;
        };
        shaka.media.ManifestParser.unregisterParserByMime = function(a2) {
          delete shaka.media.ManifestParser.parsersByMime[a2];
        };
        shaka.media.ManifestParser.probeSupport = function() {
          var a2 = shaka.media.ManifestParser, b2 = {};
          if (shaka.util.Platform.supportsMediaSource()) {
            for (var c2 in a2.parsersByMime)
              b2[c2] = true;
            for (var d2 in a2.parsersByExtension)
              b2[d2] = true;
          }
          c2 = { mpd: "application/dash+xml", m3u8: "application/x-mpegurl", ism: "application/vnd.ms-sstr+xml" };
          d2 = $jscomp.makeIterator(["application/dash+xml", "application/x-mpegurl", "application/vnd.apple.mpegurl", "application/vnd.ms-sstr+xml"]);
          for (var e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = e2.value, shaka.util.Platform.supportsMediaSource() ? b2[e2] = !!a2.parsersByMime[e2] : b2[e2] = shaka.util.Platform.supportsMediaType(e2);
          for (var f2 in c2)
            shaka.util.Platform.supportsMediaSource() ? b2[f2] = !!a2.parsersByExtension[f2] : b2[f2] = shaka.util.Platform.supportsMediaType(c2[f2]);
          return b2;
        };
        shaka.media.ManifestParser.getFactory = function(a2, b2, c2, d2) {
          var e2, f2, g, h, k2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(l) {
            if (1 == l.nextAddress) {
              e2 = shaka.media.ManifestParser;
              if (d2) {
                if (f2 = e2.parsersByMime[d2.toLowerCase()])
                  return l["return"](f2);
                shaka.log.warning("Could not determine manifest type using MIME type ", d2);
              }
              if (g = e2.getExtension(a2)) {
                if (h = e2.parsersByExtension[g])
                  return l["return"](h);
                shaka.log.warning("Could not determine manifest type for extension ", g);
              } else
                shaka.log.warning(
                  "Could not find extension for ",
                  a2
                );
              return d2 ? l.jumpTo(2) : l.yield(e2.getMimeType(a2, b2, c2), 3);
            }
            if (2 != l.nextAddress && (d2 = l.yieldResult)) {
              if (k2 = shaka.media.ManifestParser.parsersByMime[d2])
                return l["return"](k2);
              shaka.log.warning("Could not determine manifest type using MIME type", d2);
            }
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.UNABLE_TO_GUESS_MANIFEST_TYPE, a2);
          });
        };
        shaka.media.ManifestParser.getMimeType = function(a2, b2, c2) {
          var d2, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            if (1 == h.nextAddress)
              return d2 = shaka.net.NetworkingEngine.RequestType.MANIFEST, e2 = shaka.net.NetworkingEngine.makeRequest([a2], c2), e2.method = "HEAD", h.yield(b2.request(d2, e2).promise, 2);
            f2 = h.yieldResult;
            g = f2.headers["content-type"];
            return h["return"](g ? g.toLowerCase().split(";").shift() : "");
          });
        };
        shaka.media.ManifestParser.getExtension = function(a2) {
          a2 = new goog.Uri(a2).getPath().split("/").pop().split(".");
          return 1 == a2.length ? "" : a2.pop().toLowerCase();
        };
        shaka.media.ManifestParser.isSupported = function(a2, b2) {
          return shaka.util.Platform.supportsMediaSource() ? b2 in shaka.media.ManifestParser.parsersByMime || shaka.media.ManifestParser.getExtension(a2) in shaka.media.ManifestParser.parsersByExtension ? true : false : false;
        };
        goog.exportSymbol("shaka.media.ManifestParser", shaka.media.ManifestParser);
        goog.exportProperty(shaka.media.ManifestParser, "unregisterParserByMime", shaka.media.ManifestParser.unregisterParserByMime);
        goog.exportProperty(shaka.media.ManifestParser, "registerParserByMime", shaka.media.ManifestParser.registerParserByMime);
        goog.exportProperty(shaka.media.ManifestParser, "registerParserByExtension", shaka.media.ManifestParser.registerParserByExtension);
        shaka.media.ManifestParser.parsersByMime = {};
        shaka.media.ManifestParser.parsersByExtension = {};
        shaka.util.DataViewReader = function(a2, b2) {
          this.dataView_ = shaka.util.BufferUtils.toDataView(a2);
          this.littleEndian_ = b2 == shaka.util.DataViewReader.Endianness.LITTLE_ENDIAN;
          this.position_ = 0;
        };
        shaka.util.DataViewReader.prototype.getDataView = function() {
          return this.dataView_;
        };
        shaka.util.DataViewReader.prototype.hasMoreData = function() {
          return this.position_ < this.dataView_.byteLength;
        };
        shaka.util.DataViewReader.prototype.getPosition = function() {
          return this.position_;
        };
        shaka.util.DataViewReader.prototype.getLength = function() {
          return this.dataView_.byteLength;
        };
        shaka.util.DataViewReader.prototype.readUint8 = function() {
          try {
            var a2 = this.dataView_.getUint8(this.position_);
            this.position_ += 1;
            return a2;
          } catch (b2) {
            throw this.outOfBounds_();
          }
        };
        shaka.util.DataViewReader.prototype.readUint16 = function() {
          try {
            var a2 = this.dataView_.getUint16(this.position_, this.littleEndian_);
            this.position_ += 2;
            return a2;
          } catch (b2) {
            throw this.outOfBounds_();
          }
        };
        shaka.util.DataViewReader.prototype.readUint32 = function() {
          try {
            var a2 = this.dataView_.getUint32(this.position_, this.littleEndian_);
            this.position_ += 4;
            return a2;
          } catch (b2) {
            throw this.outOfBounds_();
          }
        };
        shaka.util.DataViewReader.prototype.readInt32 = function() {
          try {
            var a2 = this.dataView_.getInt32(this.position_, this.littleEndian_);
            this.position_ += 4;
            return a2;
          } catch (b2) {
            throw this.outOfBounds_();
          }
        };
        shaka.util.DataViewReader.prototype.readUint64 = function() {
          try {
            if (this.littleEndian_) {
              var a2 = this.dataView_.getUint32(this.position_, true);
              var b2 = this.dataView_.getUint32(this.position_ + 4, true);
            } else
              b2 = this.dataView_.getUint32(this.position_, false), a2 = this.dataView_.getUint32(this.position_ + 4, false);
          } catch (c2) {
            throw this.outOfBounds_();
          }
          if (2097151 < b2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.JS_INTEGER_OVERFLOW);
          this.position_ += 8;
          return b2 * Math.pow(
            2,
            32
          ) + a2;
        };
        shaka.util.DataViewReader.prototype.readBytes = function(a2) {
          goog.asserts.assert(0 <= a2, "Bad call to DataViewReader.readBytes");
          if (this.position_ + a2 > this.dataView_.byteLength)
            throw this.outOfBounds_();
          var b2 = shaka.util.BufferUtils.toUint8(this.dataView_, this.position_, a2);
          this.position_ += a2;
          return b2;
        };
        shaka.util.DataViewReader.prototype.skip = function(a2) {
          goog.asserts.assert(0 <= a2, "Bad call to DataViewReader.skip");
          if (this.position_ + a2 > this.dataView_.byteLength)
            throw this.outOfBounds_();
          this.position_ += a2;
        };
        shaka.util.DataViewReader.prototype.rewind = function(a2) {
          goog.asserts.assert(0 <= a2, "Bad call to DataViewReader.rewind");
          if (this.position_ < a2)
            throw this.outOfBounds_();
          this.position_ -= a2;
        };
        shaka.util.DataViewReader.prototype.seek = function(a2) {
          goog.asserts.assert(0 <= a2, "Bad call to DataViewReader.seek");
          if (0 > a2 || a2 > this.dataView_.byteLength)
            throw this.outOfBounds_();
          this.position_ = a2;
        };
        shaka.util.DataViewReader.prototype.readTerminatedString = function() {
          for (var a2 = this.position_; this.hasMoreData() && 0 != this.dataView_.getUint8(this.position_); )
            this.position_ += 1;
          a2 = shaka.util.BufferUtils.toUint8(this.dataView_, a2, this.position_ - a2);
          this.position_ += 1;
          return shaka.util.StringUtils.fromUTF8(a2);
        };
        shaka.util.DataViewReader.prototype.outOfBounds_ = function() {
          return new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.BUFFER_READ_OUT_OF_BOUNDS);
        };
        goog.exportSymbol("shaka.util.DataViewReader", shaka.util.DataViewReader);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "readTerminatedString", shaka.util.DataViewReader.prototype.readTerminatedString);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "seek", shaka.util.DataViewReader.prototype.seek);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "rewind", shaka.util.DataViewReader.prototype.rewind);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "skip", shaka.util.DataViewReader.prototype.skip);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "readBytes", shaka.util.DataViewReader.prototype.readBytes);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "readUint64", shaka.util.DataViewReader.prototype.readUint64);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "readInt32", shaka.util.DataViewReader.prototype.readInt32);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "readUint32", shaka.util.DataViewReader.prototype.readUint32);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "readUint16", shaka.util.DataViewReader.prototype.readUint16);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "readUint8", shaka.util.DataViewReader.prototype.readUint8);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "getLength", shaka.util.DataViewReader.prototype.getLength);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "getPosition", shaka.util.DataViewReader.prototype.getPosition);
        goog.exportProperty(shaka.util.DataViewReader.prototype, "hasMoreData", shaka.util.DataViewReader.prototype.hasMoreData);
        shaka.util.DataViewReader.Endianness = { BIG_ENDIAN: 0, LITTLE_ENDIAN: 1 };
        goog.exportProperty(shaka.util.DataViewReader, "Endianness", shaka.util.DataViewReader.Endianness);
        shaka.util.Mp4Parser = function() {
          this.headers_ = [];
          this.boxDefinitions_ = [];
          this.done_ = false;
        };
        shaka.util.Mp4Parser.prototype.box = function(a2, b2) {
          var c2 = shaka.util.Mp4Parser.typeFromString_(a2);
          this.headers_[c2] = shaka.util.Mp4Parser.BoxType_.BASIC_BOX;
          this.boxDefinitions_[c2] = b2;
          return this;
        };
        shaka.util.Mp4Parser.prototype.fullBox = function(a2, b2) {
          var c2 = shaka.util.Mp4Parser.typeFromString_(a2);
          this.headers_[c2] = shaka.util.Mp4Parser.BoxType_.FULL_BOX;
          this.boxDefinitions_[c2] = b2;
          return this;
        };
        shaka.util.Mp4Parser.prototype.stop = function() {
          this.done_ = true;
        };
        shaka.util.Mp4Parser.prototype.parse = function(a2, b2, c2) {
          a2 = new shaka.util.DataViewReader(a2, shaka.util.DataViewReader.Endianness.BIG_ENDIAN);
          for (this.done_ = false; a2.hasMoreData() && !this.done_; )
            this.parseNext(0, a2, b2, c2);
        };
        shaka.util.Mp4Parser.prototype.parseNext = function(a2, b2, c2, d2) {
          var e2 = b2.getPosition();
          if (d2 && e2 + 8 > b2.getLength())
            this.done_ = true;
          else {
            var f2 = b2.readUint32(), g = b2.readUint32(), h = shaka.util.Mp4Parser.typeToString(g), k2 = false;
            shaka.log.v2("Parsing MP4 box", h);
            switch (f2) {
              case 0:
                f2 = b2.getLength() - e2;
                break;
              case 1:
                if (d2 && b2.getPosition() + 8 > b2.getLength()) {
                  this.done_ = true;
                  return;
                }
                f2 = b2.readUint64();
                k2 = true;
            }
            if (h = this.boxDefinitions_[g]) {
              var l = null, m = null;
              if (this.headers_[g] == shaka.util.Mp4Parser.BoxType_.FULL_BOX) {
                if (d2 && b2.getPosition() + 4 > b2.getLength()) {
                  this.done_ = true;
                  return;
                }
                m = b2.readUint32();
                l = m >>> 24;
                m &= 16777215;
              }
              g = e2 + f2;
              c2 && g > b2.getLength() && (g = b2.getLength());
              d2 && g > b2.getLength() ? this.done_ = true : (d2 = g - b2.getPosition(), b2 = 0 < d2 ? b2.readBytes(d2) : new Uint8Array(0), b2 = new shaka.util.DataViewReader(b2, shaka.util.DataViewReader.Endianness.BIG_ENDIAN), h({ parser: this, partialOkay: c2 || false, version: l, flags: m, reader: b2, size: f2, start: e2 + a2, has64BitSize: k2 }));
            } else
              a2 = Math.min(e2 + f2 - b2.getPosition(), b2.getLength() - b2.getPosition()), b2.skip(a2);
          }
        };
        shaka.util.Mp4Parser.children = function(a2) {
          for (var b2 = shaka.util.Mp4Parser.headerSize(a2); a2.reader.hasMoreData() && !a2.parser.done_; )
            a2.parser.parseNext(a2.start + b2, a2.reader, a2.partialOkay);
        };
        shaka.util.Mp4Parser.sampleDescription = function(a2) {
          for (var b2 = shaka.util.Mp4Parser.headerSize(a2), c2 = a2.reader.readUint32(), d2 = 0; d2 < c2 && (a2.parser.parseNext(a2.start + b2, a2.reader, a2.partialOkay), !a2.parser.done_); d2++)
            ;
        };
        shaka.util.Mp4Parser.allData = function(a2) {
          return function(b2) {
            var c2 = b2.reader.getLength() - b2.reader.getPosition();
            a2(b2.reader.readBytes(c2));
          };
        };
        shaka.util.Mp4Parser.typeFromString_ = function(a2) {
          goog.asserts.assert(4 == a2.length, "Mp4 box names must be 4 characters long");
          var b2 = 0;
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next())
            b2 = b2 << 8 | c2.value.charCodeAt(0);
          return b2;
        };
        shaka.util.Mp4Parser.typeToString = function(a2) {
          return String.fromCharCode(a2 >> 24 & 255, a2 >> 16 & 255, a2 >> 8 & 255, a2 & 255);
        };
        shaka.util.Mp4Parser.headerSize = function(a2) {
          return 8 + (a2.has64BitSize ? 8 : 0) + (null != a2.flags ? 4 : 0);
        };
        goog.exportSymbol("shaka.util.Mp4Parser", shaka.util.Mp4Parser);
        goog.exportProperty(shaka.util.Mp4Parser, "headerSize", shaka.util.Mp4Parser.headerSize);
        goog.exportProperty(shaka.util.Mp4Parser, "typeToString", shaka.util.Mp4Parser.typeToString);
        goog.exportProperty(shaka.util.Mp4Parser, "allData", shaka.util.Mp4Parser.allData);
        goog.exportProperty(shaka.util.Mp4Parser, "sampleDescription", shaka.util.Mp4Parser.sampleDescription);
        goog.exportProperty(shaka.util.Mp4Parser, "children", shaka.util.Mp4Parser.children);
        goog.exportProperty(shaka.util.Mp4Parser.prototype, "parseNext", shaka.util.Mp4Parser.prototype.parseNext);
        goog.exportProperty(shaka.util.Mp4Parser.prototype, "parse", shaka.util.Mp4Parser.prototype.parse);
        goog.exportProperty(shaka.util.Mp4Parser.prototype, "stop", shaka.util.Mp4Parser.prototype.stop);
        goog.exportProperty(shaka.util.Mp4Parser.prototype, "fullBox", shaka.util.Mp4Parser.prototype.fullBox);
        goog.exportProperty(shaka.util.Mp4Parser.prototype, "box", shaka.util.Mp4Parser.prototype.box);
        shaka.util.Mp4Parser.BoxType_ = { BASIC_BOX: 0, FULL_BOX: 1 };
        shaka.media.ContentWorkarounds = function() {
        };
        shaka.media.ContentWorkarounds.fakeEncryption = function(a2) {
          var b2 = shaka.media.ContentWorkarounds;
          a2 = shaka.util.BufferUtils.toUint8(a2);
          var c2 = false, d2, e2 = [], f2 = function(l) {
            e2.push(l);
            shaka.util.Mp4Parser.children(l);
          }, g = function(l) {
            c2 = true;
          }, h = [];
          new shaka.util.Mp4Parser().box("moov", f2).box("trak", f2).box("mdia", f2).box("minf", f2).box("stbl", f2).fullBox("stsd", function(l) {
            d2 = l;
            e2.push(l);
            shaka.util.Mp4Parser.sampleDescription(l);
          }).fullBox("encv", g).fullBox("enca", g).fullBox("avc1", function(l) {
            h.push({ box: l, newType: b2.BOX_TYPE_ENCV_ });
          }).fullBox(
            "avc3",
            function(l) {
              h.push({ box: l, newType: b2.BOX_TYPE_ENCV_ });
            }
          ).fullBox("ac-3", function(l) {
            h.push({ box: l, newType: b2.BOX_TYPE_ENCA_ });
          }).fullBox("ec-3", function(l) {
            h.push({ box: l, newType: b2.BOX_TYPE_ENCA_ });
          }).fullBox("mp4a", function(l) {
            h.push({ box: l, newType: b2.BOX_TYPE_ENCA_ });
          }).parse(a2);
          if (c2)
            return shaka.log.debug("Init segment already indicates encryption."), a2;
          if (0 == h.length || !d2)
            throw shaka.log.error("Failed to find boxes needed to fake encryption!"), shaka.log.v2("Failed init segment (hex):", shaka.util.Uint8ArrayUtils.toHex(a2)), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.CONTENT_TRANSFORMATION_FAILED);
          h.reverse();
          f2 = $jscomp.makeIterator(h);
          for (g = f2.next(); !g.done; g = f2.next()) {
            g = g.value;
            var k2 = shaka.util.Mp4Parser.typeToString(g.newType);
            shaka.log.debug('Inserting "' + k2 + '" box into init segment.');
            a2 = b2.insertEncryptionMetadata_(a2, d2, g.box, e2, g.newType);
          }
          return a2;
        };
        shaka.media.ContentWorkarounds.insertEncryptionMetadata_ = function(a2, b2, c2, d2, e2) {
          var f2 = shaka.media.ContentWorkarounds, g = f2.createEncryptionMetadata_(a2, c2, e2);
          e2 = new Uint8Array(a2.byteLength + g.byteLength);
          c2 = shaka.util.Platform.isXboxOne() ? c2.start : c2.start + c2.size;
          var h = a2.subarray(0, c2);
          a2 = a2.subarray(c2);
          e2.set(h);
          e2.set(g, c2);
          e2.set(a2, c2 + g.byteLength);
          d2 = $jscomp.makeIterator(d2);
          for (a2 = d2.next(); !a2.done; a2 = d2.next())
            a2 = a2.value, goog.asserts.assert(a2.start < c2, "Ancestor MP4 box found in the wrong location!  Modified init segment will not make sense!"), f2.updateBoxSize_(e2, a2.start, a2.size + g.byteLength);
          f2 = shaka.util.BufferUtils.toDataView(e2, b2.start);
          b2 = shaka.util.Mp4Parser.headerSize(b2);
          g = f2.getUint32(b2);
          f2.setUint32(b2, g + 1);
          return e2;
        };
        shaka.media.ContentWorkarounds.createEncryptionMetadata_ = function(a2, b2, c2) {
          var d2 = shaka.media.ContentWorkarounds, e2 = d2.CANNED_SINF_BOX_.value(), f2 = a2.subarray(b2.start, b2.start + b2.size), g = shaka.util.BufferUtils.toDataView(f2);
          a2 = new Uint8Array(b2.size + e2.byteLength);
          a2.set(f2, 0);
          f2 = shaka.util.BufferUtils.toDataView(a2);
          f2.setUint32(d2.BOX_TYPE_OFFSET_, c2);
          a2.set(e2, b2.size);
          c2 = g.getUint32(d2.BOX_TYPE_OFFSET_);
          f2.setUint32(b2.size + d2.CANNED_SINF_BOX_FORMAT_OFFSET_, c2);
          d2.updateBoxSize_(a2, 0, a2.byteLength);
          return a2;
        };
        shaka.media.ContentWorkarounds.updateBoxSize_ = function(a2, b2, c2) {
          var d2 = shaka.media.ContentWorkarounds;
          a2 = shaka.util.BufferUtils.toDataView(a2, b2);
          b2 = a2.getUint32(d2.BOX_SIZE_OFFSET_);
          0 != b2 && (1 == b2 ? (a2.setUint32(d2.BOX_SIZE_64_OFFSET_, c2 >> 32), a2.setUint32(d2.BOX_SIZE_64_OFFSET_ + 4, c2 & 4294967295)) : a2.setUint32(d2.BOX_SIZE_OFFSET_, c2));
        };
        shaka.media.ContentWorkarounds.CANNED_SINF_BOX_ = new shaka.util.Lazy(function() {
          return new Uint8Array([0, 0, 0, 80, 115, 105, 110, 102, 0, 0, 0, 12, 102, 114, 109, 97, 0, 0, 0, 0, 0, 0, 0, 20, 115, 99, 104, 109, 0, 0, 0, 0, 99, 101, 110, 99, 0, 1, 0, 0, 0, 0, 0, 40, 115, 99, 104, 105, 0, 0, 0, 32, 116, 101, 110, 99, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        });
        shaka.media.ContentWorkarounds.CANNED_SINF_BOX_FORMAT_OFFSET_ = 16;
        shaka.media.ContentWorkarounds.BOX_SIZE_OFFSET_ = 0;
        shaka.media.ContentWorkarounds.BOX_TYPE_OFFSET_ = 4;
        shaka.media.ContentWorkarounds.BOX_SIZE_64_OFFSET_ = 8;
        shaka.media.ContentWorkarounds.BOX_TYPE_ENCV_ = 1701733238;
        shaka.media.ContentWorkarounds.BOX_TYPE_ENCA_ = 1701733217;
        shaka.cea = {};
        shaka.cea.ICaptionDecoder = function() {
        };
        shaka.cea.ICaptionDecoder.prototype.extract = function(a2, b2) {
        };
        shaka.cea.ICaptionDecoder.prototype.decode = function() {
        };
        shaka.cea.ICaptionDecoder.prototype.clear = function() {
        };
        shaka.cea.CeaUtils = function() {
        };
        shaka.cea.CeaUtils.getParsedCaption = function(a2, b2, c2, d2, e2) {
          if (d2 >= e2)
            return null;
          for (var f2 = -1, g = -1, h = 0; h < c2.length; h++)
            if (c2[h].some(function(x) {
              return null != x && "" != x.getChar().trim();
            })) {
              f2 = h;
              break;
            }
          for (h = c2.length - 1; 0 <= h; h--)
            if (c2[h].some(function(x) {
              return null != x && "" != x.getChar().trim();
            })) {
              g = h;
              break;
            }
          if (-1 === f2 || -1 === g)
            return null;
          for (var k2 = h = false, l = shaka.cea.CeaUtils.DEFAULT_TXT_COLOR, m = shaka.cea.CeaUtils.DEFAULT_BG_COLOR, n = shaka.cea.CeaUtils.createStyledCue(d2, e2, h, k2, l, m); f2 <= g; f2++) {
            for (var p = c2[f2], q = -1, r = -1, t = 0; t < p.length; t++)
              if (null != p[t] && "" !== p[t].getChar().trim()) {
                q = t;
                break;
              }
            for (t = p.length - 1; 0 <= t; t--)
              if (null != p[t] && "" !== p[t].getChar().trim()) {
                r = t;
                break;
              }
            if (-1 === q || -1 === r)
              p = shaka.cea.CeaUtils.createLineBreakCue(d2, e2), a2.nestedCues.push(p);
            else {
              for (; q <= r; q++)
                if (t = p[q]) {
                  var u = t.isUnderlined(), v = t.isItalicized(), y = t.getTextColor(), w = t.getBackgroundColor();
                  if (u != h || v != k2 || y != l || w != m)
                    n.payload && a2.nestedCues.push(n), n = shaka.cea.CeaUtils.createStyledCue(d2, e2, u, v, y, w), h = u, k2 = v, l = y, m = w;
                  n.payload += t.getChar();
                } else
                  n.payload += " ";
              n.payload && a2.nestedCues.push(n);
              f2 !== g && (n = shaka.cea.CeaUtils.createLineBreakCue(d2, e2), a2.nestedCues.push(n));
              n = shaka.cea.CeaUtils.createStyledCue(d2, e2, h, k2, l, m);
            }
          }
          return a2.nestedCues.length ? { cue: a2, stream: b2 } : null;
        };
        shaka.cea.CeaUtils.createStyledCue = function(a2, b2, c2, d2, e2, f2) {
          a2 = new shaka.text.Cue(a2, b2, "");
          c2 && a2.textDecoration.push(shaka.text.Cue.textDecoration.UNDERLINE);
          d2 && (a2.fontStyle = shaka.text.Cue.fontStyle.ITALIC);
          a2.color = e2;
          a2.backgroundColor = f2;
          return a2;
        };
        shaka.cea.CeaUtils.createLineBreakCue = function(a2, b2) {
          var c2 = new shaka.text.Cue(a2, b2, "");
          c2.lineBreak = true;
          return c2;
        };
        shaka.cea.CeaUtils.StyledChar = function(a2, b2, c2, d2, e2) {
          this.character_ = a2;
          this.underline_ = b2;
          this.italics_ = c2;
          this.backgroundColor_ = d2;
          this.textColor_ = e2;
        };
        shaka.cea.CeaUtils.StyledChar.prototype.getChar = function() {
          return this.character_;
        };
        shaka.cea.CeaUtils.StyledChar.prototype.isUnderlined = function() {
          return this.underline_;
        };
        shaka.cea.CeaUtils.StyledChar.prototype.isItalicized = function() {
          return this.italics_;
        };
        shaka.cea.CeaUtils.StyledChar.prototype.getBackgroundColor = function() {
          return this.backgroundColor_;
        };
        shaka.cea.CeaUtils.StyledChar.prototype.getTextColor = function() {
          return this.textColor_;
        };
        shaka.cea.CeaUtils.DEFAULT_BG_COLOR = "black";
        shaka.cea.CeaUtils.DEFAULT_TXT_COLOR = "white";
        shaka.cea.Cea608Memory = function(a2, b2) {
          this.rows_ = [];
          this.row_ = 1;
          this.scrollRows_ = 0;
          this.fieldNum_ = a2;
          this.channelNum_ = b2;
          this.italics_ = this.underline_ = false;
          this.textColor_ = shaka.cea.CeaUtils.DEFAULT_TXT_COLOR;
          this.backgroundColor_ = shaka.cea.CeaUtils.DEFAULT_BG_COLOR;
          this.reset();
        };
        shaka.cea.Cea608Memory.prototype.forceEmit = function(a2, b2) {
          var c2 = "CC" + (this.fieldNum_ << 1 | this.channelNum_ + 1), d2 = new shaka.text.Cue(a2, b2, "");
          return shaka.cea.CeaUtils.getParsedCaption(d2, c2, this.rows_, a2, b2);
        };
        shaka.cea.Cea608Memory.prototype.reset = function() {
          this.resetAllRows();
          this.row_ = 1;
        };
        shaka.cea.Cea608Memory.prototype.getRow = function() {
          return this.row_;
        };
        shaka.cea.Cea608Memory.prototype.setRow = function(a2) {
          this.row_ = a2;
        };
        shaka.cea.Cea608Memory.prototype.getScrollSize = function() {
          return this.scrollRows_;
        };
        shaka.cea.Cea608Memory.prototype.setScrollSize = function(a2) {
          this.scrollRows_ = a2;
        };
        shaka.cea.Cea608Memory.prototype.addChar = function(a2, b2) {
          if (!(32 > b2 || 127 < b2)) {
            var c2 = "";
            switch (a2) {
              case shaka.cea.Cea608Memory.CharSet.BASIC_NORTH_AMERICAN:
                c2 = shaka.cea.Cea608Memory.CharSet.BasicNorthAmericanChars.has(b2) ? shaka.cea.Cea608Memory.CharSet.BasicNorthAmericanChars.get(b2) : String.fromCharCode(b2);
                break;
              case shaka.cea.Cea608Memory.CharSet.SPECIAL_NORTH_AMERICAN:
                c2 = shaka.cea.Cea608Memory.CharSet.SpecialNorthAmericanChars.get(b2);
                break;
              case shaka.cea.Cea608Memory.CharSet.SPANISH_FRENCH:
                this.eraseChar();
                c2 = shaka.cea.Cea608Memory.CharSet.ExtendedSpanishFrench.get(b2);
                break;
              case shaka.cea.Cea608Memory.CharSet.PORTUGUESE_GERMAN:
                this.eraseChar(), c2 = shaka.cea.Cea608Memory.CharSet.ExtendedPortugueseGerman.get(b2);
            }
            c2 && (c2 = new shaka.cea.CeaUtils.StyledChar(c2, this.underline_, this.italics_, this.backgroundColor_, this.textColor_), this.rows_[this.row_].push(c2));
          }
        };
        shaka.cea.Cea608Memory.prototype.eraseChar = function() {
          this.rows_[this.row_].pop();
        };
        shaka.cea.Cea608Memory.prototype.moveRows = function(a2, b2, c2) {
          if (a2 >= b2)
            for (--c2; 0 <= c2; c2--)
              this.rows_[a2 + c2] = this.rows_[b2 + c2].map(function(e2) {
                return e2;
              });
          else
            for (var d2 = 0; d2 < c2; d2++)
              this.rows_[a2 + d2] = this.rows_[b2 + d2].map(function(e2) {
                return e2;
              });
        };
        shaka.cea.Cea608Memory.prototype.resetRows = function(a2, b2) {
          for (var c2 = 0; c2 <= b2; c2++)
            this.rows_[a2 + c2] = [];
        };
        shaka.cea.Cea608Memory.prototype.resetAllRows = function() {
          this.resetRows(0, shaka.cea.Cea608Memory.CC_ROWS);
        };
        shaka.cea.Cea608Memory.prototype.eraseBuffer = function() {
          this.row_ = 0 < this.scrollRows_ ? this.scrollRows_ : 0;
          this.resetAllRows();
        };
        shaka.cea.Cea608Memory.prototype.setUnderline = function(a2) {
          this.underline_ = a2;
        };
        shaka.cea.Cea608Memory.prototype.setItalics = function(a2) {
          this.italics_ = a2;
        };
        shaka.cea.Cea608Memory.prototype.setTextColor = function(a2) {
          this.textColor_ = a2;
        };
        shaka.cea.Cea608Memory.prototype.setBackgroundColor = function(a2) {
          this.backgroundColor_ = a2;
        };
        shaka.cea.Cea608Memory.CC_ROWS = 15;
        shaka.cea.Cea608Memory.CharSet = { BASIC_NORTH_AMERICAN: 0, SPECIAL_NORTH_AMERICAN: 1, SPANISH_FRENCH: 2, PORTUGUESE_GERMAN: 3 };
        shaka.cea.Cea608Memory.CharSet.BasicNorthAmericanChars = /* @__PURE__ */ new Map([[39, "\u2019"], [42, "\xE1"], [92, "\xE9"], [92, "\xE9"], [94, "\xED"], [95, "\xF3"], [96, "\xFA"], [123, "\xE7"], [124, "\xF7"], [125, "\xD1"], [126, "\xF1"], [127, "\u2588"]]);
        shaka.cea.Cea608Memory.CharSet.SpecialNorthAmericanChars = /* @__PURE__ */ new Map([[48, "\xAE"], [49, "\xB0"], [50, "\xBD"], [51, "\xBF"], [52, "\u2122"], [53, "\xA2"], [54, "\xA3"], [55, "\u266A"], [56, "\xE0"], [57, "\u2800"], [58, "\xE8"], [59, "\xE2"], [60, "\xEA"], [61, "\xEE"], [62, "\xF4"], [63, "\xFB"]]);
        shaka.cea.Cea608Memory.CharSet.ExtendedSpanishFrench = /* @__PURE__ */ new Map([[32, "\xC1"], [33, "\xC9"], [34, "\xD3"], [35, "\xDA"], [36, "\xDC"], [37, "\xFC"], [38, "\u2018"], [39, "\xA1"], [40, "*"], [41, "'"], [42, "\u2500"], [43, "\xA9"], [44, "\u2120"], [45, "\xB7"], [46, "\u201C"], [47, "\u201D"], [48, "\xC0"], [49, "\xC2"], [50, "\xC7"], [51, "\xC8"], [52, "\xCA"], [53, "\xCB"], [54, "\xEB"], [55, "\xCE"], [56, "\xCF"], [57, "\xEF"], [58, "\xD4"], [59, "\xD9"], [60, "\xF9"], [61, "\xDB"], [62, "\xAB"], [63, "\xBB"]]);
        shaka.cea.Cea608Memory.CharSet.ExtendedPortugueseGerman = /* @__PURE__ */ new Map([[32, "\xC3"], [33, "\xE3"], [34, "\xCD"], [35, "\xCC"], [36, "\xEC"], [37, "\xD2"], [38, "\xF2"], [39, "\xD5"], [40, "\xF5"], [41, "{"], [42, "}"], [43, "\\"], [44, "^"], [45, "_"], [46, "|"], [47, "~"], [48, "\xC4"], [49, "\xE4"], [50, "\xD6"], [51, "\xF6"], [52, "\xDF"], [53, "\xA5"], [54, "\xA4"], [55, "\u2502"], [56, "\xC5"], [57, "\xE5"], [58, "\xD8"], [59, "\xF8"], [60, "\u250C"], [61, "\u2510"], [62, "\u2514"], [63, "\u2518"]]);
        shaka.cea.Cea608DataChannel = function(a2, b2) {
          this.type_ = shaka.cea.Cea608DataChannel.CaptionType.NONE;
          this.text_ = new shaka.cea.Cea608Memory(a2, b2);
          this.displayedMemory_ = new shaka.cea.Cea608Memory(a2, b2);
          this.nonDisplayedMemory_ = new shaka.cea.Cea608Memory(a2, b2);
          this.curbuf_ = this.displayedMemory_;
          this.prevEndTime_ = 0;
          this.lastcp_ = null;
        };
        shaka.cea.Cea608DataChannel.prototype.reset = function() {
          this.type_ = shaka.cea.Cea608DataChannel.CaptionType.PAINTON;
          this.curbuf_ = this.displayedMemory_;
          this.lastcp_ = null;
          this.displayedMemory_.reset();
          this.nonDisplayedMemory_.reset();
          this.text_.reset();
        };
        shaka.cea.Cea608DataChannel.prototype.pacToRow_ = function(a2, b2) {
          return [11, 11, 1, 2, 3, 4, 12, 13, 14, 15, 5, 6, 7, 8, 9, 10][(a2 & 7) << 1 | b2 >> 5 & 1];
        };
        shaka.cea.Cea608DataChannel.prototype.controlPac_ = function(a2, b2) {
          var c2 = this.pacToRow_(a2, b2), d2 = (b2 & 30) >> 1, e2 = shaka.cea.CeaUtils.DEFAULT_TXT_COLOR, f2 = false;
          7 > d2 ? e2 = shaka.cea.Cea608DataChannel.TEXT_COLORS[d2] : 7 === d2 && (f2 = true);
          d2 = 1 === (b2 & 1);
          if (this.type_ !== shaka.cea.Cea608DataChannel.CaptionType.TEXT) {
            var g = this.curbuf_;
            if (this.type_ === shaka.cea.Cea608DataChannel.CaptionType.ROLLUP && c2 !== g.getRow()) {
              var h = 1 + g.getRow() - g.getScrollSize(), k2 = 1 + c2 - g.getScrollSize();
              g.moveRows(k2, h, g.getScrollSize());
              g.resetRows(0, k2 - 1);
              g.resetRows(c2 + 1, shaka.cea.Cea608Memory.CC_ROWS - c2);
            }
            g.setRow(c2);
            this.curbuf_.setUnderline(d2);
            this.curbuf_.setItalics(f2);
            this.curbuf_.setTextColor(e2);
            this.curbuf_.setBackgroundColor(shaka.cea.CeaUtils.DEFAULT_BG_COLOR);
          }
        };
        shaka.cea.Cea608DataChannel.prototype.controlMidrow_ = function(a2) {
          this.curbuf_.setUnderline(false);
          this.curbuf_.setItalics(false);
          this.curbuf_.setTextColor(shaka.cea.CeaUtils.DEFAULT_TXT_COLOR);
          this.curbuf_.addChar(shaka.cea.Cea608Memory.CharSet.BASIC_NORTH_AMERICAN, 32);
          var b2 = false;
          var c2 = shaka.cea.Cea608DataChannel.TEXT_COLORS[(a2 & 14) >> 1];
          "white_italics" === c2 && (c2 = "white", b2 = true);
          this.curbuf_.setUnderline(1 === (a2 & 1));
          this.curbuf_.setItalics(b2);
          this.curbuf_.setTextColor(c2);
        };
        shaka.cea.Cea608DataChannel.prototype.controlBackgroundAttribute_ = function(a2, b2) {
          var c2 = shaka.cea.CeaUtils.DEFAULT_BG_COLOR;
          0 === (a2 & 7) && (c2 = shaka.cea.Cea608DataChannel.BG_COLORS[(b2 & 14) >> 1]);
          this.curbuf_.setBackgroundColor(c2);
        };
        shaka.cea.Cea608DataChannel.prototype.controlMiscellaneous_ = function(a2) {
          var b2 = shaka.cea.Cea608DataChannel.MiscCmd_, c2 = a2.pts, d2 = null;
          switch (a2.ccData2) {
            case b2.RCL:
              this.controlRcl_();
              break;
            case b2.BS:
              this.controlBs_();
              break;
            case b2.RU2:
              d2 = this.controlRu_(2, c2);
              break;
            case b2.RU3:
              d2 = this.controlRu_(3, c2);
              break;
            case b2.RU4:
              d2 = this.controlRu_(4, c2);
              break;
            case b2.FON:
              this.controlFon_();
              break;
            case b2.RDC:
              this.controlRdc_(c2);
              break;
            case b2.TR:
              this.controlTr_();
              break;
            case b2.RTD:
              this.controlRtd_();
              break;
            case b2.EDM:
              d2 = this.controlEdm_(c2);
              break;
            case b2.CR:
              d2 = this.controlCr_(c2);
              break;
            case b2.ENM:
              this.controlEnm_();
              break;
            case b2.EOC:
              d2 = this.controlEoc_(c2);
          }
          return d2;
        };
        shaka.cea.Cea608DataChannel.prototype.controlCr_ = function(a2) {
          var b2 = this.curbuf_;
          if (this.type_ !== shaka.cea.Cea608DataChannel.CaptionType.ROLLUP)
            return null;
          var c2 = b2.forceEmit(this.prevEndTime_, a2), d2 = b2.getRow() - b2.getScrollSize() + 1;
          b2.moveRows(d2 - 1, d2, b2.getScrollSize());
          b2.resetRows(0, d2 - 1);
          b2.resetRows(b2.getRow(), shaka.cea.Cea608Memory.CC_ROWS - b2.getRow());
          this.prevEndTime_ = a2;
          return c2;
        };
        shaka.cea.Cea608DataChannel.prototype.controlRu_ = function(a2, b2) {
          var c2 = this.curbuf_ = this.displayedMemory_, d2 = null;
          this.type_ !== shaka.cea.Cea608DataChannel.CaptionType.ROLLUP && this.type_ !== shaka.cea.Cea608DataChannel.CaptionType.TEXT && (d2 = c2.forceEmit(this.prevEndTime_, b2), this.displayedMemory_.eraseBuffer(), this.nonDisplayedMemory_.eraseBuffer(), c2.setRow(shaka.cea.Cea608Memory.CC_ROWS));
          this.type_ = shaka.cea.Cea608DataChannel.CaptionType.ROLLUP;
          c2.setScrollSize(a2);
          return d2;
        };
        shaka.cea.Cea608DataChannel.prototype.controlFon_ = function() {
          this.curbuf_.addChar(shaka.cea.Cea608Memory.CharSet.BASIC_NORTH_AMERICAN, 32);
        };
        shaka.cea.Cea608DataChannel.prototype.controlEdm_ = function(a2) {
          var b2 = this.displayedMemory_, c2 = null;
          this.type_ !== shaka.cea.Cea608DataChannel.CaptionType.TEXT && (c2 = b2.forceEmit(this.prevEndTime_, a2));
          b2.resetAllRows();
          return c2;
        };
        shaka.cea.Cea608DataChannel.prototype.controlRdc_ = function(a2) {
          this.type_ = shaka.cea.Cea608DataChannel.CaptionType.PAINTON;
          this.curbuf_ = this.displayedMemory_;
          this.curbuf_.setScrollSize(0);
          this.prevEndTime_ = a2;
        };
        shaka.cea.Cea608DataChannel.prototype.controlEnm_ = function() {
          this.nonDisplayedMemory_.resetAllRows();
        };
        shaka.cea.Cea608DataChannel.prototype.controlEoc_ = function(a2) {
          var b2 = null;
          this.type_ !== shaka.cea.Cea608DataChannel.CaptionType.TEXT && (b2 = this.displayedMemory_.forceEmit(this.prevEndTime_, a2));
          var c2 = this.nonDisplayedMemory_;
          this.nonDisplayedMemory_ = this.displayedMemory_;
          this.displayedMemory_ = c2;
          this.controlRcl_();
          this.prevEndTime_ = a2;
          return b2;
        };
        shaka.cea.Cea608DataChannel.prototype.controlRcl_ = function() {
          this.type_ = shaka.cea.Cea608DataChannel.CaptionType.POPON;
          this.curbuf_ = this.nonDisplayedMemory_;
          this.curbuf_.setScrollSize(0);
        };
        shaka.cea.Cea608DataChannel.prototype.controlBs_ = function() {
          this.curbuf_.eraseChar();
        };
        shaka.cea.Cea608DataChannel.prototype.controlTr_ = function() {
          this.text_.reset();
          this.controlRtd_();
        };
        shaka.cea.Cea608DataChannel.prototype.controlRtd_ = function() {
          shaka.log.warnOnce("Cea608DataChannel", "CEA-608 text mode entered, but is unsupported");
          this.curbuf_ = this.text_;
          this.type_ = shaka.cea.Cea608DataChannel.CaptionType.TEXT;
        };
        shaka.cea.Cea608DataChannel.prototype.handleBasicNorthAmericanChar = function(a2, b2) {
          this.curbuf_.addChar(shaka.cea.Cea608Memory.CharSet.BASIC_NORTH_AMERICAN, a2);
          this.curbuf_.addChar(shaka.cea.Cea608Memory.CharSet.BASIC_NORTH_AMERICAN, b2);
        };
        shaka.cea.Cea608DataChannel.prototype.handleExtendedWesternEuropeanChar_ = function(a2, b2) {
          this.curbuf_.addChar(a2 & 1 ? shaka.cea.Cea608Memory.CharSet.PORTUGUESE_GERMAN : shaka.cea.Cea608Memory.CharSet.SPANISH_FRENCH, b2);
        };
        shaka.cea.Cea608DataChannel.prototype.handleControlCode = function(a2) {
          var b2 = a2.ccData1, c2 = a2.ccData2;
          if (this.lastcp_ === (b2 << 8 | c2))
            return this.lastcp_ = null;
          this.lastcp_ = b2 << 8 | c2;
          if (this.isPAC_(b2, c2))
            this.controlPac_(b2, c2);
          else if (this.isMidrowStyleChange_(b2, c2))
            this.controlMidrow_(c2);
          else if (this.isBackgroundAttribute_(b2, c2))
            this.controlBackgroundAttribute_(b2, c2);
          else if (this.isSpecialNorthAmericanChar_(b2, c2))
            this.curbuf_.addChar(shaka.cea.Cea608Memory.CharSet.SPECIAL_NORTH_AMERICAN, c2);
          else if (this.isExtendedWesternEuropeanChar_(
            b2,
            c2
          ))
            this.handleExtendedWesternEuropeanChar_(b2, c2);
          else if (this.isMiscellaneous_(b2, c2))
            return this.controlMiscellaneous_(a2);
          return null;
        };
        shaka.cea.Cea608DataChannel.prototype.isMiscellaneous_ = function(a2, b2) {
          return 20 === (a2 & 246) && 32 === (b2 & 240);
        };
        shaka.cea.Cea608DataChannel.prototype.isPAC_ = function(a2, b2) {
          return 16 === (a2 & 240) && 64 === (b2 & 192);
        };
        shaka.cea.Cea608DataChannel.prototype.isMidrowStyleChange_ = function(a2, b2) {
          return 17 === (a2 & 247) && 32 === (b2 & 240);
        };
        shaka.cea.Cea608DataChannel.prototype.isBackgroundAttribute_ = function(a2, b2) {
          return 16 === (a2 & 247) && 32 === (b2 & 240) || 23 === (a2 & 247) && 45 === (b2 & 255);
        };
        shaka.cea.Cea608DataChannel.prototype.isSpecialNorthAmericanChar_ = function(a2, b2) {
          return 17 === (a2 & 247) && 48 === (b2 & 240);
        };
        shaka.cea.Cea608DataChannel.prototype.isExtendedWesternEuropeanChar_ = function(a2, b2) {
          return 18 === (a2 & 246) && 32 === (b2 & 224);
        };
        shaka.cea.Cea608DataChannel.isControlCode = function(a2) {
          return 16 === (a2 & 112);
        };
        shaka.cea.Cea608DataChannel.MiscCmd_ = { RCL: 32, BS: 33, AOD: 34, AON: 35, DER: 36, RU2: 37, RU3: 38, RU4: 39, FON: 40, RDC: 41, TR: 42, RTD: 43, EDM: 44, CR: 45, ENM: 46, EOC: 47 };
        shaka.cea.Cea608DataChannel.CaptionType = { NONE: 0, POPON: 1, PAINTON: 2, ROLLUP: 3, TEXT: 4 };
        shaka.cea.Cea608DataChannel.BG_COLORS = "black green blue cyan red yellow magenta black".split(" ");
        shaka.cea.Cea608DataChannel.TEXT_COLORS = "white green blue cyan red yellow magenta white_italics".split(" ");
        shaka.cea.Cea708Window = function(a2) {
          this.windowNum_ = a2;
          this.relativeToggle_ = this.visible_ = false;
          this.colCount_ = this.rowCount_ = this.anchorId_ = this.verticalAnchor_ = this.horizontalAnchor_ = 0;
          this.justification_ = shaka.cea.Cea708Window.TextJustification.CENTER;
          this.memory_ = [];
          this.col_ = this.row_ = this.startTime_ = 0;
          this.underline_ = this.italics_ = false;
          this.textColor_ = shaka.cea.CeaUtils.DEFAULT_TXT_COLOR;
          this.backgroundColor_ = shaka.cea.CeaUtils.DEFAULT_BG_COLOR;
          this.resetMemory();
          shaka.util.Functional.ignored(
            this.verticalAnchor_,
            this.relativeToggle_,
            this.horizontalAnchor_,
            this.anchorId_,
            this.windowNum_
          );
        };
        shaka.cea.Cea708Window.prototype.defineWindow = function(a2, b2, c2, d2, e2, f2, g) {
          this.visible_ = a2;
          this.verticalAnchor_ = b2;
          this.horizontalAnchor_ = c2;
          this.anchorId_ = d2;
          this.relativeToggle_ = e2;
          this.rowCount_ = f2;
          this.colCount_ = g;
        };
        shaka.cea.Cea708Window.prototype.resetMemory = function() {
          this.memory_ = [];
          for (var a2 = 0; a2 < shaka.cea.Cea708Window.MAX_ROWS; a2++)
            this.memory_.push(this.createNewRow_());
        };
        shaka.cea.Cea708Window.prototype.createNewRow_ = function() {
          for (var a2 = [], b2 = 0; b2 < shaka.cea.Cea708Window.MAX_COLS; b2++)
            a2.push(null);
          return a2;
        };
        shaka.cea.Cea708Window.prototype.setCharacter = function(a2) {
          this.isPenInBounds_() && (a2 = new shaka.cea.CeaUtils.StyledChar(a2, this.underline_, this.italics_, this.backgroundColor_, this.textColor_), this.memory_[this.row_][this.col_] = a2, this.col_++);
        };
        shaka.cea.Cea708Window.prototype.backspace = function() {
          !this.isPenInBounds_() || 0 >= this.col_ && 0 >= this.row_ || (0 >= this.col_ ? (this.col_ = this.colCount_ - 1, this.row_--) : this.col_--, this.memory_[this.row_][this.col_] = null);
        };
        shaka.cea.Cea708Window.prototype.isPenInBounds_ = function() {
          var a2 = this.col_ < this.colCount_ && 0 <= this.col_;
          return this.row_ < this.rowCount_ && 0 <= this.row_ && a2;
        };
        shaka.cea.Cea708Window.prototype.isVisible = function() {
          return this.visible_;
        };
        shaka.cea.Cea708Window.prototype.moveUpRows_ = function(a2) {
          for (var b2 = 0, c2 = a2; c2 < shaka.cea.Cea708Window.MAX_ROWS; c2++, b2++)
            this.memory_[b2] = this.memory_[c2];
          for (c2 = 0; c2 < a2; c2++, b2++)
            this.memory_[b2] = this.createNewRow_();
        };
        shaka.cea.Cea708Window.prototype.carriageReturn = function() {
          this.row_ + 1 >= this.rowCount_ ? this.moveUpRows_(1) : this.row_++;
          this.col_ = 0;
        };
        shaka.cea.Cea708Window.prototype.horizontalCarriageReturn = function() {
          this.memory_[this.row_] = this.createNewRow_();
          this.col_ = 0;
        };
        shaka.cea.Cea708Window.prototype.forceEmit = function(a2, b2) {
          var c2 = "svc" + b2, d2 = shaka.cea.Cea708Window.TextJustification, e2 = new shaka.text.Cue(this.startTime_, a2, "");
          e2.textAlign = this.justification_ === d2.LEFT ? shaka.text.Cue.textAlign.LEFT : this.justification_ === d2.RIGHT ? shaka.text.Cue.textAlign.RIGHT : shaka.text.Cue.textAlign.CENTER;
          (c2 = shaka.cea.CeaUtils.getParsedCaption(e2, c2, this.memory_, this.startTime_, a2)) && this.setStartTime(a2);
          return c2;
        };
        shaka.cea.Cea708Window.prototype.setPenLocation = function(a2, b2) {
          this.row_ = a2;
          this.col_ = b2;
        };
        shaka.cea.Cea708Window.prototype.setPenBackgroundColor = function(a2) {
          this.backgroundColor_ = a2;
        };
        shaka.cea.Cea708Window.prototype.setPenTextColor = function(a2) {
          this.textColor_ = a2;
        };
        shaka.cea.Cea708Window.prototype.setPenUnderline = function(a2) {
          this.underline_ = a2;
        };
        shaka.cea.Cea708Window.prototype.setPenItalics = function(a2) {
          this.italics_ = a2;
        };
        shaka.cea.Cea708Window.prototype.resetPen = function() {
          this.col_ = this.row_ = 0;
          this.italics_ = this.underline_ = false;
          this.textColor_ = shaka.cea.CeaUtils.DEFAULT_TXT_COLOR;
          this.backgroundColor_ = shaka.cea.CeaUtils.DEFAULT_BG_COLOR;
        };
        shaka.cea.Cea708Window.prototype.setJustification = function(a2) {
          this.justification_ = a2;
        };
        shaka.cea.Cea708Window.prototype.display = function() {
          this.visible_ = true;
        };
        shaka.cea.Cea708Window.prototype.hide = function() {
          this.visible_ = false;
        };
        shaka.cea.Cea708Window.prototype.toggle = function() {
          this.visible_ = !this.visible_;
        };
        shaka.cea.Cea708Window.prototype.setStartTime = function(a2) {
          this.startTime_ = a2;
        };
        shaka.cea.Cea708Window.TextJustification = { LEFT: 0, RIGHT: 1, CENTER: 2, FULL: 3 };
        shaka.cea.Cea708Window.MAX_COLS = 42;
        shaka.cea.Cea708Window.MAX_ROWS = 15;
        shaka.cea.DtvccPacketBuilder = function() {
          this.builtPackets_ = [];
          this.currentPacketBeingBuilt_ = null;
          this.bytesLeftToAddInCurrentPacket_ = 0;
        };
        shaka.cea.DtvccPacketBuilder.prototype.addByte = function(a2) {
          a2.type === shaka.cea.DtvccPacketBuilder.DTVCC_PACKET_START ? (this.bytesLeftToAddInCurrentPacket_ = 2 * (a2.value & 63) - 1, this.currentPacketBeingBuilt_ = []) : this.currentPacketBeingBuilt_ && (0 < this.bytesLeftToAddInCurrentPacket_ && (this.currentPacketBeingBuilt_.push(a2), this.bytesLeftToAddInCurrentPacket_--), 0 === this.bytesLeftToAddInCurrentPacket_ && (a2 = new shaka.cea.DtvccPacket(this.currentPacketBeingBuilt_), this.builtPackets_.push(a2), this.currentPacketBeingBuilt_ = null, this.bytesLeftToAddInCurrentPacket_ = 0));
        };
        shaka.cea.DtvccPacketBuilder.prototype.getBuiltPackets = function() {
          return this.builtPackets_;
        };
        shaka.cea.DtvccPacketBuilder.prototype.clearBuiltPackets = function() {
          this.builtPackets_ = [];
        };
        shaka.cea.DtvccPacketBuilder.prototype.clear = function() {
          this.builtPackets_ = [];
          this.currentPacketBeingBuilt_ = [];
          this.bytesLeftToAddInCurrentPacket_ = 0;
        };
        shaka.cea.DtvccPacket = function(a2) {
          this.pos_ = 0;
          this.packetData_ = a2;
        };
        shaka.cea.DtvccPacket.prototype.hasMoreData = function() {
          return this.pos_ < this.packetData_.length;
        };
        shaka.cea.DtvccPacket.prototype.getPosition = function() {
          return this.pos_;
        };
        shaka.cea.DtvccPacket.prototype.readByte = function() {
          if (!this.hasMoreData())
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.BUFFER_READ_OUT_OF_BOUNDS);
          return this.packetData_[this.pos_++];
        };
        shaka.cea.DtvccPacket.prototype.skip = function(a2) {
          if (this.pos_ + a2 > this.packetData_.length)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.BUFFER_READ_OUT_OF_BOUNDS);
          this.pos_ += a2;
        };
        shaka.cea.DtvccPacketBuilder.DTVCC_PACKET_DATA = 2;
        shaka.cea.DtvccPacketBuilder.DTVCC_PACKET_START = 3;
        shaka.cea.Cea708Service = function(a2) {
          this.serviceNumber_ = a2;
          this.windows_ = [null, null, null, null, null, null, null, null];
          this.currentWindow_ = null;
        };
        shaka.cea.Cea708Service.prototype.handleCea708ControlCode = function(a2) {
          var b2 = a2.readByte(), c2 = b2.value;
          b2 = b2.pts;
          if (c2 === shaka.cea.Cea708Service.EXT_CEA708_CTRL_CODE_BYTE1) {
            var d2 = a2.readByte();
            c2 = c2 << 16 | d2.value;
          }
          if (0 <= c2 && 31 >= c2)
            return this.handleC0_(c2, b2);
          if (128 <= c2 && 159 >= c2)
            return this.handleC1_(a2, c2, b2);
          4096 <= c2 && 4127 >= c2 ? this.handleC2_(a2, c2 & 255) : 4224 <= c2 && 4255 >= c2 ? this.handleC3_(a2, c2 & 255) : 32 <= c2 && 127 >= c2 ? this.handleG0_(c2) : 160 <= c2 && 255 >= c2 ? this.handleG1_(c2) : 4128 <= c2 && 4223 >= c2 ? this.handleG2_(c2 & 255) : 4256 <= c2 && 4351 >= c2 && this.handleG3_(c2 & 255);
          return null;
        };
        shaka.cea.Cea708Service.prototype.handleG0_ = function(a2) {
          this.currentWindow_ && (127 === a2 ? this.currentWindow_.setCharacter("\u266A") : this.currentWindow_.setCharacter(String.fromCharCode(a2)));
        };
        shaka.cea.Cea708Service.prototype.handleG1_ = function(a2) {
          this.currentWindow_ && this.currentWindow_.setCharacter(String.fromCharCode(a2));
        };
        shaka.cea.Cea708Service.prototype.handleG2_ = function(a2) {
          this.currentWindow_ && (shaka.cea.Cea708Service.G2Charset.has(a2) ? (a2 = shaka.cea.Cea708Service.G2Charset.get(a2), this.currentWindow_.setCharacter(a2)) : this.currentWindow_.setCharacter("_"));
        };
        shaka.cea.Cea708Service.prototype.handleG3_ = function(a2) {
          this.currentWindow_ && (160 != a2 ? this.currentWindow_.setCharacter("_") : this.currentWindow_.setCharacter("[CC]"));
        };
        shaka.cea.Cea708Service.prototype.handleC0_ = function(a2, b2) {
          if (!this.currentWindow_)
            return null;
          var c2 = this.currentWindow_, d2 = null;
          switch (a2) {
            case shaka.cea.Cea708Service.ASCII_BACKSPACE:
              c2.backspace();
              break;
            case shaka.cea.Cea708Service.ASCII_CARRIAGE_RETURN:
              c2.isVisible() && (d2 = c2.forceEmit(b2, this.serviceNumber_));
              c2.carriageReturn();
              break;
            case shaka.cea.Cea708Service.ASCII_HOR_CARRIAGE_RETURN:
              c2.isVisible() && (d2 = c2.forceEmit(b2, this.serviceNumber_));
              c2.horizontalCarriageReturn();
              break;
            case shaka.cea.Cea708Service.ASCII_FORM_FEED:
              c2.isVisible() && (d2 = c2.forceEmit(b2, this.serviceNumber_)), c2.resetMemory(), c2.setPenLocation(0, 0);
          }
          return d2;
        };
        shaka.cea.Cea708Service.prototype.handleC1_ = function(a2, b2, c2) {
          if (128 <= b2 && 135 >= b2)
            this.setCurrentWindow_(b2 & 7);
          else {
            if (136 === b2)
              return a2 = a2.readByte().value, this.clearWindows_(a2, c2);
            if (137 === b2)
              a2 = a2.readByte().value, this.displayWindows_(a2, c2);
            else {
              if (138 === b2)
                return a2 = a2.readByte().value, this.hideWindows_(a2, c2);
              if (139 === b2)
                return a2 = a2.readByte().value, this.toggleWindows_(a2, c2);
              if (140 === b2)
                return a2 = a2.readByte().value, this.deleteWindows_(a2, c2);
              if (143 === b2)
                return this.reset_(c2);
              144 === b2 ? this.setPenAttributes_(a2) : 145 === b2 ? this.setPenColor_(a2) : 146 === b2 ? this.setPenLocation_(a2) : 151 === b2 ? this.setWindowAttributes_(a2) : 152 <= b2 && 159 >= b2 && this.defineWindow_(a2, (b2 & 15) - 8, c2);
            }
          }
          return null;
        };
        shaka.cea.Cea708Service.prototype.handleC2_ = function(a2, b2) {
          8 <= b2 && 15 >= b2 ? a2.skip(1) : 16 <= b2 && 23 >= b2 ? a2.skip(2) : 24 <= b2 && 31 >= b2 && a2.skip(3);
        };
        shaka.cea.Cea708Service.prototype.handleC3_ = function(a2, b2) {
          128 <= b2 && 135 >= b2 ? a2.skip(4) : 136 <= b2 && 143 >= b2 && a2.skip(5);
        };
        shaka.cea.Cea708Service.prototype.setCurrentWindow_ = function(a2) {
          this.windows_[a2] && (this.currentWindow_ = this.windows_[a2]);
        };
        shaka.cea.Cea708Service.prototype.getSpecifiedWindowIds_ = function(a2) {
          for (var b2 = [], c2 = 0; 8 > c2; c2++)
            1 === (a2 & 1) && this.windows_[c2] && b2.push(c2), a2 >>= 1;
          return b2;
        };
        shaka.cea.Cea708Service.prototype.clearWindows_ = function(a2, b2) {
          for (var c2 = null, d2 = $jscomp.makeIterator(this.getSpecifiedWindowIds_(a2)), e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = this.windows_[e2.value], e2.isVisible() && (c2 = e2.forceEmit(b2, this.serviceNumber_)), e2.resetMemory();
          return c2;
        };
        shaka.cea.Cea708Service.prototype.displayWindows_ = function(a2, b2) {
          for (var c2 = $jscomp.makeIterator(this.getSpecifiedWindowIds_(a2)), d2 = c2.next(); !d2.done; d2 = c2.next())
            d2 = this.windows_[d2.value], d2.isVisible() || d2.setStartTime(b2), d2.display();
        };
        shaka.cea.Cea708Service.prototype.hideWindows_ = function(a2, b2) {
          for (var c2 = null, d2 = $jscomp.makeIterator(this.getSpecifiedWindowIds_(a2)), e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = this.windows_[e2.value], e2.isVisible() && (c2 = e2.forceEmit(b2, this.serviceNumber_)), e2.hide();
          return c2;
        };
        shaka.cea.Cea708Service.prototype.toggleWindows_ = function(a2, b2) {
          for (var c2 = null, d2 = $jscomp.makeIterator(this.getSpecifiedWindowIds_(a2)), e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = this.windows_[e2.value], e2.isVisible() ? c2 = e2.forceEmit(b2, this.serviceNumber_) : e2.setStartTime(b2), e2.toggle();
          return c2;
        };
        shaka.cea.Cea708Service.prototype.deleteWindows_ = function(a2, b2) {
          for (var c2 = null, d2 = $jscomp.makeIterator(this.getSpecifiedWindowIds_(a2)), e2 = d2.next(); !e2.done; e2 = d2.next()) {
            e2 = e2.value;
            var f2 = this.windows_[e2];
            f2.isVisible() && (c2 = f2.forceEmit(b2, this.serviceNumber_));
            this.windows_[e2] = null;
          }
          return c2;
        };
        shaka.cea.Cea708Service.prototype.reset_ = function(a2) {
          a2 = this.deleteWindows_(255, a2);
          this.clear();
          return a2;
        };
        shaka.cea.Cea708Service.prototype.clear = function() {
          this.currentWindow_ = null;
          this.windows_ = [null, null, null, null, null, null, null, null];
        };
        shaka.cea.Cea708Service.prototype.setPenAttributes_ = function(a2) {
          a2.skip(1);
          a2 = a2.readByte().value;
          if (this.currentWindow_) {
            var b2 = 0 < (a2 & 64);
            this.currentWindow_.setPenItalics(0 < (a2 & 128));
            this.currentWindow_.setPenUnderline(b2);
          }
        };
        shaka.cea.Cea708Service.prototype.setPenColor_ = function(a2) {
          var b2 = a2.readByte().value, c2 = a2.readByte().value;
          a2.skip(1);
          if (this.currentWindow_) {
            a2 = c2 & 3;
            var d2 = (c2 & 12) >> 2;
            c2 = (c2 & 48) >> 4;
            b2 = this.rgbColorToHex_((b2 & 48) >> 4, (b2 & 12) >> 2, b2 & 3);
            a2 = this.rgbColorToHex_(c2, d2, a2);
            this.currentWindow_.setPenTextColor(b2);
            this.currentWindow_.setPenBackgroundColor(a2);
          }
        };
        shaka.cea.Cea708Service.prototype.setPenLocation_ = function(a2) {
          var b2 = a2.readByte().value;
          a2 = a2.readByte().value;
          this.currentWindow_ && this.currentWindow_.setPenLocation(b2 & 15, a2 & 63);
        };
        shaka.cea.Cea708Service.prototype.setWindowAttributes_ = function(a2) {
          a2.skip(1);
          a2.skip(1);
          var b2 = a2.readByte().value;
          a2.skip(1);
          this.currentWindow_ && this.currentWindow_.setJustification(b2 & 3);
        };
        shaka.cea.Cea708Service.prototype.defineWindow_ = function(a2, b2, c2) {
          var d2 = null !== this.windows_[b2];
          if (!d2) {
            var e2 = new shaka.cea.Cea708Window(b2);
            e2.setStartTime(c2);
            this.windows_[b2] = e2;
          }
          var f2 = a2.readByte().value, g = a2.readByte().value;
          c2 = a2.readByte().value;
          var h = a2.readByte().value;
          e2 = a2.readByte().value;
          a2 = a2.readByte().value;
          f2 = 0 < (f2 & 32);
          var k2 = g & 127;
          g = 0 < (g & 128);
          var l = (h & 15) + 1;
          h = (h & 240) >> 4;
          e2 = (e2 & 63) + 1;
          d2 && 0 === (a2 & 7) || this.windows_[b2].resetPen();
          this.windows_[b2].defineWindow(f2, k2, c2, h, g, l, e2);
          this.currentWindow_ = this.windows_[b2];
        };
        shaka.cea.Cea708Service.prototype.rgbColorToHex_ = function(a2, b2, c2) {
          var d2 = { 0: 0, 1: 0, 2: 1, 3: 1 };
          a2 = d2[a2];
          b2 = d2[b2];
          c2 = d2[c2];
          return shaka.cea.Cea708Service.Colors[a2 << 2 | b2 << 1 | c2];
        };
        shaka.cea.Cea708Service.ASCII_BACKSPACE = 8;
        shaka.cea.Cea708Service.ASCII_FORM_FEED = 12;
        shaka.cea.Cea708Service.ASCII_CARRIAGE_RETURN = 13;
        shaka.cea.Cea708Service.ASCII_HOR_CARRIAGE_RETURN = 14;
        shaka.cea.Cea708Service.EXT_CEA708_CTRL_CODE_BYTE1 = 16;
        shaka.cea.Cea708Service.G2Charset = /* @__PURE__ */ new Map([[32, " "], [33, "\xA0"], [37, "\u2026"], [42, "\u0160"], [44, "\u0152"], [48, "\u2588"], [49, "\u2018"], [50, "\u2019"], [51, "\u201C"], [52, "\u201D"], [53, "\u2022"], [57, "\u2122"], [58, "\u0161"], [60, "\u0153"], [61, "\u2120"], [63, "\u0178"], [118, "\u215B"], [119, "\u215C"], [120, "\u215D"], [121, "\u215E"], [122, "\u2502"], [123, "\u2510"], [124, "\u2514"], [125, "\u2500"], [126, "\u2518"], [127, "\u250C"]]);
        shaka.cea.Cea708Service.Colors = "black blue green cyan red magenta yellow white".split(" ");
        shaka.cea.CeaDecoder = function() {
          this.cea608DataArray_ = [];
          this.cea708DataArray_ = [];
          this.dtvccPacketBuilder_ = new shaka.cea.DtvccPacketBuilder();
          this.badFrames_ = 0;
          this.cea608ModeToStream_ = /* @__PURE__ */ new Map([["CC1", new shaka.cea.Cea608DataChannel(0, 0)], ["CC2", new shaka.cea.Cea608DataChannel(0, 1)], ["CC3", new shaka.cea.Cea608DataChannel(1, 0)], ["CC4", new shaka.cea.Cea608DataChannel(1, 1)]]);
          this.currentField2Channel_ = this.currentField1Channel_ = 0;
          this.serviceNumberToService_ = /* @__PURE__ */ new Map();
          this.reset();
        };
        shaka.cea.CeaDecoder.prototype.clear = function() {
          this.badFrames_ = 0;
          this.cea608DataArray_ = [];
          this.cea708DataArray_ = [];
          this.dtvccPacketBuilder_.clear();
          this.reset();
          for (var a2 = $jscomp.makeIterator(this.serviceNumberToService_.values()), b2 = a2.next(); !b2.done; b2 = a2.next())
            b2.value.clear();
        };
        shaka.cea.CeaDecoder.prototype.reset = function() {
          this.currentField2Channel_ = this.currentField1Channel_ = 0;
          for (var a2 = $jscomp.makeIterator(this.cea608ModeToStream_.values()), b2 = a2.next(); !b2.done; b2 = a2.next())
            b2.value.reset();
        };
        shaka.cea.CeaDecoder.prototype.extract = function(a2, b2) {
          var c2 = new shaka.util.DataViewReader(a2, shaka.util.DataViewReader.Endianness.BIG_ENDIAN);
          if (c2.readUint8() === shaka.cea.CeaDecoder.USA_COUNTRY_CODE && c2.readUint16() === shaka.cea.CeaDecoder.ATSC_PROVIDER_CODE && c2.readUint32() === shaka.cea.CeaDecoder.ATSC1_USER_IDENTIFIER && 3 === c2.readUint8()) {
            var d2 = c2.readUint8();
            if (0 !== (d2 & 64)) {
              d2 &= 31;
              c2.skip(1);
              for (var e2 = 0; e2 < d2; e2++) {
                var f2 = c2.readUint8(), g = (f2 & 4) >> 2, h = c2.readUint8(), k2 = c2.readUint8();
                g && (f2 &= 3, f2 === shaka.cea.CeaDecoder.NTSC_CC_FIELD_1 || f2 === shaka.cea.CeaDecoder.NTSC_CC_FIELD_2 ? this.cea608DataArray_.push({ pts: b2, type: f2, ccData1: h, ccData2: k2, order: this.cea608DataArray_.length }) : (this.cea708DataArray_.push({ pts: b2, type: f2, value: h, order: this.cea708DataArray_.length }), this.cea708DataArray_.push({ pts: b2, type: shaka.cea.DtvccPacketBuilder.DTVCC_PACKET_DATA, value: k2, order: this.cea708DataArray_.length })));
              }
            }
          }
        };
        shaka.cea.CeaDecoder.prototype.decode = function() {
          var a2 = [], b2 = function(d2, e2) {
            return d2.pts - e2.pts || d2.order - e2.order;
          };
          this.cea608DataArray_.sort(b2);
          this.cea708DataArray_.sort(b2);
          b2 = $jscomp.makeIterator(this.cea608DataArray_);
          for (var c2 = b2.next(); !c2.done; c2 = b2.next())
            (c2 = this.decodeCea608_(c2.value)) && a2.push(c2);
          b2 = $jscomp.makeIterator(this.cea708DataArray_);
          for (c2 = b2.next(); !c2.done; c2 = b2.next())
            this.dtvccPacketBuilder_.addByte(c2.value);
          b2 = this.dtvccPacketBuilder_.getBuiltPackets();
          b2 = $jscomp.makeIterator(b2);
          for (c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = this.decodeCea708_(c2.value), a2.push.apply(a2, $jscomp.arrayFromIterable(c2));
          this.dtvccPacketBuilder_.clearBuiltPackets();
          this.cea608DataArray_ = [];
          this.cea708DataArray_ = [];
          return a2;
        };
        shaka.cea.CeaDecoder.prototype.decodeCea608_ = function(a2) {
          var b2 = a2.type;
          if (shaka.cea.Cea608DataChannel.isControlCode(a2.ccData1)) {
            var c2 = a2.ccData1 >> 3 & 1;
            0 === b2 ? this.currentField1Channel_ = c2 : this.currentField2Channel_ = c2;
          }
          b2 = this.cea608ModeToStream_.get("CC" + (b2 << 1 | (b2 ? this.currentField2Channel_ : this.currentField1Channel_) + 1));
          if (255 === a2.ccData1 && 255 === a2.ccData2 || !a2.ccData1 && !a2.ccData2 || !this.isOddParity_(a2.ccData1) || !this.isOddParity_(a2.ccData2))
            return 45 <= ++this.badFrames_ && this.reset(), null;
          this.badFrames_ = 0;
          a2.ccData1 &= 127;
          a2.ccData2 &= 127;
          if (!a2.ccData1 && !a2.ccData2)
            return null;
          c2 = null;
          shaka.cea.Cea608DataChannel.isControlCode(a2.ccData1) ? c2 = b2.handleControlCode(a2) : b2.handleBasicNorthAmericanChar(a2.ccData1, a2.ccData2);
          return c2;
        };
        shaka.cea.CeaDecoder.prototype.decodeCea708_ = function(a2) {
          var b2 = [];
          try {
            for (; a2.hasMoreData(); ) {
              var c2 = a2.readByte().value, d2 = (c2 & 224) >> 5, e2 = c2 & 31;
              7 === d2 && 0 != e2 && (d2 = a2.readByte().value & 63);
              if (0 != d2) {
                if (!this.serviceNumberToService_.has(d2)) {
                  var f2 = new shaka.cea.Cea708Service(d2);
                  this.serviceNumberToService_.set(d2, f2);
                }
                for (var g = this.serviceNumberToService_.get(d2), h = a2.getPosition(); a2.getPosition() - h < e2; ) {
                  var k2 = g.handleCea708ControlCode(a2);
                  k2 && b2.push(k2);
                }
              }
            }
          } catch (l) {
            if (l instanceof shaka.util.Error && l.code === shaka.util.Error.Code.BUFFER_READ_OUT_OF_BOUNDS)
              shaka.log.warnOnce(
                "CEA708_INVALID_DATA",
                "Buffer read out of bounds / invalid CEA-708 Data."
              );
            else
              throw l;
          }
          return b2;
        };
        shaka.cea.CeaDecoder.prototype.isOddParity_ = function(a2) {
          for (var b2 = 0; a2; )
            b2 ^= a2 & 1, a2 >>= 1;
          return 1 === b2;
        };
        shaka.cea.CeaDecoder.ATSC_PROVIDER_CODE = 49;
        shaka.cea.CeaDecoder.ATSC1_USER_IDENTIFIER = 1195456820;
        shaka.cea.CeaDecoder.NTSC_CC_FIELD_1 = 0;
        shaka.cea.CeaDecoder.NTSC_CC_FIELD_2 = 1;
        shaka.cea.CeaDecoder.USA_COUNTRY_CODE = 181;
        shaka.cea.ICeaParser = function() {
        };
        shaka.cea.ICeaParser.prototype.init = function(a2) {
        };
        shaka.cea.ICeaParser.prototype.parse = function(a2) {
        };
        shaka.cea.ICeaParser.NALU_TYPE_SEI = 6;
        shaka.cea.ICeaParser.DEFAULT_TIMESCALE_VALUE = 9e4;
        shaka.cea.SeiProcessor = function() {
        };
        shaka.cea.SeiProcessor.prototype.process = function(a2) {
          var b2 = [];
          a2 = this.removeEmu(a2);
          for (var c2 = 0; c2 < a2.length; ) {
            for (var d2 = 0; 255 == a2[c2]; )
              d2 += 255, c2++;
            d2 += a2[c2++];
            for (var e2 = 0; 255 == a2[c2]; )
              e2 += 255, c2++;
            e2 += a2[c2++];
            4 == d2 && b2.push(a2.subarray(c2, c2 + e2));
            c2 += e2;
          }
          return b2;
        };
        shaka.cea.SeiProcessor.prototype.removeEmu = function(a2) {
          for (var b2 = a2, c2 = a2 = 0; c2 < b2.length; )
            2 == a2 && 3 == b2[c2] ? (a2 = 0, b2 = [].concat($jscomp.arrayFromIterable(b2)), b2.splice(c2, 1), b2 = new Uint8Array(b2)) : 0 == b2[c2] ? a2++ : a2 = 0, c2++;
          return b2;
        };
        shaka.util.Mp4BoxParsers = function() {
        };
        shaka.util.Mp4BoxParsers.parseTFHD = function(a2, b2) {
          var c2 = null, d2 = null, e2 = a2.readUint32();
          b2 & 1 && a2.skip(8);
          b2 & 2 && a2.skip(4);
          b2 & 8 && (c2 = a2.readUint32());
          b2 & 16 && (d2 = a2.readUint32());
          return { trackId: e2, defaultSampleDuration: c2, defaultSampleSize: d2 };
        };
        shaka.util.Mp4BoxParsers.parseTFDT = function(a2, b2) {
          return { baseMediaDecodeTime: 1 == b2 ? a2.readUint64() : a2.readUint32() };
        };
        shaka.util.Mp4BoxParsers.parseMDHD = function(a2, b2) {
          1 == b2 ? (a2.skip(8), a2.skip(8)) : (a2.skip(4), a2.skip(4));
          return { timescale: a2.readUint32() };
        };
        shaka.util.Mp4BoxParsers.parseTREX = function(a2) {
          a2.skip(4);
          a2.skip(4);
          var b2 = a2.readUint32();
          a2 = a2.readUint32();
          return { defaultSampleDuration: b2, defaultSampleSize: a2 };
        };
        shaka.util.Mp4BoxParsers.parseTRUN = function(a2, b2, c2) {
          var d2 = a2.readUint32(), e2 = [];
          c2 & 1 && a2.skip(4);
          c2 & 4 && a2.skip(4);
          for (var f2 = 0; f2 < d2; f2++) {
            var g = { sampleDuration: null, sampleSize: null, sampleCompositionTimeOffset: null };
            c2 & 256 && (g.sampleDuration = a2.readUint32());
            c2 & 512 && (g.sampleSize = a2.readUint32());
            c2 & 1024 && a2.skip(4);
            c2 & 2048 && (g.sampleCompositionTimeOffset = 0 == b2 ? a2.readUint32() : a2.readInt32());
            e2.push(g);
          }
          return { sampleCount: d2, sampleData: e2 };
        };
        shaka.util.Mp4BoxParsers.parseTKHD = function(a2, b2) {
          1 == b2 ? (a2.skip(8), a2.skip(8)) : (a2.skip(4), a2.skip(4));
          return { trackId: a2.readUint32() };
        };
        shaka.cea.Mp4CeaParser = function() {
          this.seiProcessor_ = new shaka.cea.SeiProcessor();
          this.trackIdToTimescale_ = /* @__PURE__ */ new Map();
          this.defaultSampleSize_ = this.defaultSampleDuration_ = 0;
        };
        shaka.cea.Mp4CeaParser.prototype.init = function(a2) {
          var b2 = this, c2 = shaka.util.Mp4Parser, d2 = [], e2 = [];
          new c2().box("moov", c2.children).box("mvex", c2.children).fullBox("trex", function(f2) {
            f2 = shaka.util.Mp4BoxParsers.parseTREX(f2.reader);
            b2.defaultSampleDuration_ = f2.defaultSampleDuration;
            b2.defaultSampleSize_ = f2.defaultSampleSize;
          }).box("trak", c2.children).fullBox("tkhd", function(f2) {
            goog.asserts.assert(null != f2.version, "TKHD is a full box and should have a valid version.");
            f2 = shaka.util.Mp4BoxParsers.parseTKHD(
              f2.reader,
              f2.version
            );
            d2.push(f2.trackId);
          }).box("mdia", c2.children).fullBox("mdhd", function(f2) {
            goog.asserts.assert(null != f2.version, "MDHD is a full box and should have a valid version.");
            f2 = shaka.util.Mp4BoxParsers.parseMDHD(f2.reader, f2.version);
            e2.push(f2.timescale);
          }).parse(a2, true);
          if (!d2.length || !e2.length || d2.length != e2.length)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_MP4_CEA);
          d2.forEach(function(f2, g) {
            b2.trackIdToTimescale_.set(f2, e2[g]);
          });
        };
        shaka.cea.Mp4CeaParser.prototype.parse = function(a2) {
          var b2 = this, c2 = shaka.util.Mp4Parser, d2 = [], e2 = this.defaultSampleDuration_, f2 = this.defaultSampleSize_, g = [], h = null, k2 = shaka.cea.ICeaParser.DEFAULT_TIMESCALE_VALUE;
          new c2().box("moof", c2.children).box("traf", c2.children).fullBox("trun", function(l) {
            goog.asserts.assert(null != l.version && null != l.flags, "TRUN is a full box and should have a valid version & flags.");
            g = shaka.util.Mp4BoxParsers.parseTRUN(l.reader, l.version, l.flags).sampleData;
          }).fullBox("tfhd", function(l) {
            goog.asserts.assert(null != l.flags, "TFHD is a full box and should have valid flags.");
            l = shaka.util.Mp4BoxParsers.parseTFHD(l.reader, l.flags);
            e2 = l.defaultSampleDuration || b2.defaultSampleDuration_;
            f2 = l.defaultSampleSize || b2.defaultSampleSize_;
            l = l.trackId;
            b2.trackIdToTimescale_.has(l) && (k2 = b2.trackIdToTimescale_.get(l));
          }).fullBox("tfdt", function(l) {
            goog.asserts.assert(null != l.version, "TFDT is a full box and should have a valid version.");
            h = shaka.util.Mp4BoxParsers.parseTFDT(l.reader, l.version).baseMediaDecodeTime;
          }).box("mdat", function(l) {
            if (null === h)
              throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_MP4_CEA);
            b2.parseMdat_(l.reader, h, k2, e2, f2, g, d2);
          }).parse(a2, false);
          return d2;
        };
        shaka.cea.Mp4CeaParser.prototype.parseMdat_ = function(a2, b2, c2, d2, e2, f2, g) {
          var h = 0, k2 = e2;
          for (f2.length && (k2 = f2[0].sampleSize || e2); a2.hasMoreData(); ) {
            var l = a2.readUint32();
            if ((a2.readUint8() & 31) == shaka.cea.ICeaParser.NALU_TYPE_SEI) {
              var m = 0;
              f2.length > h && (m = f2[h].sampleCompositionTimeOffset || 0);
              m = (b2 + m) / c2;
              for (var n = $jscomp.makeIterator(this.seiProcessor_.process(a2.readBytes(l - 1))), p = n.next(); !p.done; p = n.next())
                g.push({ packet: p.value, pts: m });
            } else
              try {
                a2.skip(l - 1);
              } catch (q) {
                break;
              }
            k2 -= l + 4;
            0 == k2 && (b2 = f2.length > h ? b2 + (f2[h].sampleDuration || d2) : b2 + d2, h++, k2 = f2.length > h ? f2[h].sampleSize || e2 : e2);
          }
        };
        shaka.media.IClosedCaptionParser = function() {
        };
        shaka.media.IClosedCaptionParser.prototype.init = function(a2) {
        };
        shaka.media.IClosedCaptionParser.prototype.parseFrom = function(a2) {
        };
        shaka.media.IClosedCaptionParser.prototype.reset = function() {
        };
        shaka.media.ClosedCaptionParser = function() {
          this.ceaParser_ = new shaka.cea.Mp4CeaParser();
          this.ceaDecoder_ = new shaka.cea.CeaDecoder();
        };
        shaka.media.ClosedCaptionParser.prototype.init = function(a2) {
          this.ceaParser_.init(a2);
        };
        shaka.media.ClosedCaptionParser.prototype.parseFrom = function(a2) {
          a2 = this.ceaParser_.parse(a2);
          a2 = $jscomp.makeIterator(a2);
          for (var b2 = a2.next(); !b2.done; b2 = a2.next()) {
            b2 = b2.value;
            var c2 = shaka.util.BufferUtils.toUint8(b2.packet);
            0 < c2.length && this.ceaDecoder_.extract(c2, b2.pts);
          }
          return this.ceaDecoder_.decode();
        };
        shaka.media.ClosedCaptionParser.prototype.reset = function() {
          this.ceaDecoder_.clear();
        };
        shaka.media.TimeRangesUtils = function() {
        };
        shaka.media.TimeRangesUtils.bufferStart = function(a2) {
          return !a2 || 1 == a2.length && 1e-6 > a2.end(0) - a2.start(0) ? null : 1 == a2.length && 0 > a2.start(0) ? 0 : a2.length ? a2.start(0) : null;
        };
        shaka.media.TimeRangesUtils.bufferEnd = function(a2) {
          return !a2 || 1 == a2.length && 1e-6 > a2.end(0) - a2.start(0) ? null : a2.length ? a2.end(a2.length - 1) : null;
        };
        shaka.media.TimeRangesUtils.isBuffered = function(a2, b2, c2) {
          c2 = void 0 === c2 ? 0 : c2;
          return !a2 || !a2.length || 1 == a2.length && 1e-6 > a2.end(0) - a2.start(0) || b2 > a2.end(a2.length - 1) ? false : b2 + c2 >= a2.start(0);
        };
        shaka.media.TimeRangesUtils.bufferedAheadOf = function(a2, b2) {
          if (!a2 || !a2.length || 1 == a2.length && 1e-6 > a2.end(0) - a2.start(0))
            return 0;
          for (var c2 = 0, d2 = $jscomp.makeIterator(shaka.media.TimeRangesUtils.getBufferedInfo(a2)), e2 = d2.next(); !e2.done; e2 = d2.next()) {
            var f2 = e2.value;
            e2 = f2.start;
            f2 = f2.end;
            f2 > b2 && (c2 += f2 - Math.max(e2, b2));
          }
          return c2;
        };
        shaka.media.TimeRangesUtils.getGapIndex = function(a2, b2, c2) {
          var d2 = shaka.media.TimeRangesUtils;
          if (!a2 || !a2.length || 1 == a2.length && 1e-6 > a2.end(0) - a2.start(0))
            return null;
          a2 = d2.getBufferedInfo(a2).findIndex(function(e2, f2, g) {
            return e2.start > b2 && (0 == f2 || g[f2 - 1].end - b2 <= c2);
          });
          return 0 <= a2 ? a2 : null;
        };
        shaka.media.TimeRangesUtils.getBufferedInfo = function(a2) {
          if (!a2)
            return [];
          for (var b2 = [], c2 = 0; c2 < a2.length; c2++)
            b2.push({ start: a2.start(c2), end: a2.end(c2) });
          return b2;
        };
        shaka.media.MediaSourceEngine = function(a2, b2, c2, d2) {
          var e2 = this;
          this.video_ = a2;
          this.textDisplayer_ = c2;
          this.sourceBuffers_ = {};
          this.sourceBufferTypes_ = {};
          this.expectedEncryption_ = {};
          this.textEngine_ = null;
          a2 = function(f2, g, h) {
          };
          this.onMetadata_ = d2 || a2;
          this.queues_ = {};
          this.eventManager_ = new shaka.util.EventManager();
          this.transmuxers_ = {};
          this.captionParser_ = b2;
          this.mediaSourceOpen_ = new shaka.util.PublicPromise();
          this.mediaSource_ = this.createMediaSource(this.mediaSourceOpen_);
          this.destroyer_ = new shaka.util.Destroyer(function() {
            return e2.doDestroy_();
          });
          this.url_ = "";
        };
        shaka.media.MediaSourceEngine.prototype.createMediaSource = function(a2) {
          var b2 = this, c2 = new MediaSource();
          this.eventManager_.listenOnce(c2, "sourceopen", function() {
            return b2.onSourceOpen_(a2);
          });
          this.url_ = shaka.media.MediaSourceEngine.createObjectURL(c2);
          this.video_.src = this.url_;
          return c2;
        };
        shaka.media.MediaSourceEngine.prototype.onSourceOpen_ = function(a2) {
          URL.revokeObjectURL(this.url_);
          a2.resolve();
        };
        shaka.media.MediaSourceEngine.isStreamSupported = function(a2) {
          var b2 = shaka.util.MimeUtils.getFullType(a2.mimeType, a2.codecs), c2 = shaka.util.MimeUtils.getExtendedType(a2);
          return shaka.text.TextEngine.isTypeSupported(b2) || MediaSource.isTypeSupported(c2) || shaka.media.Transmuxer.isSupported(b2, a2.type);
        };
        shaka.media.MediaSourceEngine.probeSupport = function() {
          for (var a2 = {}, b2 = $jscomp.makeIterator('video/mp4; codecs="avc1.42E01E",video/mp4; codecs="avc3.42E01E",video/mp4; codecs="hev1.1.6.L93.90",video/mp4; codecs="hvc1.1.6.L93.90",video/mp4; codecs="hev1.2.4.L153.B0"; eotf="smpte2084",video/mp4; codecs="hvc1.2.4.L153.B0"; eotf="smpte2084",video/mp4; codecs="vp9",video/mp4; codecs="vp09.00.10.08",video/mp4; codecs="av01.0.01M.08",audio/mp4; codecs="mp4a.40.2",audio/mp4; codecs="ac-3",audio/mp4; codecs="ec-3",audio/mp4; codecs="opus",audio/mp4; codecs="flac",video/webm; codecs="vp8",video/webm; codecs="vp9",video/webm; codecs="vp09.00.10.08",audio/webm; codecs="vorbis",audio/webm; codecs="opus",video/mp2t; codecs="avc1.42E01E",video/mp2t; codecs="avc3.42E01E",video/mp2t; codecs="hvc1.1.6.L93.90",video/mp2t; codecs="mp4a.40.2",video/mp2t; codecs="ac-3",video/mp2t; codecs="ec-3",text/vtt,application/mp4; codecs="wvtt",application/ttml+xml,application/mp4; codecs="stpp"'.split(",")), c2 = b2.next(); !c2.done; c2 = b2.next()) {
            c2 = c2.value;
            shaka.util.Platform.supportsMediaSource() ? shaka.text.TextEngine.isTypeSupported(c2) ? a2[c2] = true : a2[c2] = MediaSource.isTypeSupported(c2) || shaka.media.Transmuxer.isSupported(c2) : a2[c2] = shaka.util.Platform.supportsMediaType(c2);
            var d2 = c2.split(";")[0];
            a2[d2] = a2[d2] || a2[c2];
          }
          return a2;
        };
        shaka.media.MediaSourceEngine.prototype.destroy = function() {
          return this.destroyer_.destroy();
        };
        shaka.media.MediaSourceEngine.prototype.doDestroy_ = function() {
          var a2 = this, b2, c2, d2, e2, f2, g, h, k2, l, m;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(n) {
            if (1 == n.nextAddress) {
              b2 = shaka.util.Functional;
              c2 = [];
              for (d2 in a2.queues_)
                for (e2 = a2.queues_[d2], f2 = e2[0], a2.queues_[d2] = e2.slice(0, 1), f2 && c2.push(f2.p["catch"](b2.noop)), g = $jscomp.makeIterator(e2.slice(1)), h = g.next(); !h.done; h = g.next())
                  k2 = h.value, k2.p.reject(shaka.util.Destroyer.destroyedError());
              a2.textEngine_ && c2.push(a2.textEngine_.destroy());
              a2.textDisplayer_ && c2.push(a2.textDisplayer_.destroy());
              for (l in a2.transmuxers_)
                c2.push(a2.transmuxers_[l].destroy());
              return n.yield(Promise.all(c2), 2);
            }
            a2.eventManager_ && (a2.eventManager_.release(), a2.eventManager_ = null);
            a2.video_ && (a2.video_.removeAttribute("src"), a2.video_.load(), a2.video_ = null);
            a2.mediaSource_ = null;
            a2.textEngine_ = null;
            a2.textDisplayer_ = null;
            a2.sourceBuffers_ = {};
            a2.transmuxers_ = {};
            a2.captionParser_ = null;
            if (goog.DEBUG)
              for (m in a2.queues_)
                goog.asserts.assert(0 == a2.queues_[m].length, m + " queue should be empty after destroy!");
            a2.queues_ = {};
            n.jumpToEnd();
          });
        };
        shaka.media.MediaSourceEngine.prototype.open = function() {
          return this.mediaSourceOpen_;
        };
        shaka.media.MediaSourceEngine.prototype.init = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            if (1 == m.nextAddress)
              return d2 = shaka.util.ManifestParserUtils.ContentType, m.yield(c2.mediaSourceOpen_, 2);
            e2 = {};
            f2 = $jscomp.makeIterator(a2.keys());
            for (g = f2.next(); !g.done; e2 = { $jscomp$loop$prop$contentType$595: e2.$jscomp$loop$prop$contentType$595 }, g = f2.next())
              e2.$jscomp$loop$prop$contentType$595 = g.value, h = a2.get(e2.$jscomp$loop$prop$contentType$595), goog.asserts.assert(
                shaka.media.MediaSourceEngine.isStreamSupported(h),
                "Type negotiation should happen before MediaSourceEngine.init!"
              ), k2 = shaka.util.MimeUtils.getFullType(h.mimeType, h.codecs), e2.$jscomp$loop$prop$contentType$595 == d2.TEXT ? c2.reinitText(k2) : (!b2 && MediaSource.isTypeSupported(k2) || !shaka.media.Transmuxer.isSupported(k2, e2.$jscomp$loop$prop$contentType$595) || (c2.transmuxers_[e2.$jscomp$loop$prop$contentType$595] = new shaka.media.Transmuxer(), k2 = shaka.media.Transmuxer.convertTsCodecs(e2.$jscomp$loop$prop$contentType$595, k2)), l = c2.mediaSource_.addSourceBuffer(k2), c2.eventManager_.listen(
                l,
                "error",
                function(n) {
                  return function() {
                    return c2.onError_(n.$jscomp$loop$prop$contentType$595);
                  };
                }(e2)
              ), c2.eventManager_.listen(l, "updateend", function(n) {
                return function() {
                  return c2.onUpdateEnd_(n.$jscomp$loop$prop$contentType$595);
                };
              }(e2)), c2.sourceBuffers_[e2.$jscomp$loop$prop$contentType$595] = l, c2.sourceBufferTypes_[e2.$jscomp$loop$prop$contentType$595] = k2, c2.queues_[e2.$jscomp$loop$prop$contentType$595] = [], c2.expectedEncryption_[e2.$jscomp$loop$prop$contentType$595] = !!h.drmInfos.length);
            m.jumpToEnd();
          });
        };
        shaka.media.MediaSourceEngine.prototype.reinitText = function(a2) {
          this.textEngine_ || (this.textEngine_ = new shaka.text.TextEngine(this.textDisplayer_));
          this.textEngine_.initParser(a2);
        };
        shaka.media.MediaSourceEngine.prototype.ended = function() {
          return this.mediaSource_ ? "ended" == this.mediaSource_.readyState : true;
        };
        shaka.media.MediaSourceEngine.prototype.bufferStart = function(a2) {
          return a2 == shaka.util.ManifestParserUtils.ContentType.TEXT ? this.textEngine_.bufferStart() : shaka.media.TimeRangesUtils.bufferStart(this.getBuffered_(a2));
        };
        shaka.media.MediaSourceEngine.prototype.bufferEnd = function(a2) {
          return a2 == shaka.util.ManifestParserUtils.ContentType.TEXT ? this.textEngine_.bufferEnd() : shaka.media.TimeRangesUtils.bufferEnd(this.getBuffered_(a2));
        };
        shaka.media.MediaSourceEngine.prototype.isBuffered = function(a2, b2, c2) {
          if (a2 == shaka.util.ManifestParserUtils.ContentType.TEXT)
            return this.textEngine_.isBuffered(b2);
          a2 = this.getBuffered_(a2);
          return shaka.media.TimeRangesUtils.isBuffered(a2, b2, c2);
        };
        shaka.media.MediaSourceEngine.prototype.bufferedAheadOf = function(a2, b2) {
          if (a2 == shaka.util.ManifestParserUtils.ContentType.TEXT)
            return this.textEngine_.bufferedAheadOf(b2);
          var c2 = this.getBuffered_(a2);
          return shaka.media.TimeRangesUtils.bufferedAheadOf(c2, b2);
        };
        shaka.media.MediaSourceEngine.prototype.getBufferedInfo = function() {
          var a2 = shaka.util.ManifestParserUtils.ContentType, b2 = shaka.media.TimeRangesUtils;
          a2 = { total: b2.getBufferedInfo(this.video_.buffered), audio: b2.getBufferedInfo(this.getBuffered_(a2.AUDIO)), video: b2.getBufferedInfo(this.getBuffered_(a2.VIDEO)), text: [] };
          if (this.textEngine_) {
            b2 = this.textEngine_.bufferStart();
            var c2 = this.textEngine_.bufferEnd();
            null != b2 && null != c2 && a2.text.push({ start: b2, end: c2 });
          }
          return a2;
        };
        shaka.media.MediaSourceEngine.prototype.getBuffered_ = function(a2) {
          try {
            return this.sourceBuffers_[a2].buffered;
          } catch (b2) {
            return a2 in this.sourceBuffers_ && shaka.log.error("failed to get buffered range for " + a2, b2), null;
          }
        };
        shaka.media.MediaSourceEngine.prototype.appendBuffer = function(a2, b2, c2, d2, e2) {
          var f2 = this, g, h, k2, l, m, n, p, q;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(r) {
            if (1 == r.nextAddress) {
              g = shaka.util.ManifestParserUtils.ContentType;
              if (a2 == g.TEXT)
                return r.yield(f2.textEngine_.appendBuffer(b2, c2, d2), 0);
              if (f2.transmuxers_[a2])
                return r.yield(f2.transmuxers_[a2].transmux(b2), 10);
              if (e2)
                return f2.textEngine_ || f2.reinitText("text/vtt"), null == c2 && null == d2 ? f2.captionParser_.init(b2) : (h = f2.captionParser_.parseFrom(b2), h.length && (k2 = f2.sourceBuffers_[g.VIDEO].timestampOffset, f2.textEngine_.storeAndAppendClosedCaptions(h, c2, d2, k2))), b2 = f2.workAroundBrokenPlatforms_(b2, c2, a2), r.yield(f2.enqueueOperation_(a2, function() {
                  return f2.append_(a2, b2);
                }), 0);
              b2 = f2.workAroundBrokenPlatforms_(b2, c2, a2);
              return r.yield(f2.enqueueOperation_(a2, function() {
                return f2.append_(a2, b2);
              }), 0);
            }
            l = r.yieldResult;
            f2.textEngine_ || f2.reinitText("text/vtt");
            l.metadata && (m = f2.sourceBuffers_[a2].timestampOffset, f2.onMetadata_(l.metadata, m, d2));
            l.captions && l.captions.length && (n = f2.sourceBuffers_[g.VIDEO].timestampOffset, p = f2.textEngine_.convertMuxjsCaptionsToShakaCaptions(l.captions), f2.textEngine_.storeAndAppendClosedCaptions(p, c2, d2, n));
            q = l.data;
            q = f2.workAroundBrokenPlatforms_(q, c2, a2);
            return r.yield(f2.enqueueOperation_(a2, function() {
              return f2.append_(a2, q);
            }), 0);
          });
        };
        shaka.media.MediaSourceEngine.prototype.setSelectedClosedCaptionId = function(a2) {
          var b2 = this.bufferEnd(shaka.util.ManifestParserUtils.ContentType.VIDEO) || 0;
          this.textEngine_.setSelectedClosedCaptionId(a2, b2);
        };
        shaka.media.MediaSourceEngine.prototype.clearSelectedClosedCaptionId = function() {
          this.textEngine_ && this.textEngine_.setSelectedClosedCaptionId("", 0);
        };
        shaka.media.MediaSourceEngine.prototype.remove = function(a2, b2, c2) {
          var d2 = this, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            e2 = shaka.util.ManifestParserUtils.ContentType;
            return a2 == e2.TEXT ? f2.yield(d2.textEngine_.remove(b2, c2), 0) : f2.yield(d2.enqueueOperation_(a2, function() {
              return d2.remove_(a2, b2, c2);
            }), 0);
          });
        };
        shaka.media.MediaSourceEngine.prototype.clear = function(a2) {
          var b2 = this, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            c2 = shaka.util.ManifestParserUtils.ContentType;
            return a2 == c2.TEXT ? b2.textEngine_ ? d2.yield(b2.textEngine_.remove(0, Infinity), 0) : d2["return"]() : d2.yield(b2.enqueueOperation_(a2, function() {
              return b2.remove_(a2, 0, b2.mediaSource_.duration);
            }), 0);
          });
        };
        shaka.media.MediaSourceEngine.prototype.resetCaptionParser = function() {
          this.captionParser_.reset();
        };
        shaka.media.MediaSourceEngine.prototype.flush = function(a2) {
          var b2 = this, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            c2 = shaka.util.ManifestParserUtils.ContentType;
            return a2 == c2.TEXT ? d2["return"]() : d2.yield(b2.enqueueOperation_(a2, function() {
              return b2.flush_(a2);
            }), 0);
          });
        };
        shaka.media.MediaSourceEngine.prototype.setStreamProperties = function(a2, b2, c2, d2) {
          var e2 = this, f2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(g) {
            f2 = shaka.util.ManifestParserUtils.ContentType;
            return a2 == f2.TEXT ? (e2.textEngine_.setTimestampOffset(b2), e2.textEngine_.setAppendWindow(c2, d2), g["return"]()) : g.yield(Promise.all([e2.enqueueOperation_(a2, function() {
              return e2.abort_(a2);
            }), e2.enqueueOperation_(a2, function() {
              return e2.setTimestampOffset_(a2, b2);
            }), e2.enqueueOperation_(a2, function() {
              return e2.setAppendWindow_(
                a2,
                c2,
                d2
              );
            })]), 0);
          });
        };
        shaka.media.MediaSourceEngine.prototype.endOfStream = function(a2) {
          var b2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            return c2.yield(b2.enqueueBlockingOperation_(function() {
              b2.ended() || (a2 ? b2.mediaSource_.endOfStream(a2) : b2.mediaSource_.endOfStream());
            }), 0);
          });
        };
        shaka.media.MediaSourceEngine.prototype.setDuration = function(a2) {
          var b2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            goog.asserts.assert(isNaN(b2.mediaSource_.duration) || b2.mediaSource_.duration <= a2, "duration cannot decrease: " + b2.mediaSource_.duration + " -> " + a2);
            return c2.yield(b2.enqueueBlockingOperation_(function() {
              b2.mediaSource_.duration = a2;
            }), 0);
          });
        };
        shaka.media.MediaSourceEngine.prototype.getDuration = function() {
          return this.mediaSource_.duration;
        };
        shaka.media.MediaSourceEngine.prototype.append_ = function(a2, b2) {
          this.sourceBuffers_[a2].appendBuffer(b2);
        };
        shaka.media.MediaSourceEngine.prototype.remove_ = function(a2, b2, c2) {
          if (c2 <= b2)
            this.onUpdateEnd_(a2);
          else
            this.sourceBuffers_[a2].remove(b2, c2);
        };
        shaka.media.MediaSourceEngine.prototype.abort_ = function(a2) {
          var b2 = this.sourceBuffers_[a2].appendWindowStart, c2 = this.sourceBuffers_[a2].appendWindowEnd;
          this.sourceBuffers_[a2].abort();
          this.sourceBuffers_[a2].appendWindowStart = b2;
          this.sourceBuffers_[a2].appendWindowEnd = c2;
          this.onUpdateEnd_(a2);
        };
        shaka.media.MediaSourceEngine.prototype.flush_ = function(a2) {
          goog.asserts.assert(0 == this.video_.buffered.length, "MediaSourceEngine.flush_ should only be used after clearing all data!");
          this.video_.currentTime -= 1e-3;
          this.onUpdateEnd_(a2);
        };
        shaka.media.MediaSourceEngine.prototype.setTimestampOffset_ = function(a2, b2) {
          0 > b2 && (b2 += 1e-3);
          this.sourceBuffers_[a2].timestampOffset = b2;
          this.onUpdateEnd_(a2);
        };
        shaka.media.MediaSourceEngine.prototype.setAppendWindow_ = function(a2, b2, c2) {
          this.sourceBuffers_[a2].appendWindowStart = 0;
          this.sourceBuffers_[a2].appendWindowEnd = c2;
          this.sourceBuffers_[a2].appendWindowStart = b2;
          this.onUpdateEnd_(a2);
        };
        shaka.media.MediaSourceEngine.prototype.onError_ = function(a2) {
          var b2 = this.queues_[a2][0];
          goog.asserts.assert(b2, "Spurious error event!");
          goog.asserts.assert(!this.sourceBuffers_[a2].updating, "SourceBuffer should not be updating on error!");
          b2.p.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_FAILED, this.video_.error ? this.video_.error.code : 0));
        };
        shaka.media.MediaSourceEngine.prototype.onUpdateEnd_ = function(a2) {
          var b2 = this.queues_[a2][0];
          goog.asserts.assert(b2, "Spurious updateend event!");
          b2 && (goog.asserts.assert(!this.sourceBuffers_[a2].updating, "SourceBuffer should not be updating on updateend!"), b2.p.resolve(), this.popFromQueue_(a2));
        };
        shaka.media.MediaSourceEngine.prototype.enqueueOperation_ = function(a2, b2) {
          this.destroyer_.ensureNotDestroyed();
          var c2 = { start: b2, p: new shaka.util.PublicPromise() };
          this.queues_[a2].push(c2);
          1 == this.queues_[a2].length && this.startOperation_(a2);
          return c2.p;
        };
        shaka.media.MediaSourceEngine.prototype.enqueueBlockingOperation_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            switch (m.nextAddress) {
              case 1:
                b2.destroyer_.ensureNotDestroyed();
                c2 = [];
                d2 = {};
                for (e2 in b2.sourceBuffers_)
                  d2.$jscomp$loop$prop$ready$597 = new shaka.util.PublicPromise(), f2 = { start: function(n) {
                    return function() {
                      return n.$jscomp$loop$prop$ready$597.resolve();
                    };
                  }(d2), p: d2.$jscomp$loop$prop$ready$597 }, b2.queues_[e2].push(f2), c2.push(d2.$jscomp$loop$prop$ready$597), 1 == b2.queues_[e2].length && f2.start(), d2 = { $jscomp$loop$prop$ready$597: d2.$jscomp$loop$prop$ready$597 };
                m.setCatchFinallyBlocks(2);
                return m.yield(Promise.all(c2), 4);
              case 4:
                m.leaveTryBlock(3);
                break;
              case 2:
                g = m.enterCatchBlock();
                goog.asserts.assert(b2.destroyer_.destroyed(), "Should be destroyed by now");
                if (goog.DEBUG)
                  for (h in b2.sourceBuffers_)
                    b2.queues_[h].length && (goog.asserts.assert(1 == b2.queues_[h].length, "Should be at most one item in queue!"), goog.asserts.assert(c2.includes(b2.queues_[h][0].p), "The item in queue should be one of our waiters!"), b2.queues_[h].shift());
                throw g;
              case 3:
                if (goog.DEBUG)
                  for (k2 in b2.sourceBuffers_)
                    goog.asserts.assert(0 == b2.sourceBuffers_[k2].updating, "SourceBuffers should not be updating after a blocking op!");
                try {
                  a2();
                } catch (n) {
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_THREW, n);
                } finally {
                  for (l in b2.sourceBuffers_)
                    b2.popFromQueue_(l);
                }
                m.jumpToEnd();
            }
          });
        };
        shaka.media.MediaSourceEngine.prototype.popFromQueue_ = function(a2) {
          this.queues_[a2].shift();
          this.startOperation_(a2);
        };
        shaka.media.MediaSourceEngine.prototype.startOperation_ = function(a2) {
          var b2 = this.queues_[a2][0];
          if (b2)
            try {
              b2.start();
            } catch (c2) {
              "QuotaExceededError" == c2.name ? b2.p.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.QUOTA_EXCEEDED_ERROR, a2)) : b2.p.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_THREW, c2)), this.popFromQueue_(a2);
            }
        };
        shaka.media.MediaSourceEngine.prototype.getTextDisplayer = function() {
          goog.asserts.assert(this.textDisplayer_, "TextDisplayer should only be null when this is destroyed");
          return this.textDisplayer_;
        };
        shaka.media.MediaSourceEngine.prototype.setTextDisplayer = function(a2) {
          var b2 = this.textDisplayer_;
          this.textDisplayer_ = a2;
          b2 && (a2.setTextVisibility(b2.isTextVisible()), b2.destroy());
          this.textEngine_ && this.textEngine_.setDisplayer(a2);
        };
        shaka.media.MediaSourceEngine.prototype.workAroundBrokenPlatforms_ = function(a2, b2, c2) {
          var d2 = this.expectedEncryption_[c2];
          null == b2 && d2 && shaka.util.Platform.requiresEncryptionInfoInAllInitSegments() && "mp4" == shaka.util.MimeUtils.getContainerType(this.sourceBufferTypes_[c2]) && (shaka.log.debug("Forcing fake encryption information in init segment."), a2 = shaka.media.ContentWorkarounds.fakeEncryption(a2));
          return a2;
        };
        shaka.media.MediaSourceEngine.createObjectURL = window.URL.createObjectURL;
        shaka.media.InitSegmentReference = function(a2, b2, c2, d2) {
          this.getUris = a2;
          this.startByte = b2;
          this.endByte = c2;
          this.mediaQuality = void 0 === d2 ? null : d2;
        };
        shaka.media.InitSegmentReference.prototype.getStartByte = function() {
          return this.startByte;
        };
        shaka.media.InitSegmentReference.prototype.getEndByte = function() {
          return this.endByte;
        };
        shaka.media.InitSegmentReference.prototype.getSize = function() {
          return this.endByte ? this.endByte - this.startByte : null;
        };
        shaka.media.InitSegmentReference.prototype.getMediaQuality = function() {
          return this.mediaQuality;
        };
        shaka.media.InitSegmentReference.equal = function(a2, b2) {
          var c2 = shaka.util.ArrayUtils;
          return a2 && b2 ? a2.getStartByte() == b2.getStartByte() && a2.getEndByte() == b2.getEndByte() && c2.equal(a2.getUris(), b2.getUris()) : a2 == b2;
        };
        goog.exportSymbol("shaka.media.InitSegmentReference", shaka.media.InitSegmentReference);
        goog.exportProperty(shaka.media.InitSegmentReference.prototype, "getEndByte", shaka.media.InitSegmentReference.prototype.getEndByte);
        goog.exportProperty(shaka.media.InitSegmentReference.prototype, "getStartByte", shaka.media.InitSegmentReference.prototype.getStartByte);
        shaka.media.SegmentReference = function(a2, b2, c2, d2, e2, f2, g, h, k2, l, m, n) {
          l = void 0 === l ? [] : l;
          m = void 0 === m ? "" : m;
          n = void 0 === n ? null : n;
          goog.asserts.assert(a2 <= b2, "startTime must be less than or equal to endTime");
          goog.asserts.assert(null == e2 || d2 < e2, "startByte must be < endByte");
          this.startTime = a2;
          this.trueEndTime = this.endTime = b2;
          this.getUrisInner = c2;
          this.startByte = d2;
          this.endByte = e2;
          this.initSegmentReference = f2;
          this.timestampOffset = g;
          this.appendWindowStart = h;
          this.appendWindowEnd = k2;
          this.partialReferences = l;
          this.tilesLayout = m;
          this.tileDuration = n;
        };
        shaka.media.SegmentReference.prototype.getUris = function() {
          return this.getUrisInner();
        };
        shaka.media.SegmentReference.prototype.getStartTime = function() {
          return this.startTime;
        };
        shaka.media.SegmentReference.prototype.getEndTime = function() {
          return this.endTime;
        };
        shaka.media.SegmentReference.prototype.getStartByte = function() {
          return this.startByte;
        };
        shaka.media.SegmentReference.prototype.getEndByte = function() {
          return this.endByte;
        };
        shaka.media.SegmentReference.prototype.getSize = function() {
          return this.endByte ? this.endByte - this.startByte : null;
        };
        shaka.media.SegmentReference.prototype.hasPartialSegments = function() {
          return 0 < this.partialReferences.length;
        };
        shaka.media.SegmentReference.prototype.getTilesLayout = function() {
          return this.tilesLayout;
        };
        shaka.media.SegmentReference.prototype.getTileDuration = function() {
          return this.tileDuration;
        };
        goog.exportSymbol("shaka.media.SegmentReference", shaka.media.SegmentReference);
        goog.exportProperty(shaka.media.SegmentReference.prototype, "getTileDuration", shaka.media.SegmentReference.prototype.getTileDuration);
        goog.exportProperty(shaka.media.SegmentReference.prototype, "getTilesLayout", shaka.media.SegmentReference.prototype.getTilesLayout);
        goog.exportProperty(shaka.media.SegmentReference.prototype, "getEndByte", shaka.media.SegmentReference.prototype.getEndByte);
        goog.exportProperty(shaka.media.SegmentReference.prototype, "getStartByte", shaka.media.SegmentReference.prototype.getStartByte);
        goog.exportProperty(shaka.media.SegmentReference.prototype, "getEndTime", shaka.media.SegmentReference.prototype.getEndTime);
        goog.exportProperty(shaka.media.SegmentReference.prototype, "getStartTime", shaka.media.SegmentReference.prototype.getStartTime);
        goog.exportProperty(shaka.media.SegmentReference.prototype, "getUris", shaka.media.SegmentReference.prototype.getUris);
        shaka.media.PresentationTimeline = function(a2, b2, c2) {
          this.presentationStartTime_ = a2;
          this.presentationDelay_ = b2;
          this.segmentAvailabilityDuration_ = this.duration_ = Infinity;
          this.maxSegmentDuration_ = 1;
          this.maxSegmentEndTime_ = this.minSegmentStartTime_ = null;
          this.clockOffset_ = 0;
          this.static_ = true;
          this.userSeekStart_ = 0;
          this.autoCorrectDrift_ = void 0 === c2 ? true : c2;
          this.availabilityTimeOffset_ = 0;
          this.startTimeLocked_ = false;
        };
        shaka.media.PresentationTimeline.prototype.getDuration = function() {
          return this.duration_;
        };
        shaka.media.PresentationTimeline.prototype.getMaxSegmentDuration = function() {
          return this.maxSegmentDuration_;
        };
        shaka.media.PresentationTimeline.prototype.setDuration = function(a2) {
          goog.asserts.assert(0 < a2, "duration must be > 0");
          this.duration_ = a2;
        };
        shaka.media.PresentationTimeline.prototype.getPresentationStartTime = function() {
          return this.presentationStartTime_;
        };
        shaka.media.PresentationTimeline.prototype.setClockOffset = function(a2) {
          this.clockOffset_ = a2;
        };
        shaka.media.PresentationTimeline.prototype.setStatic = function(a2) {
          this.static_ = a2;
        };
        shaka.media.PresentationTimeline.prototype.setSegmentAvailabilityDuration = function(a2) {
          goog.asserts.assert(0 <= a2, "segmentAvailabilityDuration must be >= 0");
          this.segmentAvailabilityDuration_ = a2;
        };
        shaka.media.PresentationTimeline.prototype.setDelay = function(a2) {
          goog.asserts.assert(0 <= a2, "delay must be >= 0");
          this.presentationDelay_ = a2;
        };
        shaka.media.PresentationTimeline.prototype.getDelay = function() {
          return this.presentationDelay_;
        };
        shaka.media.PresentationTimeline.prototype.notifySegments = function(a2) {
          if (0 != a2.length) {
            var b2 = a2[a2.length - 1].endTime;
            this.notifyMinSegmentStartTime(a2[0].startTime);
            this.maxSegmentDuration_ = a2.reduce(function(c2, d2) {
              return Math.max(c2, d2.endTime - d2.startTime);
            }, this.maxSegmentDuration_);
            this.maxSegmentEndTime_ = Math.max(this.maxSegmentEndTime_, b2);
            null != this.presentationStartTime_ && this.autoCorrectDrift_ && !this.startTimeLocked_ && (this.presentationStartTime_ = (Date.now() + this.clockOffset_) / 1e3 - this.maxSegmentEndTime_ - this.maxSegmentDuration_);
            shaka.log.v1("notifySegments:", "maxSegmentDuration=" + this.maxSegmentDuration_);
          }
        };
        shaka.media.PresentationTimeline.prototype.lockStartTime = function() {
          this.startTimeLocked_ = true;
        };
        shaka.media.PresentationTimeline.prototype.notifyMinSegmentStartTime = function(a2) {
          this.minSegmentStartTime_ = null == this.minSegmentStartTime_ ? a2 : Math.min(this.minSegmentStartTime_, a2);
        };
        shaka.media.PresentationTimeline.prototype.notifyMaxSegmentDuration = function(a2) {
          this.maxSegmentDuration_ = Math.max(this.maxSegmentDuration_, a2);
          shaka.log.v1("notifyNewSegmentDuration:", "maxSegmentDuration=" + this.maxSegmentDuration_);
        };
        shaka.media.PresentationTimeline.prototype.offset = function(a2) {
          null != this.minSegmentStartTime_ && (this.minSegmentStartTime_ += a2);
          null != this.maxSegmentEndTime_ && (this.maxSegmentEndTime_ += a2);
        };
        shaka.media.PresentationTimeline.prototype.isLive = function() {
          return Infinity == this.duration_ && !this.static_;
        };
        shaka.media.PresentationTimeline.prototype.isInProgress = function() {
          return Infinity != this.duration_ && !this.static_;
        };
        shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityStart = function() {
          goog.asserts.assert(0 <= this.segmentAvailabilityDuration_, "The availability duration should be positive");
          var a2 = this.getSegmentAvailabilityEnd() - this.segmentAvailabilityDuration_;
          return Math.max(this.userSeekStart_, a2);
        };
        shaka.media.PresentationTimeline.prototype.setUserSeekStart = function(a2) {
          this.userSeekStart_ = a2;
        };
        shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityEnd = function() {
          return this.isLive() || this.isInProgress() ? Math.min(this.getLiveEdge_() + this.availabilityTimeOffset_, this.duration_) : this.maxSegmentEndTime_ ? Math.min(this.maxSegmentEndTime_, this.duration_) : this.duration_;
        };
        shaka.media.PresentationTimeline.prototype.getSafeSeekRangeStart = function(a2) {
          var b2 = Math.max(this.minSegmentStartTime_, this.userSeekStart_);
          if (Infinity == this.segmentAvailabilityDuration_)
            return Math.ceil(1e3 * b2) / 1e3;
          var c2 = this.getSegmentAvailabilityEnd() - this.segmentAvailabilityDuration_;
          a2 = Math.min(c2 + a2, this.getSeekRangeEnd());
          return Math.max(b2, a2);
        };
        shaka.media.PresentationTimeline.prototype.getSeekRangeStart = function() {
          return this.getSafeSeekRangeStart(0);
        };
        shaka.media.PresentationTimeline.prototype.getSeekRangeEnd = function() {
          var a2 = this.isLive() || this.isInProgress() ? this.presentationDelay_ : 0;
          return Math.max(0, this.getSegmentAvailabilityEnd() - a2);
        };
        shaka.media.PresentationTimeline.prototype.usingPresentationStartTime = function() {
          return null == this.presentationStartTime_ || null != this.maxSegmentEndTime_ && this.autoCorrectDrift_ ? false : true;
        };
        shaka.media.PresentationTimeline.prototype.getLiveEdge_ = function() {
          goog.asserts.assert(null != this.presentationStartTime_, "Cannot compute timeline live edge without start time");
          var a2 = (Date.now() + this.clockOffset_) / 1e3;
          return Math.max(0, a2 - this.maxSegmentDuration_ - this.presentationStartTime_);
        };
        shaka.media.PresentationTimeline.prototype.setAvailabilityTimeOffset = function(a2) {
          this.availabilityTimeOffset_ = a2;
        };
        shaka.media.PresentationTimeline.prototype.assertIsValid = function() {
          goog.DEBUG && (this.isLive() ? goog.asserts.assert(null != this.presentationStartTime_, "Detected as live stream, but does not match our model of live!") : this.isInProgress() ? goog.asserts.assert(null != this.presentationStartTime_ && Infinity == this.segmentAvailabilityDuration_, "Detected as IPR stream, but does not match our model of IPR!") : goog.asserts.assert(
            Infinity == this.segmentAvailabilityDuration_ && Infinity != this.duration_ && this.static_,
            "Detected as VOD stream, but does not match our model of VOD!"
          ));
        };
        goog.exportSymbol("shaka.media.PresentationTimeline", shaka.media.PresentationTimeline);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "setAvailabilityTimeOffset", shaka.media.PresentationTimeline.prototype.setAvailabilityTimeOffset);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "usingPresentationStartTime", shaka.media.PresentationTimeline.prototype.usingPresentationStartTime);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getSeekRangeEnd", shaka.media.PresentationTimeline.prototype.getSeekRangeEnd);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getSeekRangeStart", shaka.media.PresentationTimeline.prototype.getSeekRangeStart);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getSafeSeekRangeStart", shaka.media.PresentationTimeline.prototype.getSafeSeekRangeStart);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getSegmentAvailabilityEnd", shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityEnd);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "setUserSeekStart", shaka.media.PresentationTimeline.prototype.setUserSeekStart);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getSegmentAvailabilityStart", shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityStart);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "isInProgress", shaka.media.PresentationTimeline.prototype.isInProgress);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "isLive", shaka.media.PresentationTimeline.prototype.isLive);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "offset", shaka.media.PresentationTimeline.prototype.offset);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "notifyMaxSegmentDuration", shaka.media.PresentationTimeline.prototype.notifyMaxSegmentDuration);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "notifyMinSegmentStartTime", shaka.media.PresentationTimeline.prototype.notifyMinSegmentStartTime);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "lockStartTime", shaka.media.PresentationTimeline.prototype.lockStartTime);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "notifySegments", shaka.media.PresentationTimeline.prototype.notifySegments);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getDelay", shaka.media.PresentationTimeline.prototype.getDelay);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "setDelay", shaka.media.PresentationTimeline.prototype.setDelay);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "setSegmentAvailabilityDuration", shaka.media.PresentationTimeline.prototype.setSegmentAvailabilityDuration);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "setStatic", shaka.media.PresentationTimeline.prototype.setStatic);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "setClockOffset", shaka.media.PresentationTimeline.prototype.setClockOffset);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getPresentationStartTime", shaka.media.PresentationTimeline.prototype.getPresentationStartTime);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "setDuration", shaka.media.PresentationTimeline.prototype.setDuration);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getMaxSegmentDuration", shaka.media.PresentationTimeline.prototype.getMaxSegmentDuration);
        goog.exportProperty(shaka.media.PresentationTimeline.prototype, "getDuration", shaka.media.PresentationTimeline.prototype.getDuration);
        shaka.media.StallDetector = function(a2, b2) {
          this.implementation_ = a2;
          this.wasMakingProgress_ = a2.shouldBeMakingProgress();
          this.value_ = a2.getPresentationSeconds();
          this.lastUpdateSeconds_ = a2.getWallSeconds();
          this.didJump_ = false;
          this.stallThresholdSeconds_ = b2;
          this.onStall_ = function() {
          };
        };
        shaka.media.StallDetector.prototype.release = function() {
          this.implementation_ = null;
          this.onStall_ = function() {
          };
        };
        shaka.media.StallDetector.prototype.onStall = function(a2) {
          this.onStall_ = a2;
        };
        shaka.media.StallDetector.prototype.poll = function() {
          var a2 = this.implementation_, b2 = a2.shouldBeMakingProgress(), c2 = a2.getPresentationSeconds(), d2 = a2.getWallSeconds();
          if (this.value_ != c2 || this.wasMakingProgress_ != b2)
            this.lastUpdateSeconds_ = d2, this.value_ = c2, this.wasMakingProgress_ = b2, this.didJump_ = false;
          c2 = d2 - this.lastUpdateSeconds_;
          if (b2 = c2 >= this.stallThresholdSeconds_ && b2 && !this.didJump_)
            this.onStall_(this.value_, c2), this.didJump_ = true, this.value_ = a2.getPresentationSeconds();
          return b2;
        };
        shaka.media.StallDetector.Implementation = function() {
        };
        shaka.media.StallDetector.Implementation.prototype.shouldBeMakingProgress = function() {
        };
        shaka.media.StallDetector.Implementation.prototype.getPresentationSeconds = function() {
        };
        shaka.media.StallDetector.Implementation.prototype.getWallSeconds = function() {
        };
        shaka.media.StallDetector.MediaElementImplementation = function(a2) {
          this.mediaElement_ = a2;
        };
        shaka.media.StallDetector.MediaElementImplementation.prototype.shouldBeMakingProgress = function() {
          return this.mediaElement_.paused || 0 == this.mediaElement_.playbackRate || 0 == this.mediaElement_.buffered.length ? false : shaka.media.StallDetector.MediaElementImplementation.hasContentFor_(this.mediaElement_.buffered, this.mediaElement_.currentTime);
        };
        shaka.media.StallDetector.MediaElementImplementation.prototype.getPresentationSeconds = function() {
          return this.mediaElement_.currentTime;
        };
        shaka.media.StallDetector.MediaElementImplementation.prototype.getWallSeconds = function() {
          return Date.now() / 1e3;
        };
        shaka.media.StallDetector.MediaElementImplementation.hasContentFor_ = function(a2, b2) {
          for (var c2 = $jscomp.makeIterator(shaka.media.TimeRangesUtils.getBufferedInfo(a2)), d2 = c2.next(); !d2.done; d2 = c2.next())
            if (d2 = d2.value, !(b2 < d2.start - 0.1 || b2 > d2.end - 0.5))
              return true;
          return false;
        };
        shaka.media.GapJumpingController = function(a2, b2, c2, d2, e2) {
          var f2 = this;
          this.video_ = a2;
          this.timeline_ = b2;
          this.config_ = c2;
          this.onEvent_ = e2;
          this.eventManager_ = new shaka.util.EventManager();
          this.seekingEventReceived_ = false;
          this.prevReadyState_ = a2.readyState;
          this.didFireLargeGap_ = false;
          this.stallDetector_ = d2;
          this.hadSegmentAppended_ = false;
          this.eventManager_.listen(a2, "waiting", function() {
            return f2.onPollGapJump_();
          });
          this.gapJumpTimer_ = new shaka.util.Timer(function() {
            f2.onPollGapJump_();
          }).tickEvery(0.25);
        };
        shaka.media.GapJumpingController.prototype.release = function() {
          this.eventManager_ && (this.eventManager_.release(), this.eventManager_ = null);
          null != this.gapJumpTimer_ && (this.gapJumpTimer_.stop(), this.gapJumpTimer_ = null);
          this.stallDetector_ && (this.stallDetector_.release(), this.stallDetector_ = null);
          this.video_ = this.timeline_ = this.onEvent_ = null;
        };
        shaka.media.GapJumpingController.prototype.onSegmentAppended = function() {
          this.hadSegmentAppended_ = true;
          this.onPollGapJump_();
        };
        shaka.media.GapJumpingController.prototype.onSeeking = function() {
          this.seekingEventReceived_ = true;
          this.didFireLargeGap_ = this.hadSegmentAppended_ = false;
        };
        shaka.media.GapJumpingController.prototype.onPollGapJump_ = function() {
          if (0 != this.video_.readyState) {
            if (this.video_.seeking) {
              if (!this.seekingEventReceived_)
                return;
            } else
              this.seekingEventReceived_ = false;
            if (!this.video_.paused || 0 == this.video_.currentTime && (this.video_.autoplay || 0 != this.video_.currentTime)) {
              if (this.video_.readyState != this.prevReadyState_ && (this.didFireLargeGap_ = false, this.prevReadyState_ = this.video_.readyState), !this.stallDetector_ || !this.stallDetector_.poll()) {
                var a2 = this.config_.smallGapLimit, b2 = this.video_.currentTime, c2 = this.video_.buffered, d2 = shaka.media.TimeRangesUtils.getGapIndex(c2, b2, this.config_.gapDetectionThreshold);
                if (null != d2 && (0 != d2 || this.hadSegmentAppended_)) {
                  var e2 = c2.start(d2), f2 = this.timeline_.getSeekRangeEnd();
                  if (!(e2 >= f2)) {
                    f2 = e2 - b2;
                    a2 = f2 <= a2;
                    var g = false;
                    if (!(f2 < shaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE)) {
                      if (!a2 && !this.didFireLargeGap_) {
                        this.didFireLargeGap_ = true;
                        var h = (/* @__PURE__ */ new Map()).set("currentTime", b2).set("gapSize", f2);
                        h = new shaka.util.FakeEvent("largegap", h);
                        h.cancelable = true;
                        this.onEvent_(h);
                        this.config_.jumpLargeGaps && !h.defaultPrevented ? g = true : shaka.log.info("Ignoring large gap at", b2, "size", f2);
                      }
                      if (a2 || g)
                        0 == d2 ? shaka.log.info("Jumping forward", f2, "seconds because of gap before start time of", e2) : shaka.log.info("Jumping forward", f2, "seconds because of gap starting at", c2.end(d2 - 1), "and ending at", e2), this.video_.currentTime = e2;
                    }
                  }
                }
              }
            }
          }
        };
        shaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE = 1e-3;
        shaka.util.MediaReadyState = function() {
        };
        shaka.util.MediaReadyState.waitForReadyState = function(a2, b2, c2, d2) {
          b2 == HTMLMediaElement.HAVE_NOTHING || a2.readyState >= b2 ? d2() : (b2 = shaka.util.MediaReadyState.READY_STATES_TO_EVENT_NAMES_.value().get(b2), c2.listenOnce(a2, b2, d2));
        };
        shaka.util.MediaReadyState.READY_STATES_TO_EVENT_NAMES_ = new shaka.util.Lazy(function() {
          return /* @__PURE__ */ new Map([[HTMLMediaElement.HAVE_METADATA, "loadedmetadata"], [HTMLMediaElement.HAVE_CURRENT_DATA, "loadeddata"], [HTMLMediaElement.HAVE_FUTURE_DATA, "canplay"], [HTMLMediaElement.HAVE_ENOUGH_DATA, "canplaythrough"]]);
        });
        shaka.media.VideoWrapper = function(a2, b2, c2) {
          var d2 = this;
          this.video_ = a2;
          this.onSeek_ = b2;
          this.startTime_ = c2;
          this.started_ = false;
          this.eventManager_ = new shaka.util.EventManager();
          this.mover_ = new shaka.media.VideoWrapper.PlayheadMover(a2, 10);
          shaka.util.MediaReadyState.waitForReadyState(this.video_, HTMLMediaElement.HAVE_METADATA, this.eventManager_, function() {
            d2.setStartTime_(d2.startTime_);
          });
        };
        shaka.media.VideoWrapper.prototype.release = function() {
          this.eventManager_ && (this.eventManager_.release(), this.eventManager_ = null);
          null != this.mover_ && (this.mover_.release(), this.mover_ = null);
          this.onSeek_ = function() {
          };
          this.video_ = null;
        };
        shaka.media.VideoWrapper.prototype.getTime = function() {
          return this.started_ ? this.video_.currentTime : this.startTime_;
        };
        shaka.media.VideoWrapper.prototype.setTime = function(a2) {
          var b2 = this;
          0 < this.video_.readyState ? this.mover_.moveTo(a2) : shaka.util.MediaReadyState.waitForReadyState(this.video_, HTMLMediaElement.HAVE_METADATA, this.eventManager_, function() {
            b2.setStartTime_(b2.startTime_);
          });
        };
        shaka.media.VideoWrapper.prototype.setStartTime_ = function(a2) {
          var b2 = this;
          1e-3 > Math.abs(this.video_.currentTime - a2) ? this.startListeningToSeeks_() : (this.eventManager_.listenOnce(this.video_, "seeking", function() {
            b2.startListeningToSeeks_();
          }), this.mover_.moveTo(0 == this.video_.currentTime ? a2 : this.video_.currentTime));
        };
        shaka.media.VideoWrapper.prototype.startListeningToSeeks_ = function() {
          var a2 = this;
          goog.asserts.assert(0 < this.video_.readyState, "The media element should be ready before we listen for seeking.");
          this.started_ = true;
          this.eventManager_.listen(this.video_, "seeking", function() {
            return a2.onSeek_();
          });
        };
        shaka.media.VideoWrapper.PlayheadMover = function(a2, b2) {
          var c2 = this;
          this.mediaElement_ = a2;
          this.maxAttempts_ = b2;
          this.targetTime_ = this.originTime_ = this.remainingAttempts_ = 0;
          this.timer_ = new shaka.util.Timer(function() {
            return c2.onTick_();
          });
        };
        shaka.media.VideoWrapper.PlayheadMover.prototype.release = function() {
          this.timer_ && (this.timer_.stop(), this.timer_ = null);
          this.mediaElement_ = null;
        };
        shaka.media.VideoWrapper.PlayheadMover.prototype.moveTo = function(a2) {
          this.originTime_ = this.mediaElement_.currentTime;
          this.targetTime_ = a2;
          this.remainingAttempts_ = this.maxAttempts_;
          this.mediaElement_.currentTime = a2;
          this.timer_.tickEvery(0.1);
        };
        shaka.media.VideoWrapper.PlayheadMover.prototype.onTick_ = function() {
          0 >= this.remainingAttempts_ ? (shaka.log.warning(["Failed to move playhead from", this.originTime_, "to", this.targetTime_].join(" ")), this.timer_.stop()) : this.mediaElement_.currentTime != this.originTime_ ? this.timer_.stop() : (this.mediaElement_.currentTime = this.targetTime_, this.remainingAttempts_--);
        };
        shaka.media.Playhead = function() {
        };
        shaka.media.Playhead.prototype.setStartTime = function(a2) {
        };
        shaka.media.Playhead.prototype.getTime = function() {
        };
        shaka.media.Playhead.prototype.notifyOfBufferingChange = function() {
        };
        shaka.media.SrcEqualsPlayhead = function(a2) {
          var b2 = this;
          this.mediaElement_ = a2;
          this.started_ = false;
          this.startTime_ = null;
          this.eventManager_ = new shaka.util.EventManager();
          var c2 = function() {
            null == b2.startTime_ || 0 == b2.startTime_ ? b2.started_ = true : (b2.eventManager_.listenOnce(b2.mediaElement_, "seeking", function() {
              b2.started_ = true;
            }), b2.mediaElement_.currentTime = Math.max(0, b2.mediaElement_.currentTime + b2.startTime_));
          };
          shaka.util.MediaReadyState.waitForReadyState(
            this.mediaElement_,
            HTMLMediaElement.HAVE_CURRENT_DATA,
            this.eventManager_,
            function() {
              c2();
            }
          );
        };
        shaka.media.SrcEqualsPlayhead.prototype.release = function() {
          this.eventManager_ && (this.eventManager_.release(), this.eventManager_ = null);
          this.mediaElement_ = null;
        };
        shaka.media.SrcEqualsPlayhead.prototype.setStartTime = function(a2) {
          this.startTime_ = this.started_ ? this.startTime_ : a2;
        };
        shaka.media.SrcEqualsPlayhead.prototype.getTime = function() {
          return (this.started_ ? this.mediaElement_.currentTime : this.startTime_) || 0;
        };
        shaka.media.SrcEqualsPlayhead.prototype.notifyOfBufferingChange = function() {
        };
        shaka.media.MediaSourcePlayhead = function(a2, b2, c2, d2, e2, f2) {
          var g = this;
          this.minSeekRange_ = 3;
          this.mediaElement_ = a2;
          this.timeline_ = b2.presentationTimeline;
          this.minBufferTime_ = b2.minBufferTime || 0;
          this.config_ = c2;
          this.onSeek_ = e2;
          this.lastCorrectiveSeek_ = null;
          this.gapController_ = new shaka.media.GapJumpingController(a2, b2.presentationTimeline, c2, this.createStallDetector_(a2, c2), f2);
          this.videoWrapper_ = new shaka.media.VideoWrapper(a2, function() {
            return g.onSeeking_();
          }, this.getStartTime_(d2));
          this.checkWindowTimer_ = new shaka.util.Timer(function() {
            g.onPollWindow_();
          }).tickEvery(0.25);
        };
        shaka.media.MediaSourcePlayhead.prototype.release = function() {
          this.videoWrapper_ && (this.videoWrapper_.release(), this.videoWrapper_ = null);
          this.gapController_ && (this.gapController_.release(), this.gapController_ = null);
          this.checkWindowTimer_ && (this.checkWindowTimer_.stop(), this.checkWindowTimer_ = null);
          this.mediaElement_ = this.videoWrapper_ = this.timeline_ = this.config_ = null;
          this.onSeek_ = function() {
          };
        };
        shaka.media.MediaSourcePlayhead.prototype.setStartTime = function(a2) {
          this.videoWrapper_.setTime(a2);
        };
        shaka.media.MediaSourcePlayhead.prototype.getTime = function() {
          var a2 = this.videoWrapper_.getTime();
          return 0 < this.mediaElement_.readyState && !this.mediaElement_.paused ? this.clampTime_(a2) : a2;
        };
        shaka.media.MediaSourcePlayhead.prototype.getStartTime_ = function(a2) {
          null == a2 ? a2 = Infinity > this.timeline_.getDuration() ? this.timeline_.getSeekRangeStart() : this.timeline_.getSeekRangeEnd() : 0 > a2 && (a2 = this.timeline_.getSeekRangeEnd() + a2);
          return this.clampSeekToDuration_(this.clampTime_(a2));
        };
        shaka.media.MediaSourcePlayhead.prototype.notifyOfBufferingChange = function() {
          this.gapController_.onSegmentAppended();
        };
        shaka.media.MediaSourcePlayhead.prototype.onPollWindow_ = function() {
          if (0 != this.mediaElement_.readyState && !this.mediaElement_.paused) {
            var a2 = this.videoWrapper_.getTime(), b2 = this.timeline_.getSeekRangeStart(), c2 = this.timeline_.getSeekRangeEnd();
            c2 - b2 < this.minSeekRange_ && (b2 = c2 - this.minSeekRange_);
            a2 < b2 && (b2 = this.reposition_(a2), shaka.log.info("Jumping forward " + (b2 - a2) + " seconds to catch up with the seek range."), this.mediaElement_.currentTime = b2);
          }
        };
        shaka.media.MediaSourcePlayhead.prototype.onSeeking_ = function() {
          this.gapController_.onSeeking();
          var a2 = this.videoWrapper_.getTime(), b2 = this.reposition_(a2);
          if (Math.abs(b2 - a2) > shaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE) {
            var c2 = Date.now() / 1e3;
            if (!this.lastCorrectiveSeek_ || this.lastCorrectiveSeek_ < c2 - 1) {
              this.lastCorrectiveSeek_ = c2;
              this.videoWrapper_.setTime(b2);
              return;
            }
          }
          shaka.log.v1("Seek to " + a2);
          this.onSeek_();
        };
        shaka.media.MediaSourcePlayhead.prototype.clampSeekToDuration_ = function(a2) {
          var b2 = this.timeline_.getDuration();
          return a2 >= b2 ? (goog.asserts.assert(0 <= this.config_.durationBackoff, "Duration backoff must be non-negative!"), b2 - this.config_.durationBackoff) : a2;
        };
        shaka.media.MediaSourcePlayhead.prototype.reposition_ = function(a2) {
          goog.asserts.assert(this.config_, "Cannot reposition playhead when it has beeen destroyed");
          var b2 = Math.max(this.minBufferTime_, this.config_.rebufferingGoal), c2 = this.config_.safeSeekOffset, d2 = this.timeline_.getSeekRangeStart(), e2 = this.timeline_.getSeekRangeEnd(), f2 = this.timeline_.getDuration();
          e2 - d2 < this.minSeekRange_ && (d2 = e2 - this.minSeekRange_);
          var g = this.timeline_.getSafeSeekRangeStart(b2), h = this.timeline_.getSafeSeekRangeStart(c2);
          b2 = this.timeline_.getSafeSeekRangeStart(b2 + c2);
          if (a2 >= f2)
            return shaka.log.v1("Playhead past duration."), this.clampSeekToDuration_(a2);
          if (a2 > e2)
            return shaka.log.v1("Playhead past end."), e2;
          if (a2 < d2) {
            if (shaka.media.TimeRangesUtils.isBuffered(this.mediaElement_.buffered, h))
              return shaka.log.v1("Playhead before start & start is buffered"), h;
            shaka.log.v1("Playhead before start & start is unbuffered");
            return b2;
          }
          if (a2 >= g || shaka.media.TimeRangesUtils.isBuffered(this.mediaElement_.buffered, a2))
            return shaka.log.v1("Playhead in safe region or in buffered region."), a2;
          shaka.log.v1("Playhead outside safe region & in unbuffered region.");
          return b2;
        };
        shaka.media.MediaSourcePlayhead.prototype.clampTime_ = function(a2) {
          var b2 = this.timeline_.getSeekRangeStart();
          if (a2 < b2)
            return b2;
          b2 = this.timeline_.getSeekRangeEnd();
          return a2 > b2 ? b2 : a2;
        };
        shaka.media.MediaSourcePlayhead.prototype.createStallDetector_ = function(a2, b2) {
          if (!b2.stallEnabled)
            return null;
          var c2 = b2.stallThreshold, d2 = b2.stallSkip;
          c2 = new shaka.media.StallDetector(new shaka.media.StallDetector.MediaElementImplementation(a2), c2);
          c2.onStall(function(e2, f2) {
            shaka.log.debug("Stall detected at " + e2 + " for " + f2 + " seconds.");
            d2 ? (shaka.log.debug("Seeking forward " + d2 + " seconds to break stall."), a2.currentTime += d2) : (shaka.log.debug("Pausing and unpausing to break stall."), a2.pause(), a2.play());
          });
          return c2;
        };
        shaka.media.SegmentIndex = function(a2) {
          goog.DEBUG && shaka.media.SegmentIndex.assertCorrectReferences_(a2);
          this.references = a2;
          this.timer_ = null;
          this.numEvicted = 0;
          this.immutable_ = false;
        };
        shaka.media.SegmentIndex.prototype.destroy = function() {
          shaka.Deprecate.deprecateFeature(4, "shaka.media.SegmentIndex", "Please use release() instead of destroy().");
          this.release();
          return Promise.resolve();
        };
        shaka.media.SegmentIndex.prototype.release = function() {
          this.immutable_ || (this.references = [], this.timer_ && this.timer_.stop(), this.timer_ = null);
        };
        shaka.media.SegmentIndex.prototype.markImmutable = function() {
          this.immutable_ = true;
        };
        shaka.media.SegmentIndex.prototype.find = function(a2) {
          for (var b2 = this.references.length - 1, c2 = b2; 0 <= c2; --c2) {
            var d2 = this.references[c2], e2 = c2 < b2 ? this.references[c2 + 1].startTime : d2.endTime;
            if (a2 >= d2.startTime && a2 < e2)
              return c2 + this.numEvicted;
          }
          return this.references.length && a2 < this.references[0].startTime ? this.numEvicted : null;
        };
        shaka.media.SegmentIndex.prototype.get = function(a2) {
          if (0 == this.references.length)
            return null;
          a2 -= this.numEvicted;
          return 0 > a2 || a2 >= this.references.length ? null : this.references[a2];
        };
        shaka.media.SegmentIndex.prototype.offset = function(a2) {
          if (!this.immutable_)
            for (var b2 = $jscomp.makeIterator(this.references), c2 = b2.next(); !c2.done; c2 = b2.next())
              c2 = c2.value, c2.startTime += a2, c2.endTime += a2, c2.timestampOffset += a2;
        };
        shaka.media.SegmentIndex.prototype.merge = function(a2) {
          goog.DEBUG && shaka.media.SegmentIndex.assertCorrectReferences_(a2);
          !this.immutable_ && a2.length && (this.references = this.references.filter(function(b2) {
            return b2.startTime < a2[0].startTime;
          }), this.references.push.apply(this.references, $jscomp.arrayFromIterable(a2)), goog.DEBUG && shaka.media.SegmentIndex.assertCorrectReferences_(this.references));
        };
        shaka.media.SegmentIndex.prototype.mergeAndEvict = function(a2, b2) {
          var c2 = this;
          a2 = a2.filter(function(f2) {
            return f2.endTime > b2 && (0 == c2.references.length || f2.endTime > c2.references[0].startTime);
          });
          var d2 = this.references[0];
          this.merge(a2);
          var e2 = this.references[0];
          d2 && goog.asserts.assert(d2.startTime == e2.startTime, "SegmentIndex.merge should not change the first reference time!");
          this.evict(b2);
        };
        shaka.media.SegmentIndex.prototype.evict = function(a2) {
          if (!this.immutable_) {
            var b2 = this.references.length;
            this.references = this.references.filter(function(c2) {
              return c2.endTime > a2;
            });
            this.numEvicted += b2 - this.references.length;
          }
        };
        shaka.media.SegmentIndex.prototype.fit = function(a2, b2, c2) {
          c2 = void 0 === c2 ? false : c2;
          goog.asserts.assert(null != b2, "Content duration must be known for static content!");
          goog.asserts.assert(Infinity != b2, "Content duration must be finite for static content!");
          if (!this.immutable_) {
            for (; this.references.length; )
              if (this.references[this.references.length - 1].startTime >= b2)
                this.references.pop();
              else
                break;
            for (; this.references.length; )
              if (this.references[0].endTime <= a2)
                this.references.shift(), c2 || this.numEvicted++;
              else
                break;
            0 != this.references.length && (a2 = this.references[this.references.length - 1], this.references[this.references.length - 1] = new shaka.media.SegmentReference(a2.startTime, b2, a2.getUrisInner, a2.startByte, a2.endByte, a2.initSegmentReference, a2.timestampOffset, a2.appendWindowStart, a2.appendWindowEnd, a2.partialReferences, a2.tilesLayout, a2.tileDuration));
          }
        };
        shaka.media.SegmentIndex.prototype.updateEvery = function(a2, b2) {
          var c2 = this;
          goog.asserts.assert(!this.timer_, "SegmentIndex timer already started!");
          this.immutable_ || (this.timer_ && this.timer_.stop(), this.timer_ = new shaka.util.Timer(function() {
            var d2 = b2();
            d2 ? c2.references.push.apply(c2.references, $jscomp.arrayFromIterable(d2)) : (c2.timer_.stop(), c2.timer_ = null);
          }), this.timer_.tickEvery(a2));
        };
        shaka.media.SegmentIndex.prototype[Symbol.iterator] = function() {
          var a2 = this.getIteratorForTime(0);
          goog.asserts.assert(null != a2, "Iterator for 0 should never be null!");
          return a2;
        };
        shaka.media.SegmentIndex.prototype.getIteratorForTime = function(a2) {
          var b2 = this.find(a2);
          if (null == b2)
            return null;
          b2--;
          var c2 = this.get(b2 + 1), d2 = -1;
          if (c2 && c2.hasPartialSegments())
            for (var e2 = c2.partialReferences.length - 1; 0 <= e2; --e2) {
              var f2 = c2.partialReferences[e2];
              if (a2 >= f2.startTime && a2 < f2.endTime) {
                b2++;
                d2 = e2 - 1;
                break;
              }
            }
          return new shaka.media.SegmentIterator(this, b2, d2);
        };
        shaka.media.SegmentIndex.prototype.isEmpty = function() {
          return 0 == this.references.length;
        };
        shaka.media.SegmentIndex.forSingleSegment = function(a2, b2, c2) {
          a2 = new shaka.media.SegmentReference(a2, a2 + b2, function() {
            return c2;
          }, 0, null, null, a2, a2, a2 + b2);
          return new shaka.media.SegmentIndex([a2]);
        };
        goog.exportSymbol("shaka.media.SegmentIndex", shaka.media.SegmentIndex);
        goog.exportProperty(shaka.media.SegmentIndex, "forSingleSegment", shaka.media.SegmentIndex.forSingleSegment);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "getIteratorForTime", shaka.media.SegmentIndex.prototype.getIteratorForTime);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "updateEvery", shaka.media.SegmentIndex.prototype.updateEvery);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "fit", shaka.media.SegmentIndex.prototype.fit);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "evict", shaka.media.SegmentIndex.prototype.evict);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "mergeAndEvict", shaka.media.SegmentIndex.prototype.mergeAndEvict);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "merge", shaka.media.SegmentIndex.prototype.merge);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "offset", shaka.media.SegmentIndex.prototype.offset);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "get", shaka.media.SegmentIndex.prototype.get);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "find", shaka.media.SegmentIndex.prototype.find);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "markImmutable", shaka.media.SegmentIndex.prototype.markImmutable);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "release", shaka.media.SegmentIndex.prototype.release);
        goog.exportProperty(shaka.media.SegmentIndex.prototype, "destroy", shaka.media.SegmentIndex.prototype.destroy);
        goog.DEBUG && (shaka.media.SegmentIndex.assertCorrectReferences_ = function(a2) {
          goog.asserts.assert(a2.every(function(b2, c2) {
            if (0 == c2)
              return true;
            var d2 = a2[c2 - 1];
            return d2.startTime < b2.startTime ? true : d2.startTime > b2.startTime ? false : d2.endTime <= b2.endTime ? true : false;
          }), "SegmentReferences are incorrect");
        });
        shaka.media.SegmentIterator = function(a2, b2, c2) {
          this.segmentIndex_ = a2;
          this.currentPosition_ = b2;
          this.currentPartialPosition_ = c2;
        };
        shaka.media.SegmentIterator.prototype.seek = function(a2) {
          shaka.Deprecate.deprecateFeature(4, "shaka.media.SegmentIterator", "Please use SegmentIndex.getIteratorForTime instead of seek().");
          (a2 = this.segmentIndex_.getIteratorForTime(a2)) ? (this.currentPosition_ = a2.currentPosition_, this.currentPartialPosition_ = a2.currentPartialPosition_) : (this.currentPosition_ = Number.MAX_VALUE, this.currentPartialPosition_ = 0);
          return this.next().value;
        };
        shaka.media.SegmentIterator.prototype.current = function() {
          var a2 = this.segmentIndex_.get(this.currentPosition_);
          a2 && a2.hasPartialSegments() && a2.getUris().length && this.currentPartialPosition_ >= a2.partialReferences.length && (this.currentPosition_++, this.currentPartialPosition_ = 0, a2 = this.segmentIndex_.get(this.currentPosition_));
          return a2 && a2.hasPartialSegments() ? a2.partialReferences[this.currentPartialPosition_] : a2;
        };
        shaka.media.SegmentIterator.prototype.next = function() {
          var a2 = this.segmentIndex_.get(this.currentPosition_);
          a2 && a2.hasPartialSegments() ? (this.currentPartialPosition_++, a2.getUris().length && this.currentPartialPosition_ == a2.partialReferences.length && (this.currentPosition_++, this.currentPartialPosition_ = 0)) : (this.currentPosition_++, this.currentPartialPosition_ = 0);
          a2 = this.current();
          return { value: a2, done: !a2 };
        };
        goog.exportSymbol("shaka.media.SegmentIterator", shaka.media.SegmentIterator);
        goog.exportProperty(shaka.media.SegmentIterator.prototype, "next", shaka.media.SegmentIterator.prototype.next);
        goog.exportProperty(shaka.media.SegmentIterator.prototype, "current", shaka.media.SegmentIterator.prototype.current);
        goog.exportProperty(shaka.media.SegmentIterator.prototype, "seek", shaka.media.SegmentIterator.prototype.seek);
        shaka.media.MetaSegmentIndex = function() {
          shaka.media.SegmentIndex.call(this, []);
          this.indexes_ = [];
        };
        $jscomp.inherits(shaka.media.MetaSegmentIndex, shaka.media.SegmentIndex);
        shaka.media.MetaSegmentIndex.prototype.appendSegmentIndex = function(a2) {
          goog.asserts.assert(0 == this.indexes_.length || 0 == a2.numEvicted, "Should not append a new segment index with already-evicted segments");
          this.indexes_.push(a2);
        };
        shaka.media.MetaSegmentIndex.prototype.clone = function() {
          var a2 = new shaka.media.MetaSegmentIndex();
          a2.indexes_ = this.indexes_.slice();
          return a2;
        };
        shaka.media.MetaSegmentIndex.prototype.release = function() {
          for (var a2 = $jscomp.makeIterator(this.indexes_), b2 = a2.next(); !b2.done; b2 = a2.next())
            b2.value.release();
          this.indexes_ = [];
        };
        shaka.media.MetaSegmentIndex.prototype.find = function(a2) {
          for (var b2 = 0, c2 = $jscomp.makeIterator(this.indexes_), d2 = c2.next(); !d2.done; d2 = c2.next()) {
            d2 = d2.value;
            var e2 = d2.find(a2);
            if (null != e2)
              return e2 + b2;
            b2 += d2.numEvicted + d2.references.length;
          }
          return null;
        };
        shaka.media.MetaSegmentIndex.prototype.get = function(a2) {
          for (var b2 = 0, c2 = false, d2 = $jscomp.makeIterator(this.indexes_), e2 = d2.next(); !e2.done; e2 = d2.next()) {
            e2 = e2.value;
            goog.asserts.assert(!c2 || 0 == e2.numEvicted, "Should not see evicted segments after available segments");
            var f2 = e2.get(a2 - b2);
            if (f2)
              return f2;
            b2 += e2.numEvicted + e2.references.length;
            c2 = c2 || 0 != e2.references.length;
          }
          return null;
        };
        shaka.media.MetaSegmentIndex.prototype.offset = function(a2) {
          goog.asserts.assert(false, "offset() should not be used in MetaSegmentIndex!");
        };
        shaka.media.MetaSegmentIndex.prototype.merge = function(a2) {
          goog.asserts.assert(false, "merge() should not be used in MetaSegmentIndex!");
        };
        shaka.media.MetaSegmentIndex.prototype.evict = function(a2) {
          goog.asserts.assert(false, "evict() should not be used in MetaSegmentIndex!");
        };
        shaka.media.MetaSegmentIndex.prototype.mergeAndEvict = function(a2, b2) {
          goog.asserts.assert(false, "mergeAndEvict() should not be used in MetaSegmentIndex!");
        };
        shaka.media.MetaSegmentIndex.prototype.fit = function(a2, b2) {
          goog.asserts.assert(false, "fit() should not be used in MetaSegmentIndex!");
        };
        shaka.media.MetaSegmentIndex.prototype.updateEvery = function(a2, b2) {
          goog.asserts.assert(false, "updateEvery() should not be used in MetaSegmentIndex!");
        };
        goog.exportSymbol("shaka.media.MetaSegmentIndex", shaka.media.MetaSegmentIndex);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "updateEvery", shaka.media.MetaSegmentIndex.prototype.updateEvery);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "fit", shaka.media.MetaSegmentIndex.prototype.fit);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "mergeAndEvict", shaka.media.MetaSegmentIndex.prototype.mergeAndEvict);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "evict", shaka.media.MetaSegmentIndex.prototype.evict);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "merge", shaka.media.MetaSegmentIndex.prototype.merge);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "offset", shaka.media.MetaSegmentIndex.prototype.offset);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "get", shaka.media.MetaSegmentIndex.prototype.get);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "find", shaka.media.MetaSegmentIndex.prototype.find);
        goog.exportProperty(shaka.media.MetaSegmentIndex.prototype, "release", shaka.media.MetaSegmentIndex.prototype.release);
        shaka.media.PlayRateController = function(a2) {
          var b2 = this;
          this.harness_ = a2;
          this.isBuffering_ = false;
          this.rate_ = this.harness_.getRate();
          this.pollRate_ = 0.25;
          this.timer_ = new shaka.util.Timer(function() {
            b2.harness_.movePlayhead(b2.rate_ * b2.pollRate_);
          });
        };
        shaka.media.PlayRateController.prototype.release = function() {
          this.timer_ && (this.timer_.stop(), this.timer_ = null);
          this.harness_ = null;
        };
        shaka.media.PlayRateController.prototype.setBuffering = function(a2) {
          this.isBuffering_ = a2;
          this.apply_();
        };
        shaka.media.PlayRateController.prototype.set = function(a2) {
          goog.asserts.assert(0 != a2, "Should never set rate of 0 explicitly!");
          this.rate_ = a2;
          this.apply_();
        };
        shaka.media.PlayRateController.prototype.getRealRate = function() {
          return this.rate_;
        };
        shaka.media.PlayRateController.prototype.getDefaultRate = function() {
          return this.harness_.getDefaultRate();
        };
        shaka.media.PlayRateController.prototype.apply_ = function() {
          this.timer_.stop();
          var a2 = this.calculateCurrentRate_();
          shaka.log.v1("Changing effective playback rate to", a2);
          if (0 <= a2)
            try {
              this.applyRate_(a2);
              return;
            } catch (b2) {
            }
          this.timer_.tickEvery(this.pollRate_);
          this.applyRate_(0);
        };
        shaka.media.PlayRateController.prototype.calculateCurrentRate_ = function() {
          return this.isBuffering_ ? 0 : this.rate_;
        };
        shaka.media.PlayRateController.prototype.applyRate_ = function(a2) {
          var b2 = this.harness_.getRate();
          b2 != a2 && this.harness_.setRate(a2);
          return b2 != a2;
        };
        shaka.media.IPlayheadObserver = function() {
        };
        shaka.media.IPlayheadObserver.prototype.poll = function(a2, b2) {
        };
        shaka.media.PlayheadObserverManager = function(a2) {
          var b2 = this;
          this.mediaElement_ = a2;
          this.observers_ = /* @__PURE__ */ new Set();
          this.pollingLoop_ = new shaka.util.Timer(function() {
            b2.pollAllObservers_(false);
          }).tickEvery(0.25);
        };
        shaka.media.PlayheadObserverManager.prototype.release = function() {
          this.pollingLoop_.stop();
          for (var a2 = $jscomp.makeIterator(this.observers_), b2 = a2.next(); !b2.done; b2 = a2.next())
            b2.value.release();
          this.observers_.clear();
        };
        shaka.media.PlayheadObserverManager.prototype.manage = function(a2) {
          this.observers_.add(a2);
        };
        shaka.media.PlayheadObserverManager.prototype.notifyOfSeek = function() {
          this.pollAllObservers_(true);
        };
        shaka.media.PlayheadObserverManager.prototype.pollAllObservers_ = function(a2) {
          for (var b2 = $jscomp.makeIterator(this.observers_), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2.value.poll(this.mediaElement_.currentTime, a2);
        };
        shaka.media.QualityObserver = function(a2) {
          shaka.util.FakeEventTarget.call(this);
          this.contentTypeStates_ = /* @__PURE__ */ new Map();
          this.getBufferedInfo_ = a2;
        };
        $jscomp.inherits(shaka.media.QualityObserver, shaka.util.FakeEventTarget);
        shaka.media.QualityObserver.prototype.release = function() {
          this.contentTypeStates_.clear();
          shaka.util.FakeEventTarget.prototype.release.call(this);
        };
        shaka.media.QualityObserver.prototype.getContentTypeState_ = function(a2) {
          var b2 = this.contentTypeStates_.get(a2);
          b2 || (b2 = { qualityChangePositions: [], currentQuality: null, contentType: a2 }, this.contentTypeStates_.set(a2, b2));
          return b2;
        };
        shaka.media.QualityObserver.prototype.addMediaQualityChange = function(a2, b2) {
          var c2 = this.getContentTypeState_(a2.contentType);
          this.purgeQualityChangePositions_(c2);
          var d2 = { mediaQuality: a2, position: b2 };
          c2 = c2.qualityChangePositions;
          var e2 = c2.findIndex(function(f2) {
            return f2.position >= b2;
          });
          0 <= e2 ? c2.splice(e2, c2[e2].position == b2 ? 1 : 0, d2) : c2.push(d2);
        };
        shaka.media.QualityObserver.getMediaQualityAtPosition_ = function(a2, b2) {
          for (var c2 = b2.qualityChangePositions, d2 = c2.length - 1; 0 <= d2; d2--) {
            var e2 = c2[d2];
            if (e2.position <= a2)
              return e2.mediaQuality;
          }
          return null;
        };
        shaka.media.QualityObserver.mediaQualitiesAreTheSame_ = function(a2, b2) {
          return a2 === b2 ? true : a2 && b2 ? a2.bandwidth == b2.bandwidth && a2.audioSamplingRate == b2.audioSamplingRate && a2.codecs == b2.codecs && a2.contentType == b2.contentType && a2.frameRate == b2.frameRate && a2.height == b2.height && a2.mimeType == b2.mimeType && a2.channelsCount == b2.channelsCount && a2.pixelAspectRatio == b2.pixelAspectRatio && a2.width == b2.width : false;
        };
        shaka.media.QualityObserver.prototype.poll = function(a2, b2) {
          for (var c2 = $jscomp.makeIterator(this.contentTypeStates_.values()), d2 = c2.next(); !d2.done; d2 = c2.next()) {
            d2 = d2.value;
            var e2 = shaka.media.QualityObserver.getMediaQualityAtPosition_(a2, d2);
            e2 && !shaka.media.QualityObserver.mediaQualitiesAreTheSame_(d2.currentQuality, e2) && this.positionIsBuffered_(a2, e2.contentType) && (d2.currentQuality = e2, shaka.log.debug("Media quality changed at position " + a2 + " " + JSON.stringify(e2)), d2 = new shaka.util.FakeEvent("qualitychange", /* @__PURE__ */ new Map([[
              "quality",
              e2
            ], ["position", a2]])), this.dispatchEvent(d2));
          }
        };
        shaka.media.QualityObserver.prototype.positionIsBuffered_ = function(a2, b2) {
          var c2 = this.getBufferedInfo_()[b2];
          if (c2 && 0 < c2.length) {
            var d2 = c2[c2.length - 1].end;
            if (a2 >= c2[0].start && a2 < d2)
              return true;
          }
          return false;
        };
        shaka.media.QualityObserver.prototype.purgeQualityChangePositions_ = function(a2) {
          var b2 = this.getBufferedInfo_()[a2.contentType];
          if (b2 && 0 < b2.length) {
            var c2 = b2[0].start, d2 = b2[b2.length - 1].end, e2 = a2.qualityChangePositions;
            a2.qualityChangePositions = e2.filter(function(f2, g) {
              return f2.position <= c2 && g + 1 < e2.length && e2[g + 1].position <= c2 || f2.position >= d2 ? false : true;
            });
          } else
            a2.qualityChangePositions = [];
        };
        shaka.media.RegionTimeline = function(a2) {
          shaka.util.FakeEventTarget.call(this);
          var b2 = this;
          this.regions_ = /* @__PURE__ */ new Set();
          this.getSeekRange_ = a2;
          this.filterTimer_ = new shaka.util.Timer(function() {
            b2.filterBySeekRange_();
          }).tickEvery(shaka.media.RegionTimeline.REGION_FILTER_INTERVAL);
        };
        $jscomp.inherits(shaka.media.RegionTimeline, shaka.util.FakeEventTarget);
        shaka.media.RegionTimeline.prototype.release = function() {
          this.regions_.clear();
          this.filterTimer_.stop();
          shaka.util.FakeEventTarget.prototype.release.call(this);
        };
        shaka.media.RegionTimeline.prototype.addRegion = function(a2) {
          null == this.findSimilarRegion_(a2) && (this.regions_.add(a2), a2 = new shaka.util.FakeEvent("regionadd", /* @__PURE__ */ new Map([["region", a2]])), this.dispatchEvent(a2));
        };
        shaka.media.RegionTimeline.prototype.filterBySeekRange_ = function() {
          for (var a2 = this.getSeekRange_(), b2 = $jscomp.makeIterator(this.regions_), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, c2.endTime < a2.start && (this.regions_["delete"](c2), c2 = new shaka.util.FakeEvent("regionremove", /* @__PURE__ */ new Map([["region", c2]])), this.dispatchEvent(c2));
        };
        shaka.media.RegionTimeline.prototype.findSimilarRegion_ = function(a2) {
          for (var b2 = $jscomp.makeIterator(this.regions_), c2 = b2.next(); !c2.done; c2 = b2.next())
            if (c2 = c2.value, c2.schemeIdUri == a2.schemeIdUri && c2.id == a2.id && c2.startTime == a2.startTime && c2.endTime == a2.endTime)
              return c2;
          return null;
        };
        shaka.media.RegionTimeline.prototype.regions = function() {
          return this.regions_;
        };
        shaka.media.RegionTimeline.REGION_FILTER_INTERVAL = 2;
        shaka.media.RegionObserver = function(a2) {
          shaka.util.FakeEventTarget.call(this);
          var b2 = this;
          this.timeline_ = a2;
          this.oldPosition_ = /* @__PURE__ */ new Map();
          var c2 = shaka.media.RegionObserver.RelativePosition_;
          a2 = c2.BEFORE_THE_REGION;
          var d2 = c2.IN_THE_REGION;
          c2 = c2.AFTER_THE_REGION;
          this.rules_ = [{ weWere: null, weAre: d2, invoke: function(e2, f2) {
            return b2.onEvent_("enter", e2, f2);
          } }, { weWere: a2, weAre: d2, invoke: function(e2, f2) {
            return b2.onEvent_("enter", e2, f2);
          } }, { weWere: c2, weAre: d2, invoke: function(e2, f2) {
            return b2.onEvent_("enter", e2, f2);
          } }, { weWere: d2, weAre: a2, invoke: function(e2, f2) {
            return b2.onEvent_("exit", e2, f2);
          } }, { weWere: d2, weAre: c2, invoke: function(e2, f2) {
            return b2.onEvent_("exit", e2, f2);
          } }, { weWere: a2, weAre: c2, invoke: function(e2, f2) {
            return b2.onEvent_("skip", e2, f2);
          } }, { weWere: c2, weAre: a2, invoke: function(e2, f2) {
            return b2.onEvent_("skip", e2, f2);
          } }];
          this.eventManager_ = new shaka.util.EventManager();
          this.eventManager_.listen(this.timeline_, "regionremove", function(e2) {
            b2.oldPosition_["delete"](e2.region);
          });
        };
        $jscomp.inherits(shaka.media.RegionObserver, shaka.util.FakeEventTarget);
        shaka.media.RegionObserver.prototype.release = function() {
          this.timeline_ = null;
          this.oldPosition_.clear();
          this.eventManager_.release();
          this.eventManager_ = null;
          shaka.util.FakeEventTarget.prototype.release.call(this);
        };
        shaka.media.RegionObserver.prototype.poll = function(a2, b2) {
          for (var c2 = shaka.media.RegionObserver, d2 = $jscomp.makeIterator(this.timeline_.regions()), e2 = d2.next(); !e2.done; e2 = d2.next()) {
            e2 = e2.value;
            var f2 = this.oldPosition_.get(e2), g = c2.determinePositionRelativeTo_(e2, a2);
            this.oldPosition_.set(e2, g);
            for (var h = $jscomp.makeIterator(this.rules_), k2 = h.next(); !k2.done; k2 = h.next())
              k2 = k2.value, k2.weWere == f2 && k2.weAre == g && k2.invoke(e2, b2);
          }
        };
        shaka.media.RegionObserver.prototype.onEvent_ = function(a2, b2, c2) {
          a2 = new shaka.util.FakeEvent(a2, /* @__PURE__ */ new Map([["region", b2], ["seeking", c2]]));
          this.dispatchEvent(a2);
        };
        shaka.media.RegionObserver.determinePositionRelativeTo_ = function(a2, b2) {
          var c2 = shaka.media.RegionObserver.RelativePosition_;
          return b2 < a2.startTime ? c2.BEFORE_THE_REGION : b2 > a2.endTime ? c2.AFTER_THE_REGION : c2.IN_THE_REGION;
        };
        shaka.media.RegionObserver.RelativePosition_ = { BEFORE_THE_REGION: 1, IN_THE_REGION: 2, AFTER_THE_REGION: 3 };
        shaka.util.Networking = function() {
        };
        shaka.util.Networking.createSegmentRequest = function(a2, b2, c2, d2, e2) {
          a2 = shaka.net.NetworkingEngine.makeRequest(a2, d2, e2);
          if (0 != b2 || null != c2)
            a2.headers.Range = c2 ? "bytes=" + b2 + "-" + c2 : "bytes=" + b2 + "-";
          return a2;
        };
        shaka.media.StreamingEngine = function(a2, b2) {
          var c2 = this;
          this.playerInterface_ = b2;
          this.manifest_ = a2;
          this.config_ = null;
          this.bufferingGoalScale_ = 1;
          this.currentTextStream_ = this.currentVariant_ = null;
          this.mediaStates_ = /* @__PURE__ */ new Map();
          this.startupComplete_ = false;
          this.failureCallbackBackoff_ = null;
          this.fatalError_ = false;
          this.destroyer_ = new shaka.util.Destroyer(function() {
            return c2.doDestroy_();
          });
        };
        shaka.media.StreamingEngine.prototype.destroy = function() {
          return this.destroyer_.destroy();
        };
        shaka.media.StreamingEngine.prototype.doDestroy_ = function() {
          var a2 = this, b2, c2, d2, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            if (1 == f2.nextAddress) {
              b2 = [];
              c2 = $jscomp.makeIterator(a2.mediaStates_.values());
              for (d2 = c2.next(); !d2.done; d2 = c2.next())
                e2 = d2.value, a2.cancelUpdate_(e2), b2.push(a2.abortOperations_(e2));
              return f2.yield(Promise.all(b2), 2);
            }
            a2.mediaStates_.clear();
            a2.playerInterface_ = null;
            a2.manifest_ = null;
            a2.config_ = null;
            f2.jumpToEnd();
          });
        };
        shaka.media.StreamingEngine.prototype.configure = function(a2) {
          this.config_ = a2;
          this.failureCallbackBackoff_ = new shaka.net.Backoff({ maxAttempts: Math.max(a2.retryParameters.maxAttempts, 2), baseDelay: a2.retryParameters.baseDelay, backoffFactor: a2.retryParameters.backoffFactor, fuzzFactor: a2.retryParameters.fuzzFactor, timeout: 0, stallTimeout: 0, connectionTimeout: 0 }, true);
        };
        shaka.media.StreamingEngine.prototype.start = function() {
          var a2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            if (1 == b2.nextAddress)
              return goog.asserts.assert(a2.config_, "StreamingEngine configure() must be called before init()!"), b2.yield(a2.initStreams_(), 2);
            a2.destroyer_.ensureNotDestroyed();
            shaka.log.debug("init: completed initial Stream setup");
            a2.startupComplete_ = true;
            b2.jumpToEnd();
          });
        };
        shaka.media.StreamingEngine.prototype.getCurrentVariant = function() {
          return this.currentVariant_;
        };
        shaka.media.StreamingEngine.prototype.getCurrentTextStream = function() {
          return this.currentTextStream_;
        };
        shaka.media.StreamingEngine.prototype.loadNewTextStream_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            switch (k2.nextAddress) {
              case 1:
                return c2 = shaka.util.ManifestParserUtils.ContentType, goog.asserts.assert(!b2.mediaStates_.has(c2.TEXT), "Should not call loadNewTextStream_ while streaming text!"), k2.setCatchFinallyBlocks(2), k2.yield(b2.playerInterface_.mediaSourceEngine.clear(c2.TEXT), 4);
              case 4:
                k2.leaveTryBlock(3);
                break;
              case 2:
                if (d2 = k2.enterCatchBlock(), b2.playerInterface_)
                  b2.playerInterface_.onError(d2);
              case 3:
                e2 = shaka.util.MimeUtils.getFullType(a2.mimeType, a2.codecs);
                b2.playerInterface_.mediaSourceEngine.reinitText(e2);
                f2 = b2.playerInterface_.mediaSourceEngine.getTextDisplayer();
                if (g = f2.isTextVisible() || b2.config_.alwaysStreamText)
                  h = b2.createMediaState_(a2), b2.mediaStates_.set(c2.TEXT, h), b2.scheduleUpdate_(h, 0);
                k2.jumpToEnd();
            }
          });
        };
        shaka.media.StreamingEngine.prototype.unloadTextStream = function() {
          var a2 = shaka.util.ManifestParserUtils.ContentType, b2 = this.mediaStates_.get(a2.TEXT);
          b2 && (this.cancelUpdate_(b2), this.abortOperations_(b2)["catch"](function() {
          }), this.mediaStates_["delete"](a2.TEXT));
          this.currentTextStream_ = null;
        };
        shaka.media.StreamingEngine.prototype.setTrickPlay = function(a2) {
          var b2 = this.mediaStates_.get(shaka.util.ManifestParserUtils.ContentType.VIDEO);
          if (b2) {
            var c2 = b2.stream;
            if (c2) {
              if (shaka.log.debug("setTrickPlay", a2), a2)
                (a2 = c2.trickModeVideo) && !b2.restoreStreamAfterTrickPlay && (shaka.log.debug("Engaging trick mode stream", a2), this.switchInternal_(a2, false, 0, false), b2.restoreStreamAfterTrickPlay = c2);
              else if (c2 = b2.restoreStreamAfterTrickPlay)
                shaka.log.debug("Restoring non-trick-mode stream", c2), b2.restoreStreamAfterTrickPlay = null, this.switchInternal_(c2, true, 0, false);
            }
          }
        };
        shaka.media.StreamingEngine.prototype.switchVariant = function(a2, b2, c2, d2) {
          b2 = void 0 === b2 ? false : b2;
          c2 = void 0 === c2 ? 0 : c2;
          d2 = void 0 === d2 ? false : d2;
          this.currentVariant_ = a2;
          this.startupComplete_ && (a2.video && this.switchInternal_(a2.video, b2, c2, d2), a2.audio && this.switchInternal_(a2.audio, b2, c2, d2));
        };
        shaka.media.StreamingEngine.prototype.switchTextStream = function(a2) {
          this.currentTextStream_ = a2;
          if (this.startupComplete_) {
            var b2 = shaka.util.ManifestParserUtils.ContentType;
            goog.asserts.assert(a2 && a2.type == b2.TEXT, "Wrong stream type passed to switchTextStream!");
            this.switchInternal_(a2, true, 0, false);
          }
        };
        shaka.media.StreamingEngine.prototype.reloadTextStream = function() {
          var a2 = this.mediaStates_.get(shaka.util.ManifestParserUtils.ContentType.TEXT);
          a2 && this.switchInternal_(a2.stream, true, 0, true);
        };
        shaka.media.StreamingEngine.prototype.switchInternal_ = function(a2, b2, c2, d2) {
          var e2 = this, f2 = shaka.util.ManifestParserUtils.ContentType, g = this.mediaStates_.get(a2.type);
          g || a2.type != f2.TEXT ? (goog.asserts.assert(g, "switch: expected mediaState to exist"), g && (g.restoreStreamAfterTrickPlay && (shaka.log.debug("switch during trick play mode", a2), a2.trickModeVideo ? (g.restoreStreamAfterTrickPlay = a2, a2 = a2.trickModeVideo, shaka.log.debug("switch found trick play stream", a2)) : (g.restoreStreamAfterTrickPlay = null, shaka.log.debug("switch found no special trick play stream"))), g.stream != a2 || d2 ? (a2.type == f2.TEXT && (d2 = shaka.util.MimeUtils.getFullType(a2.mimeType, a2.codecs), this.playerInterface_.mediaSourceEngine.reinitText(d2)), g.stream.closeSegmentIndex && g.stream.closeSegmentIndex(), g.stream = a2, g.segmentIterator = null, a2 = shaka.media.StreamingEngine.logPrefix_(g), shaka.log.debug("switch: switching to Stream " + a2), b2 && (g.clearingBuffer ? g.waitingToFlushBuffer = true : g.performingUpdate ? (g.waitingToClearBuffer = true, g.clearBufferSafeMargin = c2, g.waitingToFlushBuffer = true) : (this.cancelUpdate_(g), this.clearBuffer_(
            g,
            true,
            c2
          )["catch"](function(h) {
            e2.playerInterface_ && (goog.asserts.assert(h instanceof shaka.util.Error, "Wrong error type!"), e2.playerInterface_.onError(h));
          }))), this.makeAbortDecision_(g)["catch"](function(h) {
            e2.playerInterface_ && (goog.asserts.assert(h instanceof shaka.util.Error, "Wrong error type!"), e2.playerInterface_.onError(h));
          })) : (b2 = shaka.media.StreamingEngine.logPrefix_(g), shaka.log.debug("switch: Stream " + b2 + " already active")))) : this.loadNewTextStream_(a2);
        };
        shaka.media.StreamingEngine.prototype.makeAbortDecision_ = function(a2) {
          var b2 = this, c2, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            if (1 == e2.nextAddress) {
              if (!a2.operation)
                return e2["return"]();
              c2 = a2.stream;
              d2 = a2.operation;
              return c2.segmentIndex ? e2.jumpTo(2) : e2.yield(c2.createSegmentIndex(), 2);
            }
            if (a2.operation != d2 || a2.stream != c2)
              return e2["return"]();
            goog.asserts.assert(a2.stream.segmentIndex, "Segment index should exist by now!");
            b2.shouldAbortCurrentRequest_(a2) && (shaka.log.info("Aborting current segment request."), a2.operation.abort());
            e2.jumpToEnd();
          });
        };
        shaka.media.StreamingEngine.prototype.shouldAbortCurrentRequest_ = function(a2) {
          goog.asserts.assert(a2.operation, "Abort logic requires an ongoing operation!");
          goog.asserts.assert(a2.stream && a2.stream.segmentIndex, "Abort logic requires a segment index");
          var b2 = this.playerInterface_.getPresentationTime(), c2 = this.playerInterface_.mediaSourceEngine.bufferEnd(a2.type), d2 = this.getTimeNeeded_(a2, b2);
          d2 = a2.stream.segmentIndex.find(d2);
          var e2 = null == d2 ? null : a2.stream.segmentIndex.get(d2);
          d2 = e2 ? e2.getSize() : null;
          e2 && !d2 && (d2 = (e2.getEndTime() - e2.getStartTime()) * (a2.stream.bandwidth || 0) / 8);
          if (!d2)
            return false;
          (e2 = e2.initSegmentReference) && (d2 += e2.getSize() || 0);
          e2 = this.playerInterface_.getBandwidthEstimate();
          return 8 * d2 / e2 < (c2 || 0) - b2 - Math.max(this.manifest_.minBufferTime || 0, this.config_.rebufferingGoal) || a2.operation.getBytesRemaining() > d2 ? true : false;
        };
        shaka.media.StreamingEngine.prototype.seeked = function() {
          for (var a2 = this.playerInterface_.getPresentationTime(), b2 = this.config_.smallGapLimit, c2 = shaka.util.ManifestParserUtils.ContentType, d2 = false, e2 = $jscomp.makeIterator(this.mediaStates_.keys()), f2 = e2.next(); !f2.done; f2 = e2.next()) {
            f2 = f2.value;
            var g = this.mediaStates_.get(f2), h = shaka.media.StreamingEngine.logPrefix_(g);
            g.segmentIterator = null;
            if (!this.playerInterface_.mediaSourceEngine.isBuffered(f2, a2, b2)) {
              if (null != this.playerInterface_.mediaSourceEngine.bufferEnd(f2) || g.performingUpdate)
                this.forceClearBuffer_(g), d2 = true;
              g.operation && (g.operation.abort(), shaka.log.debug(h, "Aborting operation due to seek"), g.operation = null);
              f2 === c2.TEXT && this.playerInterface_.mediaSourceEngine.resetCaptionParser();
            }
          }
          d2 || shaka.log.debug("(all): seeked: buffered seek: presentationTime=" + a2);
        };
        shaka.media.StreamingEngine.prototype.forceClearBuffer_ = function(a2) {
          var b2 = this, c2 = shaka.media.StreamingEngine.logPrefix_(a2);
          a2.clearingBuffer ? shaka.log.debug(c2, "clear: already clearing the buffer") : a2.waitingToClearBuffer ? shaka.log.debug(c2, "clear: already waiting") : a2.performingUpdate ? (shaka.log.debug(c2, "clear: currently updating"), a2.waitingToClearBuffer = true, a2.clearBufferSafeMargin = 0) : null == this.playerInterface_.mediaSourceEngine.bufferStart(a2.type) ? (shaka.log.debug(c2, "clear: nothing buffered"), null == a2.updateTimer && this.scheduleUpdate_(a2, 0)) : (shaka.log.debug(c2, "clear: handling right now"), this.cancelUpdate_(a2), this.clearBuffer_(a2, false, 0)["catch"](function(d2) {
            b2.playerInterface_ && (goog.asserts.assert(d2 instanceof shaka.util.Error, "Wrong error type!"), b2.playerInterface_.onError(d2));
          }));
        };
        shaka.media.StreamingEngine.prototype.initStreams_ = function() {
          var a2 = this, b2, c2, d2, e2, f2, g, h, k2, l, m;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(n) {
            if (1 == n.nextAddress) {
              b2 = shaka.util.ManifestParserUtils.ContentType;
              goog.asserts.assert(a2.config_, "StreamingEngine configure() must be called before init()!");
              if (!a2.currentVariant_)
                throw shaka.log.error("init: no Streams chosen"), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STREAMING, shaka.util.Error.Code.STREAMING_ENGINE_STARTUP_INVALID_STATE);
              c2 = /* @__PURE__ */ new Map();
              d2 = /* @__PURE__ */ new Set();
              a2.currentVariant_.audio && (c2.set(b2.AUDIO, a2.currentVariant_.audio), d2.add(a2.currentVariant_.audio));
              a2.currentVariant_.video && (c2.set(b2.VIDEO, a2.currentVariant_.video), d2.add(a2.currentVariant_.video));
              a2.currentTextStream_ && (c2.set(b2.TEXT, a2.currentTextStream_), d2.add(a2.currentTextStream_));
              e2 = a2.playerInterface_.mediaSourceEngine;
              f2 = a2.config_.forceTransmuxTS;
              return n.yield(e2.init(c2, f2), 2);
            }
            a2.destroyer_.ensureNotDestroyed();
            a2.setDuration_();
            g = $jscomp.makeIterator(c2.keys());
            for (h = g.next(); !h.done; h = g.next())
              k2 = h.value, l = c2.get(k2), a2.mediaStates_.has(k2) || (m = a2.createMediaState_(l), a2.mediaStates_.set(k2, m), a2.scheduleUpdate_(m, 0));
            n.jumpToEnd();
          });
        };
        shaka.media.StreamingEngine.prototype.createMediaState_ = function(a2) {
          return { stream: a2, type: a2.type, segmentIterator: null, lastSegmentReference: null, lastInitSegmentReference: null, lastTimestampOffset: null, lastAppendWindowStart: null, lastAppendWindowEnd: null, restoreStreamAfterTrickPlay: null, endOfStream: false, performingUpdate: false, updateTimer: null, waitingToClearBuffer: false, clearBufferSafeMargin: 0, waitingToFlushBuffer: false, clearingBuffer: false, recovering: false, hasError: false, operation: null };
        };
        shaka.media.StreamingEngine.prototype.setDuration_ = function() {
          var a2 = this.manifest_.presentationTimeline.getDuration();
          Infinity > a2 ? this.playerInterface_.mediaSourceEngine.setDuration(a2) : this.playerInterface_.mediaSourceEngine.setDuration(Math.pow(2, 32));
        };
        shaka.media.StreamingEngine.prototype.onUpdate_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            switch (k2.nextAddress) {
              case 1:
                b2.destroyer_.ensureNotDestroyed();
                c2 = shaka.media.StreamingEngine.logPrefix_(a2);
                goog.asserts.assert(!a2.performingUpdate && null != a2.updateTimer, c2 + " unexpected call to onUpdate_()");
                if (a2.performingUpdate || null == a2.updateTimer)
                  return k2["return"]();
                goog.asserts.assert(!a2.clearingBuffer, c2 + " onUpdate_() should not be called when clearing the buffer");
                if (a2.clearingBuffer)
                  return k2["return"]();
                a2.updateTimer = null;
                if (!a2.waitingToClearBuffer) {
                  k2.jumpTo(2);
                  break;
                }
                shaka.log.debug(c2, "skipping update and clearing the buffer");
                return k2.yield(b2.clearBuffer_(a2, a2.waitingToFlushBuffer, a2.clearBufferSafeMargin), 3);
              case 3:
                return k2["return"]();
              case 2:
                if (a2.stream.segmentIndex) {
                  k2.jumpTo(4);
                  break;
                }
                d2 = a2.stream;
                return k2.yield(a2.stream.createSegmentIndex(), 5);
              case 5:
                if (d2 != a2.stream)
                  return d2.closeSegmentIndex && (goog.asserts.assert(!a2.stream.segmentIndex, "mediastate.stream should not have segmentIndex yet."), d2.closeSegmentIndex()), null == a2.updateTimer && b2.scheduleUpdate_(a2, 0), k2["return"]();
              case 4:
                k2.setCatchFinallyBlocks(6);
                e2 = b2.update_(a2);
                null != e2 && (b2.scheduleUpdate_(a2, e2), a2.hasError = false);
                k2.leaveTryBlock(7);
                break;
              case 6:
                return f2 = k2.enterCatchBlock(), k2.yield(b2.handleStreamingError_(f2), 8);
              case 8:
                return k2["return"]();
              case 7:
                g = Array.from(b2.mediaStates_.values());
                if (!b2.startupComplete_ || !g.every(function(l) {
                  return l.endOfStream;
                })) {
                  k2.jumpTo(0);
                  break;
                }
                shaka.log.v1(c2, "calling endOfStream()...");
                return k2.yield(
                  b2.playerInterface_.mediaSourceEngine.endOfStream(),
                  10
                );
              case 10:
                b2.destroyer_.ensureNotDestroyed(), h = b2.playerInterface_.mediaSourceEngine.getDuration(), 0 != h && h < b2.manifest_.presentationTimeline.getDuration() && b2.manifest_.presentationTimeline.setDuration(h), k2.jumpToEnd();
            }
          });
        };
        shaka.media.StreamingEngine.prototype.update_ = function(a2) {
          goog.asserts.assert(this.manifest_, "manifest_ should not be null");
          goog.asserts.assert(this.config_, "config_ should not be null");
          var b2 = shaka.util.ManifestParserUtils.ContentType;
          if (shaka.media.StreamingEngine.isEmbeddedText_(a2))
            return this.playerInterface_.mediaSourceEngine.setSelectedClosedCaptionId(a2.stream.originalId || ""), null;
          a2.type == b2.TEXT && this.playerInterface_.mediaSourceEngine.clearSelectedClosedCaptionId();
          var c2 = shaka.media.StreamingEngine.logPrefix_(a2), d2 = this.playerInterface_.getPresentationTime(), e2 = this.getTimeNeeded_(a2, d2);
          shaka.log.v2(c2, "timeNeeded=" + e2);
          var f2 = this.playerInterface_.mediaSourceEngine.bufferedAheadOf(a2.type, d2);
          shaka.log.v2(c2, "update_:", "presentationTime=" + d2, "bufferedAhead=" + f2);
          var g = Math.max(this.manifest_.minBufferTime || 0, this.config_.rebufferingGoal, this.config_.bufferingGoal) * this.bufferingGoalScale_;
          if (1e-6 > this.manifest_.presentationTimeline.getDuration() - e2)
            return shaka.log.debug(c2, "buffered to end of presentation"), a2.endOfStream = true, a2.type == b2.VIDEO && (a2 = this.mediaStates_.get(b2.TEXT)) && shaka.media.StreamingEngine.isEmbeddedText_(a2) && (a2.endOfStream = true), null;
          a2.endOfStream = false;
          if (f2 >= g)
            return shaka.log.v2(c2, "buffering goal met"), this.config_.updateIntervalSeconds / 2;
          b2 = this.playerInterface_.mediaSourceEngine.bufferEnd(a2.type);
          b2 = this.getSegmentReferenceNeeded_(a2, d2, b2);
          if (!b2)
            return this.config_.updateIntervalSeconds;
          f2 = Infinity;
          g = Array.from(this.mediaStates_.values());
          g = $jscomp.makeIterator(g);
          for (var h = g.next(); !h.done; h = g.next())
            h = h.value, shaka.media.StreamingEngine.isEmbeddedText_(h) || h.segmentIterator && !h.segmentIterator.current() || (h = this.getTimeNeeded_(h, d2), f2 = Math.min(f2, h));
          g = this.manifest_.presentationTimeline.getMaxSegmentDuration() * shaka.media.StreamingEngine.MAX_RUN_AHEAD_SEGMENTS_;
          if (e2 >= f2 + g)
            return shaka.log.v2(c2, "waiting for other streams to buffer"), this.config_.updateIntervalSeconds;
          this.fetchAndAppend_(a2, d2, b2)["catch"](function() {
          });
          return null;
        };
        shaka.media.StreamingEngine.prototype.getTimeNeeded_ = function(a2, b2) {
          return a2.lastSegmentReference ? a2.lastSegmentReference.endTime : b2;
        };
        shaka.media.StreamingEngine.prototype.getSegmentReferenceNeeded_ = function(a2, b2, c2) {
          var d2 = shaka.media.StreamingEngine.logPrefix_(a2);
          goog.asserts.assert(a2.stream.segmentIndex, "segment index should have been generated already");
          if (a2.segmentIterator)
            return a2.segmentIterator.current();
          if (a2.lastSegmentReference || c2)
            return b2 = a2.lastSegmentReference ? a2.lastSegmentReference.endTime : c2, goog.asserts.assert(null != b2, "Should have a time to search"), shaka.log.v1(d2, "looking up segment from new stream endTime:", b2), a2.segmentIterator = a2.stream.segmentIndex.getIteratorForTime(b2), a2 = a2.segmentIterator && a2.segmentIterator.next().value, null == a2 && shaka.log.warning(d2, "cannot find segment", "endTime:", b2), a2;
          c2 = this.config_.inaccurateManifestTolerance;
          var e2 = Math.max(b2 - c2, 0);
          shaka.log.v1(d2, "looking up segment", "lookupTime:", e2, "presentationTime:", b2);
          var f2 = null;
          c2 && (a2.segmentIterator = a2.stream.segmentIndex.getIteratorForTime(e2), f2 = a2.segmentIterator && a2.segmentIterator.next().value);
          f2 || (a2.segmentIterator = a2.stream.segmentIndex.getIteratorForTime(b2), f2 = a2.segmentIterator && a2.segmentIterator.next().value);
          null == f2 && shaka.log.warning(d2, "cannot find segment", "lookupTime:", e2, "presentationTime:", b2);
          return f2;
        };
        shaka.media.StreamingEngine.prototype.fetchAndAppend_ = function(a2, b2, c2) {
          var d2 = this, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
            switch (w.nextAddress) {
              case 1:
                return e2 = shaka.util.ManifestParserUtils.ContentType, f2 = shaka.media.StreamingEngine, g = f2.logPrefix_(a2), shaka.log.v1(g, "fetchAndAppend_:", "presentationTime=" + b2, "reference.startTime=" + c2.startTime, "reference.endTime=" + c2.endTime), h = a2.stream, k2 = a2.segmentIterator, a2.performingUpdate = true, w.setCatchFinallyBlocks(2), w.yield(d2.initSourceBuffer_(a2, c2), 4);
              case 4:
                d2.destroyer_.ensureNotDestroyed();
                if (d2.fatalError_)
                  return w["return"]();
                shaka.log.v2(g, "fetching segment");
                l = "video/mp4" == h.mimeType || "audio/mp4" == h.mimeType;
                m = window.ReadableStream;
                if (d2.config_.lowLatencyMode && m && l)
                  return q = new Uint8Array(0), r = function(x) {
                    var z, A, C;
                    return $jscomp.asyncExecutePromiseGeneratorProgram(function(D) {
                      d2.destroyer_.ensureNotDestroyed();
                      if (d2.fatalError_)
                        return D["return"]();
                      q = d2.concatArray_(q, x);
                      z = false;
                      A = 0;
                      new shaka.util.Mp4Parser().box(
                        "mdat",
                        function(F) {
                          A = F.size + F.start;
                          z = true;
                        }
                      ).parse(q, false, true);
                      if (!z)
                        return D.jumpTo(0);
                      C = q.subarray(0, A);
                      q = q.subarray(A);
                      return D.yield(d2.append_(a2, b2, h, c2, C), 0);
                    });
                  }, w.yield(d2.fetch_(a2, c2, r), 6);
                d2.config_.lowLatencyMode && !m && shaka.log.warning("Low latency streaming mode is enabled, but ReadableStream is not supported by the browser.");
                n = d2.fetch_(a2, c2);
                return w.yield(n, 7);
              case 7:
                return p = w.yieldResult, d2.destroyer_.ensureNotDestroyed(), d2.fatalError_ ? w["return"]() : a2.waitingToClearBuffer ? (shaka.log.info(g, "waitingToClearBuffer, skip append"), a2.performingUpdate = false, d2.scheduleUpdate_(a2, 0), w["return"]()) : w.yield(d2.append_(a2, b2, h, c2, p), 6);
              case 6:
                d2.destroyer_.ensureNotDestroyed();
                if (d2.fatalError_)
                  return w["return"]();
                a2.lastSegmentReference = c2;
                t = k2.next().value;
                shaka.log.v2(g, "advancing to next segment", t);
                a2.performingUpdate = false;
                a2.recovering = false;
                u = d2.playerInterface_.mediaSourceEngine.getBufferedInfo();
                v = u[a2.type];
                shaka.log.v1(g, "finished fetch and append", JSON.stringify(v));
                if (!a2.waitingToClearBuffer)
                  d2.playerInterface_.onSegmentAppended();
                d2.scheduleUpdate_(
                  a2,
                  0
                );
                w.leaveTryBlock(0);
                break;
              case 2:
                y = w.enterCatchBlock();
                d2.destroyer_.ensureNotDestroyed(y);
                if (d2.fatalError_)
                  return w["return"]();
                goog.asserts.assert(y instanceof shaka.util.Error, "Should only receive a Shaka error");
                a2.performingUpdate = false;
                if (y.code == shaka.util.Error.Code.OPERATION_ABORTED)
                  a2.performingUpdate = false, a2.updateTimer = null, d2.scheduleUpdate_(a2, 0), w.jumpTo(0);
                else if (a2.type == e2.TEXT && d2.config_.ignoreTextStreamFailures)
                  y.code == shaka.util.Error.Code.BAD_HTTP_STATUS ? shaka.log.warning(g, "Text stream failed to download. Proceeding without it.") : shaka.log.warning(g, "Text stream failed to parse. Proceeding without it."), d2.mediaStates_["delete"](e2.TEXT), w.jumpTo(0);
                else if (y.code == shaka.util.Error.Code.QUOTA_EXCEEDED_ERROR)
                  d2.handleQuotaExceeded_(a2, y), w.jumpTo(0);
                else if (y.code == shaka.util.Error.Code.BAD_HTTP_STATUS && y.data && 404 == y.data[1])
                  shaka.log.v2(g, "segment not available."), a2.performingUpdate = false, a2.updateTimer = null, d2.scheduleUpdate_(a2, 1), w.jumpTo(0);
                else
                  return shaka.log.error(g, "failed fetch and append: code=" + y.code), a2.hasError = true, y.severity = shaka.util.Error.Severity.CRITICAL, w.yield(d2.handleStreamingError_(y), 0);
            }
          });
        };
        shaka.media.StreamingEngine.prototype.retry = function() {
          if (this.destroyer_.destroyed())
            return shaka.log.error("Unable to retry after StreamingEngine is destroyed!"), false;
          if (this.fatalError_)
            return shaka.log.error("Unable to retry after StreamingEngine encountered a fatal error!"), false;
          for (var a2 = $jscomp.makeIterator(this.mediaStates_.values()), b2 = a2.next(); !b2.done; b2 = a2.next()) {
            b2 = b2.value;
            var c2 = shaka.media.StreamingEngine.logPrefix_(b2);
            b2.hasError && (shaka.log.info(c2, "Retrying after failure..."), b2.hasError = false, this.scheduleUpdate_(b2, 0.1));
          }
          return true;
        };
        shaka.media.StreamingEngine.prototype.concatArray_ = function(a2, b2) {
          var c2 = new Uint8Array(a2.length + b2.length);
          c2.set(a2);
          c2.set(b2, a2.length);
          return c2;
        };
        shaka.media.StreamingEngine.prototype.handleQuotaExceeded_ = function(a2, b2) {
          var c2 = shaka.media.StreamingEngine.logPrefix_(a2);
          if (Array.from(this.mediaStates_.values()).some(function(e2) {
            return e2 != a2 && e2.recovering;
          }))
            shaka.log.debug(c2, "MediaSource threw QuotaExceededError:", "waiting for another stream to recover...");
          else {
            var d2 = Math.round(100 * this.bufferingGoalScale_);
            if (20 < d2)
              this.bufferingGoalScale_ -= 0.2;
            else if (4 < d2)
              this.bufferingGoalScale_ -= 0.04;
            else {
              shaka.log.error(c2, "MediaSource threw QuotaExceededError too many times");
              this.fatalError_ = a2.hasError = true;
              this.playerInterface_.onError(b2);
              return;
            }
            shaka.log.warning(c2, "MediaSource threw QuotaExceededError:", "reducing buffering goals by " + (100 - Math.round(100 * this.bufferingGoalScale_)) + "%");
            a2.recovering = true;
          }
          this.scheduleUpdate_(a2, 4);
        };
        shaka.media.StreamingEngine.prototype.initSourceBuffer_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(p) {
            d2 = shaka.media.StreamingEngine;
            e2 = d2.logPrefix_(a2);
            f2 = [];
            g = Math.max(0, b2.appendWindowStart - d2.APPEND_WINDOW_START_FUDGE_);
            h = b2.appendWindowEnd + d2.APPEND_WINDOW_END_FUDGE_;
            goog.asserts.assert(b2.startTime <= h, e2 + " segment should start before append window end");
            k2 = b2.timestampOffset;
            if (k2 != a2.lastTimestampOffset || g != a2.lastAppendWindowStart || h != a2.lastAppendWindowEnd)
              shaka.log.v1(
                e2,
                "setting timestamp offset to " + k2
              ), shaka.log.v1(e2, "setting append window start to " + g), shaka.log.v1(e2, "setting append window end to " + h), l = function() {
                var q;
                return $jscomp.asyncExecutePromiseGeneratorProgram(function(r) {
                  if (1 == r.nextAddress)
                    return r.setCatchFinallyBlocks(2), a2.lastAppendWindowStart = g, a2.lastAppendWindowEnd = h, a2.lastTimestampOffset = k2, r.yield(c2.playerInterface_.mediaSourceEngine.setStreamProperties(a2.type, k2, g, h), 4);
                  if (2 != r.nextAddress)
                    return r.leaveTryBlock(0);
                  q = r.enterCatchBlock();
                  a2.lastAppendWindowStart = null;
                  a2.lastAppendWindowEnd = null;
                  a2.lastTimestampOffset = null;
                  throw q;
                });
              }, f2.push(l());
            !shaka.media.InitSegmentReference.equal(b2.initSegmentReference, a2.lastInitSegmentReference) && (a2.lastInitSegmentReference = b2.initSegmentReference) && (shaka.log.v1(e2, "fetching init segment"), m = c2.fetch_(a2, b2.initSegmentReference), n = function() {
              var q, r, t;
              return $jscomp.asyncExecutePromiseGeneratorProgram(function(u) {
                switch (u.nextAddress) {
                  case 1:
                    return u.setCatchFinallyBlocks(2), u.yield(m, 4);
                  case 4:
                    return q = u.yieldResult, c2.destroyer_.ensureNotDestroyed(), shaka.log.v1(e2, "appending init segment"), r = a2.stream.closedCaptions && 0 < a2.stream.closedCaptions.size, u.yield(c2.playerInterface_.mediaSourceEngine.appendBuffer(a2.type, q, null, null, r), 5);
                  case 5:
                    u.leaveTryBlock(0);
                    break;
                  case 2:
                    throw t = u.enterCatchBlock(), a2.lastInitSegmentReference = null, t;
                }
              });
            }, c2.playerInterface_.onInitSegmentAppended(b2.startTime, b2.initSegmentReference), f2.push(n()));
            return p.yield(Promise.all(f2), 0);
          });
        };
        shaka.media.StreamingEngine.prototype.append_ = function(a2, b2, c2, d2, e2) {
          var f2 = this, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            if (1 == k2.nextAddress)
              return g = shaka.media.StreamingEngine.logPrefix_(a2), h = c2.closedCaptions && 0 < c2.closedCaptions.size, (null != c2.emsgSchemeIdUris && 0 < c2.emsgSchemeIdUris.length || f2.config_.dispatchAllEmsgBoxes) && new shaka.util.Mp4Parser().fullBox("emsg", function(l) {
                return f2.parseEMSG_(d2, c2.emsgSchemeIdUris, l);
              }).parse(e2), k2.yield(f2.evict_(a2, b2), 2);
            if (3 != k2.nextAddress)
              return f2.destroyer_.ensureNotDestroyed(), shaka.log.v1(g, "appending media segment"), k2.yield(f2.playerInterface_.mediaSourceEngine.appendBuffer(a2.type, e2, d2.startTime, d2.endTime, h), 3);
            f2.destroyer_.ensureNotDestroyed();
            shaka.log.v2(g, "appended media segment");
            k2.jumpToEnd();
          });
        };
        shaka.media.StreamingEngine.prototype.parseEMSG_ = function(a2, b2, c2) {
          if (0 === c2.version) {
            var d2 = c2.reader.readTerminatedString();
            var e2 = c2.reader.readTerminatedString();
            var f2 = c2.reader.readUint32();
            var g = c2.reader.readUint32();
            var h = c2.reader.readUint32();
            var k2 = c2.reader.readUint32();
            var l = a2.startTime + g / f2;
          } else
            f2 = c2.reader.readUint32(), l = c2.reader.readUint64() / f2 + a2.timestampOffset, g = l - a2.startTime, h = c2.reader.readUint32(), k2 = c2.reader.readUint32(), d2 = c2.reader.readTerminatedString(), e2 = c2.reader.readTerminatedString();
          a2 = c2.reader.readBytes(c2.reader.getLength() - c2.reader.getPosition());
          if (b2 && b2.includes(d2) || this.config_.dispatchAllEmsgBoxes)
            if ("urn:mpeg:dash:event:2012" == d2)
              this.playerInterface_.onManifestUpdate();
            else
              f2 = { startTime: l, endTime: l + h / f2, schemeIdUri: d2, value: e2, timescale: f2, presentationTimeDelta: g, eventDuration: h, id: k2, messageData: a2 }, b2 = shaka.Player.EventName.Emsg, f2 = (/* @__PURE__ */ new Map()).set("detail", f2), b2 = new shaka.util.FakeEvent(b2, f2), this.playerInterface_.onEvent(b2);
        };
        shaka.media.StreamingEngine.prototype.evict_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            if (1 == k2.nextAddress) {
              d2 = shaka.media.StreamingEngine.logPrefix_(a2);
              shaka.log.v2(d2, "checking buffer length");
              e2 = Math.max(c2.config_.bufferBehind, c2.manifest_.presentationTimeline.getMaxSegmentDuration());
              f2 = c2.playerInterface_.mediaSourceEngine.bufferStart(a2.type);
              if (null == f2)
                return shaka.log.v2(
                  d2,
                  "buffer behind okay because nothing buffered:",
                  "presentationTime=" + b2,
                  "bufferBehind=" + e2
                ), k2["return"]();
              g = b2 - f2;
              h = g - e2;
              if (0.01 >= h)
                return shaka.log.v2(d2, "buffer behind okay:", "presentationTime=" + b2, "bufferedBehind=" + g, "bufferBehind=" + e2, "underflow=" + Math.abs(h)), k2["return"]();
              shaka.log.v1(d2, "buffer behind too large:", "presentationTime=" + b2, "bufferedBehind=" + g, "bufferBehind=" + e2, "overflow=" + h);
              return k2.yield(c2.playerInterface_.mediaSourceEngine.remove(a2.type, f2, f2 + h), 2);
            }
            c2.destroyer_.ensureNotDestroyed();
            shaka.log.v1(d2, "evicted " + h + " seconds");
            k2.jumpToEnd();
          });
        };
        shaka.media.StreamingEngine.isEmbeddedText_ = function(a2) {
          var b2 = shaka.util.MimeUtils, c2 = b2.CEA608_CLOSED_CAPTION_MIMETYPE;
          b2 = b2.CEA708_CLOSED_CAPTION_MIMETYPE;
          return a2 && a2.type == shaka.util.ManifestParserUtils.ContentType.TEXT && (a2.stream.mimeType == c2 || a2.stream.mimeType == b2);
        };
        shaka.media.StreamingEngine.prototype.fetch_ = function(a2, b2, c2) {
          var d2 = this, e2, f2, g, h, k2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(l) {
            if (1 == l.nextAddress)
              return e2 = shaka.net.NetworkingEngine.RequestType.SEGMENT, f2 = shaka.util.Networking.createSegmentRequest(b2.getUris(), b2.startByte, b2.endByte, d2.config_.retryParameters, c2), shaka.log.v2("fetching: reference=", b2), g = a2.stream, d2.playerInterface_.modifySegmentRequest(f2, { type: g.type, init: b2 instanceof shaka.media.InitSegmentReference, duration: b2.endTime - b2.startTime, mimeType: g.mimeType, codecs: g.codecs, bandwidth: g.bandwidth }), h = d2.playerInterface_.netEngine.request(e2, f2), a2.operation = h, l.yield(h.promise, 2);
            k2 = l.yieldResult;
            a2.operation = null;
            return l["return"](k2.data);
          });
        };
        shaka.media.StreamingEngine.prototype.clearBuffer_ = function(a2, b2, c2) {
          var d2 = this, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            if (1 == h.nextAddress)
              return e2 = shaka.media.StreamingEngine.logPrefix_(a2), goog.asserts.assert(!a2.performingUpdate && null == a2.updateTimer, e2 + " unexpected call to clearBuffer_()"), a2.waitingToClearBuffer = false, a2.waitingToFlushBuffer = false, a2.clearBufferSafeMargin = 0, a2.clearingBuffer = true, a2.lastSegmentReference = null, a2.lastInitSegmentReference = null, a2.segmentIterator = null, shaka.log.debug(
                e2,
                "clearing buffer"
              ), c2 ? (f2 = d2.playerInterface_.getPresentationTime(), g = d2.playerInterface_.mediaSourceEngine.getDuration(), h.yield(d2.playerInterface_.mediaSourceEngine.remove(a2.type, f2 + c2, g), 3)) : h.yield(d2.playerInterface_.mediaSourceEngine.clear(a2.type), 4);
            if (3 != h.nextAddress)
              return d2.destroyer_.ensureNotDestroyed(), b2 ? h.yield(d2.playerInterface_.mediaSourceEngine.flush(a2.type), 3) : h.jumpTo(3);
            d2.destroyer_.ensureNotDestroyed();
            shaka.log.debug(e2, "cleared buffer");
            a2.clearingBuffer = false;
            a2.endOfStream = false;
            d2.scheduleUpdate_(
              a2,
              0
            );
            h.jumpToEnd();
          });
        };
        shaka.media.StreamingEngine.prototype.scheduleUpdate_ = function(a2, b2) {
          var c2 = this, d2 = shaka.media.StreamingEngine.logPrefix_(a2), e2 = a2.type;
          e2 != shaka.util.ManifestParserUtils.ContentType.TEXT || this.mediaStates_.has(e2) ? (shaka.log.v2(d2, "updating in " + b2 + " seconds"), goog.asserts.assert(null == a2.updateTimer, d2 + " did not expect update to be scheduled"), a2.updateTimer = new shaka.util.DelayedTick(function() {
            var f2;
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(g) {
              if (1 == g.nextAddress)
                return g.setCatchFinallyBlocks(2), g.yield(
                  c2.onUpdate_(a2),
                  4
                );
              if (2 != g.nextAddress)
                return g.leaveTryBlock(0);
              f2 = g.enterCatchBlock();
              if (c2.playerInterface_)
                c2.playerInterface_.onError(f2);
              g.jumpToEnd();
            });
          }).tickAfter(b2)) : shaka.log.v1(d2, "Text stream is unloaded. No update is needed.");
        };
        shaka.media.StreamingEngine.prototype.cancelUpdate_ = function(a2) {
          null != a2.updateTimer && (a2.updateTimer.stop(), a2.updateTimer = null);
        };
        shaka.media.StreamingEngine.prototype.abortOperations_ = function(a2) {
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            return a2.operation ? b2.yield(a2.operation.abort(), 0) : b2.jumpTo(0);
          });
        };
        shaka.media.StreamingEngine.prototype.handleStreamingError_ = function(a2) {
          var b2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (1 == c2.nextAddress)
              return c2.yield(b2.failureCallbackBackoff_.attempt(), 2);
            b2.destroyer_.ensureNotDestroyed();
            b2.playerInterface_.onError(a2);
            a2.handled || b2.config_.failureCallback(a2);
            c2.jumpToEnd();
          });
        };
        shaka.media.StreamingEngine.logPrefix_ = function(a2) {
          return "(" + a2.type + ":" + a2.stream.id + ")";
        };
        shaka.media.StreamingEngine.APPEND_WINDOW_START_FUDGE_ = 0.1;
        shaka.media.StreamingEngine.APPEND_WINDOW_END_FUDGE_ = 0.01;
        shaka.media.StreamingEngine.MAX_RUN_AHEAD_SEGMENTS_ = 1;
        shaka.routing = {};
        shaka.routing.Node = {};
        shaka.routing.Payload = {};
        shaka.routing.Walker = function(a2, b2, c2) {
          var d2 = this;
          this.implementation_ = c2;
          this.currentlyAt_ = a2;
          this.currentlyWith_ = b2;
          this.waitForWork_ = null;
          this.requests_ = [];
          this.currentStep_ = this.currentRoute_ = null;
          this.mainLoopPromise_ = Promise.resolve().then(function() {
            return d2.mainLoop_();
          });
          this.destroyer_ = new shaka.util.Destroyer(function() {
            return d2.doDestroy_();
          });
        };
        shaka.routing.Walker.prototype.getCurrentPayload = function() {
          return this.currentlyWith_;
        };
        shaka.routing.Walker.prototype.destroy = function() {
          return this.destroyer_.destroy();
        };
        shaka.routing.Walker.prototype.doDestroy_ = function() {
          var a2 = this, b2, c2, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            if (1 == e2.nextAddress)
              return a2.currentStep_ && a2.currentStep_.abort(), a2.unblockMainLoop_(), e2.yield(a2.mainLoopPromise_, 2);
            if (a2.currentRoute_)
              a2.currentRoute_.listeners.onCancel();
            b2 = $jscomp.makeIterator(a2.requests_);
            for (c2 = b2.next(); !c2.done; c2 = b2.next())
              d2 = c2.value, d2.listeners.onCancel();
            a2.currentRoute_ = null;
            a2.requests_ = [];
            a2.implementation_ = null;
            e2.jumpToEnd();
          });
        };
        shaka.routing.Walker.prototype.startNewRoute = function(a2) {
          var b2 = { onStart: function() {
          }, onEnd: function() {
          }, onCancel: function() {
          }, onError: function(c2) {
          }, onSkip: function() {
          }, onEnter: function() {
          } };
          this.requests_.push({ create: a2, listeners: b2 });
          this.currentStep_ && this.currentStep_.abort();
          this.unblockMainLoop_();
          return b2;
        };
        shaka.routing.Walker.prototype.mainLoop_ = function() {
          var a2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            return a2.destroyer_.destroyed() ? b2.jumpTo(0) : b2.yield(a2.doOneThing_(), 1);
          });
        };
        shaka.routing.Walker.prototype.doOneThing_ = function() {
          if (this.tryNewRoute_())
            return Promise.resolve();
          if (this.currentRoute_)
            return this.takeNextStep_();
          goog.asserts.assert(null == this.waitForWork_, "We should not have a promise yet.");
          this.implementation_.onIdle(this.currentlyAt_);
          return this.waitForWork_ = new shaka.util.PublicPromise();
        };
        shaka.routing.Walker.prototype.tryNewRoute_ = function() {
          goog.asserts.assert(null == this.currentStep_, "We should never have a current step between taking steps.");
          if (0 == this.requests_.length || this.currentRoute_ && !this.currentRoute_.interruptible)
            return false;
          this.currentRoute_ && (this.currentRoute_.listeners.onCancel(), this.currentRoute_ = null);
          var a2 = this.requests_.shift(), b2 = a2.create(this.currentlyWith_);
          if (b2)
            a2.listeners.onStart(), this.currentRoute_ = {
              node: b2.node,
              payload: b2.payload,
              interruptible: b2.interruptible,
              listeners: a2.listeners
            };
          else
            a2.listeners.onSkip();
          return true;
        };
        shaka.routing.Walker.prototype.takeNextStep_ = function() {
          var a2 = this, b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            switch (d2.nextAddress) {
              case 1:
                return goog.asserts.assert(a2.currentRoute_, "We need a current route to take the next step."), a2.currentlyAt_ = a2.implementation_.getNext(a2.currentlyAt_, a2.currentlyWith_, a2.currentRoute_.node, a2.currentRoute_.payload), a2.currentRoute_.listeners.onEnter(a2.currentlyAt_), d2.setCatchFinallyBlocks(2), a2.currentStep_ = a2.implementation_.enterNode(
                  a2.currentlyAt_,
                  a2.currentlyWith_,
                  a2.currentRoute_.payload
                ), d2.yield(a2.currentStep_.promise, 4);
              case 4:
                a2.currentStep_ = null;
                a2.currentlyAt_ == a2.currentRoute_.node && (a2.currentRoute_.listeners.onEnd(), a2.currentRoute_ = null);
                d2.leaveTryBlock(0);
                break;
              case 2:
                b2 = d2.enterCatchBlock();
                if (b2.code == shaka.util.Error.Code.OPERATION_ABORTED)
                  goog.asserts.assert(a2.currentRoute_.interruptible, "Do not put abortable steps in non-interruptible routes!"), a2.currentRoute_.listeners.onCancel();
                else
                  a2.currentRoute_.listeners.onError(b2);
                a2.currentRoute_ = null;
                a2.currentStep_ = null;
                c2 = a2;
                return d2.yield(a2.implementation_.handleError(a2.currentlyWith_, b2), 5);
              case 5:
                c2.currentlyAt_ = d2.yieldResult, d2.jumpToEnd();
            }
          });
        };
        shaka.routing.Walker.prototype.unblockMainLoop_ = function() {
          this.waitForWork_ && (this.waitForWork_.resolve(), this.waitForWork_ = null);
        };
        shaka.text.SimpleTextDisplayer = function(a2) {
          this.textTrack_ = null;
          for (var b2 = $jscomp.makeIterator(Array.from(a2.textTracks)), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, c2.mode = "disabled", c2.label == shaka.Player.TextTrackLabel && (this.textTrack_ = c2);
          this.textTrack_ || (this.textTrack_ = a2.addTextTrack("subtitles", shaka.Player.TextTrackLabel));
          this.textTrack_.mode = "hidden";
        };
        shaka.text.SimpleTextDisplayer.prototype.remove = function(a2, b2) {
          if (!this.textTrack_)
            return false;
          shaka.text.SimpleTextDisplayer.removeWhere_(this.textTrack_, function(c2) {
            return c2.startTime < b2 && c2.endTime > a2;
          });
          return true;
        };
        shaka.text.SimpleTextDisplayer.prototype.append = function(a2) {
          var b2 = function(h) {
            var k2 = [], l = h.fontWeight >= shaka.text.Cue.fontWeight.BOLD, m = h.fontStyle == shaka.text.Cue.fontStyle.ITALIC, n = h.textDecoration.includes(shaka.text.Cue.textDecoration.UNDERLINE);
            l && k2.push("b");
            m && k2.push("i");
            n && k2.push("u");
            l = k2.reduce(function(p, q) {
              return p + "<" + q + ">";
            }, "");
            k2 = k2.reduceRight(function(p, q) {
              return p + "</" + q + ">";
            }, "");
            return h.lineBreak || h.spacer ? (h.spacer && shaka.Deprecate.deprecateFeature(4, "shaka.extern.Cue", "Please use lineBreak instead of spacer."), "\n") : h.nestedCues.length ? h.nestedCues.map(b2).join("") : l + h.payload + k2;
          }, c2 = function(h, k2) {
            for (var l = $jscomp.makeIterator(h), m = l.next(); !m.done; m = l.next())
              if (m = m.value, m.isContainer)
                c2(m.nestedCues, k2);
              else {
                var n = m.clone();
                n.nestedCues = [];
                n.payload = b2(m);
                k2.push(n);
              }
            return k2;
          }, d2 = c2(a2, []), e2 = [];
          a2 = this.textTrack_.cues ? Array.from(this.textTrack_.cues) : [];
          var f2 = {};
          d2 = $jscomp.makeIterator(d2);
          for (var g = d2.next(); !g.done; f2 = { $jscomp$loop$prop$inCue$599: f2.$jscomp$loop$prop$inCue$599 }, g = d2.next())
            f2.$jscomp$loop$prop$inCue$599 = g.value, a2.some(function(h) {
              return function(k2) {
                return k2.startTime == h.$jscomp$loop$prop$inCue$599.startTime && k2.endTime == h.$jscomp$loop$prop$inCue$599.endTime && k2.text == h.$jscomp$loop$prop$inCue$599.payload ? true : false;
              };
            }(f2)) || (g = shaka.text.SimpleTextDisplayer.convertToTextTrackCue_(f2.$jscomp$loop$prop$inCue$599)) && e2.push(g);
          a2 = e2.slice().sort(function(h, k2) {
            return h.startTime != k2.startTime ? h.startTime - k2.startTime : h.endTime != k2.endTime ? h.endTime - k2.startTime : "line" in VTTCue.prototype ? e2.indexOf(k2) - e2.indexOf(h) : e2.indexOf(h) - e2.indexOf(k2);
          });
          a2 = $jscomp.makeIterator(a2);
          for (f2 = a2.next(); !f2.done; f2 = a2.next())
            this.textTrack_.addCue(f2.value);
        };
        shaka.text.SimpleTextDisplayer.prototype.destroy = function() {
          this.textTrack_ && (shaka.text.SimpleTextDisplayer.removeWhere_(this.textTrack_, function(a2) {
            return true;
          }), this.textTrack_.mode = "disabled");
          this.textTrack_ = null;
          return Promise.resolve();
        };
        shaka.text.SimpleTextDisplayer.prototype.isTextVisible = function() {
          return "showing" == this.textTrack_.mode;
        };
        shaka.text.SimpleTextDisplayer.prototype.setTextVisibility = function(a2) {
          this.textTrack_.mode = a2 ? "showing" : "hidden";
        };
        shaka.text.SimpleTextDisplayer.convertToTextTrackCue_ = function(a2) {
          if (a2.startTime >= a2.endTime)
            return shaka.log.warning("Invalid cue times: " + a2.startTime + " - " + a2.endTime), null;
          var b2 = shaka.text.Cue, c2 = new VTTCue(a2.startTime, a2.endTime, a2.payload);
          c2.lineAlign = a2.lineAlign;
          c2.positionAlign = a2.positionAlign;
          a2.size && (c2.size = a2.size);
          try {
            c2.align = a2.textAlign;
          } catch (d2) {
          }
          "center" == a2.textAlign && "center" != c2.align && (c2.align = "middle");
          a2.writingMode == b2.writingMode.VERTICAL_LEFT_TO_RIGHT ? c2.vertical = "lr" : a2.writingMode == b2.writingMode.VERTICAL_RIGHT_TO_LEFT && (c2.vertical = "rl");
          a2.lineInterpretation == b2.lineInterpretation.PERCENTAGE && (c2.snapToLines = false);
          null != a2.line && (c2.line = a2.line);
          null != a2.position && (c2.position = a2.position);
          return c2;
        };
        shaka.text.SimpleTextDisplayer.removeWhere_ = function(a2, b2) {
          var c2 = a2.mode, d2 = "showing" == c2 ? "showing" : "hidden";
          a2.mode = d2;
          goog.asserts.assert(a2.cues, 'Cues should be accessible when mode is set to "' + d2 + '".');
          d2 = $jscomp.makeIterator(Array.from(a2.cues));
          for (var e2 = d2.next(); !e2.done; e2 = d2.next())
            (e2 = e2.value) && b2(e2) && a2.removeCue(e2);
          a2.mode = c2;
        };
        goog.exportSymbol("shaka.text.SimpleTextDisplayer", shaka.text.SimpleTextDisplayer);
        goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype, "setTextVisibility", shaka.text.SimpleTextDisplayer.prototype.setTextVisibility);
        goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype, "isTextVisible", shaka.text.SimpleTextDisplayer.prototype.isTextVisible);
        goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype, "destroy", shaka.text.SimpleTextDisplayer.prototype.destroy);
        goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype, "append", shaka.text.SimpleTextDisplayer.prototype.append);
        goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype, "remove", shaka.text.SimpleTextDisplayer.prototype.remove);
        shaka.util.Dom = function() {
        };
        shaka.util.Dom.createHTMLElement = function(a2) {
          return document.createElement(a2);
        };
        shaka.util.Dom.createButton = function() {
          return document.createElement("button");
        };
        shaka.util.Dom.asHTMLElement = function(a2) {
          return a2;
        };
        shaka.util.Dom.asHTMLMediaElement = function(a2) {
          return a2;
        };
        shaka.util.Dom.getElementByClassName = function(a2, b2) {
          var c2 = b2.getElementsByClassName(a2);
          goog.asserts.assert(1 == c2.length, "Should only be one element with class name " + a2);
          return shaka.util.Dom.asHTMLElement(c2[0]);
        };
        shaka.util.Dom.removeAllChildren = function(a2) {
          for (; a2.firstChild; )
            a2.removeChild(a2.firstChild);
        };
        goog.exportSymbol("shaka.util.Dom", shaka.util.Dom);
        goog.exportProperty(shaka.util.Dom, "removeAllChildren", shaka.util.Dom.removeAllChildren);
        shaka.text.UITextDisplayer = function(a2, b2) {
          var c2 = this;
          goog.asserts.assert(b2, "videoContainer should be valid.");
          this.isTextVisible_ = false;
          this.cues_ = [];
          this.video_ = a2;
          this.videoContainer_ = b2;
          this.textContainer_ = shaka.util.Dom.createHTMLElement("div");
          this.textContainer_.classList.add("shaka-text-container");
          this.textContainer_.style.textAlign = "center";
          this.textContainer_.style.display = "flex";
          this.textContainer_.style.flexDirection = "column";
          this.textContainer_.style.alignItems = "center";
          this.textContainer_.style.justifyContent = "flex-end";
          this.videoContainer_.appendChild(this.textContainer_);
          this.captionsTimer_ = new shaka.util.Timer(function() {
            c2.updateCaptions_();
          }).tickEvery(0.25);
          this.currentCuesMap_ = /* @__PURE__ */ new Map();
          this.eventManager_ = new shaka.util.EventManager();
          this.eventManager_.listen(document, "fullscreenchange", function() {
            c2.updateCaptions_(true);
          });
          this.resizeObserver_ = null;
          "ResizeObserver" in window && (this.resizeObserver_ = new ResizeObserver(function() {
            c2.updateCaptions_(true);
          }), this.resizeObserver_.observe(this.textContainer_));
          this.regionElements_ = /* @__PURE__ */ new Map();
        };
        shaka.text.UITextDisplayer.prototype.append = function(a2) {
          var b2 = [].concat($jscomp.arrayFromIterable(this.cues_)), c2 = {};
          a2 = $jscomp.makeIterator(a2);
          for (var d2 = a2.next(); !d2.done; c2 = { $jscomp$loop$prop$cue$601: c2.$jscomp$loop$prop$cue$601 }, d2 = a2.next())
            c2.$jscomp$loop$prop$cue$601 = d2.value, b2.some(function(e2) {
              return function(f2) {
                return shaka.text.Cue.equal(f2, e2.$jscomp$loop$prop$cue$601);
              };
            }(c2)) || this.cues_.push(c2.$jscomp$loop$prop$cue$601);
          this.updateCaptions_();
        };
        shaka.text.UITextDisplayer.prototype.destroy = function() {
          this.videoContainer_.removeChild(this.textContainer_);
          this.textContainer_ = null;
          this.isTextVisible_ = false;
          this.cues_ = [];
          this.captionsTimer_ && this.captionsTimer_.stop();
          this.currentCuesMap_.clear();
          this.eventManager_ && (this.eventManager_.release(), this.eventManager_ = null);
          this.resizeObserver_ && (this.resizeObserver_.disconnect(), this.resizeObserver_ = null);
        };
        shaka.text.UITextDisplayer.prototype.remove = function(a2, b2) {
          if (!this.textContainer_)
            return false;
          var c2 = this.cues_.length;
          this.cues_ = this.cues_.filter(function(d2) {
            return d2.startTime < a2 || d2.endTime >= b2;
          });
          this.updateCaptions_(c2 > this.cues_.length);
          return true;
        };
        shaka.text.UITextDisplayer.prototype.isTextVisible = function() {
          return this.isTextVisible_;
        };
        shaka.text.UITextDisplayer.prototype.setTextVisibility = function(a2) {
          this.isTextVisible_ = a2;
        };
        shaka.text.UITextDisplayer.prototype.updateCuesRecursive_ = function(a2, b2, c2, d2) {
          var e2 = false, f2 = [], g = [];
          a2 = $jscomp.makeIterator(a2);
          for (var h = a2.next(); !h.done; h = a2.next()) {
            h = h.value;
            d2.push(h);
            var k2 = this.currentCuesMap_.get(h), l = h.startTime <= c2 && h.endTime > c2, m = k2 ? k2.wrapper : null;
            k2 && (f2.push(k2.cueElement), k2.regionElement && f2.push(k2.regionElement), l || (e2 = true, this.currentCuesMap_["delete"](h), k2 = null));
            l && (g.push(h), k2 || (this.createCue_(h, d2), k2 = this.currentCuesMap_.get(h), m = k2.wrapper, e2 = true));
            0 < h.nestedCues.length && m && this.updateCuesRecursive_(
              h.nestedCues,
              m,
              c2,
              d2
            );
            k2 = d2.pop();
            goog.asserts.assert(k2 == h, "Parent cues should be kept in order");
          }
          if (e2) {
            c2 = $jscomp.makeIterator(f2);
            for (d2 = c2.next(); !d2.done; d2 = c2.next())
              d2 = d2.value, d2.parentElement && d2.parentElement.removeChild(d2);
            g.sort(function(n, p) {
              return n.startTime != p.startTime ? n.startTime - p.startTime : n.endTime - p.endTime;
            });
            g = $jscomp.makeIterator(g);
            for (h = g.next(); !h.done; h = g.next())
              c2 = this.currentCuesMap_.get(h.value), goog.asserts.assert(c2, "cueRegistry should exist."), c2.regionElement ? (b2.appendChild(c2.regionElement), c2.regionElement.appendChild(c2.cueElement)) : b2.appendChild(c2.cueElement);
          }
        };
        shaka.text.UITextDisplayer.prototype.updateCaptions_ = function(a2) {
          if (this.textContainer_) {
            var b2 = this.video_.currentTime;
            if (!this.isTextVisible_ || (void 0 === a2 ? 0 : a2)) {
              a2 = $jscomp.makeIterator(this.regionElements_.values());
              for (var c2 = a2.next(); !c2.done; c2 = a2.next())
                shaka.util.Dom.removeAllChildren(c2.value);
              shaka.util.Dom.removeAllChildren(this.textContainer_);
              this.currentCuesMap_.clear();
              this.regionElements_.clear();
            }
            if (this.isTextVisible_) {
              a2 = /* @__PURE__ */ new Map();
              c2 = $jscomp.makeIterator(this.currentCuesMap_.keys());
              for (var d2 = c2.next(); !d2.done; d2 = c2.next())
                d2 = d2.value, a2.set(d2, this.currentCuesMap_.get(d2));
              this.updateCuesRecursive_(this.cues_, this.textContainer_, b2, []);
              if (goog.DEBUG)
                for (b2 = $jscomp.makeIterator(a2.keys()), d2 = b2.next(); !d2.done; d2 = b2.next())
                  c2 = d2.value, this.currentCuesMap_.has(c2) || (c2 = a2.get(c2).cueElement, goog.asserts.assert(!c2.parentNode, "Cue was not properly removed!"));
            }
          }
        };
        shaka.text.UITextDisplayer.prototype.getRegionElement_ = function(a2) {
          var b2 = a2.region;
          if (this.regionElements_.has(b2.id))
            return this.regionElements_.get(b2.id);
          var c2 = shaka.util.Dom.createHTMLElement("span"), d2 = shaka.text.CueRegion.units.PERCENTAGE, e2 = b2.heightUnits == d2 ? "%" : "px", f2 = b2.widthUnits == d2 ? "%" : "px";
          d2 = b2.viewportAnchorUnits == d2 ? "%" : "px";
          c2.id = "shaka-text-region---" + b2.id;
          c2.classList.add("shaka-text-region");
          c2.style.height = b2.height + e2;
          c2.style.width = b2.width + f2;
          c2.style.position = "absolute";
          c2.style.top = b2.viewportAnchorY + d2;
          c2.style.left = b2.viewportAnchorX + d2;
          c2.style.display = "flex";
          c2.style.flexDirection = "column";
          c2.style.alignItems = "center";
          c2.style.justifyContent = a2.displayAlign == shaka.text.Cue.displayAlign.BEFORE ? "flex-start" : a2.displayAlign == shaka.text.Cue.displayAlign.CENTER ? "center" : "flex-end";
          this.regionElements_.set(b2.id, c2);
          return c2;
        };
        shaka.text.UITextDisplayer.prototype.createCue_ = function(a2, b2) {
          var c2 = 1 < b2.length, d2 = c2 ? "span" : "div";
          if (a2.lineBreak || a2.spacer)
            a2.spacer && shaka.Deprecate.deprecateFeature(4, "shaka.extern.Cue", "Please use lineBreak instead of spacer."), d2 = "br";
          c2 = !c2 && 0 < a2.nestedCues.length;
          var e2 = shaka.util.Dom.createHTMLElement(d2);
          "br" != d2 && this.setCaptionStyles_(e2, a2, b2, c2);
          d2 = null;
          a2.region && a2.region.id && (d2 = this.getRegionElement_(a2));
          var f2 = e2;
          c2 && (f2 = shaka.util.Dom.createHTMLElement("span"), f2.classList.add("shaka-text-wrapper"), f2.style.backgroundColor = a2.backgroundColor, e2.appendChild(f2));
          this.currentCuesMap_.set(a2, { cueElement: e2, wrapper: f2, regionElement: d2 });
        };
        shaka.text.UITextDisplayer.prototype.setCaptionStyles_ = function(a2, b2, c2, d2) {
          var e2 = shaka.text.Cue, f2 = a2.style, g = 0 == b2.nestedCues.length, h = 1 < c2.length;
          f2.whiteSpace = "pre-wrap";
          var k2 = b2.payload.replace(/\s+$/g, function(m) {
            return "\xA0".repeat(m.length);
          });
          f2.webkitTextStrokeColor = b2.textStrokeColor;
          f2.webkitTextStrokeWidth = b2.textStrokeWidth;
          f2.color = b2.color;
          f2.direction = b2.direction;
          f2.opacity = b2.opacity;
          f2.paddingLeft = shaka.text.UITextDisplayer.convertLengthValue_(b2.linePadding, b2, this.videoContainer_);
          f2.paddingRight = shaka.text.UITextDisplayer.convertLengthValue_(b2.linePadding, b2, this.videoContainer_);
          if (b2.backgroundImage)
            f2.backgroundImage = "url('" + b2.backgroundImage + "')", f2.backgroundRepeat = "no-repeat", f2.backgroundSize = "contain", f2.backgroundPosition = "center";
          else {
            if (b2.nestedCues.length)
              var l = a2;
            else
              l = shaka.util.Dom.createHTMLElement("span"), a2.appendChild(l);
            b2.border && (l.style.border = b2.border);
            d2 || ((a2 = shaka.text.UITextDisplayer.inheritProperty_(c2, function(m) {
              return m.backgroundColor;
            })) ? l.style.backgroundColor = a2 : k2 && (l.style.backgroundColor = "rgba(0, 0, 0, 0.8)"));
            k2 && (l.textContent = k2);
          }
          h && !c2[c2.length - 1].isContainer ? f2.display = "inline" : (f2.display = "flex", f2.flexDirection = "column", f2.alignItems = "center", f2.justifyContent = b2.displayAlign == e2.displayAlign.BEFORE ? "flex-start" : b2.displayAlign == e2.displayAlign.CENTER ? "center" : "flex-end");
          g || (f2.margin = "0");
          f2.fontFamily = b2.fontFamily;
          f2.fontWeight = b2.fontWeight.toString();
          f2.fontStyle = b2.fontStyle;
          f2.letterSpacing = b2.letterSpacing;
          f2.fontSize = shaka.text.UITextDisplayer.convertLengthValue_(
            b2.fontSize,
            b2,
            this.videoContainer_
          );
          b2.line && b2.lineInterpretation == e2.lineInterpretation.PERCENTAGE && (f2.position = "absolute", f2.left = "0", f2.top = "0", b2.writingMode == e2.writingMode.HORIZONTAL_TOP_TO_BOTTOM ? (f2.width = "100%", b2.lineAlign == e2.lineAlign.START ? f2.top = b2.line + "%" : b2.lineAlign == e2.lineAlign.END && (f2.bottom = b2.line + "%")) : b2.writingMode == e2.writingMode.VERTICAL_LEFT_TO_RIGHT ? (f2.height = "100%", b2.lineAlign == e2.lineAlign.START ? f2.left = b2.line + "%" : b2.lineAlign == e2.lineAlign.END && (f2.right = b2.line + "%")) : (f2.height = "100%", b2.lineAlign == e2.lineAlign.START ? f2.right = b2.line + "%" : b2.lineAlign == e2.lineAlign.END && (f2.left = b2.line + "%")));
          f2.lineHeight = b2.lineHeight;
          b2.position && (b2.writingMode == e2.writingMode.HORIZONTAL_TOP_TO_BOTTOM ? f2.paddingLeft = b2.position : f2.paddingTop = b2.position);
          b2.positionAlign == e2.positionAlign.LEFT ? f2.cssFloat = "left" : b2.positionAlign == e2.positionAlign.RIGHT && (f2.cssFloat = "right");
          f2.textAlign = b2.textAlign;
          f2.textDecoration = b2.textDecoration.join(" ");
          f2.writingMode = b2.writingMode;
          "writingMode" in document.documentElement.style && f2.writingMode == b2.writingMode || (f2.webkitWritingMode = b2.writingMode);
          b2.size && (b2.writingMode == e2.writingMode.HORIZONTAL_TOP_TO_BOTTOM ? f2.width = b2.size + "%" : f2.height = b2.size + "%");
        };
        shaka.text.UITextDisplayer.getLengthValueInfo_ = function(a2) {
          return (a2 = new RegExp(/(\d*\.?\d+)([a-z]+|%+)/).exec(a2)) ? { value: Number(a2[1]), unit: a2[2] } : null;
        };
        shaka.text.UITextDisplayer.convertLengthValue_ = function(a2, b2, c2) {
          var d2 = shaka.text.UITextDisplayer.getLengthValueInfo_(a2);
          if (!d2)
            return a2;
          var e2 = d2.value;
          switch (d2.unit) {
            case "%":
              return shaka.text.UITextDisplayer.getAbsoluteLengthInPixels_(e2 / 100, b2, c2);
            case "c":
              return shaka.text.UITextDisplayer.getAbsoluteLengthInPixels_(e2, b2, c2);
            default:
              return a2;
          }
        };
        shaka.text.UITextDisplayer.getAbsoluteLengthInPixels_ = function(a2, b2, c2) {
          return c2.clientHeight * a2 / b2.cellResolution.rows + "px";
        };
        shaka.text.UITextDisplayer.inheritProperty_ = function(a2, b2) {
          for (var c2 = a2.length - 1; 0 <= c2; c2--) {
            var d2 = b2(a2[c2]);
            if (d2 || 0 === d2)
              return d2;
          }
          return null;
        };
        goog.exportSymbol("shaka.text.UITextDisplayer", shaka.text.UITextDisplayer);
        goog.exportProperty(shaka.text.UITextDisplayer.prototype, "setTextVisibility", shaka.text.UITextDisplayer.prototype.setTextVisibility);
        goog.exportProperty(shaka.text.UITextDisplayer.prototype, "isTextVisible", shaka.text.UITextDisplayer.prototype.isTextVisible);
        goog.exportProperty(shaka.text.UITextDisplayer.prototype, "remove", shaka.text.UITextDisplayer.prototype.remove);
        goog.exportProperty(shaka.text.UITextDisplayer.prototype, "destroy", shaka.text.UITextDisplayer.prototype.destroy);
        goog.exportProperty(shaka.text.UITextDisplayer.prototype, "append", shaka.text.UITextDisplayer.prototype.append);
        shaka.text.WebVttGenerator = function() {
        };
        shaka.text.WebVttGenerator.convert = function(a2, b2) {
          var c2 = function(h) {
            var k2 = [], l = h.fontWeight >= shaka.text.Cue.fontWeight.BOLD, m = h.fontStyle == shaka.text.Cue.fontStyle.ITALIC, n = h.textDecoration.includes(shaka.text.Cue.textDecoration.UNDERLINE);
            l && k2.push("b");
            m && k2.push("i");
            n && k2.push("u");
            l = k2.reduce(function(p, q) {
              return p + "<" + q + ">";
            }, "");
            k2 = k2.reduceRight(function(p, q) {
              return p + "</" + q + ">";
            }, "");
            return h.lineBreak || h.spacer ? (h.spacer && shaka.Deprecate.deprecateFeature(4, "shaka.text.Cue", "Please use lineBreak instead of spacer."), "\n") : h.nestedCues.length ? h.nestedCues.map(c2).join("") : l + h.payload + k2;
          }, d2 = function(h) {
            for (var k2 = h, l = $jscomp.makeIterator(b2), m = l.next(); !m.done; m = l.next())
              m = m.value, m.end && m.start < h && (k2 += m.end - m.start);
            h = Math.floor(k2 / 3600);
            l = Math.floor(k2 / 60 % 60);
            m = Math.floor(k2 % 60);
            k2 = Math.floor(1e3 * k2 % 1e3);
            return (10 > h ? "0" : "") + h + ":" + (10 > l ? "0" : "") + l + ":" + (10 > m ? "0" : "") + m + "." + (100 > k2 ? 10 > k2 ? "00" : "0" : "") + k2;
          }, e2 = a2.map(function(h) {
            if (h.nestedCues.length) {
              var k2 = h.clone();
              k2.nestedCues = [];
              k2.payload = c2(h);
              return k2;
            }
            return h;
          }), f2 = "WEBVTT\n\n";
          e2 = $jscomp.makeIterator(e2);
          for (var g = e2.next(); !g.done; g = e2.next())
            g = g.value, f2 += d2(g.startTime) + " --> " + d2(g.endTime) + function(h) {
              var k2 = [], l = shaka.text.Cue;
              switch (h.textAlign) {
                case l.textAlign.LEFT:
                  k2.push("align:left");
                  break;
                case l.textAlign.RIGHT:
                  k2.push("align:right");
                  break;
                case l.textAlign.CENTER:
                  k2.push("align:middle");
                  break;
                case l.textAlign.START:
                  k2.push("align:start");
                  break;
                case l.textAlign.END:
                  k2.push("align:end");
              }
              switch (h.writingMode) {
                case l.writingMode.VERTICAL_LEFT_TO_RIGHT:
                  k2.push("vertical:lr");
                  break;
                case l.writingMode.VERTICAL_RIGHT_TO_LEFT:
                  k2.push("vertical:rl");
              }
              return k2.length ? " " + k2.join(" ") : "";
            }(g) + "\n", f2 += g.payload + "\n\n";
          return f2;
        };
        goog.exportSymbol("shaka.text.WebVttGenerator", shaka.text.WebVttGenerator);
        shaka.util.CmcdManager = function(a2, b2) {
          this.playerInterface_ = a2;
          this.config_ = b2;
          this.sid_ = "";
          this.sf_ = void 0;
          this.playbackStarted_ = false;
          this.buffering_ = true;
          this.starved_ = false;
        };
        shaka.util.CmcdManager.prototype.setBuffering = function(a2) {
          a2 || this.playbackStarted_ || (this.playbackStarted_ = true);
          this.playbackStarted_ && a2 && (this.starved_ = true);
          this.buffering_ = a2;
        };
        shaka.util.CmcdManager.prototype.applyManifestData = function(a2, b2) {
          try {
            this.config_.enabled && (this.sf_ = b2.format, this.apply_(a2, { ot: shaka.util.CmcdManager.ObjectType.MANIFEST, su: !this.playbackStarted_ }));
          } catch (c2) {
            shaka.log.warnOnce("CMCD_MANIFEST_ERROR", "Could not generate manifest CMCD data.", c2);
          }
        };
        shaka.util.CmcdManager.prototype.applySegmentData = function(a2, b2) {
          try {
            if (this.config_.enabled) {
              var c2 = { d: 1e3 * b2.duration, st: this.getStreamType_() };
              c2.ot = this.getObjectType_(b2);
              var d2 = shaka.util.CmcdManager.ObjectType, e2 = c2.ot === d2.VIDEO || c2.ot === d2.AUDIO || c2.ot === d2.MUXED || c2.ot === d2.TIMED_TEXT;
              e2 && (c2.bl = this.getBufferLength_(b2.type));
              b2.bandwidth && (c2.br = b2.bandwidth / 1e3);
              e2 && c2.ot !== d2.TIMED_TEXT && (c2.tb = this.getTopBandwidth_(c2.ot) / 1e3);
              this.apply_(a2, c2);
            }
          } catch (f2) {
            shaka.log.warnOnce(
              "CMCD_SEGMENT_ERROR",
              "Could not generate segment CMCD data.",
              f2
            );
          }
        };
        shaka.util.CmcdManager.prototype.applyTextData = function(a2) {
          try {
            this.config_.enabled && this.apply_(a2, { ot: shaka.util.CmcdManager.ObjectType.CAPTION, su: true });
          } catch (b2) {
            shaka.log.warnOnce("CMCD_TEXT_ERROR", "Could not generate text CMCD data.", b2);
          }
        };
        shaka.util.CmcdManager.prototype.appendSrcData = function(a2, b2) {
          try {
            if (!this.config_.enabled)
              return a2;
            var c2 = this.createData_();
            c2.ot = this.getObjectTypeFromMimeType_(b2);
            c2.su = true;
            var d2 = shaka.util.CmcdManager.toQuery(c2);
            return shaka.util.CmcdManager.appendQueryToUri(a2, d2);
          } catch (e2) {
            return shaka.log.warnOnce("CMCD_SRC_ERROR", "Could not generate src CMCD data.", e2), a2;
          }
        };
        shaka.util.CmcdManager.prototype.appendTextTrackData = function(a2) {
          try {
            if (!this.config_.enabled)
              return a2;
            var b2 = this.createData_();
            b2.ot = shaka.util.CmcdManager.ObjectType.CAPTION;
            b2.su = true;
            var c2 = shaka.util.CmcdManager.toQuery(b2);
            return shaka.util.CmcdManager.appendQueryToUri(a2, c2);
          } catch (d2) {
            return shaka.log.warnOnce("CMCD_TEXT_TRACK_ERROR", "Could not generate text track CMCD data.", d2), a2;
          }
        };
        shaka.util.CmcdManager.prototype.createData_ = function() {
          this.sid_ || (this.sid_ = this.config_.sessionId || window.crypto.randomUUID());
          return { v: shaka.util.CmcdManager.Version, sf: this.sf_, sid: this.sid_, cid: this.config_.contentId, mtp: this.playerInterface_.getBandwidthEstimate() / 1e3 };
        };
        shaka.util.CmcdManager.prototype.apply_ = function(a2, b2, c2) {
          b2 = void 0 === b2 ? {} : b2;
          c2 = void 0 === c2 ? this.config_.useHeaders : c2;
          if (this.config_.enabled) {
            Object.assign(b2, this.createData_());
            b2.pr = this.playerInterface_.getPlaybackRate();
            var d2 = b2.ot === shaka.util.CmcdManager.ObjectType.VIDEO || b2.ot === shaka.util.CmcdManager.ObjectType.MUXED;
            this.starved_ && d2 && (b2.bs = true, b2.su = true, this.starved_ = false);
            null == b2.su && (b2.su = this.buffering_);
            if (c2)
              b2 = shaka.util.CmcdManager.toHeaders(b2), Object.keys(b2).length && Object.assign(a2.headers, b2);
            else {
              var e2 = shaka.util.CmcdManager.toQuery(b2);
              e2 && (a2.uris = a2.uris.map(function(f2) {
                return shaka.util.CmcdManager.appendQueryToUri(f2, e2);
              }));
            }
          }
        };
        shaka.util.CmcdManager.prototype.getObjectType_ = function(a2) {
          var b2 = a2.type;
          if (a2.init)
            return shaka.util.CmcdManager.ObjectType.INIT;
          if ("video" == b2)
            return a2.codecs.includes(",") ? shaka.util.CmcdManager.ObjectType.MUXED : shaka.util.CmcdManager.ObjectType.VIDEO;
          if ("audio" == b2)
            return shaka.util.CmcdManager.ObjectType.AUDIO;
          if ("text" == b2)
            return "application/mp4" === a2.mimeType ? shaka.util.CmcdManager.ObjectType.TIMED_TEXT : shaka.util.CmcdManager.ObjectType.CAPTION;
        };
        shaka.util.CmcdManager.prototype.getObjectTypeFromMimeType_ = function(a2) {
          switch (a2) {
            case "video/webm":
            case "video/mp4":
              return shaka.util.CmcdManager.ObjectType.MUXED;
            case "application/x-mpegurl":
              return shaka.util.CmcdManager.ObjectType.MANIFEST;
          }
        };
        shaka.util.CmcdManager.prototype.getBufferLength_ = function(a2) {
          a2 = this.playerInterface_.getBufferedInfo()[a2];
          if (!a2.length)
            return NaN;
          var b2 = this.playerInterface_.getCurrentTime();
          return (a2 = a2.find(function(c2) {
            return c2.start <= b2 && c2.end >= b2;
          })) ? 1e3 * (a2.end - b2) : NaN;
        };
        shaka.util.CmcdManager.prototype.getStreamType_ = function() {
          return this.playerInterface_.isLive() ? shaka.util.CmcdManager.StreamType.LIVE : shaka.util.CmcdManager.StreamType.VOD;
        };
        shaka.util.CmcdManager.prototype.getTopBandwidth_ = function(a2) {
          var b2 = this.playerInterface_.getVariantTracks();
          if (!b2.length)
            return NaN;
          var c2 = b2[0];
          b2 = $jscomp.makeIterator(b2);
          for (var d2 = b2.next(); !d2.done; d2 = b2.next())
            d2 = d2.value, "variant" === d2.type && d2.bandwidth > c2.bandwidth && (c2 = d2);
          b2 = shaka.util.CmcdManager.ObjectType;
          switch (a2) {
            case b2.VIDEO:
              return c2.videoBandwidth || NaN;
            case b2.AUDIO:
              return c2.audioBandwidth || NaN;
            default:
              return c2.bandwidth;
          }
        };
        shaka.util.CmcdManager.serialize = function(a2) {
          var b2 = [], c2 = function(m) {
            return !Number.isNaN(m) && null != m && "" !== m && false !== m;
          }, d2 = function(m) {
            return Math.round(m);
          }, e2 = function(m) {
            return 100 * d2(m / 100);
          };
          e2 = { br: d2, d: d2, bl: e2, dl: e2, mtp: e2, nor: function(m) {
            return encodeURIComponent(m);
          }, rtp: e2, tb: d2 };
          var f2 = Object.keys(a2 || {}).sort();
          f2 = $jscomp.makeIterator(f2);
          for (var g = f2.next(); !g.done; g = f2.next()) {
            g = g.value;
            var h = a2[g];
            if (c2(h) && ("v" !== g || 1 !== h) && ("pr" != g || 1 !== h)) {
              var k2 = e2[g];
              k2 && (h = k2(h));
              k2 = typeof h;
              var l = void 0;
              l = "string" === k2 && "ot" !== g && "sf" !== g && "st" !== g ? g + "=" + JSON.stringify(h) : "boolean" === k2 ? g : "symbol" === k2 ? g + "=" + h.description : g + "=" + h;
              b2.push(l);
            }
          }
          return b2.join(",");
        };
        shaka.util.CmcdManager.toHeaders = function(a2) {
          var b2 = Object.keys(a2), c2 = {}, d2 = ["Object", "Request", "Session", "Status"], e2 = [{}, {}, {}, {}], f2 = { br: 0, d: 0, ot: 0, tb: 0, bl: 1, dl: 1, mtp: 1, nor: 1, nrr: 1, su: 1, cid: 2, pr: 2, sf: 2, sid: 2, st: 2, v: 2, bs: 3, rtp: 3 };
          b2 = $jscomp.makeIterator(b2);
          for (var g = b2.next(); !g.done; g = b2.next())
            g = g.value, e2[null != f2[g] ? f2[g] : 1][g] = a2[g];
          for (a2 = 0; a2 < e2.length; a2++)
            (f2 = shaka.util.CmcdManager.serialize(e2[a2])) && (c2["CMCD-" + d2[a2]] = f2);
          return c2;
        };
        shaka.util.CmcdManager.toQuery = function(a2) {
          return shaka.util.CmcdManager.serialize(a2);
        };
        shaka.util.CmcdManager.appendQueryToUri = function(a2, b2) {
          if (!b2 || a2.includes("offline:"))
            return a2;
          var c2 = new goog.Uri(a2);
          c2.getQueryData().set("CMCD", b2);
          return c2.toString();
        };
        shaka.util.CmcdManager.ObjectType = { MANIFEST: "m", AUDIO: "a", VIDEO: "v", MUXED: "av", INIT: "i", CAPTION: "c", TIMED_TEXT: "tt", KEY: "k", OTHER: "o" };
        shaka.util.CmcdManager.StreamType = { VOD: "v", LIVE: "l" };
        shaka.util.CmcdManager.StreamingFormat = { DASH: "d", HLS: "h", SMOOTH: "s", OTHER: "o" };
        goog.exportSymbol("shaka.util.CmcdManager.StreamingFormat", shaka.util.CmcdManager.StreamingFormat);
        shaka.util.CmcdManager.Version = 1;
        shaka.util.ConfigUtils = function() {
        };
        shaka.util.ConfigUtils.mergeConfigObjects = function(a2, b2, c2, d2, e2) {
          goog.asserts.assert(a2, "Destination config must not be null!");
          var f2 = e2 in d2, g = true, h;
          for (h in b2) {
            var k2 = e2 + "." + h, l = f2 ? d2[e2] : c2[h];
            f2 || h in c2 ? void 0 === b2[h] ? void 0 === l || f2 ? delete a2[h] : a2[h] = shaka.util.ObjectUtils.cloneObject(l) : l.constructor == Object && b2[h] && b2[h].constructor == Object ? (a2[h] || (a2[h] = shaka.util.ObjectUtils.cloneObject(l)), k2 = shaka.util.ConfigUtils.mergeConfigObjects(a2[h], b2[h], l, d2, k2), g = g && k2) : typeof b2[h] != typeof l || null == b2[h] || "function" != typeof b2[h] && b2[h].constructor != l.constructor ? (shaka.log.alwaysError("Invalid config, wrong type for " + k2), g = false) : ("function" == typeof c2[h] && c2[h].length != b2[h].length && shaka.log.alwaysWarn("Unexpected number of arguments for " + k2), a2[h] = b2[h]) : (shaka.log.alwaysError("Invalid config, unrecognized key " + k2), g = false);
          }
          return g;
        };
        shaka.util.ConfigUtils.convertToConfigObject = function(a2, b2) {
          for (var c2 = {}, d2 = c2, e2 = 0, f2 = 0; ; ) {
            e2 = a2.indexOf(".", e2);
            if (0 > e2)
              break;
            if (0 == e2 || "\\" != a2[e2 - 1])
              f2 = a2.substring(f2, e2).replace(/\\\./g, "."), d2[f2] = {}, d2 = d2[f2], f2 = e2 + 1;
            e2 += 1;
          }
          d2[a2.substring(f2).replace(/\\\./g, ".")] = b2;
          return c2;
        };
        shaka.util.ConfigUtils.referenceParametersAndReturn = function(a2, b2) {
          return a2 && b2;
        };
        goog.exportSymbol("shaka.util.ConfigUtils", shaka.util.ConfigUtils);
        goog.exportProperty(shaka.util.ConfigUtils, "convertToConfigObject", shaka.util.ConfigUtils.convertToConfigObject);
        goog.exportProperty(shaka.util.ConfigUtils, "mergeConfigObjects", shaka.util.ConfigUtils.mergeConfigObjects);
        shaka.util.PlayerConfiguration = function() {
        };
        shaka.util.PlayerConfiguration.createDefault = function() {
          var a2 = Infinity;
          navigator.connection && navigator.connection.saveData && (a2 = 360);
          var b2 = { retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(), servers: {}, clearKeys: {}, advanced: {}, delayLicenseRequestUntilPlayed: false, initDataTransform: shaka.media.DrmEngine.defaultInitDataTransform, logLicenseExchange: false, updateExpirationTime: 1, preferredKeySystems: [] }, c2 = {
            retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(),
            availabilityWindowOverride: NaN,
            disableAudio: false,
            disableVideo: false,
            disableText: false,
            disableThumbnails: false,
            defaultPresentationDelay: 0,
            dash: { clockSyncUri: "", ignoreDrmInfo: false, disableXlinkProcessing: false, xlinkFailGracefully: false, ignoreMinBufferTime: false, autoCorrectDrift: true, initialSegmentLimit: 1e3, ignoreSuggestedPresentationDelay: false, ignoreEmptyAdaptationSet: false, ignoreMaxSegmentDuration: false, keySystemsByURI: {
              "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey",
              "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha",
              "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready",
              "urn:uuid:79f0049a-4098-8642-ab92-e65be0885f95": "com.microsoft.playready",
              "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime"
            }, manifestPreprocessor: function(g) {
              return shaka.util.ConfigUtils.referenceParametersAndReturn([g], g);
            } },
            hls: { ignoreTextStreamFailures: false, ignoreImageStreamFailures: false, useFullSegmentsForStartTime: false, defaultAudioCodec: "mp4a.40.2", defaultVideoCodec: "avc1.42E01E" }
          }, d2 = {
            retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(),
            failureCallback: function(g) {
              shaka.log.error(
                "Unhandled streaming error",
                g
              );
              return shaka.util.ConfigUtils.referenceParametersAndReturn([g], void 0);
            },
            rebufferingGoal: 2,
            bufferingGoal: 10,
            bufferBehind: 30,
            ignoreTextStreamFailures: false,
            alwaysStreamText: false,
            startAtSegmentBoundary: false,
            gapDetectionThreshold: 0.1,
            smallGapLimit: 0.5,
            jumpLargeGaps: false,
            durationBackoff: 1,
            forceTransmuxTS: false,
            safeSeekOffset: 5,
            stallEnabled: true,
            stallThreshold: 1,
            stallSkip: 0.1,
            useNativeHlsOnSafari: true,
            inaccurateManifestTolerance: 2,
            lowLatencyMode: false,
            autoLowLatencyMode: false,
            forceHTTPS: false,
            preferNativeHls: false,
            updateIntervalSeconds: 1,
            dispatchAllEmsgBoxes: false,
            observeQualityChanges: false
          };
          if (shaka.util.Platform.isLegacyEdge() || shaka.util.Platform.isTizen() || shaka.util.Platform.isChromecast())
            d2.gapDetectionThreshold = 0.5;
          if (shaka.util.Platform.isWebOS() || shaka.util.Platform.isTizen() || shaka.util.Platform.isChromecast())
            d2.stallSkip = 0;
          var e2 = { trackSelectionCallback: function(g) {
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
              return h["return"](g);
            });
          }, downloadSizeCallback: function(g) {
            var h;
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
              if (1 == k2.nextAddress)
                return navigator.storage && navigator.storage.estimate ? k2.yield(navigator.storage.estimate(), 3) : k2["return"](true);
              h = k2.yieldResult;
              return k2["return"](h.usage + g < 0.95 * h.quota);
            });
          }, progressCallback: function(g, h) {
            return shaka.util.ConfigUtils.referenceParametersAndReturn([g, h], void 0);
          }, usePersistentLicense: true }, f2 = {
            drm: b2,
            manifest: c2,
            streaming: d2,
            offline: e2,
            abrFactory: function() {
              return new shaka.abr.SimpleAbrManager();
            },
            abr: {
              enabled: true,
              useNetworkInformation: true,
              defaultBandwidthEstimate: 1e6,
              switchInterval: 8,
              bandwidthUpgradeTarget: 0.85,
              bandwidthDowngradeTarget: 0.95,
              restrictions: { minWidth: 0, maxWidth: Infinity, minHeight: 0, maxHeight: a2, minPixels: 0, maxPixels: Infinity, minFrameRate: 0, maxFrameRate: Infinity, minBandwidth: 0, maxBandwidth: Infinity },
              advanced: { minTotalBytes: 128e3, minBytes: 16e3, fastHalfLife: 2, slowHalfLife: 5 }
            },
            preferredAudioLanguage: "",
            preferredTextLanguage: "",
            preferredVariantRole: "",
            preferredTextRole: "",
            preferredAudioChannelCount: 2,
            preferredVideoCodecs: [],
            preferredAudioCodecs: [],
            preferForcedSubs: false,
            preferredDecodingAttributes: [],
            restrictions: { minWidth: 0, maxWidth: Infinity, minHeight: 0, maxHeight: Infinity, minPixels: 0, maxPixels: Infinity, minFrameRate: 0, maxFrameRate: Infinity, minBandwidth: 0, maxBandwidth: Infinity },
            playRangeStart: 0,
            playRangeEnd: Infinity,
            textDisplayFactory: function() {
              return null;
            },
            cmcd: { enabled: false, sessionId: "", contentId: "", useHeaders: false }
          };
          e2.trackSelectionCallback = function(g) {
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
              return h["return"](shaka.util.PlayerConfiguration.defaultTrackSelect(g, f2.preferredAudioLanguage));
            });
          };
          return f2;
        };
        shaka.util.PlayerConfiguration.mergeConfigObjects = function(a2, b2, c2) {
          var d2 = { ".drm.servers": "", ".drm.clearKeys": "", ".drm.advanced": { distinctiveIdentifierRequired: false, persistentStateRequired: false, videoRobustness: "", audioRobustness: "", sessionType: "", serverCertificate: new Uint8Array(0), serverCertificateUri: "", individualizationServer: "" } };
          return shaka.util.ConfigUtils.mergeConfigObjects(a2, b2, c2 || shaka.util.PlayerConfiguration.createDefault(), d2, "");
        };
        shaka.util.PlayerConfiguration.defaultTrackSelect = function(a2, b2) {
          var c2 = shaka.util.ManifestParserUtils.ContentType, d2 = shaka.util.LanguageUtils, e2 = a2.filter(function(l) {
            return "variant" == l.type;
          }), f2 = [], g = d2.findClosestLocale(b2, e2.map(function(l) {
            return l.language;
          }));
          g && (f2 = e2.filter(function(l) {
            return d2.normalize(l.language) == g;
          }));
          0 == f2.length && (f2 = e2.filter(function(l) {
            return l.primary;
          }));
          0 == f2.length && (1 < new Set(e2.map(function(l) {
            return l.language;
          })).size && shaka.log.warning("Could not choose a good audio track based on language preferences or primary tracks.  An arbitrary language will be stored!"), f2 = e2);
          var h = f2.filter(function(l) {
            return l.height && 480 >= l.height;
          });
          h.length && (h.sort(function(l, m) {
            goog.asserts.assert(null != l.height, "Null height");
            goog.asserts.assert(null != m.height, "Null height");
            return m.height - l.height;
          }), f2 = h.filter(function(l) {
            return l.height == h[0].height;
          }));
          e2 = [];
          if (f2.length) {
            var k2 = Math.floor(f2.length / 2);
            f2.sort(function(l, m) {
              return l.bandwidth - m.bandwidth;
            });
            e2.push(f2[k2]);
          }
          f2 = $jscomp.makeIterator(a2);
          for (k2 = f2.next(); !k2.done; k2 = f2.next())
            k2 = k2.value, k2.type != c2.TEXT && k2.type != c2.IMAGE || e2.push(k2);
          return e2;
        };
        goog.exportSymbol("shaka.util.PlayerConfiguration", shaka.util.PlayerConfiguration);
        goog.exportProperty(shaka.util.PlayerConfiguration, "mergeConfigObjects", shaka.util.PlayerConfiguration.mergeConfigObjects);
        shaka.util.StateHistory = function() {
          this.open_ = null;
          this.closed_ = [];
        };
        shaka.util.StateHistory.prototype.update = function(a2) {
          null == this.open_ ? this.start_(a2) : this.update_(a2);
        };
        shaka.util.StateHistory.prototype.getTimeSpentIn = function(a2) {
          var b2 = 0;
          this.open_ && this.open_.state == a2 && (b2 += this.open_.duration);
          for (var c2 = $jscomp.makeIterator(this.closed_), d2 = c2.next(); !d2.done; d2 = c2.next())
            d2 = d2.value, b2 += d2.state == a2 ? d2.duration : 0;
          return b2;
        };
        shaka.util.StateHistory.prototype.getCopy = function() {
          for (var a2 = function(e2) {
            return { timestamp: e2.timestamp, state: e2.state, duration: e2.duration };
          }, b2 = [], c2 = $jscomp.makeIterator(this.closed_), d2 = c2.next(); !d2.done; d2 = c2.next())
            b2.push(a2(d2.value));
          this.open_ && b2.push(a2(this.open_));
          return b2;
        };
        shaka.util.StateHistory.prototype.start_ = function(a2) {
          goog.asserts.assert(null == this.open_, "There must be no open entry in order when we start");
          shaka.log.v1("Changing Player state to", a2);
          this.open_ = { timestamp: this.getNowInSeconds_(), state: a2, duration: 0 };
        };
        shaka.util.StateHistory.prototype.update_ = function(a2) {
          goog.asserts.assert(this.open_, "There must be an open entry in order to update it");
          var b2 = this.getNowInSeconds_();
          this.open_.duration = b2 - this.open_.timestamp;
          this.open_.state != a2 && (shaka.log.v1("Changing Player state to", a2), this.closed_.push(this.open_), this.open_ = { timestamp: b2, state: a2, duration: 0 });
        };
        shaka.util.StateHistory.prototype.getNowInSeconds_ = function() {
          return Date.now() / 1e3;
        };
        shaka.util.SwitchHistory = function() {
          this.currentText_ = this.currentVariant_ = null;
          this.history_ = [];
        };
        shaka.util.SwitchHistory.prototype.updateCurrentVariant = function(a2, b2) {
          this.currentVariant_ != a2 && (this.currentVariant_ = a2, this.history_.push({ timestamp: this.getNowInSeconds_(), id: a2.id, type: "variant", fromAdaptation: b2, bandwidth: a2.bandwidth }));
        };
        shaka.util.SwitchHistory.prototype.updateCurrentText = function(a2, b2) {
          this.currentText_ != a2 && (this.currentText_ = a2, this.history_.push({ timestamp: this.getNowInSeconds_(), id: a2.id, type: "text", fromAdaptation: b2, bandwidth: null }));
        };
        shaka.util.SwitchHistory.prototype.getCopy = function() {
          for (var a2 = [], b2 = $jscomp.makeIterator(this.history_), c2 = b2.next(); !c2.done; c2 = b2.next())
            a2.push(this.clone_(c2.value));
          return a2;
        };
        shaka.util.SwitchHistory.prototype.getNowInSeconds_ = function() {
          return Date.now() / 1e3;
        };
        shaka.util.SwitchHistory.prototype.clone_ = function(a2) {
          return { timestamp: a2.timestamp, id: a2.id, type: a2.type, fromAdaptation: a2.fromAdaptation, bandwidth: a2.bandwidth };
        };
        shaka.util.Stats = function() {
          this.bandwidthEstimate_ = this.currentStreamBandwidth_ = this.maxSegmentDurationSeconds_ = this.liveLatencySeconds_ = this.licenseTimeSeconds_ = this.drmTimeSeconds_ = this.manifestTimeSeconds_ = this.loadLatencySeconds_ = this.completionPercent_ = this.totalCorruptedFrames_ = this.totalDecodedFrames_ = this.totalDroppedFrames_ = this.height_ = this.width_ = NaN;
          this.stateHistory_ = new shaka.util.StateHistory();
          this.switchHistory_ = new shaka.util.SwitchHistory();
        };
        shaka.util.Stats.prototype.setDroppedFrames = function(a2, b2) {
          this.totalDroppedFrames_ = a2;
          this.totalDecodedFrames_ = b2;
        };
        shaka.util.Stats.prototype.setCorruptedFrames = function(a2) {
          this.totalCorruptedFrames_ = a2;
        };
        shaka.util.Stats.prototype.setResolution = function(a2, b2) {
          this.width_ = a2;
          this.height_ = b2;
        };
        shaka.util.Stats.prototype.setLoadLatency = function(a2) {
          this.loadLatencySeconds_ = a2;
        };
        shaka.util.Stats.prototype.setManifestTime = function(a2) {
          this.manifestTimeSeconds_ = a2;
        };
        shaka.util.Stats.prototype.setCompletionPercent = function(a2) {
          isNaN(this.completionPercent_) ? this.completionPercent_ = a2 : this.completionPercent_ = Math.max(this.completionPercent_, a2);
        };
        shaka.util.Stats.prototype.setDrmTime = function(a2) {
          this.drmTimeSeconds_ = a2;
        };
        shaka.util.Stats.prototype.setLicenseTime = function(a2) {
          this.licenseTimeSeconds_ = a2;
        };
        shaka.util.Stats.prototype.setLiveLatency = function(a2) {
          this.liveLatencySeconds_ = a2;
        };
        shaka.util.Stats.prototype.setMaxSegmentDuration = function(a2) {
          this.maxSegmentDurationSeconds_ = a2;
        };
        shaka.util.Stats.prototype.setCurrentStreamBandwidth = function(a2) {
          this.currentStreamBandwidth_ = a2;
        };
        shaka.util.Stats.prototype.setBandwidthEstimate = function(a2) {
          this.bandwidthEstimate_ = a2;
        };
        shaka.util.Stats.prototype.getStateHistory = function() {
          return this.stateHistory_;
        };
        shaka.util.Stats.prototype.getSwitchHistory = function() {
          return this.switchHistory_;
        };
        shaka.util.Stats.prototype.getBlob = function() {
          return {
            width: this.width_,
            height: this.height_,
            streamBandwidth: this.currentStreamBandwidth_,
            decodedFrames: this.totalDecodedFrames_,
            droppedFrames: this.totalDroppedFrames_,
            corruptedFrames: this.totalCorruptedFrames_,
            estimatedBandwidth: this.bandwidthEstimate_,
            completionPercent: this.completionPercent_,
            loadLatency: this.loadLatencySeconds_,
            manifestTimeSeconds: this.manifestTimeSeconds_,
            drmTimeSeconds: this.drmTimeSeconds_,
            playTime: this.stateHistory_.getTimeSpentIn("playing"),
            pauseTime: this.stateHistory_.getTimeSpentIn("paused"),
            bufferingTime: this.stateHistory_.getTimeSpentIn("buffering"),
            licenseTime: this.licenseTimeSeconds_,
            liveLatency: this.liveLatencySeconds_,
            maxSegmentDuration: this.maxSegmentDurationSeconds_,
            stateHistory: this.stateHistory_.getCopy(),
            switchHistory: this.switchHistory_.getCopy()
          };
        };
        shaka.util.Stats.getEmptyBlob = function() {
          return { width: NaN, height: NaN, streamBandwidth: NaN, decodedFrames: NaN, droppedFrames: NaN, corruptedFrames: NaN, estimatedBandwidth: NaN, completionPercent: NaN, loadLatency: NaN, manifestTimeSeconds: NaN, drmTimeSeconds: NaN, playTime: NaN, pauseTime: NaN, bufferingTime: NaN, licenseTime: NaN, liveLatency: NaN, maxSegmentDuration: NaN, switchHistory: [], stateHistory: [] };
        };
        shaka.Player = function(a2, b2) {
          shaka.util.FakeEventTarget.call(this);
          var c2 = this;
          this.loadMode_ = shaka.Player.LoadMode.NOT_LOADED;
          this.videoContainer_ = this.video_ = null;
          this.isTextVisible_ = false;
          this.globalEventManager_ = new shaka.util.EventManager();
          this.attachEventManager_ = new shaka.util.EventManager();
          this.loadEventManager_ = new shaka.util.EventManager();
          this.abrManagerFactory_ = this.abrManager_ = this.assetUri_ = this.manifest_ = this.parserFactory_ = this.parser_ = this.streamingEngine_ = this.qualityObserver_ = this.cmcdManager_ = this.regionTimeline_ = this.bufferObserver_ = this.bufferPoller_ = this.playRateController_ = this.playheadObservers_ = this.playhead_ = this.mediaSourceEngine_ = this.drmEngine_ = this.networkingEngine_ = null;
          this.nextExternalStreamId_ = 1e9;
          this.config_ = this.defaultConfig_();
          this.maxHwRes_ = { width: Infinity, height: Infinity };
          this.stats_ = null;
          this.currentAdaptationSetCriteria_ = new shaka.media.PreferenceBasedCriteria(this.config_.preferredAudioLanguage, this.config_.preferredVariantRole, this.config_.preferredAudioChannelCount);
          this.currentTextLanguage_ = this.config_.preferredTextLanguage;
          this.currentTextRole_ = this.config_.preferredTextRole;
          this.currentTextForced_ = this.config_.preferForcedSubs;
          this.cleanupOnUnload_ = [];
          this.updatedStartTime_ = null;
          b2 && b2(this);
          this.networkingEngine_ = this.createNetworkingEngine();
          this.networkingEngine_.setForceHTTPS(this.config_.streaming.forceHTTPS);
          this.adManager_ = null;
          shaka.Player.adManagerFactory_ && (this.adManager_ = shaka.util.Functional.callFactory(shaka.Player.adManagerFactory_));
          this.globalEventManager_.listen(
            window,
            "online",
            function() {
              c2.retryStreaming();
            }
          );
          this.detachNode_ = { name: "detach" };
          this.attachNode_ = { name: "attach" };
          this.unloadNode_ = { name: "unload" };
          this.parserNode_ = { name: "manifest-parser" };
          this.manifestNode_ = { name: "manifest" };
          this.mediaSourceNode_ = { name: "media-source" };
          this.drmNode_ = { name: "drm-engine" };
          this.loadNode_ = { name: "load" };
          this.srcEqualsDrmNode_ = { name: "src-equals-drm-engine" };
          this.srcEqualsNode_ = { name: "src-equals" };
          var d2 = shaka.util.AbortableOperation, e2 = /* @__PURE__ */ new Map();
          e2.set(this.attachNode_, function(f2, g) {
            return d2.notAbortable(c2.onAttach_(
              f2,
              g
            ));
          });
          e2.set(this.detachNode_, function(f2, g) {
            return d2.notAbortable(c2.onDetach_(f2, g));
          });
          e2.set(this.unloadNode_, function(f2, g) {
            return d2.notAbortable(c2.onUnload_(f2, g));
          });
          e2.set(this.mediaSourceNode_, function(f2, g) {
            var h = c2.onInitializeMediaSourceEngine_(f2, g);
            return d2.notAbortable(h);
          });
          e2.set(this.parserNode_, function(f2, g) {
            var h = c2.onInitializeParser_(f2, g);
            return d2.notAbortable(h);
          });
          e2.set(this.manifestNode_, function(f2, g) {
            return c2.onParseManifest_(f2, g);
          });
          e2.set(this.drmNode_, function(f2, g) {
            var h = c2.onInitializeDrm_(
              f2,
              g
            );
            return d2.notAbortable(h);
          });
          e2.set(this.loadNode_, function(f2, g) {
            return d2.notAbortable(c2.onLoad_(f2, g));
          });
          e2.set(this.srcEqualsDrmNode_, function(f2, g) {
            var h = c2.onInitializeSrcEqualsDrm_(f2, g);
            return d2.notAbortable(h);
          });
          e2.set(this.srcEqualsNode_, function(f2, g) {
            return c2.onSrcEquals_(f2, g);
          });
          this.walker_ = new shaka.routing.Walker(this.detachNode_, shaka.Player.createEmptyPayload_(), { getNext: function(f2, g, h, k2) {
            return c2.getNextStep_(f2, g, h, k2);
          }, enterNode: function(f2, g, h) {
            c2.dispatchEvent(c2.makeEvent_(
              shaka.Player.EventName.OnStateChange,
              (/* @__PURE__ */ new Map()).set("state", f2.name)
            ));
            return e2.get(f2)(g, h);
          }, handleError: function(f2, g) {
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
              return 1 == h.nextAddress ? (shaka.log.warning("The walker saw an error:"), g instanceof shaka.util.Error ? shaka.log.warning("Error Code:", g.code) : (shaka.log.warning("Error Message:", g.message), shaka.log.warning("Error Stack:", g.stack)), h.yield(c2.onUnload_(f2, shaka.Player.createEmptyPayload_()), 2)) : h["return"](f2.mediaElement ? c2.attachNode_ : c2.detachNode_);
            });
          }, onIdle: function(f2) {
            c2.dispatchEvent(c2.makeEvent_(
              shaka.Player.EventName.OnStateIdle,
              (/* @__PURE__ */ new Map()).set("state", f2.name)
            ));
          } });
          a2 && this.attach(a2, true);
        };
        $jscomp.inherits(shaka.Player, shaka.util.FakeEventTarget);
        shaka.Player.prototype.makeEvent_ = function(a2, b2) {
          return new shaka.util.FakeEvent(a2, b2);
        };
        shaka.Player.prototype.destroy = function() {
          var a2 = this, b2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            switch (c2.nextAddress) {
              case 1:
                if (a2.loadMode_ == shaka.Player.LoadMode.DESTROYED)
                  return c2["return"]();
                a2.loadMode_ = shaka.Player.LoadMode.DESTROYED;
                b2 = a2.walker_.startNewRoute(function(d2) {
                  return { node: a2.detachNode_, payload: shaka.Player.createEmptyPayload_(), interruptible: false };
                });
                return c2.yield(new Promise(function(d2) {
                  b2.onStart = function() {
                    shaka.log.info("Preparing to destroy walker...");
                  };
                  b2.onEnd = function() {
                    d2();
                  };
                  b2.onCancel = function() {
                    goog.asserts.assert(false, "Our final detach call should never be cancelled.");
                    d2();
                  };
                  b2.onError = function() {
                    goog.asserts.assert(false, "Our final detach call should never see an error");
                    d2();
                  };
                  b2.onSkip = function() {
                    goog.asserts.assert(false, "Our final detach call should never be skipped");
                    d2();
                  };
                }), 2);
              case 2:
                return c2.yield(a2.walker_.destroy(), 3);
              case 3:
                a2.globalEventManager_ && (a2.globalEventManager_.release(), a2.globalEventManager_ = null);
                a2.attachEventManager_ && (a2.attachEventManager_.release(), a2.attachEventManager_ = null);
                a2.loadEventManager_ && (a2.loadEventManager_.release(), a2.loadEventManager_ = null);
                a2.abrManagerFactory_ = null;
                a2.abrManager_ = null;
                a2.config_ = null;
                a2.stats_ = null;
                a2.videoContainer_ = null;
                a2.cmcdManager_ = null;
                if (!a2.networkingEngine_) {
                  c2.jumpTo(4);
                  break;
                }
                return c2.yield(a2.networkingEngine_.destroy(), 5);
              case 5:
                a2.networkingEngine_ = null;
              case 4:
                shaka.util.FakeEventTarget.prototype.release.call(a2), c2.jumpToEnd();
            }
          });
        };
        shaka.Player.registerSupportPlugin = function(a2, b2) {
          shaka.Player.supportPlugins_[a2] = b2;
        };
        shaka.Player.setAdManagerFactory = function(a2) {
          shaka.Player.adManagerFactory_ = a2;
        };
        shaka.Player.isBrowserSupported = function() {
          window.Promise || shaka.log.alwaysWarn("A Promise implementation or polyfill is required");
          if (!(window.Promise && window.Uint8Array && Array.prototype.forEach) || shaka.util.Platform.isIE())
            return false;
          var a2 = shaka.util.Platform.safariVersion();
          return a2 && 12 > a2 || !shaka.media.DrmEngine.isBrowserSupported() ? false : shaka.util.Platform.supportsMediaSource() ? true : shaka.util.Platform.supportsMediaType("application/x-mpegurl");
        };
        shaka.Player.probeSupport = function(a2) {
          a2 = void 0 === a2 ? true : a2;
          var b2, c2, d2, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            if (1 == h.nextAddress)
              return goog.asserts.assert(shaka.Player.isBrowserSupported(), "Must have basic support"), b2 = {}, a2 ? h.yield(shaka.media.DrmEngine.probeSupport(), 3) : h.jumpTo(2);
            2 != h.nextAddress && (b2 = h.yieldResult);
            c2 = shaka.media.ManifestParser.probeSupport();
            d2 = shaka.media.MediaSourceEngine.probeSupport();
            e2 = { manifest: c2, media: d2, drm: b2 };
            f2 = shaka.Player.supportPlugins_;
            for (g in f2)
              e2[g] = f2[g]();
            return h["return"](e2);
          });
        };
        shaka.Player.prototype.attach = function(a2, b2) {
          b2 = void 0 === b2 ? true : b2;
          if (this.loadMode_ == shaka.Player.LoadMode.DESTROYED)
            return Promise.reject(this.createAbortLoadError_());
          var c2 = shaka.Player.createEmptyPayload_();
          c2.mediaElement = a2;
          shaka.util.Platform.supportsMediaSource() || (b2 = false);
          var d2 = b2 ? this.mediaSourceNode_ : this.attachNode_, e2 = this.walker_.startNewRoute(function(f2) {
            return { node: d2, payload: c2, interruptible: false };
          });
          e2.onStart = function() {
            return shaka.log.info("Starting attach...");
          };
          return this.wrapWalkerListenersWithPromise_(e2);
        };
        shaka.Player.prototype.detach = function() {
          var a2 = this;
          if (this.loadMode_ == shaka.Player.LoadMode.DESTROYED)
            return Promise.reject(this.createAbortLoadError_());
          var b2 = this.walker_.startNewRoute(function(c2) {
            return { node: a2.detachNode_, payload: shaka.Player.createEmptyPayload_(), interruptible: false };
          });
          b2.onStart = function() {
            return shaka.log.info("Starting detach...");
          };
          return this.wrapWalkerListenersWithPromise_(b2);
        };
        shaka.Player.prototype.unload = function(a2) {
          var b2 = this;
          a2 = void 0 === a2 ? true : a2;
          if (this.loadMode_ == shaka.Player.LoadMode.DESTROYED)
            return Promise.reject(this.createAbortLoadError_());
          shaka.util.Platform.supportsMediaSource() || (a2 = false);
          var c2 = shaka.Player.createEmptyPayload_(), d2 = this.walker_.startNewRoute(function(e2) {
            var f2 = e2.mediaElement && a2 ? b2.mediaSourceNode_ : e2.mediaElement ? b2.attachNode_ : b2.detachNode_;
            goog.asserts.assert(f2, "We should have picked a destination.");
            c2.mediaElement = e2.mediaElement;
            return {
              node: f2,
              payload: c2,
              interruptible: false
            };
          });
          d2.onStart = function() {
            return shaka.log.info("Starting unload...");
          };
          return this.wrapWalkerListenersWithPromise_(d2);
        };
        shaka.Player.prototype.updateStartTime = function(a2) {
          this.updatedStartTime_ = a2;
        };
        shaka.Player.prototype.load = function(a2, b2, c2) {
          var d2 = this;
          this.updatedStartTime_ = null;
          if (this.loadMode_ == shaka.Player.LoadMode.DESTROYED)
            return Promise.reject(this.createAbortLoadError_());
          this.dispatchEvent(this.makeEvent_(shaka.Player.EventName.Loading));
          var e2 = shaka.Player.createEmptyPayload_();
          e2.uri = a2;
          e2.startTimeOfLoad = Date.now() / 1e3;
          c2 && (e2.mimeType = c2);
          void 0 !== b2 && (e2.startTime = b2);
          var f2 = this.shouldUseSrcEquals_(e2) ? this.srcEqualsNode_ : this.loadNode_, g = this.walker_.startNewRoute(function(h) {
            if (null == h.mediaElement)
              return null;
            e2.mediaElement = h.mediaElement;
            return { node: f2, payload: e2, interruptible: true };
          });
          this.stats_ = new shaka.util.Stats();
          this.cmcdManager_ = this.createCmcd_();
          g.onStart = function() {
            return shaka.log.info("Starting load of " + a2 + "...");
          };
          return new Promise(function(h, k2) {
            g.onSkip = function() {
              return k2(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.NO_VIDEO_ELEMENT));
            };
            g.onEnd = function() {
              h();
              d2.dispatchEvent(d2.makeEvent_(shaka.Player.EventName.Loaded));
            };
            g.onCancel = function() {
              return k2(d2.createAbortLoadError_());
            };
            g.onError = function(l) {
              return k2(l);
            };
          });
        };
        shaka.Player.prototype.shouldUseSrcEquals_ = function(a2) {
          var b2 = shaka.util.Platform;
          if (!b2.supportsMediaSource())
            return true;
          var c2 = a2.mimeType, d2 = a2.uri || "";
          c2 || (c2 = shaka.media.ManifestParser.getExtension(d2), c2 = shaka.Player.SRC_EQUAL_EXTENSIONS_TO_MIME_TYPES_[c2]);
          if (c2) {
            a2 = "" != (a2.mediaElement || b2.anyMediaElement()).canPlayType(c2);
            if (!a2)
              return false;
            d2 = shaka.media.ManifestParser.isSupported(d2, c2);
            if (!d2)
              return true;
            goog.asserts.assert(a2 && d2, "Both native and MSE playback should be possible!");
            if (this.config_.streaming.preferNativeHls)
              return true;
            if (b2.isApple())
              return this.config_.streaming.useNativeHlsOnSafari;
          }
          return false;
        };
        shaka.Player.prototype.onAttach_ = function(a2, b2) {
          var c2 = this;
          goog.asserts.assert(null == a2.mediaElement || a2.mediaElement == b2.mediaElement, "The routing logic failed. MediaElement requirement failed.");
          null == a2.mediaElement && (a2.mediaElement = b2.mediaElement, this.attachEventManager_.listen(a2.mediaElement, "error", function(d2) {
            return c2.onVideoError_(d2);
          }));
          this.video_ = a2.mediaElement;
          return Promise.resolve();
        };
        shaka.Player.prototype.onDetach_ = function(a2, b2) {
          a2.mediaElement && (this.attachEventManager_.removeAll(), a2.mediaElement = null);
          this.adManager_ && this.adManager_.release();
          this.video_ = null;
          return Promise.resolve();
        };
        shaka.Player.prototype.onUnload_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(p) {
            switch (p.nextAddress) {
              case 1:
                return c2.loadMode_ != shaka.Player.LoadMode.DESTROYED && (c2.loadMode_ = shaka.Player.LoadMode.NOT_LOADED), d2 = c2.cleanupOnUnload_.map(function(q) {
                  return q();
                }), c2.cleanupOnUnload_ = [], p.yield(Promise.all(d2), 2);
              case 2:
                c2.dispatchEvent(c2.makeEvent_(shaka.Player.EventName.Unloading));
                a2.mimeType = null;
                a2.startTime = null;
                a2.uri = null;
                a2.mediaElement && c2.loadEventManager_.removeAll();
                c2.playheadObservers_ && (c2.playheadObservers_.release(), c2.playheadObservers_ = null);
                c2.bufferPoller_ && (c2.bufferPoller_.stop(), c2.bufferPoller_ = null);
                if (!c2.parser_) {
                  p.jumpTo(3);
                  break;
                }
                return p.yield(c2.parser_.stop(), 4);
              case 4:
                c2.parser_ = null, c2.parserFactory_ = null;
              case 3:
                if (!c2.abrManager_) {
                  p.jumpTo(5);
                  break;
                }
                return p.yield(c2.abrManager_.stop(), 5);
              case 5:
                if (!c2.streamingEngine_) {
                  p.jumpTo(7);
                  break;
                }
                return p.yield(c2.streamingEngine_.destroy(), 8);
              case 8:
                c2.streamingEngine_ = null;
              case 7:
                c2.playRateController_ && (c2.playRateController_.release(), c2.playRateController_ = null);
                c2.playhead_ && (c2.playhead_.release(), c2.playhead_ = null);
                if (!c2.mediaSourceEngine_) {
                  p.jumpTo(9);
                  break;
                }
                return p.yield(c2.mediaSourceEngine_.destroy(), 10);
              case 10:
                c2.mediaSourceEngine_ = null;
              case 9:
                if (c2.adManager_)
                  c2.adManager_.onAssetUnload();
                if (!a2.mediaElement || !a2.mediaElement.src) {
                  p.jumpTo(11);
                  break;
                }
                return p.yield(new Promise(function(q) {
                  return new shaka.util.Timer(q).tickAfter(0.1);
                }), 12);
              case 12:
                for (a2.mediaElement.removeAttribute("src"), a2.mediaElement.load(); a2.mediaElement.lastChild; )
                  a2.mediaElement.removeChild(a2.mediaElement.firstChild);
              case 11:
                if (!c2.drmEngine_) {
                  p.jumpTo(13);
                  break;
                }
                return p.yield(c2.drmEngine_.destroy(), 14);
              case 14:
                c2.drmEngine_ = null;
              case 13:
                c2.assetUri_ = null;
                c2.bufferObserver_ = null;
                if (c2.manifest_) {
                  e2 = $jscomp.makeIterator(c2.manifest_.variants);
                  for (f2 = e2.next(); !f2.done; f2 = e2.next())
                    for (g = f2.value, h = $jscomp.makeIterator([g.audio, g.video]), k2 = h.next(); !k2.done; k2 = h.next())
                      (l = k2.value) && l.segmentIndex && l.segmentIndex.release();
                  m = $jscomp.makeIterator(c2.manifest_.textStreams);
                  for (k2 = m.next(); !k2.done; k2 = m.next())
                    n = k2.value, n.segmentIndex && n.segmentIndex.release();
                }
                c2.manifest_ = null;
                c2.stats_ = new shaka.util.Stats();
                c2.lastTextFactory_ = null;
                c2.updateBufferState_();
                p.jumpToEnd();
            }
          });
        };
        shaka.Player.prototype.onInitializeMediaSourceEngine_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            if (1 == h.nextAddress)
              return goog.asserts.assert(shaka.util.Platform.supportsMediaSource(), "We should not be initializing media source on a platform that does not support media source."), goog.asserts.assert(a2.mediaElement, "We should have a media element when initializing media source."), goog.asserts.assert(a2.mediaElement == b2.mediaElement, "|has| and |wants| should have the same media element when initializing media source."), goog.asserts.assert(null == c2.mediaSourceEngine_, "We should not have a media source engine yet."), d2 = new shaka.media.ClosedCaptionParser(), e2 = c2.config_.textDisplayFactory, f2 = shaka.util.Functional.callFactory(e2), c2.lastTextFactory_ = e2, g = c2.createMediaSourceEngine(a2.mediaElement, d2, f2, function(k2, l, m) {
                c2.processTimedMetadataMediaSrc_(k2, l, m);
              }), h.yield(g.open(), 2);
            c2.mediaSourceEngine_ = g;
            h.jumpToEnd();
          });
        };
        shaka.Player.prototype.onInitializeParser_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            if (1 == h.nextAddress)
              return goog.asserts.assert(a2.mediaElement, "We should have a media element when initializing the parser."), goog.asserts.assert(a2.mediaElement == b2.mediaElement, "|has| and |wants| should have the same media element when initializing the parser."), goog.asserts.assert(c2.networkingEngine_, "Need networking engine when initializing the parser."), goog.asserts.assert(
                c2.config_,
                "Need player config when initializing the parser."
              ), a2.mimeType = b2.mimeType, a2.uri = b2.uri, goog.asserts.assert(a2.uri, "We should have an asset uri when initializing the parsing."), d2 = a2.uri, e2 = c2.networkingEngine_, c2.assetUri_ = d2, f2 = c2, h.yield(shaka.media.ManifestParser.getFactory(d2, e2, c2.config_.manifest.retryParameters, a2.mimeType), 2);
            f2.parserFactory_ = h.yieldResult;
            goog.asserts.assert(c2.parserFactory_, "Must have manifest parser");
            c2.parser_ = shaka.util.Functional.callFactory(c2.parserFactory_);
            g = shaka.util.ObjectUtils.cloneObject(c2.config_.manifest);
            b2.mediaElement && "AUDIO" === b2.mediaElement.nodeName && (g.disableVideo = true);
            c2.parser_.configure(g);
            h.jumpToEnd();
          });
        };
        shaka.Player.prototype.onParseManifest_ = function(a2, b2) {
          var c2 = this;
          goog.asserts.assert(a2.mimeType == b2.mimeType, "|has| and |wants| should have the same mime type when parsing.");
          goog.asserts.assert(a2.uri == b2.uri, "|has| and |wants| should have the same uri when parsing.");
          goog.asserts.assert(a2.uri, "|has| should have a valid uri when parsing.");
          goog.asserts.assert(a2.uri == this.assetUri_, "|has.uri| should match the cached asset uri.");
          goog.asserts.assert(this.networkingEngine_, "Need networking engine to parse manifest.");
          goog.asserts.assert(this.cmcdManager_, "Need CMCD manager to populate manifest request data.");
          goog.asserts.assert(this.config_, "Need player config to parse manifest.");
          goog.asserts.assert(this.parser_, "|this.parser_| should have been set in an earlier step.");
          var d2 = a2.uri, e2 = this.networkingEngine_;
          this.regionTimeline_ = new shaka.media.RegionTimeline(function() {
            return c2.seekRange();
          });
          this.regionTimeline_.addEventListener("regionadd", function(h) {
            h = h.region;
            c2.onRegionEvent_(
              shaka.Player.EventName.TimelineRegionAdded,
              h
            );
            if (c2.adManager_)
              c2.adManager_.onDashTimedMetadata(h);
          });
          this.qualityObserver_ = null;
          this.config_.streaming.observeQualityChanges && (this.qualityObserver_ = new shaka.media.QualityObserver(function() {
            return c2.getBufferedInfo();
          }), this.qualityObserver_.addEventListener("qualitychange", function(h) {
            c2.onMediaQualityChange_(h.quality, h.position);
          }));
          var f2 = { networkingEngine: e2, modifyManifestRequest: function(h, k2) {
            c2.cmcdManager_.applyManifestData(h, k2);
          }, modifySegmentRequest: function(h, k2) {
            c2.cmcdManager_.applySegmentData(
              h,
              k2
            );
          }, filter: function(h) {
            return c2.filterManifest_(h);
          }, makeTextStreamsForClosedCaptions: function(h) {
            return c2.makeTextStreamsForClosedCaptions_(h);
          }, onTimelineRegionAdded: function(h) {
            return c2.regionTimeline_.addRegion(h);
          }, onEvent: function(h) {
            return c2.dispatchEvent(h);
          }, onError: function(h) {
            return c2.onError_(h);
          }, isLowLatencyMode: function() {
            return c2.isLowLatencyMode_();
          }, isAutoLowLatencyMode: function() {
            return c2.isAutoLowLatencyMode_();
          }, enableLowLatencyMode: function() {
            c2.configure(
              "streaming.lowLatencyMode",
              true
            );
          } }, g = Date.now() / 1e3;
          return new shaka.util.AbortableOperation(function() {
            var h, k2, l, m;
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(n) {
              if (1 == n.nextAddress)
                return h = c2, n.yield(c2.parser_.start(d2, f2), 2);
              h.manifest_ = n.yieldResult;
              k2 = c2.makeEvent_(shaka.Player.EventName.ManifestParsed);
              c2.dispatchEvent(k2);
              if (0 == c2.manifest_.variants.length)
                throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.NO_VARIANTS);
              shaka.Player.filterForAVVariants_(c2.manifest_);
              l = Date.now() / 1e3;
              m = l - g;
              c2.stats_.setManifestTime(m);
              n.jumpToEnd();
            });
          }(), function() {
            shaka.log.info("Aborting parser step...");
            return c2.parser_.stop();
          });
        };
        shaka.Player.prototype.onInitializeDrm_ = function(a2, b2) {
          var c2 = this, d2, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            return 1 == f2.nextAddress ? (goog.asserts.assert(a2.mimeType == b2.mimeType, "The load graph should have ensured the mime types matched."), goog.asserts.assert(a2.uri == b2.uri, "The load graph should have ensured the uris matched"), goog.asserts.assert(c2.networkingEngine_, "|onInitializeDrm_| should never be called after |destroy|"), goog.asserts.assert(c2.config_, "|onInitializeDrm_| should never be called after |destroy|"), goog.asserts.assert(c2.manifest_, "|this.manifest_| should have been set in an earlier step."), goog.asserts.assert(a2.mediaElement, "We should have a media element when initializing the DRM Engine."), d2 = Date.now() / 1e3, e2 = true, c2.drmEngine_ = c2.createDrmEngine({ netEngine: c2.networkingEngine_, onError: function(g) {
              c2.onError_(g);
            }, onKeyStatus: function(g) {
              c2.onKeyStatus_(g);
            }, onExpirationUpdated: function(g, h) {
              c2.onExpirationUpdated_(g, h);
            }, onEvent: function(g) {
              c2.dispatchEvent(g);
              g.type == shaka.Player.EventName.DrmSessionUpdate && e2 && (e2 = false, g = Date.now() / 1e3 - d2, c2.stats_.setDrmTime(g));
            } }), c2.drmEngine_.configure(c2.config_.drm), f2.yield(c2.drmEngine_.initForPlayback(c2.manifest_.variants, c2.manifest_.offlineSessionIds), 2)) : 3 != f2.nextAddress ? f2.yield(c2.drmEngine_.attach(a2.mediaElement), 3) : f2.yield(c2.filterManifest_(c2.manifest_), 0);
          });
        };
        shaka.Player.prototype.onLoad_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(u) {
            switch (u.nextAddress) {
              case 1:
                goog.asserts.assert(a2.mimeType == b2.mimeType, "|has| and |wants| should have the same mime type when loading.");
                goog.asserts.assert(a2.uri == b2.uri, "|has| and |wants| should have the same uri when loading.");
                goog.asserts.assert(a2.mediaElement, "We should have a media element when loading.");
                goog.asserts.assert(
                  !isNaN(b2.startTimeOfLoad),
                  "|wants| should tell us when the load was originally requested"
                );
                a2.startTime = b2.startTime;
                null != c2.updatedStartTime_ && (a2.startTime = c2.updatedStartTime_, c2.updatedStartTime_ = null);
                d2 = a2.mediaElement;
                e2 = a2.uri;
                c2.assetUri_ = e2;
                c2.playRateController_ = new shaka.media.PlayRateController({ getRate: function() {
                  return d2.playbackRate;
                }, getDefaultRate: function() {
                  return d2.defaultPlaybackRate;
                }, setRate: function(v) {
                  d2.playbackRate = v;
                }, movePlayhead: function(v) {
                  d2.currentTime += v;
                } });
                f2 = function() {
                  return c2.updateStateHistory_();
                };
                g = function() {
                  return c2.onRateChange_();
                };
                c2.loadEventManager_.listen(d2, "playing", f2);
                c2.loadEventManager_.listen(d2, "pause", f2);
                c2.loadEventManager_.listen(d2, "ended", f2);
                c2.loadEventManager_.listen(d2, "ratechange", g);
                h = c2.config_.abrFactory;
                c2.abrManager_ && c2.abrManagerFactory_ == h || (c2.abrManagerFactory_ = h, c2.abrManager_ = shaka.util.Functional.callFactory(h), "function" != typeof c2.abrManager_.playbackRateChanged && (shaka.Deprecate.deprecateFeature(4, "AbrManager", "Please use an AbrManager with playbackRateChanged function."), c2.abrManager_.playbackRateChanged = function(v) {
                }), c2.abrManager_.configure(c2.config_.abr));
                c2.currentAdaptationSetCriteria_ = new shaka.media.PreferenceBasedCriteria(c2.config_.preferredAudioLanguage, c2.config_.preferredVariantRole, c2.config_.preferredAudioChannelCount);
                c2.currentTextLanguage_ = c2.config_.preferredTextLanguage;
                c2.currentTextRole_ = c2.config_.preferredTextRole;
                c2.currentTextForced_ = c2.config_.preferForcedSubs;
                shaka.Player.applyPlayRange_(c2.manifest_.presentationTimeline, c2.config_.playRangeStart, c2.config_.playRangeEnd);
                c2.abrManager_.init(function(v, y, w) {
                  return c2.switch_(v, y, w);
                });
                c2.playhead_ = c2.createPlayhead(a2.startTime);
                c2.playheadObservers_ = c2.createPlayheadObserversForMSE_();
                k2 = Math.max(c2.manifest_.minBufferTime, c2.config_.streaming.rebufferingGoal);
                c2.startBufferManagement_(k2);
                shaka.util.StreamUtils.chooseCodecsAndFilterManifest(c2.manifest_, c2.config_.preferredVideoCodecs, c2.config_.preferredAudioCodecs, c2.config_.preferredAudioChannelCount, c2.config_.preferredDecodingAttributes);
                c2.streamingEngine_ = c2.createStreamingEngine();
                c2.streamingEngine_.configure(c2.config_.streaming);
                c2.loadMode_ = shaka.Player.LoadMode.MEDIA_SOURCE;
                d2.textTracks && c2.loadEventManager_.listen(d2.textTracks, "addtrack", function(v) {
                  if (v.track)
                    switch (v = v.track, goog.asserts.assert(v instanceof TextTrack, "Wrong track type!"), v.kind) {
                      case "chapters":
                        c2.activateChaptersTrack_(v);
                    }
                });
                c2.dispatchEvent(c2.makeEvent_(shaka.Player.EventName.Streaming));
                l = null;
                if (m = c2.getVariantTracks().find(function(v) {
                  return v.active;
                })) {
                  u.jumpTo(2);
                  break;
                }
                l = c2.chooseVariant_();
                goog.asserts.assert(l, "Must choose an initial variant!");
                c2.switchVariant_(
                  l,
                  true,
                  false,
                  0
                );
                if (!c2.config_.streaming.startAtSegmentBoundary) {
                  u.jumpTo(3);
                  break;
                }
                n = c2.playhead_.getTime();
                return u.yield(c2.adjustStartTime_(l, n), 4);
              case 4:
                p = u.yieldResult, c2.playhead_.setStartTime(p);
              case 3:
                c2.onAdaptation_(null, shaka.util.StreamUtils.variantToTrack(l));
              case 2:
                return q = c2.getTextTracks().find(function(v) {
                  return v.active;
                }), q || ((r = c2.chooseTextStream_()) && c2.addTextStreamToSwitchHistory_(r, true), l && c2.setInitialTextState_(l, r), r && c2.shouldStreamText_() && c2.streamingEngine_.switchTextStream(r)), u.yield(
                  c2.streamingEngine_.start(),
                  5
                );
              case 5:
                c2.config_.abr.enabled && (c2.abrManager_.enable(), c2.onAbrStatusChanged_()), c2.filterManifestByCurrentVariant_(), c2.onTracksChanged_(), c2.updateAbrManagerVariants_(), t = c2.manifest_.variants.some(function(v) {
                  return v.primary;
                }), c2.config_.preferredAudioLanguage || t || shaka.log.warning("No preferred audio language set.  We have chosen an arbitrary language initially"), c2.loadEventManager_.listenOnce(d2, "loadedmetadata", function() {
                  var v = Date.now() / 1e3 - b2.startTimeOfLoad;
                  c2.stats_.setLoadLatency(v);
                }), u.jumpToEnd();
            }
          });
        };
        shaka.Player.prototype.onInitializeSrcEqualsDrm_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            return 1 == m.nextAddress ? (d2 = shaka.util.ManifestParserUtils.ContentType, goog.asserts.assert(c2.networkingEngine_, "|onInitializeSrcEqualsDrm_| should never be called after |destroy|"), goog.asserts.assert(c2.config_, "|onInitializeSrcEqualsDrm_| should never be called after |destroy|"), e2 = Date.now() / 1e3, f2 = true, c2.drmEngine_ = c2.createDrmEngine({
              netEngine: c2.networkingEngine_,
              onError: function(n) {
                c2.onError_(n);
              },
              onKeyStatus: function(n) {
                c2.onKeyStatus_(n);
              },
              onExpirationUpdated: function(n, p) {
                c2.onExpirationUpdated_(n, p);
              },
              onEvent: function(n) {
                c2.dispatchEvent(n);
                n.type == shaka.Player.EventName.DrmSessionUpdate && f2 && (f2 = false, n = Date.now() / 1e3 - e2, c2.stats_.setDrmTime(n));
              }
            }), c2.drmEngine_.configure(c2.config_.drm), g = b2.uri || "", h = shaka.media.ManifestParser.getExtension(g), k2 = shaka.Player.SRC_EQUAL_EXTENSIONS_TO_MIME_TYPES_[h], "application/x-mpegurl" == k2 && shaka.util.Platform.isApple() && (k2 = "application/vnd.apple.mpegurl"), k2 || (k2 = "video/mp4"), l = { id: 0, language: "und", primary: false, audio: null, video: {
              id: 0,
              originalId: null,
              createSegmentIndex: function() {
                return Promise.resolve();
              },
              segmentIndex: null,
              mimeType: b2.mimeType ? shaka.util.MimeUtils.getBasicType(b2.mimeType) : k2,
              codecs: b2.mimeType ? shaka.util.MimeUtils.getCodecs(b2.mimeType) : "",
              encrypted: true,
              drmInfos: [],
              keyIds: /* @__PURE__ */ new Set(),
              language: "und",
              label: null,
              type: d2.VIDEO,
              primary: false,
              trickModeVideo: null,
              emsgSchemeIdUris: null,
              roles: [],
              forced: false,
              channelsCount: null,
              audioSamplingRate: null,
              spatialAudio: false,
              closedCaptions: null
            }, bandwidth: 100, allowedByApplication: true, allowedByKeySystem: true, decodingInfos: [] }, c2.drmEngine_.setSrcEquals(true), m.yield(c2.drmEngine_.initForPlayback([l], []), 2)) : m.yield(c2.drmEngine_.attach(a2.mediaElement), 0);
          });
        };
        shaka.Player.prototype.onSrcEquals_ = function(a2, b2) {
          var c2 = this;
          goog.asserts.assert(a2.mediaElement, "We should have a media element when loading.");
          goog.asserts.assert(b2.uri, "|has| should have a valid uri when loading.");
          goog.asserts.assert(!isNaN(b2.startTimeOfLoad), "|wants| should tell us when the load was originally requested");
          goog.asserts.assert(this.video_ == a2.mediaElement, "The video element should match our media element");
          a2.uri = b2.uri;
          a2.startTime = b2.startTime;
          this.assetUri_ = a2.uri;
          var d2 = a2.mediaElement;
          this.playhead_ = new shaka.media.SrcEqualsPlayhead(d2);
          var e2 = false;
          this.cleanupOnUnload_.push(function() {
            e2 = true;
          });
          null != a2.startTime && this.playhead_.setStartTime(a2.startTime);
          this.playRateController_ = new shaka.media.PlayRateController({ getRate: function() {
            return d2.playbackRate;
          }, getDefaultRate: function() {
            return d2.defaultPlaybackRate;
          }, setRate: function(h) {
            d2.playbackRate = h;
          }, movePlayhead: function(h) {
            d2.currentTime += h;
          } });
          this.startBufferManagement_(this.config_.streaming.rebufferingGoal);
          var f2 = function() {
            return c2.updateStateHistory_();
          };
          this.loadEventManager_.listen(d2, "playing", f2);
          this.loadEventManager_.listen(d2, "pause", f2);
          this.loadEventManager_.listen(d2, "ended", f2);
          this.loadEventManager_.listen(d2, "ratechange", function() {
            return c2.onRateChange_();
          });
          "none" != d2.preload && this.loadEventManager_.listenOnce(d2, "loadedmetadata", function() {
            var h = Date.now() / 1e3 - b2.startTimeOfLoad;
            c2.stats_.setLoadLatency(h);
          });
          d2.audioTracks && (this.loadEventManager_.listen(d2.audioTracks, "addtrack", function() {
            return c2.onTracksChanged_();
          }), this.loadEventManager_.listen(
            d2.audioTracks,
            "removetrack",
            function() {
              return c2.onTracksChanged_();
            }
          ), this.loadEventManager_.listen(d2.audioTracks, "change", function() {
            return c2.onTracksChanged_();
          }));
          d2.textTracks && (this.loadEventManager_.listen(d2.textTracks, "addtrack", function(h) {
            if (h.track)
              switch (h = h.track, goog.asserts.assert(h instanceof TextTrack, "Wrong track type!"), h.kind) {
                case "metadata":
                  c2.processTimedMetadataSrcEqls_(h);
                  break;
                case "chapters":
                  c2.activateChaptersTrack_(h);
                  break;
                default:
                  c2.onTracksChanged_();
              }
          }), this.loadEventManager_.listen(
            d2.textTracks,
            "removetrack",
            function() {
              return c2.onTracksChanged_();
            }
          ), this.loadEventManager_.listen(d2.textTracks, "change", function() {
            return c2.onTracksChanged_();
          }));
          f2 = shaka.media.ManifestParser.getExtension(a2.uri);
          d2.src = this.cmcdManager_.appendSrcData(a2.uri, shaka.Player.SRC_EQUAL_EXTENSIONS_TO_MIME_TYPES_[f2]);
          (shaka.util.Platform.isTizen() || shaka.util.Platform.isWebOS()) && d2.load();
          this.loadMode_ = shaka.Player.LoadMode.SRC_EQUALS;
          this.dispatchEvent(this.makeEvent_(shaka.Player.EventName.Streaming));
          var g = new shaka.util.PublicPromise();
          shaka.util.MediaReadyState.waitForReadyState(d2, HTMLMediaElement.HAVE_METADATA, this.loadEventManager_, function() {
            g.resolve();
          });
          shaka.util.MediaReadyState.waitForReadyState(d2, HTMLMediaElement.HAVE_CURRENT_DATA, this.loadEventManager_, function() {
            var h;
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
              if (1 == k2.nextAddress)
                return c2.setupPreferredAudioOnSrc_(), h = c2.getFilteredTextTracks_(), h.find(function(l) {
                  return "disabled" != l.mode;
                }) ? k2.jumpTo(2) : k2.yield(new Promise(function(l) {
                  c2.loadEventManager_.listenOnce(
                    d2.textTracks,
                    "change",
                    l
                  );
                  new shaka.util.Timer(l).tickAfter(1);
                }), 2);
              if (e2)
                return k2["return"]();
              c2.setupPreferredTextOnSrc_();
              k2.jumpToEnd();
            });
          });
          d2.error ? g.reject(this.videoErrorToShakaError_()) : "none" == d2.preload && (shaka.log.alwaysWarn('With <video preload="none">, the browser will not load anything until play() is called. We are unable to measure load latency in a meaningful way, and we cannot provide track info yet. Please do not use preload="none" with Shaka Player.'), g.resolve());
          this.loadEventManager_.listenOnce(
            d2,
            "error",
            function() {
              g.reject(c2.videoErrorToShakaError_());
            }
          );
          return new shaka.util.AbortableOperation(g, function() {
            var h = new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.OPERATION_ABORTED);
            g.reject(h);
            return Promise.resolve();
          });
        };
        shaka.Player.prototype.setupPreferredAudioOnSrc_ = function() {
          var a2 = this.config_.preferredAudioLanguage;
          if ("" != a2) {
            this.selectAudioLanguage(a2);
            var b2 = this.config_.preferredVariantRole;
            "" != b2 && this.selectAudioLanguage(a2, b2);
          }
        };
        shaka.Player.prototype.setupPreferredTextOnSrc_ = function() {
          var a2 = this.config_.preferredTextLanguage, b2 = this.config_.preferForcedSubs;
          if ("" != a2) {
            this.selectTextLanguage(a2, "", b2);
            var c2 = this.config_.preferredTextRole;
            "" != c2 && this.selectTextLanguage(a2, c2, b2);
          }
        };
        shaka.Player.prototype.processTimedMetadataSrcEqls_ = function(a2) {
          var b2 = this;
          if ("metadata" == a2.kind) {
            a2.mode = "hidden";
            this.loadEventManager_.listen(a2, "cuechange", function() {
              if (a2.activeCues) {
                for (var d2 = $jscomp.makeIterator(a2.activeCues), e2 = d2.next(); !e2.done; e2 = d2.next())
                  if (e2 = e2.value, b2.dispatchMetadataEvent_(e2.startTime, e2.endTime, e2.type, e2.value), b2.adManager_)
                    b2.adManager_.onCueMetadataChange(e2.value);
              }
            });
            var c2 = new shaka.util.Timer(function() {
              var d2 = b2.getMetadataTracks_();
              d2 = $jscomp.makeIterator(d2);
              for (var e2 = d2.next(); !e2.done; e2 = d2.next())
                e2.value.mode = "hidden";
            }).tickNow().tickAfter(0.5);
            this.cleanupOnUnload_.push(function() {
              c2.stop();
            });
          }
        };
        shaka.Player.prototype.processTimedMetadataMediaSrc_ = function(a2, b2, c2) {
          a2 = $jscomp.makeIterator(a2);
          for (var d2 = a2.next(); !d2.done; d2 = a2.next())
            if (d2 = d2.value, d2.data && d2.cueTime && d2.frames) {
              for (var e2 = d2.cueTime + b2, f2 = c2, g = $jscomp.makeIterator(d2.frames), h = g.next(); !h.done; h = g.next())
                this.dispatchMetadataEvent_(e2, f2, "ID3", h.value);
              if (this.adManager_)
                this.adManager_.onHlsTimedMetadata(d2, e2);
            }
        };
        shaka.Player.prototype.dispatchMetadataEvent_ = function(a2, b2, c2, d2) {
          goog.asserts.assert(!b2 || a2 <= b2, "Metadata start time should be less or equal to the end time!");
          var e2 = shaka.Player.EventName.Metadata;
          a2 = (/* @__PURE__ */ new Map()).set("startTime", a2).set("endTime", b2).set("metadataType", c2).set("payload", d2);
          this.dispatchEvent(this.makeEvent_(e2, a2));
        };
        shaka.Player.prototype.activateChaptersTrack_ = function(a2) {
          if (a2 && "chapters" == a2.kind) {
            a2.mode = "hidden";
            var b2 = new shaka.util.Timer(function() {
              a2.mode = "hidden";
            }).tickNow().tickAfter(0.5);
            this.cleanupOnUnload_.push(function() {
              b2.stop();
            });
          }
        };
        shaka.Player.filterForAVVariants_ = function(a2) {
          var b2 = function(c2) {
            return c2.video && c2.audio || c2.video && c2.video.codecs.includes(",");
          };
          a2.variants.some(b2) && (shaka.log.debug("Found variant with audio and video content, so filtering out audio-only content."), a2.variants = a2.variants.filter(b2));
        };
        shaka.Player.prototype.createDrmEngine = function(a2) {
          return new shaka.media.DrmEngine(a2, this.config_.drm.updateExpirationTime);
        };
        shaka.Player.prototype.createNetworkingEngine = function() {
          var a2 = this;
          return new shaka.net.NetworkingEngine(function(b2, c2) {
            a2.abrManager_ && a2.abrManager_.segmentDownloaded(b2, c2);
          }, function(b2, c2, d2) {
            var e2 = shaka.Player.EventName.DownloadHeadersReceived;
            b2 = (/* @__PURE__ */ new Map()).set("headers", b2).set("request", c2).set("requestType", d2);
            a2.dispatchEvent(a2.makeEvent_(e2, b2));
          }, function(b2, c2, d2, e2) {
            var f2 = shaka.Player.EventName.DownloadFailed;
            b2 = (/* @__PURE__ */ new Map()).set("request", b2).set("error", c2).set("httpResponseCode", d2).set("aborted", e2);
            a2.dispatchEvent(a2.makeEvent_(
              f2,
              b2
            ));
          });
        };
        shaka.Player.prototype.createPlayhead = function(a2) {
          var b2 = this;
          goog.asserts.assert(this.manifest_, "Must have manifest");
          goog.asserts.assert(this.video_, "Must have video");
          return new shaka.media.MediaSourcePlayhead(this.video_, this.manifest_, this.config_.streaming, a2, function() {
            return b2.onSeek_();
          }, function(c2) {
            return b2.dispatchEvent(c2);
          });
        };
        shaka.Player.prototype.createPlayheadObserversForMSE_ = function() {
          var a2 = this;
          goog.asserts.assert(this.manifest_, "Must have manifest");
          goog.asserts.assert(this.regionTimeline_, "Must have region timeline");
          goog.asserts.assert(this.video_, "Must have video element");
          var b2 = new shaka.media.RegionObserver(this.regionTimeline_);
          b2.addEventListener("enter", function(d2) {
            a2.onRegionEvent_(shaka.Player.EventName.TimelineRegionEnter, d2.region);
          });
          b2.addEventListener("exit", function(d2) {
            a2.onRegionEvent_(
              shaka.Player.EventName.TimelineRegionExit,
              d2.region
            );
          });
          b2.addEventListener("skip", function(d2) {
            var e2 = d2.region;
            d2.seeking || (a2.onRegionEvent_(shaka.Player.EventName.TimelineRegionEnter, e2), a2.onRegionEvent_(shaka.Player.EventName.TimelineRegionExit, e2));
          });
          var c2 = new shaka.media.PlayheadObserverManager(this.video_);
          c2.manage(b2);
          this.qualityObserver_ && c2.manage(this.qualityObserver_);
          return c2;
        };
        shaka.Player.prototype.startBufferManagement_ = function(a2) {
          var b2 = this;
          goog.asserts.assert(!this.bufferObserver_, "No buffering observer should exist before initialization.");
          goog.asserts.assert(!this.bufferPoller_, "No buffer timer should exist before initialization.");
          this.bufferObserver_ = new shaka.media.BufferingObserver(1, 2);
          this.bufferObserver_.setState(shaka.media.BufferingObserver.State.STARVING);
          this.updateBufferingSettings_(a2);
          this.updateBufferState_();
          this.bufferPoller_ = new shaka.util.Timer(function() {
            b2.pollBufferState_();
          }).tickEvery(0.25);
        };
        shaka.Player.prototype.updateBufferingSettings_ = function(a2) {
          this.bufferObserver_.setThresholds(a2, Math.min(shaka.Player.TYPICAL_BUFFERING_THRESHOLD_, a2 / 2));
        };
        shaka.Player.prototype.pollBufferState_ = function() {
          goog.asserts.assert(this.video_, "Need a media element to update the buffering observer");
          goog.asserts.assert(this.bufferObserver_, "Need a buffering observer to update");
          switch (this.loadMode_) {
            case shaka.Player.LoadMode.SRC_EQUALS:
              var a2 = this.isBufferedToEndSrc_();
              break;
            case shaka.Player.LoadMode.MEDIA_SOURCE:
              a2 = this.isBufferedToEndMS_();
              break;
            default:
              a2 = false;
          }
          var b2 = shaka.media.TimeRangesUtils.bufferedAheadOf(this.video_.buffered, this.video_.currentTime);
          this.bufferObserver_.update(b2, a2) && this.updateBufferState_();
        };
        shaka.Player.prototype.createMediaSourceEngine = function(a2, b2, c2, d2) {
          return new shaka.media.MediaSourceEngine(a2, b2, c2, d2);
        };
        shaka.Player.prototype.createCmcd_ = function() {
          var a2 = this;
          return new shaka.util.CmcdManager({ getBandwidthEstimate: function() {
            return a2.abrManager_ ? a2.abrManager_.getBandwidthEstimate() : NaN;
          }, getBufferedInfo: function() {
            return a2.getBufferedInfo();
          }, getCurrentTime: function() {
            return a2.video_ ? a2.video_.currentTime : 0;
          }, getVariantTracks: function() {
            return a2.getVariantTracks();
          }, getPlaybackRate: function() {
            return a2.getPlaybackRate();
          }, isLive: function() {
            return a2.isLive();
          } }, this.config_.cmcd);
        };
        shaka.Player.prototype.createStreamingEngine = function() {
          var a2 = this;
          goog.asserts.assert(this.playhead_ && this.abrManager_ && this.mediaSourceEngine_ && this.cmcdManager_ && this.manifest_, "Must not be destroyed");
          return new shaka.media.StreamingEngine(this.manifest_, {
            getPresentationTime: function() {
              return a2.playhead_.getTime();
            },
            getBandwidthEstimate: function() {
              return a2.abrManager_.getBandwidthEstimate();
            },
            modifySegmentRequest: function(b2, c2) {
              a2.cmcdManager_.applySegmentData(b2, c2);
            },
            mediaSourceEngine: this.mediaSourceEngine_,
            netEngine: this.networkingEngine_,
            onError: function(b2) {
              return a2.onError_(b2);
            },
            onEvent: function(b2) {
              return a2.dispatchEvent(b2);
            },
            onManifestUpdate: function() {
              return a2.onManifestUpdate_();
            },
            onSegmentAppended: function() {
              return a2.onSegmentAppended_();
            },
            onInitSegmentAppended: function(b2, c2) {
              var d2 = c2.getMediaQuality();
              d2 && a2.qualityObserver_ && a2.qualityObserver_.addMediaQualityChange(d2, b2);
            }
          });
        };
        shaka.Player.prototype.configure = function(a2, b2) {
          goog.asserts.assert(this.config_, "Config must not be null!");
          goog.asserts.assert("object" == typeof a2 || 2 == arguments.length, "String configs should have values!");
          2 == arguments.length && "string" == typeof a2 && (a2 = shaka.util.ConfigUtils.convertToConfigObject(a2, b2));
          goog.asserts.assert("object" == typeof a2, "Should be an object!");
          a2.manifest && a2.manifest.dash && "defaultPresentationDelay" in a2.manifest.dash && (shaka.Deprecate.deprecateFeature(
            4,
            "manifest.dash.defaultPresentationDelay configuration",
            "Please Use manifest.defaultPresentationDelay instead."
          ), a2.manifest.defaultPresentationDelay = a2.manifest.dash.defaultPresentationDelay, delete a2.manifest.dash.defaultPresentationDelay);
          a2.streaming && a2.streaming.lowLatencyMode && (void 0 == a2.streaming.inaccurateManifestTolerance && (a2.streaming.inaccurateManifestTolerance = 0), void 0 == a2.streaming.rebufferingGoal && (a2.streaming.rebufferingGoal = 0.01));
          var c2 = shaka.util.PlayerConfiguration.mergeConfigObjects(this.config_, a2, this.defaultConfig_());
          this.applyConfig_();
          return c2;
        };
        shaka.Player.prototype.applyConfig_ = function() {
          if (this.parser_) {
            var a2 = shaka.util.ObjectUtils.cloneObject(this.config_.manifest);
            this.video_ && "AUDIO" === this.video_.nodeName && (a2.disableVideo = true);
            this.parser_.configure(a2);
          }
          this.drmEngine_ && this.drmEngine_.configure(this.config_.drm);
          if (this.streamingEngine_) {
            this.streamingEngine_.configure(this.config_.streaming);
            try {
              this.filterManifestWithRestrictions_(this.manifest_);
            } catch (c2) {
              this.onError_(c2);
            }
            this.abrManager_ && this.updateAbrManagerVariants_();
            !(a2 = this.streamingEngine_.getCurrentVariant()) || a2.allowedByApplication && a2.allowedByKeySystem || (shaka.log.debug("Choosing new variant after changing configuration"), this.chooseVariantAndSwitch_());
          }
          this.networkingEngine_ && this.networkingEngine_.setForceHTTPS(this.config_.streaming.forceHTTPS);
          if (this.mediaSourceEngine_ && (a2 = this.config_.textDisplayFactory, this.lastTextFactory_ != a2)) {
            var b2 = shaka.util.Functional.callFactory(a2);
            this.mediaSourceEngine_.setTextDisplayer(b2);
            this.lastTextFactory_ = a2;
            this.streamingEngine_ && this.streamingEngine_.reloadTextStream();
          }
          this.abrManager_ && (this.abrManager_.configure(this.config_.abr), this.config_.abr.enabled ? this.abrManager_.enable() : this.abrManager_.disable(), this.onAbrStatusChanged_());
          this.bufferObserver_ && (a2 = this.config_.streaming.rebufferingGoal, this.manifest_ && (a2 = Math.max(a2, this.manifest_.minBufferTime)), this.updateBufferingSettings_(a2));
          this.manifest_ && shaka.Player.applyPlayRange_(this.manifest_.presentationTimeline, this.config_.playRangeStart, this.config_.playRangeEnd);
        };
        shaka.Player.prototype.getConfiguration = function() {
          goog.asserts.assert(this.config_, "Config must not be null!");
          var a2 = this.defaultConfig_();
          shaka.util.PlayerConfiguration.mergeConfigObjects(a2, this.config_, this.defaultConfig_());
          return a2;
        };
        shaka.Player.prototype.getSharedConfiguration = function() {
          goog.asserts.assert(this.config_, "Cannot call getSharedConfiguration after call destroy!");
          return this.config_;
        };
        shaka.Player.prototype.getBufferFullness = function() {
          if (this.video_) {
            var a2 = this.video_.buffered.length;
            a2 = a2 ? this.video_.buffered.end(a2 - 1) : 0;
            var b2 = this.getConfiguration().streaming.bufferingGoal;
            b2 = Math.min(this.video_.currentTime + b2, this.seekRange().end);
            if (a2 >= b2)
              return 1;
            if (!(a2 <= this.video_.currentTime) && a2 < b2)
              return (a2 - this.video_.currentTime) / (b2 - this.video_.currentTime);
          }
          return 0;
        };
        shaka.Player.prototype.resetConfiguration = function() {
          goog.asserts.assert(this.config_, "Cannot be destroyed");
          for (var a2 in this.config_)
            delete this.config_[a2];
          shaka.util.PlayerConfiguration.mergeConfigObjects(this.config_, this.defaultConfig_(), this.defaultConfig_());
          this.applyConfig_();
        };
        shaka.Player.prototype.getLoadMode = function() {
          return this.loadMode_;
        };
        shaka.Player.prototype.getMediaElement = function() {
          return this.video_;
        };
        shaka.Player.prototype.getNetworkingEngine = function() {
          return this.networkingEngine_;
        };
        shaka.Player.prototype.getAssetUri = function() {
          return this.assetUri_;
        };
        shaka.Player.prototype.getAdManager = function() {
          return this.adManager_ ? this.adManager_ : null;
        };
        shaka.Player.prototype.isLive = function() {
          return this.manifest_ ? this.manifest_.presentationTimeline.isLive() : this.video_ && this.video_.src ? Infinity == this.video_.duration : false;
        };
        shaka.Player.prototype.isInProgress = function() {
          return this.manifest_ ? this.manifest_.presentationTimeline.isInProgress() : false;
        };
        shaka.Player.prototype.isAudioOnly = function() {
          if (this.manifest_) {
            var a2 = this.manifest_.variants;
            return a2.length ? !a2[0].video : false;
          }
          return this.video_ && this.video_.src ? this.video_.videoTracks ? 0 == this.video_.videoTracks.length : 0 == this.video_.videoHeight : false;
        };
        shaka.Player.prototype.isLowLatencyMode_ = function() {
          return this.config_.streaming.lowLatencyMode;
        };
        shaka.Player.prototype.isAutoLowLatencyMode_ = function() {
          return this.config_.streaming.autoLowLatencyMode;
        };
        shaka.Player.prototype.seekRange = function() {
          if (this.manifest_) {
            var a2 = this.manifest_.presentationTimeline;
            return { start: a2.getSeekRangeStart(), end: a2.getSeekRangeEnd() };
          }
          return this.video_ && this.video_.src && (a2 = this.video_.seekable, a2.length) ? { start: a2.start(0), end: a2.end(a2.length - 1) } : { start: 0, end: 0 };
        };
        shaka.Player.prototype.goToLive = function() {
          this.isLive() ? this.video_.currentTime = this.seekRange().end : shaka.log.warning("goToLive is for live streams!");
        };
        shaka.Player.prototype.keySystem = function() {
          return shaka.media.DrmEngine.keySystem(this.drmInfo());
        };
        shaka.Player.prototype.drmInfo = function() {
          return this.drmEngine_ ? this.drmEngine_.getDrmInfo() : null;
        };
        shaka.Player.prototype.getDrmEngine = function() {
          return this.drmEngine_;
        };
        shaka.Player.prototype.getExpiration = function() {
          return this.drmEngine_ ? this.drmEngine_.getExpiration() : Infinity;
        };
        shaka.Player.prototype.getKeyStatuses = function() {
          return this.drmEngine_ ? this.drmEngine_.getKeyStatuses() : {};
        };
        shaka.Player.prototype.isBuffering = function() {
          var a2 = shaka.media.BufferingObserver.State;
          return this.bufferObserver_ ? this.bufferObserver_.getState() == a2.STARVING : false;
        };
        shaka.Player.prototype.getPlaybackRate = function() {
          return this.video_ ? this.playRateController_ ? this.playRateController_.getRealRate() : 1 : 0;
        };
        shaka.Player.prototype.trickPlay = function(a2) {
          goog.asserts.assert(0 != a2, "Should never set a trick play rate of 0!");
          0 == a2 ? shaka.log.alwaysWarn("A trick play rate of 0 is unsupported!") : (this.video_.paused && this.video_.play(), this.playRateController_.set(a2), this.loadMode_ == shaka.Player.LoadMode.MEDIA_SOURCE && (this.abrManager_.playbackRateChanged(a2), this.streamingEngine_.setTrickPlay(1 < Math.abs(a2))));
        };
        shaka.Player.prototype.cancelTrickPlay = function() {
          var a2 = this.playRateController_.getDefaultRate();
          this.loadMode_ == shaka.Player.LoadMode.SRC_EQUALS && this.playRateController_.set(a2);
          this.loadMode_ == shaka.Player.LoadMode.MEDIA_SOURCE && (this.playRateController_.set(a2), this.abrManager_.playbackRateChanged(a2), this.streamingEngine_.setTrickPlay(false));
        };
        shaka.Player.prototype.getVariantTracks = function() {
          if (this.manifest_) {
            for (var a2 = this.streamingEngine_ ? this.streamingEngine_.getCurrentVariant() : null, b2 = [], c2 = 0, d2 = $jscomp.makeIterator(this.manifest_.variants), e2 = d2.next(); !e2.done; e2 = d2.next())
              if (e2 = e2.value, shaka.util.StreamUtils.isPlayable(e2)) {
                var f2 = shaka.util.StreamUtils.variantToTrack(e2);
                f2.active = e2 == a2;
                f2.active || 1 == c2 || null == a2 || e2.video != a2.video || e2.audio != a2.audio || (f2.active = true);
                f2.active && c2++;
                b2.push(f2);
              }
            goog.asserts.assert(1 >= c2, "It should only have one active track");
            return b2;
          }
          return this.video_ && this.video_.audioTracks ? Array.from(this.video_.audioTracks).map(function(g) {
            return shaka.util.StreamUtils.html5AudioTrackToTrack(g);
          }) : [];
        };
        shaka.Player.prototype.getTextTracks = function() {
          if (this.manifest_) {
            for (var a2 = this.streamingEngine_ ? this.streamingEngine_.getCurrentTextStream() : null, b2 = [], c2 = $jscomp.makeIterator(this.manifest_.textStreams), d2 = c2.next(); !d2.done; d2 = c2.next()) {
              d2 = d2.value;
              var e2 = shaka.util.StreamUtils.textStreamToTrack(d2);
              e2.active = d2 == a2;
              b2.push(e2);
            }
            return b2;
          }
          if (this.video_ && this.video_.src && this.video_.textTracks) {
            a2 = this.getFilteredTextTracks_();
            var f2 = shaka.util.StreamUtils;
            return a2.map(function(g) {
              return f2.html5TextTrackToTrack(g);
            });
          }
          return [];
        };
        shaka.Player.prototype.getImageTracks = function() {
          if (this.manifest_) {
            var a2 = shaka.util.StreamUtils;
            return this.manifest_.imageStreams.map(function(b2) {
              return a2.imageStreamToTrack(b2);
            });
          }
          return [];
        };
        shaka.Player.prototype.getThumbnails = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y, w, x;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(z) {
            if (1 == z.nextAddress)
              return c2.manifest_ ? (d2 = c2.manifest_.imageStreams.find(function(A) {
                return A.id == a2;
              })) ? d2.segmentIndex ? z.jumpTo(3) : z.yield(d2.createSegmentIndex(), 3) : z["return"](null) : z.jumpTo(2);
            if (2 != z.nextAddress) {
              e2 = d2.segmentIndex.find(b2);
              if (null == e2)
                return z["return"](null);
              f2 = d2.segmentIndex.get(e2);
              g = f2.getTilesLayout() || d2.tilesLayout;
              h = /(\d+)x(\d+)/.exec(g);
              if (!h)
                return shaka.log.warning("Tiles layout does not contain a valid format  (columns x rows)"), z["return"](null);
              k2 = d2.width || 0;
              l = d2.height || 0;
              m = parseInt(h[1], 10);
              n = parseInt(h[2], 10);
              p = k2 / m;
              q = l / n;
              r = m * n;
              t = f2.trueEndTime - f2.startTime;
              u = f2.getTileDuration() || t / r;
              v = f2.startTime;
              w = y = 0;
              1 < r && (x = Math.floor((b2 - f2.startTime) / u), v = f2.startTime + x * u, y = x % m * p, w = Math.floor(x / m) * q);
              return z["return"]({ imageHeight: l, imageWidth: k2, height: q, positionX: y, positionY: w, startTime: v, duration: u, uris: f2.getUris(), width: p });
            }
            return z["return"](null);
          });
        };
        shaka.Player.prototype.selectTextTrack = function(a2) {
          if (this.manifest_ && this.streamingEngine_) {
            var b2 = this.manifest_.textStreams.find(function(d2) {
              return d2.id == a2.id;
            });
            b2 ? b2 == this.streamingEngine_.getCurrentTextStream() ? shaka.log.debug("Text track already selected.") : (this.addTextStreamToSwitchHistory_(b2, false), this.streamingEngine_.switchTextStream(b2), this.onTextChanged_(), this.currentTextLanguage_ = b2.language) : shaka.log.error("No stream with id", a2.id);
          } else if (this.video_ && this.video_.src && this.video_.textTracks) {
            b2 = this.getFilteredTextTracks_();
            b2 = $jscomp.makeIterator(b2);
            for (var c2 = b2.next(); !c2.done; c2 = b2.next())
              c2 = c2.value, shaka.util.StreamUtils.html5TrackId(c2) == a2.id ? c2.mode = this.isTextVisible_ ? "showing" : "hidden" : c2.mode = "disabled";
            this.onTextChanged_();
          }
        };
        shaka.Player.prototype.selectVariantTrack = function(a2, b2, c2) {
          b2 = void 0 === b2 ? false : b2;
          c2 = void 0 === c2 ? 0 : c2;
          if (this.manifest_ && this.streamingEngine_) {
            this.config_.abr.enabled && shaka.log.alwaysWarn("Changing tracks while abr manager is enabled will likely result in the selected track being overriden. Consider disabling abr before calling selectVariantTrack().");
            var d2 = this.manifest_.variants.find(function(e2) {
              return e2.id == a2.id;
            });
            d2 ? shaka.util.StreamUtils.isPlayable(d2) ? (this.switchVariant_(d2, false, b2, c2), this.currentAdaptationSetCriteria_ = new shaka.media.ExampleBasedCriteria(d2), this.updateAbrManagerVariants_()) : shaka.log.error("Unable to switch to restricted track", a2.id) : shaka.log.error("No variant with id", a2.id);
          } else if (this.video_ && this.video_.audioTracks) {
            for (b2 = Array.from(this.video_.audioTracks), b2 = $jscomp.makeIterator(b2), c2 = b2.next(); !c2.done; c2 = b2.next())
              if (c2 = c2.value, shaka.util.StreamUtils.html5TrackId(c2) == a2.id) {
                this.switchHtml5Track_(c2);
                break;
              }
          }
        };
        shaka.Player.prototype.getAudioLanguagesAndRoles = function() {
          return shaka.Player.getLanguageAndRolesFrom_(this.getVariantTracks());
        };
        shaka.Player.prototype.getTextLanguagesAndRoles = function() {
          return shaka.Player.getLanguageAndRolesFrom_(this.getTextTracks());
        };
        shaka.Player.prototype.getAudioLanguages = function() {
          return Array.from(shaka.Player.getLanguagesFrom_(this.getVariantTracks()));
        };
        shaka.Player.prototype.getTextLanguages = function() {
          return Array.from(shaka.Player.getLanguagesFrom_(this.getTextTracks()));
        };
        shaka.Player.prototype.selectAudioLanguage = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils;
          if (this.manifest_ && this.playhead_) {
            this.currentAdaptationSetCriteria_ = new shaka.media.PreferenceBasedCriteria(a2, b2 || "", 0, "");
            c2 = function(l, m) {
              return l.video || m.video ? l.video && m.video ? Math.abs((l.video.height || 0) - (m.video.height || 0)) + Math.abs((l.video.width || 0) - (m.video.width || 0)) : Infinity : 0;
            };
            var d2 = this.streamingEngine_.getCurrentVariant(), e2 = this.currentAdaptationSetCriteria_.create(this.manifest_.variants), f2 = null;
            e2 = $jscomp.makeIterator(e2.values());
            for (var g = e2.next(); !g.done; g = e2.next())
              if (g = g.value, !f2 || c2(f2, d2) > c2(g, d2))
                f2 = g;
            f2 ? (c2 = shaka.util.StreamUtils.variantToTrack(f2), this.selectVariantTrack(c2, true)) : this.chooseVariantAndSwitch_();
          } else if (this.video_ && this.video_.audioTracks) {
            g = Array.from(this.video_.audioTracks);
            d2 = c2.normalize(a2);
            e2 = f2 = null;
            g = $jscomp.makeIterator(g);
            for (var h = g.next(); !h.done; h = g.next()) {
              h = h.value;
              var k2 = shaka.util.StreamUtils.html5AudioTrackToTrack(h);
              c2.normalize(k2.language) == d2 && (f2 = h, b2 ? k2.roles.includes(b2) && (e2 = h) : 0 == k2.roles.length && (e2 = h));
            }
            e2 ? this.switchHtml5Track_(e2) : f2 && this.switchHtml5Track_(f2);
          }
        };
        shaka.Player.prototype.selectTextLanguage = function(a2, b2, c2) {
          c2 = void 0 === c2 ? false : c2;
          var d2 = shaka.util.LanguageUtils;
          if (this.manifest_ && this.playhead_) {
            if (this.currentTextLanguage_ = a2, this.currentTextRole_ = b2 || "", this.currentTextForced_ = c2, a2 = this.chooseTextStream_())
              a2 == this.streamingEngine_.getCurrentTextStream() ? shaka.log.debug("Text track already selected.") : (this.addTextStreamToSwitchHistory_(a2, false), this.shouldStreamText_() && (this.streamingEngine_.switchTextStream(a2), this.onTextChanged_()));
          } else {
            var e2 = d2.normalize(a2);
            (a2 = this.getTextTracks().find(function(f2) {
              return d2.normalize(f2.language) == e2 && (!b2 || f2.roles.includes(b2)) && f2.forced == c2;
            })) && this.selectTextTrack(a2);
          }
        };
        shaka.Player.prototype.selectVariantsByLabel = function(a2) {
          if (this.manifest_ && this.playhead_) {
            for (var b2 = null, c2 = $jscomp.makeIterator(this.manifest_.variants), d2 = c2.next(); !d2.done; d2 = c2.next())
              if (d2 = d2.value, d2.audio.label == a2) {
                b2 = d2;
                break;
              }
            null == b2 ? shaka.log.warning("No variants were found with label: " + a2 + ". Ignoring the request to switch.") : (this.currentAdaptationSetCriteria_ = new shaka.media.PreferenceBasedCriteria(b2.language, "", 0, a2), this.chooseVariantAndSwitch_());
          }
        };
        shaka.Player.prototype.isTextTrackVisible = function() {
          var a2 = this.isTextVisible_;
          if (this.mediaSourceEngine_) {
            var b2 = this.mediaSourceEngine_.getTextDisplayer().isTextVisible();
            goog.asserts.assert(b2 == a2, "text visibility has fallen out of sync");
            return b2;
          }
          return this.video_ && this.video_.src && this.video_.textTracks ? this.getFilteredTextTracks_().some(function(c2) {
            return "showing" == c2.mode;
          }) : a2;
        };
        shaka.Player.prototype.getChaptersTracks = function() {
          if (this.video_ && this.video_.src && this.video_.textTracks) {
            var a2 = this.getChaptersTracks_(), b2 = shaka.util.StreamUtils;
            return a2.map(function(c2) {
              return b2.html5TextTrackToTrack(c2);
            });
          }
          return [];
        };
        shaka.Player.prototype.getChapters = function(a2) {
          var b2 = shaka.util.LanguageUtils, c2 = b2.normalize(a2), d2 = this.getChaptersTracks_().filter(function(g) {
            return b2.normalize(g.language) == c2;
          });
          if (!d2 || !d2.length)
            return [];
          a2 = [];
          d2 = $jscomp.makeIterator(d2);
          for (var e2 = d2.next(); !e2.done; e2 = d2.next())
            if ((e2 = e2.value) && e2.cues) {
              e2 = $jscomp.makeIterator(e2.cues);
              for (var f2 = e2.next(); !f2.done; f2 = e2.next())
                f2 = f2.value, a2.push({ title: f2.text, startTime: f2.startTime, endTime: f2.endTime });
            }
          return a2;
        };
        shaka.Player.prototype.getFilteredTextTracks_ = function() {
          goog.asserts.assert(this.video_.textTracks, "TextTracks should be valid.");
          return Array.from(this.video_.textTracks).filter(function(a2) {
            return "metadata" != a2.kind && "chapters" != a2.kind && a2.label != shaka.Player.TextTrackLabel;
          });
        };
        shaka.Player.prototype.getMetadataTracks_ = function() {
          goog.asserts.assert(this.video_.textTracks, "TextTracks should be valid.");
          return Array.from(this.video_.textTracks).filter(function(a2) {
            return "metadata" == a2.kind;
          });
        };
        shaka.Player.prototype.getChaptersTracks_ = function() {
          goog.asserts.assert(this.video_.textTracks, "TextTracks should be valid.");
          return Array.from(this.video_.textTracks).filter(function(a2) {
            return "chapters" == a2.kind;
          });
        };
        shaka.Player.prototype.setTextTrackVisibility = function(a2) {
          a2 = !!a2;
          if (this.isTextVisible_ != a2) {
            this.isTextVisible_ = a2;
            if (this.loadMode_ == shaka.Player.LoadMode.MEDIA_SOURCE)
              this.mediaSourceEngine_.getTextDisplayer().setTextVisibility(a2), this.config_.streaming.alwaysStreamText || (a2 ? this.streamingEngine_.getCurrentTextStream() || (a2 = shaka.util.StreamUtils.filterStreamsByLanguageAndRole(this.manifest_.textStreams, this.currentTextLanguage_, this.currentTextRole_, this.currentTextForced_), 0 < a2.length && (this.streamingEngine_.switchTextStream(a2[0]), this.onTextChanged_())) : this.streamingEngine_.unloadTextStream());
            else if (this.video_ && this.video_.src && this.video_.textTracks) {
              var b2 = this.getFilteredTextTracks_();
              b2 = $jscomp.makeIterator(b2);
              for (var c2 = b2.next(); !c2.done; c2 = b2.next())
                c2 = c2.value, "disabled" != c2.mode && (c2.mode = a2 ? "showing" : "hidden");
            }
            this.onTextTrackVisibility_();
          }
        };
        shaka.Player.prototype.getPlayheadTimeAsDate = function() {
          if (!this.isLive())
            return shaka.log.warning("getPlayheadTimeAsDate is for live streams!"), null;
          var a2 = this.walker_.getCurrentPayload(), b2 = 0;
          if (this.playhead_)
            b2 = this.playhead_.getTime();
          else if (a2) {
            if (null == a2.startTime)
              return new Date();
            b2 = a2.startTime;
          }
          if (this.manifest_)
            return a2 = this.manifest_.presentationTimeline.getPresentationStartTime(), new Date(1e3 * (a2 + b2));
          if (this.video_ && this.video_.getStartDate)
            return a2 = this.video_.getStartDate(), isNaN(a2.getTime()) ? (shaka.log.warning("EXT-X-PROGRAM-DATETIME required to get playhead time as Date!"), null) : new Date(a2.getTime() + 1e3 * b2);
          shaka.log.warning("No way to get playhead time as Date!");
          return null;
        };
        shaka.Player.prototype.getPresentationStartTimeAsDate = function() {
          if (!this.isLive())
            return shaka.log.warning("getPresentationStartTimeAsDate is for live streams!"), null;
          if (this.manifest_) {
            var a2 = this.manifest_.presentationTimeline.getPresentationStartTime();
            goog.asserts.assert(null != a2, "Presentation start time should not be null!");
            return new Date(1e3 * a2);
          }
          if (this.video_ && this.video_.getStartDate)
            return a2 = this.video_.getStartDate(), isNaN(a2.getTime()) ? (shaka.log.warning("EXT-X-PROGRAM-DATETIME required to get presentation start time as Date!"), null) : a2;
          shaka.log.warning("No way to get presentation start time as Date!");
          return null;
        };
        shaka.Player.prototype.getBufferedInfo = function() {
          if (this.loadMode_ == shaka.Player.LoadMode.MEDIA_SOURCE)
            return this.mediaSourceEngine_.getBufferedInfo();
          var a2 = { total: [], audio: [], video: [], text: [] };
          this.loadMode_ == shaka.Player.LoadMode.SRC_EQUALS && (a2.total = shaka.media.TimeRangesUtils.getBufferedInfo(this.video_.buffered));
          return a2;
        };
        shaka.Player.prototype.getStats = function() {
          if (this.loadMode_ != shaka.Player.LoadMode.MEDIA_SOURCE && this.loadMode_ != shaka.Player.LoadMode.SRC_EQUALS)
            return shaka.util.Stats.getEmptyBlob();
          this.updateStateHistory_();
          goog.asserts.assert(this.video_, "If we have stats, we should have video_");
          var a2 = this.video_, b2 = a2.currentTime / a2.duration;
          isNaN(b2) || this.stats_.setCompletionPercent(Math.round(100 * b2));
          a2.getVideoPlaybackQuality && (a2 = a2.getVideoPlaybackQuality(), this.stats_.setDroppedFrames(
            Number(a2.droppedVideoFrames),
            Number(a2.totalVideoFrames)
          ), this.stats_.setCorruptedFrames(Number(a2.corruptedVideoFrames)));
          a2 = this.drmEngine_ ? this.drmEngine_.getLicenseTime() : NaN;
          this.stats_.setLicenseTime(a2);
          if (this.loadMode_ == shaka.Player.LoadMode.MEDIA_SOURCE) {
            if (a2 = this.streamingEngine_.getCurrentVariant())
              b2 = (this.playRateController_ ? this.playRateController_.getRealRate() : 1) * a2.bandwidth, this.stats_.setCurrentStreamBandwidth(b2);
            a2 && a2.video && this.stats_.setResolution(a2.video.width || NaN, a2.video.height || NaN);
            this.isLive() && (a2 = this.getPresentationStartTimeAsDate().valueOf() + 1e3 * this.seekRange().end, a2 = (Date.now() - a2) / 1e3, this.stats_.setLiveLatency(a2));
            this.manifest_ && this.manifest_.presentationTimeline && (a2 = this.manifest_.presentationTimeline.getMaxSegmentDuration(), this.stats_.setMaxSegmentDuration(a2));
            a2 = this.abrManager_.getBandwidthEstimate();
            this.stats_.setBandwidthEstimate(a2);
          }
          return this.stats_.getBlob();
        };
        shaka.Player.prototype.addTextTrack = function(a2, b2, c2, d2, e2, f2, g) {
          g = void 0 === g ? false : g;
          shaka.Deprecate.deprecateFeature(4, "addTextTrack", "Please use an addTextTrackAsync.");
          if (this.loadMode_ != shaka.Player.LoadMode.MEDIA_SOURCE && this.loadMode_ != shaka.Player.LoadMode.SRC_EQUALS)
            throw shaka.log.error("Must call load() and wait for it to resolve before adding text tracks."), new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.CONTENT_NOT_LOADED);
          if (!d2) {
            var h = shaka.media.ManifestParser.getExtension(a2);
            d2 = shaka.Player.TEXT_EXTENSIONS_TO_MIME_TYPES_[h];
            if (!d2)
              throw shaka.log.error("The mimeType has not been provided and it could not be deduced from its extension."), new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.TEXT_COULD_NOT_GUESS_MIME_TYPE, h);
          }
          if (this.loadMode_ == shaka.Player.LoadMode.SRC_EQUALS) {
            if ("text/vtt" != d2)
              throw shaka.log.error("Only WebVTT is supported when using src="), new shaka.util.Error(
                shaka.util.Error.Severity.RECOVERABLE,
                shaka.util.Error.Category.TEXT,
                shaka.util.Error.Code.TEXT_ONLY_WEBVTT_SRC_EQUALS,
                d2
              );
            g && (c2 = "forced");
            d2 = document.createElement("track");
            d2.src = this.cmcdManager_.appendTextTrackData(a2);
            d2.label = f2 || "";
            d2.kind = c2;
            d2.srclang = b2;
            this.video_.getAttribute("crossorigin") || this.video_.setAttribute("crossorigin", "anonymous");
            this.video_.appendChild(d2);
            if (d2 = this.getTextTracks().find(function(l) {
              return l.language == b2 && l.label == (f2 || "") && l.kind == c2;
            }))
              return this.onTracksChanged_(), d2;
            shaka.log.error("Cannot add this text when loaded with src=");
            throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.CANNOT_ADD_EXTERNAL_TEXT_TO_SRC_EQUALS);
          }
          h = shaka.util.ManifestParserUtils.ContentType;
          var k2 = this.manifest_.presentationTimeline.getDuration();
          if (Infinity == k2)
            throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.CANNOT_ADD_EXTERNAL_TEXT_TO_LIVE_STREAM);
          a2 = {
            id: this.nextExternalStreamId_++,
            originalId: null,
            createSegmentIndex: function() {
              return Promise.resolve();
            },
            segmentIndex: shaka.media.SegmentIndex.forSingleSegment(0, k2, [a2]),
            mimeType: d2 || "",
            codecs: e2 || "",
            kind: c2,
            encrypted: false,
            drmInfos: [],
            keyIds: /* @__PURE__ */ new Set(),
            language: b2,
            label: f2 || null,
            type: h.TEXT,
            primary: false,
            trickModeVideo: null,
            emsgSchemeIdUris: null,
            roles: [],
            forced: !!g,
            channelsCount: null,
            audioSamplingRate: null,
            spatialAudio: false,
            closedCaptions: null
          };
          e2 = shaka.util.MimeUtils.getFullType(a2.mimeType, a2.codecs);
          if (!shaka.text.TextEngine.isTypeSupported(e2))
            throw new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.TEXT,
              shaka.util.Error.Code.MISSING_TEXT_PLUGIN,
              d2
            );
          this.manifest_.textStreams.push(a2);
          this.onTracksChanged_();
          return shaka.util.StreamUtils.textStreamToTrack(a2);
        };
        shaka.Player.prototype.addTextTrackAsync = function(a2, b2, c2, d2, e2, f2, g) {
          g = void 0 === g ? false : g;
          var h = this, k2, l, m, n, p, q, r, t, u, v, y;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
            switch (w.nextAddress) {
              case 1:
                if (h.loadMode_ != shaka.Player.LoadMode.MEDIA_SOURCE && h.loadMode_ != shaka.Player.LoadMode.SRC_EQUALS)
                  throw shaka.log.error("Must call load() and wait for it to resolve before adding text tracks."), new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.CONTENT_NOT_LOADED);
                if (d2) {
                  w.jumpTo(2);
                  break;
                }
                return w.yield(h.getTextMimetype_(a2), 3);
              case 3:
                d2 = w.yieldResult;
              case 2:
                k2 = [];
                if (h.adManager_)
                  try {
                    k2 = h.adManager_.getServerSideCuePoints();
                  } catch (x) {
                  }
                if (h.loadMode_ != shaka.Player.LoadMode.SRC_EQUALS) {
                  w.jumpTo(4);
                  break;
                }
                g && (c2 = "forced");
                return w.yield(h.addSrcTrackElement_(a2, b2, c2, d2, f2 || "", k2), 5);
              case 5:
                l = h.getTextTracks();
                if (m = l.find(function(x) {
                  return x.language == b2 && x.label == (f2 || "") && x.kind == c2;
                }))
                  return h.onTracksChanged_(), w["return"](m);
                shaka.log.error("Cannot add this text when loaded with src=");
                throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.CANNOT_ADD_EXTERNAL_TEXT_TO_SRC_EQUALS);
              case 4:
                n = shaka.util.ManifestParserUtils.ContentType;
                p = h.manifest_.presentationTimeline.getDuration();
                if (Infinity == p)
                  throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.CANNOT_ADD_EXTERNAL_TEXT_TO_LIVE_STREAM);
                if (!k2.length) {
                  w.jumpTo(6);
                  break;
                }
                goog.asserts.assert(
                  h.networkingEngine_,
                  "Need networking engine."
                );
                return w.yield(h.getTextData_(a2, h.networkingEngine_, h.config_.streaming.retryParameters), 7);
              case 7:
                q = w.yieldResult, r = h.convertToWebVTT_(q, d2, k2), t = new Blob([r], { type: "text/vtt" }), a2 = shaka.media.MediaSourceEngine.createObjectURL(t), d2 = "text/vtt";
              case 6:
                u = {
                  id: h.nextExternalStreamId_++,
                  originalId: null,
                  createSegmentIndex: function() {
                    return Promise.resolve();
                  },
                  segmentIndex: shaka.media.SegmentIndex.forSingleSegment(0, p, [a2]),
                  mimeType: d2 || "",
                  codecs: e2 || "",
                  kind: c2,
                  encrypted: false,
                  drmInfos: [],
                  keyIds: /* @__PURE__ */ new Set(),
                  language: b2,
                  label: f2 || null,
                  type: n.TEXT,
                  primary: false,
                  trickModeVideo: null,
                  emsgSchemeIdUris: null,
                  roles: [],
                  forced: !!g,
                  channelsCount: null,
                  audioSamplingRate: null,
                  spatialAudio: false,
                  closedCaptions: null
                };
                v = shaka.util.MimeUtils.getFullType(u.mimeType, u.codecs);
                y = shaka.text.TextEngine.isTypeSupported(v);
                if (!y)
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.MISSING_TEXT_PLUGIN, d2);
                h.manifest_.textStreams.push(u);
                h.onTracksChanged_();
                return w["return"](shaka.util.StreamUtils.textStreamToTrack(u));
            }
          });
        };
        shaka.Player.prototype.addChaptersTrack = function(a2, b2, c2) {
          var d2 = this, e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            switch (k2.nextAddress) {
              case 1:
                if (d2.loadMode_ != shaka.Player.LoadMode.MEDIA_SOURCE && d2.loadMode_ != shaka.Player.LoadMode.SRC_EQUALS)
                  throw shaka.log.error("Must call load() and wait for it to resolve before adding chapters tracks."), new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.CONTENT_NOT_LOADED);
                if (c2) {
                  k2.jumpTo(2);
                  break;
                }
                return k2.yield(d2.getTextMimetype_(a2), 3);
              case 3:
                c2 = k2.yieldResult;
              case 2:
                e2 = [];
                if (d2.adManager_)
                  try {
                    e2 = d2.adManager_.getServerSideCuePoints();
                  } catch (l) {
                  }
                return k2.yield(d2.addSrcTrackElement_(a2, b2, "chapters", c2, "", e2), 4);
              case 4:
                f2 = k2.yieldResult;
                g = d2.getChaptersTracks();
                h = g.find(function(l) {
                  return l.language == b2;
                });
                if (!h) {
                  k2.jumpTo(5);
                  break;
                }
                return k2.yield(new Promise(function(l, m) {
                  d2.loadEventManager_.listenOnce(f2, "load", l);
                  d2.loadEventManager_.listenOnce(f2, "error", function(n) {
                    m(new shaka.util.Error(
                      shaka.util.Error.Severity.RECOVERABLE,
                      shaka.util.Error.Category.TEXT,
                      shaka.util.Error.Code.CHAPTERS_TRACK_FAILED
                    ));
                  });
                }), 6);
              case 6:
                return k2["return"](h);
              case 5:
                throw shaka.log.error("Cannot add this text when loaded with src="), new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.CANNOT_ADD_EXTERNAL_TEXT_TO_SRC_EQUALS);
            }
          });
        };
        shaka.Player.prototype.getTextMimetype_ = function(a2) {
          var b2 = this, c2, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            switch (e2.nextAddress) {
              case 1:
                c2 = shaka.media.ManifestParser.getExtension(a2);
                if (d2 = shaka.Player.TEXT_EXTENSIONS_TO_MIME_TYPES_[c2])
                  return e2["return"](d2);
                e2.setCatchFinallyBlocks(2);
                goog.asserts.assert(b2.networkingEngine_, "Need networking engine.");
                return e2.yield(shaka.media.ManifestParser.getMimeType(a2, b2.networkingEngine_, b2.config_.streaming.retryParameters), 4);
              case 4:
                d2 = e2.yieldResult;
                e2.leaveTryBlock(3);
                break;
              case 2:
                e2.enterCatchBlock();
              case 3:
                if (d2)
                  return e2["return"](d2);
                shaka.log.error("The mimeType has not been provided and it could not be deduced from its extension.");
                throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.TEXT_COULD_NOT_GUESS_MIME_TYPE, c2);
            }
          });
        };
        shaka.Player.prototype.addSrcTrackElement_ = function(a2, b2, c2, d2, e2, f2) {
          var g = this, h, k2, l, m;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(n) {
            if (1 == n.nextAddress) {
              if ("text/vtt" == d2 && !f2.length)
                return n.jumpTo(2);
              goog.asserts.assert(g.networkingEngine_, "Need networking engine.");
              return n.yield(g.getTextData_(a2, g.networkingEngine_, g.config_.streaming.retryParameters), 3);
            }
            2 != n.nextAddress && (h = n.yieldResult, k2 = g.convertToWebVTT_(h, d2, f2), l = new Blob([k2], { type: "text/vtt" }), a2 = shaka.media.MediaSourceEngine.createObjectURL(l), d2 = "text/vtt");
            m = document.createElement("track");
            m.src = g.cmcdManager_.appendTextTrackData(a2);
            m.label = e2;
            m.kind = c2;
            m.srclang = b2;
            g.video_.getAttribute("crossorigin") || g.video_.setAttribute("crossorigin", "anonymous");
            g.video_.appendChild(m);
            return n["return"](m);
          });
        };
        shaka.Player.prototype.getTextData_ = function(a2, b2, c2) {
          var d2 = this, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            if (1 == h.nextAddress)
              return e2 = shaka.net.NetworkingEngine.RequestType.SEGMENT, f2 = shaka.net.NetworkingEngine.makeRequest([a2], c2), f2.method = "GET", d2.cmcdManager_.applyTextData(f2), h.yield(b2.request(e2, f2).promise, 2);
            g = h.yieldResult;
            return h["return"](g.data);
          });
        };
        shaka.Player.prototype.convertToWebVTT_ = function(a2, b2, c2) {
          var d2 = shaka.text.TextEngine.findParser(b2);
          if (d2)
            return b2 = d2(), d2 = { periodStart: 0, segmentStart: 0, segmentEnd: this.video_.duration }, a2 = shaka.util.BufferUtils.toUint8(a2), a2 = b2.parseMedia(a2, d2), shaka.text.WebVttGenerator.convert(a2, c2);
          throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.MISSING_TEXT_PLUGIN, b2);
        };
        shaka.Player.prototype.setMaxHardwareResolution = function(a2, b2) {
          this.maxHwRes_.width = a2;
          this.maxHwRes_.height = b2;
        };
        shaka.Player.prototype.retryStreaming = function() {
          return this.loadMode_ == shaka.Player.LoadMode.MEDIA_SOURCE ? this.streamingEngine_.retry() : false;
        };
        shaka.Player.prototype.getManifest = function() {
          shaka.log.alwaysWarn("Shaka Player's internal Manifest structure is NOT covered by semantic versioning compatibility guarantees.  It may change at any time!  Please consider filing a feature request for whatever you use getManifest() for.");
          return this.manifest_;
        };
        shaka.Player.prototype.getManifestParserFactory = function() {
          return this.parserFactory_;
        };
        shaka.Player.prototype.addVariantToSwitchHistory_ = function(a2, b2) {
          this.stats_.getSwitchHistory().updateCurrentVariant(a2, b2);
        };
        shaka.Player.prototype.addTextStreamToSwitchHistory_ = function(a2, b2) {
          this.stats_.getSwitchHistory().updateCurrentText(a2, b2);
        };
        shaka.Player.prototype.defaultConfig_ = function() {
          var a2 = this, b2 = shaka.util.PlayerConfiguration.createDefault();
          b2.streaming.failureCallback = function(c2) {
            a2.defaultStreamingFailureCallback_(c2);
          };
          b2.textDisplayFactory = function() {
            return a2.videoContainer_ ? new shaka.text.UITextDisplayer(a2.video_, a2.videoContainer_) : new shaka.text.SimpleTextDisplayer(a2.video_);
          };
          return b2;
        };
        shaka.Player.prototype.setVideoContainer = function(a2) {
          this.videoContainer_ = a2;
        };
        shaka.Player.prototype.defaultStreamingFailureCallback_ = function(a2) {
          var b2 = [shaka.util.Error.Code.BAD_HTTP_STATUS, shaka.util.Error.Code.HTTP_ERROR, shaka.util.Error.Code.TIMEOUT];
          this.isLive() && b2.includes(a2.code) && (a2.severity = shaka.util.Error.Severity.RECOVERABLE, shaka.log.warning("Live streaming error.  Retrying automatically..."), this.retryStreaming());
        };
        shaka.Player.prototype.makeTextStreamsForClosedCaptions_ = function(a2) {
          for (var b2 = shaka.util.ManifestParserUtils.ContentType, c2 = shaka.util.ManifestParserUtils.TextStreamKind, d2 = shaka.util.MimeUtils.CEA608_CLOSED_CAPTION_MIMETYPE, e2 = shaka.util.MimeUtils.CEA708_CLOSED_CAPTION_MIMETYPE, f2 = /* @__PURE__ */ new Set(), g = $jscomp.makeIterator(a2.textStreams), h = g.next(); !h.done; h = g.next())
            h = h.value, h.mimeType != d2 && h.mimeType != e2 || f2.add(h.originalId);
          g = $jscomp.makeIterator(a2.variants);
          for (h = g.next(); !h.done; h = g.next())
            if ((h = h.value.video) && h.closedCaptions) {
              for (var k2 = $jscomp.makeIterator(h.closedCaptions.keys()), l = k2.next(); !l.done; l = k2.next())
                if (l = l.value, !f2.has(l)) {
                  var m = l.startsWith("CC") ? d2 : e2, n = new shaka.media.MetaSegmentIndex();
                  m = {
                    id: this.nextExternalStreamId_++,
                    originalId: l,
                    createSegmentIndex: function() {
                      return Promise.resolve();
                    },
                    segmentIndex: n,
                    mimeType: m,
                    codecs: "",
                    kind: c2.CLOSED_CAPTION,
                    encrypted: false,
                    drmInfos: [],
                    keyIds: /* @__PURE__ */ new Set(),
                    language: h.closedCaptions.get(l),
                    label: null,
                    type: b2.TEXT,
                    primary: false,
                    trickModeVideo: null,
                    emsgSchemeIdUris: null,
                    roles: h.roles,
                    forced: false,
                    channelsCount: null,
                    audioSamplingRate: null,
                    spatialAudio: false,
                    closedCaptions: null
                  };
                  a2.textStreams.push(m);
                  f2.add(l);
                }
            }
        };
        shaka.Player.prototype.filterManifest_ = function(a2) {
          var b2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (1 == c2.nextAddress)
              return c2.yield(b2.filterManifestWithStreamUtils_(a2), 2);
            b2.filterManifestWithRestrictions_(a2);
            c2.jumpToEnd();
          });
        };
        shaka.Player.prototype.filterManifestWithStreamUtils_ = function(a2) {
          var b2 = this, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return goog.asserts.assert(a2, "Manifest should exist!"), goog.asserts.assert(b2.video_, "Must not be destroyed"), c2 = b2.streamingEngine_ ? b2.streamingEngine_.getCurrentVariant() : null, d2.yield(shaka.util.StreamUtils.filterManifest(b2.drmEngine_, c2, a2), 2);
            b2.checkPlayableVariants_(a2);
            d2.jumpToEnd();
          });
        };
        shaka.Player.prototype.filterManifestWithRestrictions_ = function(a2) {
          if (this.loadMode_ != shaka.Player.LoadMode.DESTROYED) {
            if (shaka.util.StreamUtils.applyRestrictions(a2.variants, this.config_.restrictions, this.maxHwRes_) && this.streamingEngine_)
              this.onTracksChanged_();
            var b2 = this.drmEngine_ ? this.drmEngine_.getDrmInfo() : null;
            if (b2 && this.drmEngine_.getMediaKeys())
              for (var c2 = $jscomp.makeIterator(a2.variants), d2 = c2.next(); !d2.done; d2 = c2.next()) {
                d2 = d2.value;
                d2 = (d2.video ? d2.video.drmInfos : []).concat(d2.audio ? d2.audio.drmInfos : []);
                d2 = $jscomp.makeIterator(d2);
                for (var e2 = d2.next(); !e2.done; e2 = d2.next())
                  if (e2 = e2.value, e2.keySystem == b2.keySystem) {
                    e2 = $jscomp.makeIterator(e2.initData || []);
                    for (var f2 = e2.next(); !f2.done; f2 = e2.next())
                      f2 = f2.value, this.drmEngine_.newInitData(f2.initDataType, f2.initData);
                  }
              }
            this.checkRestrictedVariants_(a2);
          }
        };
        shaka.Player.prototype.filterManifestByCurrentVariant_ = function() {
          goog.asserts.assert(this.manifest_, "Manifest should be valid");
          goog.asserts.assert(this.streamingEngine_, "StreamingEngine should be valid");
          var a2 = this.streamingEngine_ ? this.streamingEngine_.getCurrentVariant() : null;
          shaka.util.StreamUtils.filterManifestByCurrentVariant(a2, this.manifest_);
          this.checkPlayableVariants_(this.manifest_);
        };
        shaka.Player.prototype.adjustStartTime_ = function(a2, b2) {
          var c2, d2, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            if (1 == h.nextAddress)
              return c2 = a2.audio, d2 = a2.video, e2 = function(k2, l) {
                var m, n, p;
                return $jscomp.asyncExecutePromiseGeneratorProgram(function(q) {
                  if (1 == q.nextAddress)
                    return k2 ? q.yield(k2.createSegmentIndex(), 2) : q["return"](null);
                  n = (m = k2.segmentIndex.getIteratorForTime(l)) ? m.next().value : null;
                  if (!n)
                    return q["return"](null);
                  p = n.startTime;
                  goog.asserts.assert(p <= l, "Segment should start before target time!");
                  return q["return"](p);
                });
              }, h.yield(e2(c2, b2), 2);
            if (3 != h.nextAddress)
              return f2 = h.yieldResult, h.yield(e2(d2, b2), 3);
            g = h.yieldResult;
            return null != g && null != f2 ? h["return"](Math.max(g, f2)) : null != g ? h["return"](g) : null != f2 ? h["return"](f2) : h["return"](b2);
          });
        };
        shaka.Player.prototype.updateBufferState_ = function() {
          var a2 = this.isBuffering();
          shaka.log.v2("Player changing buffering state to", a2);
          this.stats_ && this.bufferObserver_ && this.playhead_ && (this.playRateController_.setBuffering(a2), this.cmcdManager_ && this.cmcdManager_.setBuffering(a2), this.updateStateHistory_());
          var b2 = shaka.Player.EventName.Buffering;
          a2 = (/* @__PURE__ */ new Map()).set("buffering", a2);
          this.dispatchEvent(this.makeEvent_(b2, a2));
        };
        shaka.Player.prototype.onRateChange_ = function() {
          var a2 = this.video_.playbackRate;
          0 != a2 && (this.playRateController_ && this.playRateController_.set(a2), a2 = this.makeEvent_(shaka.Player.EventName.RateChange), this.dispatchEvent(a2));
        };
        shaka.Player.prototype.updateStateHistory_ = function() {
          if (this.stats_ && this.bufferObserver_) {
            var a2 = shaka.media.BufferingObserver.State, b2 = this.stats_.getStateHistory();
            this.bufferObserver_.getState() == a2.STARVING ? b2.update("buffering") : this.video_.paused ? b2.update("paused") : this.video_.ended ? b2.update("ended") : b2.update("playing");
          }
        };
        shaka.Player.prototype.onSeek_ = function() {
          this.playheadObservers_ && this.playheadObservers_.notifyOfSeek();
          this.streamingEngine_ && this.streamingEngine_.seeked();
          this.bufferObserver_ && this.pollBufferState_();
        };
        shaka.Player.prototype.updateAbrManagerVariants_ = function() {
          try {
            goog.asserts.assert(this.manifest_, "Manifest should exist by now!"), this.checkRestrictedVariants_(this.manifest_);
          } catch (b2) {
            return this.onError_(b2), false;
          }
          var a2 = this.manifest_.variants.filter(function(b2) {
            return shaka.util.StreamUtils.isPlayable(b2);
          });
          a2 = this.currentAdaptationSetCriteria_.create(a2);
          this.abrManager_.setVariants(Array.from(a2.values()));
          return true;
        };
        shaka.Player.prototype.chooseVariant_ = function() {
          return this.updateAbrManagerVariants_() ? this.abrManager_.chooseVariant() : null;
        };
        shaka.Player.prototype.chooseTextStream_ = function() {
          return shaka.util.StreamUtils.filterStreamsByLanguageAndRole(this.manifest_.textStreams, this.currentTextLanguage_, this.currentTextRole_, this.currentTextForced_)[0] || null;
        };
        shaka.Player.prototype.chooseVariantAndSwitch_ = function() {
          goog.asserts.assert(this.config_, "Must not be destroyed");
          var a2 = this.chooseVariant_();
          a2 && this.switchVariant_(a2, true, true, 0);
        };
        shaka.Player.prototype.switchVariant_ = function(a2, b2, c2, d2) {
          var e2 = this.streamingEngine_.getCurrentVariant();
          if (a2 == e2)
            shaka.log.debug("Variant already selected."), c2 && this.streamingEngine_.switchVariant(a2, c2, d2, true);
          else if (this.addVariantToSwitchHistory_(a2, b2), this.streamingEngine_.switchVariant(a2, c2, d2), c2 = null, e2 && (c2 = shaka.util.StreamUtils.variantToTrack(e2)), a2 = shaka.util.StreamUtils.variantToTrack(a2), b2)
            this.onAdaptation_(c2, a2);
          else
            this.onVariantChanged_(c2, a2);
        };
        shaka.Player.prototype.switchHtml5Track_ = function(a2) {
          goog.asserts.assert(this.video_ && this.video_.audioTracks, "Video and video.audioTracks should not be null!");
          var b2 = Array.from(this.video_.audioTracks).find(function(c2) {
            return c2.enabled;
          });
          a2.enabled = true;
          a2.id !== b2.id && (b2.enabled = false);
          b2 = shaka.util.StreamUtils.html5AudioTrackToTrack(b2);
          a2 = shaka.util.StreamUtils.html5AudioTrackToTrack(a2);
          this.onVariantChanged_(b2, a2);
        };
        shaka.Player.prototype.setInitialTextState_ = function(a2, b2) {
          b2 ? (a2.audio && this.shouldInitiallyShowText_(a2.audio, b2) && (this.isTextVisible_ = true), this.isTextVisible_ && (this.mediaSourceEngine_.getTextDisplayer().setTextVisibility(true), goog.asserts.assert(this.shouldStreamText_(), "Should be streaming text")), this.onTextTrackVisibility_()) : this.isTextVisible_ = false;
        };
        shaka.Player.prototype.shouldInitiallyShowText_ = function(a2, b2) {
          var c2 = shaka.util.LanguageUtils, d2 = c2.normalize(this.config_.preferredTextLanguage), e2 = c2.normalize(a2.language), f2 = c2.normalize(b2.language);
          return c2.areLanguageCompatible(f2, d2) && !c2.areLanguageCompatible(e2, f2);
        };
        shaka.Player.prototype.onManifestUpdate_ = function() {
          this.parser_ && this.parser_.update && this.parser_.update();
        };
        shaka.Player.prototype.onSegmentAppended_ = function() {
          this.playhead_ && this.playhead_.notifyOfBufferingChange();
          this.pollBufferState_();
        };
        shaka.Player.prototype.switch_ = function(a2, b2, c2) {
          b2 = void 0 === b2 ? false : b2;
          c2 = void 0 === c2 ? 0 : c2;
          shaka.log.debug("switch_");
          goog.asserts.assert(this.config_.abr.enabled, "AbrManager should not call switch while disabled!");
          goog.asserts.assert(this.manifest_, "We need a manifest to switch variants.");
          this.streamingEngine_ && a2 != this.streamingEngine_.getCurrentVariant() && this.switchVariant_(a2, true, b2, c2);
        };
        shaka.Player.prototype.onAdaptation_ = function(a2, b2) {
          var c2 = (/* @__PURE__ */ new Map()).set("oldTrack", a2).set("newTrack", b2);
          c2 = this.makeEvent_(shaka.Player.EventName.Adaptation, c2);
          this.delayDispatchEvent_(c2);
        };
        shaka.Player.prototype.onTracksChanged_ = function() {
          var a2 = this.makeEvent_(shaka.Player.EventName.TracksChanged);
          this.delayDispatchEvent_(a2);
        };
        shaka.Player.prototype.onVariantChanged_ = function(a2, b2) {
          var c2 = (/* @__PURE__ */ new Map()).set("oldTrack", a2).set("newTrack", b2);
          c2 = this.makeEvent_(shaka.Player.EventName.VariantChanged, c2);
          this.delayDispatchEvent_(c2);
        };
        shaka.Player.prototype.onTextChanged_ = function() {
          var a2 = this.makeEvent_(shaka.Player.EventName.TextChanged);
          this.delayDispatchEvent_(a2);
        };
        shaka.Player.prototype.onTextTrackVisibility_ = function() {
          var a2 = this.makeEvent_(shaka.Player.EventName.TextTrackVisibility);
          this.delayDispatchEvent_(a2);
        };
        shaka.Player.prototype.onAbrStatusChanged_ = function() {
          var a2 = (/* @__PURE__ */ new Map()).set("newStatus", this.config_.abr.enabled);
          this.delayDispatchEvent_(this.makeEvent_(shaka.Player.EventName.AbrStatusChanged, a2));
        };
        shaka.Player.prototype.onError_ = function(a2) {
          goog.asserts.assert(a2 instanceof shaka.util.Error, "Wrong error type!");
          if (this.loadMode_ != shaka.Player.LoadMode.DESTROYED) {
            var b2 = this.makeEvent_(shaka.Player.EventName.Error, (/* @__PURE__ */ new Map()).set("detail", a2));
            this.dispatchEvent(b2);
            b2.defaultPrevented && (a2.handled = true);
          }
        };
        shaka.Player.prototype.onRegionEvent_ = function(a2, b2) {
          var c2 = { schemeIdUri: b2.schemeIdUri, value: b2.value, startTime: b2.startTime, endTime: b2.endTime, id: b2.id, eventElement: b2.eventElement };
          c2 = (/* @__PURE__ */ new Map()).set("detail", c2);
          this.dispatchEvent(this.makeEvent_(a2, c2));
        };
        shaka.Player.prototype.onMediaQualityChange_ = function(a2, b2) {
          var c2 = { bandwidth: a2.bandwidth, audioSamplingRate: a2.audioSamplingRate, codecs: a2.codecs, contentType: a2.contentType, frameRate: a2.frameRate, height: a2.height, mimeType: a2.mimeType, channelsCount: a2.channelsCount, pixelAspectRatio: a2.pixelAspectRatio, width: a2.width };
          c2 = (/* @__PURE__ */ new Map()).set("mediaQuality", c2).set("position", b2);
          this.dispatchEvent(this.makeEvent_(shaka.Player.EventName.MediaQualityChanged, c2));
        };
        shaka.Player.prototype.videoErrorToShakaError_ = function() {
          goog.asserts.assert(this.video_.error, "Video error expected, but missing!");
          if (!this.video_.error)
            return null;
          var a2 = this.video_.error.code;
          if (1 == a2)
            return null;
          var b2 = this.video_.error.msExtendedCode;
          b2 && (0 > b2 && (b2 += Math.pow(2, 32)), b2 = b2.toString(16));
          return new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.VIDEO_ERROR, a2, b2, this.video_.error.message);
        };
        shaka.Player.prototype.onVideoError_ = function(a2) {
          if (a2 = this.videoErrorToShakaError_())
            this.onError_(a2);
        };
        shaka.Player.prototype.onKeyStatus_ = function(a2) {
          if (this.streamingEngine_) {
            var b2 = Object.keys(a2);
            0 == b2.length && shaka.log.warning("Got a key status event without any key statuses, so we don't know the real key statuses. If we don't have all the keys, you'll need to set restrictions so we don't select those tracks.");
            var c2 = 1 == b2.length && "00" == b2[0];
            c2 && shaka.log.warning("Got a synthetic key status event, so we don't know the real key statuses. If we don't have all the keys, you'll need to set restrictions so we don't select those tracks.");
            var d2 = shaka.Player.restrictedStatuses_, e2 = false;
            if (b2.length) {
              b2 = $jscomp.makeIterator(this.manifest_.variants);
              for (var f2 = b2.next(); !f2.done; f2 = b2.next()) {
                f2 = f2.value;
                var g = shaka.util.StreamUtils.getVariantStreams(f2);
                g = $jscomp.makeIterator(g);
                for (var h = g.next(); !h.done; h = g.next()) {
                  var k2 = h.value;
                  h = f2.allowedByKeySystem;
                  if (k2.keyIds.size) {
                    f2.allowedByKeySystem = true;
                    k2 = $jscomp.makeIterator(k2.keyIds);
                    for (var l = k2.next(); !l.done; l = k2.next())
                      l = l.value, l = a2[c2 ? "00" : l], f2.allowedByKeySystem = f2.allowedByKeySystem && !!l && !d2.includes(l);
                  }
                  h != f2.allowedByKeySystem && (e2 = true);
                }
              }
            }
            if (!e2 || this.updateAbrManagerVariants_()) {
              if ((a2 = this.streamingEngine_.getCurrentVariant()) && !a2.allowedByKeySystem && (shaka.log.debug("Choosing new streams after key status changed"), this.chooseVariantAndSwitch_()), e2)
                this.onTracksChanged_();
            }
          }
        };
        shaka.Player.prototype.onExpirationUpdated_ = function(a2, b2) {
          if (this.parser_ && this.parser_.onExpirationUpdated)
            this.parser_.onExpirationUpdated(a2, b2);
          var c2 = this.makeEvent_(shaka.Player.EventName.ExpirationUpdated);
          this.dispatchEvent(c2);
        };
        shaka.Player.prototype.shouldStreamText_ = function() {
          return this.config_.streaming.alwaysStreamText || this.isTextTrackVisible();
        };
        shaka.Player.applyPlayRange_ = function(a2, b2, c2) {
          0 < b2 && (a2.isLive() ? shaka.log.warning("|playRangeStart| has been configured for live content. Ignoring the setting.") : a2.setUserSeekStart(b2));
          b2 = a2.getDuration();
          c2 < b2 && (a2.isLive() ? shaka.log.warning("|playRangeEnd| has been configured for live content. Ignoring the setting.") : a2.setDuration(c2));
        };
        shaka.Player.prototype.checkRestrictedVariants_ = function(a2) {
          var b2 = shaka.Player.restrictedStatuses_, c2 = this.drmEngine_ ? this.drmEngine_.getKeyStatuses() : {}, d2 = Object.keys(c2);
          d2 = d2.length && "00" == d2[0];
          var e2 = false, f2 = false, g = /* @__PURE__ */ new Set(), h = /* @__PURE__ */ new Set();
          a2 = $jscomp.makeIterator(a2.variants);
          for (var k2 = a2.next(); !k2.done; k2 = a2.next()) {
            k2 = k2.value;
            var l = [];
            k2.audio && l.push(k2.audio);
            k2.video && l.push(k2.video);
            l = $jscomp.makeIterator(l);
            for (var m = l.next(); !m.done; m = l.next())
              if (m = m.value, m.keyIds.size) {
                m = $jscomp.makeIterator(m.keyIds);
                for (var n = m.next(); !n.done; n = m.next()) {
                  n = n.value;
                  var p = c2[d2 ? "00" : n];
                  p ? b2.includes(p) && h.add(p) : g.add(n);
                }
              }
            k2.allowedByApplication ? k2.allowedByKeySystem && (e2 = true) : f2 = true;
          }
          if (!e2)
            throw b2 = { hasAppRestrictions: f2, missingKeys: Array.from(g), restrictedKeyStatuses: Array.from(h) }, new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.RESTRICTIONS_CANNOT_BE_MET, b2);
        };
        shaka.Player.prototype.checkPlayableVariants_ = function(a2) {
          if (!a2.variants.some(shaka.util.StreamUtils.isPlayable))
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.CONTENT_UNSUPPORTED_BY_BROWSER);
        };
        shaka.Player.prototype.delayDispatchEvent_ = function(a2) {
          var b2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (1 == c2.nextAddress)
              return c2.yield(Promise.resolve(), 2);
            b2.loadMode_ != shaka.Player.LoadMode.DESTROYED && b2.dispatchEvent(a2);
            c2.jumpToEnd();
          });
        };
        shaka.Player.getLanguagesFrom_ = function(a2) {
          var b2 = /* @__PURE__ */ new Set();
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next())
            c2 = c2.value, c2.language ? b2.add(shaka.util.LanguageUtils.normalize(c2.language)) : b2.add("und");
          return b2;
        };
        shaka.Player.getLanguageAndRolesFrom_ = function(a2) {
          var b2 = /* @__PURE__ */ new Map(), c2 = /* @__PURE__ */ new Map();
          a2 = $jscomp.makeIterator(a2);
          for (var d2 = a2.next(); !d2.done; d2 = a2.next()) {
            d2 = d2.value;
            var e2 = "und", f2 = [];
            d2.language && (e2 = shaka.util.LanguageUtils.normalize(d2.language));
            (f2 = "variant" == d2.type ? d2.audioRoles : d2.roles) && f2.length || (f2 = [""]);
            b2.has(e2) || b2.set(e2, /* @__PURE__ */ new Set());
            f2 = $jscomp.makeIterator(f2);
            for (var g = f2.next(); !g.done; g = f2.next())
              g = g.value, b2.get(e2).add(g), d2.label && (c2.has(e2) || c2.set(e2, /* @__PURE__ */ new Map()), c2.get(e2).set(g, d2.label));
          }
          var h = [];
          b2.forEach(function(k2, l) {
            for (var m = $jscomp.makeIterator(k2), n = m.next(); !n.done; n = m.next()) {
              n = n.value;
              var p = null;
              c2.has(l) && c2.get(l).has(n) && (p = c2.get(l).get(n));
              h.push({ language: l, role: n, label: p });
            }
          });
          return h;
        };
        shaka.Player.prototype.isBufferedToEndMS_ = function() {
          goog.asserts.assert(this.video_, "We need a video element to get buffering information");
          goog.asserts.assert(this.mediaSourceEngine_, "We need a media source engine to get buffering information");
          goog.asserts.assert(this.manifest_, "We need a manifest to get buffering information");
          if (this.video_.ended || this.mediaSourceEngine_.ended())
            return true;
          if (this.manifest_.presentationTimeline.isLive()) {
            var a2 = this.manifest_.presentationTimeline.getSegmentAvailabilityEnd(), b2 = shaka.media.TimeRangesUtils.bufferEnd(this.video_.buffered);
            if (null != b2 && b2 >= a2)
              return true;
          }
          return false;
        };
        shaka.Player.prototype.isBufferedToEndSrc_ = function() {
          goog.asserts.assert(this.video_, "We need a video element to get buffering information");
          if (this.video_.ended)
            return true;
          var a2 = shaka.media.TimeRangesUtils.bufferEnd(this.video_.buffered);
          return null != a2 && a2 >= this.video_.duration - 1;
        };
        shaka.Player.prototype.createAbortLoadError_ = function() {
          return new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.LOAD_INTERRUPTED);
        };
        shaka.Player.prototype.getNextStep_ = function(a2, b2, c2, d2) {
          var e2 = null;
          a2 == this.detachNode_ && (e2 = c2 == this.detachNode_ ? this.detachNode_ : this.attachNode_);
          a2 == this.attachNode_ && (e2 = this.getNextAfterAttach_(c2, b2, d2));
          a2 == this.mediaSourceNode_ && (e2 = this.getNextAfterMediaSource_(c2, b2, d2));
          a2 == this.parserNode_ && (e2 = this.getNextMatchingAllDependencies_(this.loadNode_, this.manifestNode_, this.unloadNode_, c2, b2, d2));
          a2 == this.manifestNode_ && (e2 = this.getNextMatchingAllDependencies_(
            this.loadNode_,
            this.drmNode_,
            this.unloadNode_,
            c2,
            b2,
            d2
          ));
          a2 == this.drmNode_ && (e2 = this.getNextMatchingAllDependencies_(this.loadNode_, this.loadNode_, this.unloadNode_, c2, b2, d2));
          a2 == this.srcEqualsDrmNode_ && (e2 = c2 == this.srcEqualsNode_ && b2.mediaElement == d2.mediaElement ? this.srcEqualsNode_ : this.unloadNode_);
          if (a2 == this.loadNode_ || a2 == this.srcEqualsNode_)
            e2 = this.unloadNode_;
          a2 == this.unloadNode_ && (e2 = this.getNextAfterUnload_(c2, b2, d2));
          goog.asserts.assert(e2, "Missing next step!");
          return e2;
        };
        shaka.Player.prototype.getNextAfterAttach_ = function(a2, b2, c2) {
          return a2 == this.detachNode_ || b2.mediaElement != c2.mediaElement ? this.detachNode_ : a2 == this.attachNode_ ? this.attachNode_ : a2 == this.mediaSourceNode_ || a2 == this.loadNode_ ? this.mediaSourceNode_ : a2 == this.srcEqualsNode_ ? this.srcEqualsDrmNode_ : null;
        };
        shaka.Player.prototype.getNextAfterMediaSource_ = function(a2, b2, c2) {
          return a2 == this.loadNode_ && b2.mediaElement == c2.mediaElement ? this.parserNode_ : this.unloadNode_;
        };
        shaka.Player.prototype.getNextAfterUnload_ = function(a2, b2, c2) {
          return c2.mediaElement && b2.mediaElement == c2.mediaElement ? this.attachNode_ : this.detachNode_;
        };
        shaka.Player.prototype.getNextMatchingAllDependencies_ = function(a2, b2, c2, d2, e2, f2) {
          return d2 == a2 && e2.mediaElement == f2.mediaElement && e2.uri == f2.uri && e2.mimeType == f2.mimeType ? b2 : c2;
        };
        shaka.Player.createEmptyPayload_ = function() {
          return { mediaElement: null, mimeType: null, startTime: null, startTimeOfLoad: NaN, uri: null };
        };
        shaka.Player.prototype.wrapWalkerListenersWithPromise_ = function(a2) {
          var b2 = this;
          return new Promise(function(c2, d2) {
            a2.onCancel = function() {
              return d2(b2.createAbortLoadError_());
            };
            a2.onEnd = function() {
              return c2();
            };
            a2.onError = function(e2) {
              return d2(e2);
            };
            a2.onSkip = function() {
              return d2(b2.createAbortLoadError_());
            };
          });
        };
        goog.exportSymbol("shaka.Player", shaka.Player);
        goog.exportProperty(shaka.Player.prototype, "setVideoContainer", shaka.Player.prototype.setVideoContainer);
        goog.exportProperty(shaka.Player.prototype, "getManifestParserFactory", shaka.Player.prototype.getManifestParserFactory);
        goog.exportProperty(shaka.Player.prototype, "getManifest", shaka.Player.prototype.getManifest);
        goog.exportProperty(shaka.Player.prototype, "retryStreaming", shaka.Player.prototype.retryStreaming);
        goog.exportProperty(shaka.Player.prototype, "setMaxHardwareResolution", shaka.Player.prototype.setMaxHardwareResolution);
        goog.exportProperty(shaka.Player.prototype, "addChaptersTrack", shaka.Player.prototype.addChaptersTrack);
        goog.exportProperty(shaka.Player.prototype, "addTextTrackAsync", shaka.Player.prototype.addTextTrackAsync);
        goog.exportProperty(shaka.Player.prototype, "addTextTrack", shaka.Player.prototype.addTextTrack);
        goog.exportProperty(shaka.Player.prototype, "getStats", shaka.Player.prototype.getStats);
        goog.exportProperty(shaka.Player.prototype, "getBufferedInfo", shaka.Player.prototype.getBufferedInfo);
        goog.exportProperty(shaka.Player.prototype, "getPresentationStartTimeAsDate", shaka.Player.prototype.getPresentationStartTimeAsDate);
        goog.exportProperty(shaka.Player.prototype, "getPlayheadTimeAsDate", shaka.Player.prototype.getPlayheadTimeAsDate);
        goog.exportProperty(shaka.Player.prototype, "setTextTrackVisibility", shaka.Player.prototype.setTextTrackVisibility);
        goog.exportProperty(shaka.Player.prototype, "getChapters", shaka.Player.prototype.getChapters);
        goog.exportProperty(shaka.Player.prototype, "getChaptersTracks", shaka.Player.prototype.getChaptersTracks);
        goog.exportProperty(shaka.Player.prototype, "isTextTrackVisible", shaka.Player.prototype.isTextTrackVisible);
        goog.exportProperty(shaka.Player.prototype, "selectVariantsByLabel", shaka.Player.prototype.selectVariantsByLabel);
        goog.exportProperty(shaka.Player.prototype, "selectTextLanguage", shaka.Player.prototype.selectTextLanguage);
        goog.exportProperty(shaka.Player.prototype, "selectAudioLanguage", shaka.Player.prototype.selectAudioLanguage);
        goog.exportProperty(shaka.Player.prototype, "getTextLanguages", shaka.Player.prototype.getTextLanguages);
        goog.exportProperty(shaka.Player.prototype, "getAudioLanguages", shaka.Player.prototype.getAudioLanguages);
        goog.exportProperty(shaka.Player.prototype, "getTextLanguagesAndRoles", shaka.Player.prototype.getTextLanguagesAndRoles);
        goog.exportProperty(shaka.Player.prototype, "getAudioLanguagesAndRoles", shaka.Player.prototype.getAudioLanguagesAndRoles);
        goog.exportProperty(shaka.Player.prototype, "selectVariantTrack", shaka.Player.prototype.selectVariantTrack);
        goog.exportProperty(shaka.Player.prototype, "selectTextTrack", shaka.Player.prototype.selectTextTrack);
        goog.exportProperty(shaka.Player.prototype, "getThumbnails", shaka.Player.prototype.getThumbnails);
        goog.exportProperty(shaka.Player.prototype, "getImageTracks", shaka.Player.prototype.getImageTracks);
        goog.exportProperty(shaka.Player.prototype, "getTextTracks", shaka.Player.prototype.getTextTracks);
        goog.exportProperty(shaka.Player.prototype, "getVariantTracks", shaka.Player.prototype.getVariantTracks);
        goog.exportProperty(shaka.Player.prototype, "cancelTrickPlay", shaka.Player.prototype.cancelTrickPlay);
        goog.exportProperty(shaka.Player.prototype, "trickPlay", shaka.Player.prototype.trickPlay);
        goog.exportProperty(shaka.Player.prototype, "getPlaybackRate", shaka.Player.prototype.getPlaybackRate);
        goog.exportProperty(shaka.Player.prototype, "isBuffering", shaka.Player.prototype.isBuffering);
        goog.exportProperty(shaka.Player.prototype, "getKeyStatuses", shaka.Player.prototype.getKeyStatuses);
        goog.exportProperty(shaka.Player.prototype, "getExpiration", shaka.Player.prototype.getExpiration);
        goog.exportProperty(shaka.Player.prototype, "drmInfo", shaka.Player.prototype.drmInfo);
        goog.exportProperty(shaka.Player.prototype, "keySystem", shaka.Player.prototype.keySystem);
        goog.exportProperty(shaka.Player.prototype, "goToLive", shaka.Player.prototype.goToLive);
        goog.exportProperty(shaka.Player.prototype, "seekRange", shaka.Player.prototype.seekRange);
        goog.exportProperty(shaka.Player.prototype, "isAudioOnly", shaka.Player.prototype.isAudioOnly);
        goog.exportProperty(shaka.Player.prototype, "isInProgress", shaka.Player.prototype.isInProgress);
        goog.exportProperty(shaka.Player.prototype, "isLive", shaka.Player.prototype.isLive);
        goog.exportProperty(shaka.Player.prototype, "getAdManager", shaka.Player.prototype.getAdManager);
        goog.exportProperty(shaka.Player.prototype, "getAssetUri", shaka.Player.prototype.getAssetUri);
        goog.exportProperty(shaka.Player.prototype, "getNetworkingEngine", shaka.Player.prototype.getNetworkingEngine);
        goog.exportProperty(shaka.Player.prototype, "getMediaElement", shaka.Player.prototype.getMediaElement);
        goog.exportProperty(shaka.Player.prototype, "getLoadMode", shaka.Player.prototype.getLoadMode);
        goog.exportProperty(shaka.Player.prototype, "resetConfiguration", shaka.Player.prototype.resetConfiguration);
        goog.exportProperty(shaka.Player.prototype, "getBufferFullness", shaka.Player.prototype.getBufferFullness);
        goog.exportProperty(shaka.Player.prototype, "getConfiguration", shaka.Player.prototype.getConfiguration);
        goog.exportProperty(shaka.Player.prototype, "configure", shaka.Player.prototype.configure);
        goog.exportProperty(shaka.Player.prototype, "load", shaka.Player.prototype.load);
        goog.exportProperty(shaka.Player.prototype, "updateStartTime", shaka.Player.prototype.updateStartTime);
        goog.exportProperty(shaka.Player.prototype, "unload", shaka.Player.prototype.unload);
        goog.exportProperty(shaka.Player.prototype, "detach", shaka.Player.prototype.detach);
        goog.exportProperty(shaka.Player.prototype, "attach", shaka.Player.prototype.attach);
        goog.exportProperty(shaka.Player, "probeSupport", shaka.Player.probeSupport);
        goog.exportProperty(shaka.Player, "isBrowserSupported", shaka.Player.isBrowserSupported);
        goog.exportProperty(shaka.Player, "setAdManagerFactory", shaka.Player.setAdManagerFactory);
        goog.exportProperty(shaka.Player, "registerSupportPlugin", shaka.Player.registerSupportPlugin);
        goog.exportProperty(shaka.Player.prototype, "destroy", shaka.Player.prototype.destroy);
        shaka.Player.EventName = {
          AbrStatusChanged: "abrstatuschanged",
          Adaptation: "adaptation",
          Buffering: "buffering",
          DownloadFailed: "downloadfailed",
          DownloadHeadersReceived: "downloadheadersreceived",
          DrmSessionUpdate: "drmsessionupdate",
          Emsg: "emsg",
          Error: "error",
          ExpirationUpdated: "expirationupdated",
          LargeGap: "largegap",
          Loaded: "loaded",
          Loading: "loading",
          ManifestParsed: "manifestparsed",
          MediaQualityChanged: "mediaqualitychanged",
          Metadata: "metadata",
          OnStateChange: "onstatechange",
          OnStateIdle: "onstateidle",
          RateChange: "ratechange",
          SessionDataEvent: "sessiondata",
          Streaming: "streaming",
          TextChanged: "textchanged",
          TextTrackVisibility: "texttrackvisibility",
          TimelineRegionAdded: "timelineregionadded",
          TimelineRegionEnter: "timelineregionenter",
          TimelineRegionExit: "timelineregionexit",
          TracksChanged: "trackschanged",
          Unloading: "unloading",
          VariantChanged: "variantchanged"
        };
        shaka.Player.LoadMode = { DESTROYED: 0, NOT_LOADED: 1, MEDIA_SOURCE: 2, SRC_EQUALS: 3 };
        goog.exportProperty(shaka.Player, "LoadMode", shaka.Player.LoadMode);
        shaka.Player.TYPICAL_BUFFERING_THRESHOLD_ = 0.5;
        shaka.Player.version = "v3.3.9-debug";
        goog.exportProperty(shaka.Player, "version", shaka.Player.version);
        shaka.Deprecate.init(shaka.Player.version);
        shaka.Player.restrictedStatuses_ = ["output-restricted", "internal-error"];
        shaka.Player.supportPlugins_ = {};
        shaka.Player.adManagerFactory_ = null;
        shaka.Player.SRC_EQUAL_EXTENSIONS_TO_MIME_TYPES_ = { mp4: "video/mp4", m4v: "video/mp4", m4a: "audio/mp4", webm: "video/webm", weba: "audio/webm", mkv: "video/webm", ts: "video/mp2t", ogv: "video/ogg", ogg: "audio/ogg", mpg: "video/mpeg", mpeg: "video/mpeg", m3u8: "application/x-mpegurl", mpd: "application/dash+xml", mp3: "audio/mpeg", aac: "audio/aac", flac: "audio/flac", wav: "audio/wav" };
        shaka.Player.TEXT_EXTENSIONS_TO_MIME_TYPES_ = { sbv: "text/x-subviewer", srt: "text/srt", vtt: "text/vtt", webvtt: "text/vtt", ttml: "application/ttml+xml", lrc: "application/x-subtitle-lrc", ssa: "text/x-ssa", ass: "text/x-ssa" };
        shaka.Player.TextTrackLabel = "Shaka Player TextTrack";
        shaka.ads = {};
        shaka.ads.AdsStats = function() {
          this.loadTimes_ = [];
          this.skipped_ = this.playedCompletely_ = this.started_ = 0;
        };
        shaka.ads.AdsStats.prototype.addLoadTime = function(a2) {
          this.loadTimes_.push(a2);
        };
        shaka.ads.AdsStats.prototype.incrementStarted = function() {
          this.started_++;
        };
        shaka.ads.AdsStats.prototype.incrementPlayedCompletely = function() {
          this.playedCompletely_++;
        };
        shaka.ads.AdsStats.prototype.incrementSkipped = function() {
          this.skipped_++;
        };
        shaka.ads.AdsStats.prototype.getBlob = function() {
          return { loadTimes: this.loadTimes_, started: this.started_, playedCompletely: this.playedCompletely_, skipped: this.skipped_ };
        };
        shaka.ads.ClientSideAd = function(a2, b2) {
          var c2 = this;
          this.ad_ = a2;
          this.manager_ = b2;
          this.isPaused_ = false;
          this.volume_ = this.manager_.getVolume();
          this.eventManager_ = new shaka.util.EventManager();
          this.eventManager_.listen(this.manager_, google.ima.AdEvent.Type.PAUSED, function() {
            c2.isPaused_ = true;
          });
          this.eventManager_.listen(this.manager_, google.ima.AdEvent.Type.RESUMED, function() {
            c2.isPaused_ = false;
          });
        };
        shaka.ads.ClientSideAd.prototype.getDuration = function() {
          return this.ad_.getDuration();
        };
        shaka.ads.ClientSideAd.prototype.getMinSuggestedDuration = function() {
          return this.ad_.getMinSuggestedDuration();
        };
        shaka.ads.ClientSideAd.prototype.getRemainingTime = function() {
          return this.manager_.getRemainingTime();
        };
        shaka.ads.ClientSideAd.prototype.isPaused = function() {
          return this.isPaused_;
        };
        shaka.ads.ClientSideAd.prototype.isSkippable = function() {
          return 0 <= this.ad_.getSkipTimeOffset();
        };
        shaka.ads.ClientSideAd.prototype.getTimeUntilSkippable = function() {
          var a2 = this.ad_.getSkipTimeOffset();
          a2 = this.getRemainingTime() - a2;
          return Math.max(a2, 0);
        };
        shaka.ads.ClientSideAd.prototype.canSkipNow = function() {
          return this.manager_.getAdSkippableState();
        };
        shaka.ads.ClientSideAd.prototype.skip = function() {
          return this.manager_.skip();
        };
        shaka.ads.ClientSideAd.prototype.setPaused = function(a2) {
          this.isPaused_ = a2;
        };
        shaka.ads.ClientSideAd.prototype.pause = function() {
          return this.manager_.pause();
        };
        shaka.ads.ClientSideAd.prototype.play = function() {
          return this.manager_.resume();
        };
        shaka.ads.ClientSideAd.prototype.getVolume = function() {
          return this.manager_.getVolume();
        };
        shaka.ads.ClientSideAd.prototype.setVolume = function(a2) {
          return this.manager_.setVolume(a2);
        };
        shaka.ads.ClientSideAd.prototype.isMuted = function() {
          return 0 == this.manager_.getVolume();
        };
        shaka.ads.ClientSideAd.prototype.isLinear = function() {
          return this.ad_.isLinear();
        };
        shaka.ads.ClientSideAd.prototype.resize = function(a2, b2) {
          this.manager_.resize(a2, b2, document.fullscreenElement ? google.ima.ViewMode.FULLSCREEN : google.ima.ViewMode.NORMAL);
        };
        shaka.ads.ClientSideAd.prototype.setMuted = function(a2) {
          a2 ? (this.volume_ = this.getVolume(), this.setVolume(0)) : this.setVolume(this.volume_);
        };
        shaka.ads.ClientSideAd.prototype.getSequenceLength = function() {
          var a2 = this.ad_.getAdPodInfo();
          return null == a2 ? 1 : a2.getTotalAds();
        };
        shaka.ads.ClientSideAd.prototype.getPositionInSequence = function() {
          var a2 = this.ad_.getAdPodInfo();
          return null == a2 ? 1 : a2.getAdPosition();
        };
        shaka.ads.ClientSideAd.prototype.release = function() {
          this.manager_ = this.ad_ = null;
        };
        goog.exportSymbol("shaka.ads.ClientSideAd", shaka.ads.ClientSideAd);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "release", shaka.ads.ClientSideAd.prototype.release);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "getPositionInSequence", shaka.ads.ClientSideAd.prototype.getPositionInSequence);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "getSequenceLength", shaka.ads.ClientSideAd.prototype.getSequenceLength);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "setMuted", shaka.ads.ClientSideAd.prototype.setMuted);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "resize", shaka.ads.ClientSideAd.prototype.resize);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "isLinear", shaka.ads.ClientSideAd.prototype.isLinear);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "isMuted", shaka.ads.ClientSideAd.prototype.isMuted);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "setVolume", shaka.ads.ClientSideAd.prototype.setVolume);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "getVolume", shaka.ads.ClientSideAd.prototype.getVolume);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "play", shaka.ads.ClientSideAd.prototype.play);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "pause", shaka.ads.ClientSideAd.prototype.pause);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "skip", shaka.ads.ClientSideAd.prototype.skip);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "canSkipNow", shaka.ads.ClientSideAd.prototype.canSkipNow);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "getTimeUntilSkippable", shaka.ads.ClientSideAd.prototype.getTimeUntilSkippable);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "isSkippable", shaka.ads.ClientSideAd.prototype.isSkippable);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "isPaused", shaka.ads.ClientSideAd.prototype.isPaused);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "getRemainingTime", shaka.ads.ClientSideAd.prototype.getRemainingTime);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "getMinSuggestedDuration", shaka.ads.ClientSideAd.prototype.getMinSuggestedDuration);
        goog.exportProperty(shaka.ads.ClientSideAd.prototype, "getDuration", shaka.ads.ClientSideAd.prototype.getDuration);
        shaka.ads.ClientSideAdManager = function(a2, b2, c2, d2) {
          var e2 = this;
          this.adContainer_ = a2;
          this.video_ = b2;
          this.resizeObserver_ = null;
          this.requestAdsStartTime_ = NaN;
          this.onEvent_ = d2;
          this.ad_ = null;
          this.eventManager_ = new shaka.util.EventManager();
          google.ima.settings.setLocale(c2);
          a2 = new google.ima.AdDisplayContainer(this.adContainer_, this.video_);
          a2.initialize();
          this.adsLoader_ = new google.ima.AdsLoader(a2);
          this.adsLoader_.getSettings().setPlayerType("shaka-player");
          this.adsLoader_.getSettings().setPlayerVersion(shaka.Player.version);
          this.imaAdsManager_ = null;
          this.eventManager_.listenOnce(this.adsLoader_, google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, function(f2) {
            e2.onAdsManagerLoaded_(f2);
          });
          this.eventManager_.listen(this.adsLoader_, google.ima.AdErrorEvent.Type.AD_ERROR, function(f2) {
            e2.onAdError_(f2);
          });
          this.video_.onended = function() {
            e2.adsLoader_.contentComplete();
          };
        };
        shaka.ads.ClientSideAdManager.prototype.requestAds = function(a2) {
          goog.asserts.assert(a2.adTagUrl || a2.adsResponse, "The ad tag needs to be set up before requesting ads, or adsResponse must be filled.");
          this.requestAdsStartTime_ = Date.now() / 1e3;
          this.adsLoader_.requestAds(a2);
        };
        shaka.ads.ClientSideAdManager.prototype.stop = function() {
          this.imaAdsManager_ && this.imaAdsManager_.stop();
          this.adContainer_ && shaka.util.Dom.removeAllChildren(this.adContainer_);
        };
        shaka.ads.ClientSideAdManager.prototype.release = function() {
          this.stop();
          this.resizeObserver_ && this.resizeObserver_.disconnect();
          this.eventManager_ && this.eventManager_.release();
          this.imaAdsManager_ && this.imaAdsManager_.destroy();
          this.adsLoader_.destroy();
        };
        shaka.ads.ClientSideAdManager.prototype.onAdError_ = function(a2) {
          shaka.log.warning("There was an ad error from the IMA SDK: " + a2.getError());
          shaka.log.warning("Resuming playback.");
          this.onAdComplete_(null);
          this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.CUEPOINTS_CHANGED, (/* @__PURE__ */ new Map()).set("cuepoints", [])));
        };
        shaka.ads.ClientSideAdManager.prototype.onAdsManagerLoaded_ = function(a2) {
          var b2 = this;
          goog.asserts.assert(null != this.video_, "Video should not be null!");
          var c2 = Date.now() / 1e3 - this.requestAdsStartTime_;
          this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.ADS_LOADED, (/* @__PURE__ */ new Map()).set("loadTime", c2)));
          this.imaAdsManager_ = a2.getAdsManager(this.video_);
          this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.IMA_AD_MANAGER_LOADED, (/* @__PURE__ */ new Map()).set("imaAdManager", this.imaAdsManager_)));
          c2 = this.imaAdsManager_.getCuePoints();
          if (c2.length) {
            a2 = [];
            c2 = $jscomp.makeIterator(c2);
            for (var d2 = c2.next(); !d2.done; d2 = c2.next())
              a2.push({ start: d2.value, end: null });
            this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.CUEPOINTS_CHANGED, (/* @__PURE__ */ new Map()).set("cuepoints", a2)));
          }
          this.addImaEventListeners_();
          try {
            this.imaAdsManager_.init(this.video_.offsetWidth, this.video_.offsetHeight, document.fullscreenElement ? google.ima.ViewMode.FULLSCREEN : google.ima.ViewMode.NORMAL), this.eventManager_.listen(this.video_, "loadeddata", function() {
              b2.imaAdsManager_.resize(
                b2.video_.offsetWidth,
                b2.video_.offsetHeight,
                document.fullscreenElement ? google.ima.ViewMode.FULLSCREEN : google.ima.ViewMode.NORMAL
              );
            }), "ResizeObserver" in window && (this.resizeObserver_ = new ResizeObserver(function() {
              b2.imaAdsManager_.resize(b2.video_.offsetWidth, b2.video_.offsetHeight, document.fullscreenElement ? google.ima.ViewMode.FULLSCREEN : google.ima.ViewMode.NORMAL);
            }), this.resizeObserver_.observe(this.video_)), this.imaAdsManager_.start();
          } catch (e2) {
            this.onAdComplete_(null);
          }
        };
        shaka.ads.ClientSideAdManager.prototype.addImaEventListeners_ = function() {
          var a2 = this, b2 = function(c2, d2) {
            var e2 = (/* @__PURE__ */ new Map()).set("originalEvent", c2);
            a2.onEvent_(new shaka.util.FakeEvent(d2, e2));
          };
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdErrorEvent.Type.AD_ERROR, function(c2) {
            a2.onAdError_(c2);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, function(c2) {
            a2.onAdStart_(c2);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.STARTED, function(c2) {
            a2.onAdStart_(c2);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.FIRST_QUARTILE, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_FIRST_QUARTILE);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.MIDPOINT, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_MIDPOINT);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.THIRD_QUARTILE, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_THIRD_QUARTILE);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.COMPLETE, function(c2) {
            b2(
              c2,
              shaka.ads.AdManager.AD_COMPLETE
            );
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, function(c2) {
            a2.onAdComplete_(c2);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.ALL_ADS_COMPLETED, function(c2) {
            a2.onAdComplete_(c2);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.SKIPPED, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_SKIPPED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.VOLUME_CHANGED, function(c2) {
            b2(
              c2,
              shaka.ads.AdManager.AD_VOLUME_CHANGED
            );
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.VOLUME_MUTED, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_MUTED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.PAUSED, function(c2) {
            goog.asserts.assert(null != a2.ad_, "Ad should not be null!");
            a2.ad_.setPaused(true);
            b2(c2, shaka.ads.AdManager.AD_PAUSED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.RESUMED, function(c2) {
            goog.asserts.assert(null != a2.ad_, "Ad should not be null!");
            a2.ad_.setPaused(false);
            b2(c2, shaka.ads.AdManager.AD_RESUMED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED, function(c2) {
            goog.asserts.assert(null != a2.ad_, "Ad should not be null!");
            b2(c2, shaka.ads.AdManager.AD_SKIP_STATE_CHANGED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.CLICK, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_CLICKED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.AD_PROGRESS, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_PROGRESS);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.AD_BUFFERING, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_BUFFERING);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.IMPRESSION, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_IMPRESSION);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.DURATION_CHANGE, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_DURATION_CHANGED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.USER_CLOSE, function(c2) {
            b2(
              c2,
              shaka.ads.AdManager.AD_CLOSED
            );
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.LOADED, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_LOADED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.ALL_ADS_COMPLETED, function(c2) {
            b2(c2, shaka.ads.AdManager.ALL_ADS_COMPLETED);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.LINEAR_CHANGED, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_LINEAR_CHANGED);
          });
          this.eventManager_.listen(
            this.imaAdsManager_,
            google.ima.AdEvent.Type.AD_METADATA,
            function(c2) {
              b2(c2, shaka.ads.AdManager.AD_METADATA);
            }
          );
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.LOG, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_RECOVERABLE_ERROR);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.AD_BREAK_READY, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_BREAK_READY);
          });
          this.eventManager_.listen(this.imaAdsManager_, google.ima.AdEvent.Type.INTERACTION, function(c2) {
            b2(c2, shaka.ads.AdManager.AD_INTERACTION);
          });
        };
        shaka.ads.ClientSideAdManager.prototype.onAdStart_ = function(a2) {
          goog.asserts.assert(this.imaAdsManager_, "Should have an ads manager at this point!");
          var b2 = a2.getAd();
          this.ad_ = new shaka.ads.ClientSideAd(b2, this.imaAdsManager_);
          a2 = (/* @__PURE__ */ new Map()).set("ad", this.ad_).set("sdkAdObject", b2).set("originalEvent", a2);
          this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_STARTED, a2));
          this.ad_.isLinear() && (this.adContainer_.setAttribute("ad-active", "true"), this.video_.pause());
        };
        shaka.ads.ClientSideAdManager.prototype.onAdComplete_ = function(a2) {
          this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_STOPPED, (/* @__PURE__ */ new Map()).set("originalEvent", a2)));
          this.ad_ && this.ad_.isLinear() && (this.adContainer_.removeAttribute("ad-active"), this.video_.play());
        };
        shaka.ads.ServerSideAd = function(a2, b2) {
          this.ad_ = a2;
          this.adProgressData_ = null;
          this.video_ = b2;
        };
        shaka.ads.ServerSideAd.prototype.setProgressData = function(a2) {
          this.adProgressData_ = a2;
        };
        shaka.ads.ServerSideAd.prototype.getDuration = function() {
          return this.adProgressData_ ? this.adProgressData_.duration : -1;
        };
        shaka.ads.ServerSideAd.prototype.getMinSuggestedDuration = function() {
          return this.getDuration();
        };
        shaka.ads.ServerSideAd.prototype.getRemainingTime = function() {
          return this.adProgressData_ ? this.adProgressData_.duration - this.adProgressData_.currentTime : -1;
        };
        shaka.ads.ServerSideAd.prototype.isPaused = function() {
          return this.video_.paused;
        };
        shaka.ads.ServerSideAd.prototype.isSkippable = function() {
          return this.ad_.isSkippable();
        };
        shaka.ads.ServerSideAd.prototype.getTimeUntilSkippable = function() {
          var a2 = this.ad_.getSkipTimeOffset();
          a2 = this.getRemainingTime() - a2;
          return Math.max(a2, 0);
        };
        shaka.ads.ServerSideAd.prototype.canSkipNow = function() {
          return 0 == this.getTimeUntilSkippable();
        };
        shaka.ads.ServerSideAd.prototype.skip = function() {
          this.video_.currentTime += this.getRemainingTime();
        };
        shaka.ads.ServerSideAd.prototype.pause = function() {
          return this.video_.pause();
        };
        shaka.ads.ServerSideAd.prototype.play = function() {
          return this.video_.play();
        };
        shaka.ads.ServerSideAd.prototype.getVolume = function() {
          return this.video_.volume;
        };
        shaka.ads.ServerSideAd.prototype.setVolume = function(a2) {
          this.video_.volume = a2;
        };
        shaka.ads.ServerSideAd.prototype.isMuted = function() {
          return this.video_.muted;
        };
        shaka.ads.ServerSideAd.prototype.isLinear = function() {
          return true;
        };
        shaka.ads.ServerSideAd.prototype.resize = function(a2, b2) {
        };
        shaka.ads.ServerSideAd.prototype.setMuted = function(a2) {
          this.video_.muted = a2;
        };
        shaka.ads.ServerSideAd.prototype.getSequenceLength = function() {
          var a2 = this.ad_.getAdPodInfo();
          return null == a2 ? 1 : a2.getTotalAds();
        };
        shaka.ads.ServerSideAd.prototype.getPositionInSequence = function() {
          var a2 = this.ad_.getAdPodInfo();
          return null == a2 ? 1 : a2.getAdPosition();
        };
        shaka.ads.ServerSideAd.prototype.release = function() {
          this.video_ = this.adProgressData_ = this.ad_ = null;
        };
        goog.exportSymbol("shaka.ads.ServerSideAd", shaka.ads.ServerSideAd);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "release", shaka.ads.ServerSideAd.prototype.release);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "getPositionInSequence", shaka.ads.ServerSideAd.prototype.getPositionInSequence);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "getSequenceLength", shaka.ads.ServerSideAd.prototype.getSequenceLength);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "setMuted", shaka.ads.ServerSideAd.prototype.setMuted);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "resize", shaka.ads.ServerSideAd.prototype.resize);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "isLinear", shaka.ads.ServerSideAd.prototype.isLinear);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "isMuted", shaka.ads.ServerSideAd.prototype.isMuted);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "setVolume", shaka.ads.ServerSideAd.prototype.setVolume);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "getVolume", shaka.ads.ServerSideAd.prototype.getVolume);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "play", shaka.ads.ServerSideAd.prototype.play);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "pause", shaka.ads.ServerSideAd.prototype.pause);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "skip", shaka.ads.ServerSideAd.prototype.skip);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "canSkipNow", shaka.ads.ServerSideAd.prototype.canSkipNow);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "getTimeUntilSkippable", shaka.ads.ServerSideAd.prototype.getTimeUntilSkippable);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "isSkippable", shaka.ads.ServerSideAd.prototype.isSkippable);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "isPaused", shaka.ads.ServerSideAd.prototype.isPaused);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "getRemainingTime", shaka.ads.ServerSideAd.prototype.getRemainingTime);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "getMinSuggestedDuration", shaka.ads.ServerSideAd.prototype.getMinSuggestedDuration);
        goog.exportProperty(shaka.ads.ServerSideAd.prototype, "getDuration", shaka.ads.ServerSideAd.prototype.getDuration);
        shaka.ads.ServerSideAdManager = function(a2, b2, c2, d2) {
          var e2 = this;
          this.adContainer_ = a2;
          this.video_ = b2;
          this.streamPromise_ = null;
          this.streamRequestStartTime_ = NaN;
          this.onEvent_ = d2;
          this.isLiveContent_ = false;
          this.adProgressData_ = this.ad_ = this.snapForwardTime_ = null;
          this.backupUrl_ = "";
          this.currentCuePoints_ = [];
          this.eventManager_ = new shaka.util.EventManager();
          a2 = new google.ima.dai.api.UiSettings();
          a2.setLocale(c2);
          this.streamManager_ = new google.ima.dai.api.StreamManager(this.video_, this.adContainer_, a2);
          this.onEvent_(new shaka.util.FakeEvent(
            shaka.ads.AdManager.IMA_STREAM_MANAGER_LOADED,
            (/* @__PURE__ */ new Map()).set("imaStreamManager", this.streamManager_)
          ));
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.LOADED, function(f2) {
            shaka.log.info("Ad SS Loaded");
            e2.onLoaded_(f2);
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.ERROR, function() {
            shaka.log.info("Ad SS Error");
            e2.onError_();
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED, function() {
            shaka.log.info("Ad Break Started");
          });
          this.eventManager_.listen(
            this.streamManager_,
            google.ima.dai.api.StreamEvent.Type.STARTED,
            function(f2) {
              shaka.log.info("Ad Started");
              e2.onAdStart_(f2);
            }
          );
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED, function() {
            shaka.log.info("Ad Break Ended");
            e2.onAdBreakEnded_();
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.AD_PROGRESS, function(f2) {
            e2.onAdProgress_(f2);
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.FIRST_QUARTILE, function() {
            shaka.log.info("Ad event: First Quartile");
            e2.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_FIRST_QUARTILE));
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.MIDPOINT, function() {
            shaka.log.info("Ad event: Midpoint");
            e2.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_MIDPOINT));
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.THIRD_QUARTILE, function() {
            shaka.log.info("Ad event: Third Quartile");
            e2.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_THIRD_QUARTILE));
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.COMPLETE, function() {
            shaka.log.info("Ad event: Complete");
            e2.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_COMPLETE));
            e2.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_STOPPED));
            e2.adContainer_.removeAttribute("ad-active");
            e2.ad_ = null;
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.SKIPPED, function() {
            shaka.log.info("Ad event: Skipped");
            e2.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_SKIPPED));
            e2.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_STOPPED));
          });
          this.eventManager_.listen(this.streamManager_, google.ima.dai.api.StreamEvent.Type.CUEPOINTS_CHANGED, function(f2) {
            shaka.log.info("Ad event: Cue points changed");
            e2.onCuePointsChanged_(f2);
          });
        };
        shaka.ads.ServerSideAdManager.prototype.streamRequest = function(a2, b2) {
          if (this.streamPromise_)
            return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.ADS, shaka.util.Error.Code.CURRENT_DAI_REQUEST_NOT_FINISHED));
          a2 instanceof google.ima.dai.api.LiveStreamRequest && (this.isLiveContent_ = true);
          this.streamPromise_ = new shaka.util.PublicPromise();
          this.streamManager_.requestStream(a2);
          this.backupUrl_ = b2 || "";
          this.streamRequestStartTime_ = Date.now() / 1e3;
          return this.streamPromise_;
        };
        shaka.ads.ServerSideAdManager.prototype.replaceAdTagParameters = function(a2) {
          this.streamManager_.replaceAdTagParameters(a2);
        };
        shaka.ads.ServerSideAdManager.prototype.stop = function() {
          this.backupUrl_ = "";
          this.snapForwardTime_ = null;
          this.currentCuePoints_ = [];
        };
        shaka.ads.ServerSideAdManager.prototype.release = function() {
          this.stop();
          this.eventManager_ && this.eventManager_.release();
        };
        shaka.ads.ServerSideAdManager.prototype.onTimedMetadata = function(a2, b2, c2) {
          this.streamManager_.processMetadata(a2, b2, c2);
        };
        shaka.ads.ServerSideAdManager.prototype.onCueMetadataChange = function(a2) {
          if (a2.key && a2.data) {
            var b2 = {};
            b2[a2.key] = a2.data;
            this.streamManager_.onTimedMetadata(b2);
          }
        };
        shaka.ads.ServerSideAdManager.prototype.getCuePoints = function() {
          return this.currentCuePoints_;
        };
        shaka.ads.ServerSideAdManager.prototype.checkForSnapback_ = function() {
          var a2 = this.video_.currentTime;
          if (0 != a2) {
            this.streamManager_.streamTimeForContentTime(a2);
            var b2 = this.streamManager_.previousCuePointForStreamTime(a2);
            b2 && !b2.played && (shaka.log.info("Seeking back to the start of the ad break at " + b2.start + " and will return to " + a2), this.snapForwardTime_ = a2, this.video_.currentTime = b2.start);
          }
        };
        shaka.ads.ServerSideAdManager.prototype.onAdStart_ = function(a2) {
          goog.asserts.assert(this.streamManager_, "Should have a stream manager at this point!");
          a2 = a2.getAd();
          this.ad_ = new shaka.ads.ServerSideAd(a2, this.video_);
          this.adProgressData_ && this.ad_.setProgressData(this.adProgressData_);
          this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_STARTED, (/* @__PURE__ */ new Map()).set("ad", this.ad_)));
          this.adContainer_.setAttribute("ad-active", "true");
        };
        shaka.ads.ServerSideAdManager.prototype.onAdBreakEnded_ = function() {
          this.adContainer_.removeAttribute("ad-active");
          var a2 = this.video_.currentTime;
          this.snapForwardTime_ && this.snapForwardTime_ > a2 && (this.video_.currentTime = this.snapForwardTime_, this.snapForwardTime_ = null);
        };
        shaka.ads.ServerSideAdManager.prototype.onLoaded_ = function(a2) {
          var b2 = this, c2 = Date.now() / 1e3 - this.streamRequestStartTime_;
          this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.ADS_LOADED, (/* @__PURE__ */ new Map()).set("loadTime", c2)));
          a2 = a2.getStreamData().url;
          this.streamPromise_.resolve(a2);
          this.streamPromise_ = null;
          this.isLiveContent_ || this.eventManager_.listen(this.video_, "seeked", function() {
            b2.checkForSnapback_();
          });
        };
        shaka.ads.ServerSideAdManager.prototype.onError_ = function() {
          this.backupUrl_.length ? (shaka.log.warning("IMA stream request returned an error. Falling back to the backup asset uri."), this.streamPromise_.resolve(this.backupUrl_)) : this.streamPromise_.reject("IMA Stream request returned an error and there was no backup asset uri provided.");
          this.streamPromise_ = null;
        };
        shaka.ads.ServerSideAdManager.prototype.onAdProgress_ = function(a2) {
          this.adProgressData_ = a2.getStreamData().adProgressData;
          this.ad_ && this.ad_.setProgressData(this.adProgressData_);
        };
        shaka.ads.ServerSideAdManager.prototype.onCuePointsChanged_ = function(a2) {
          var b2 = a2.getStreamData();
          a2 = [];
          b2 = $jscomp.makeIterator(b2.cuepoints);
          for (var c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, a2.push({ start: c2.start, end: c2.end });
          this.currentCuePoints_ = a2;
          this.onEvent_(new shaka.util.FakeEvent(shaka.ads.AdManager.CUEPOINTS_CHANGED, (/* @__PURE__ */ new Map()).set("cuepoints", a2)));
        };
        shaka.ads.AdManager = function() {
          shaka.util.FakeEventTarget.call(this);
          this.ssAdManager_ = this.csAdManager_ = null;
          this.stats_ = new shaka.ads.AdsStats();
          this.locale_ = navigator.language;
        };
        $jscomp.inherits(shaka.ads.AdManager, shaka.util.FakeEventTarget);
        shaka.ads.AdManager.prototype.setLocale = function(a2) {
          this.locale_ = a2;
        };
        shaka.ads.AdManager.prototype.initClientSide = function(a2, b2) {
          var c2 = this;
          if (!window.google || !google.ima || !google.ima.AdsLoader)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.ADS, shaka.util.Error.Code.CS_IMA_SDK_MISSING);
          this.csAdManager_ && this.csAdManager_.release();
          this.csAdManager_ = new shaka.ads.ClientSideAdManager(a2, b2, this.locale_, function(d2) {
            if (d2 && d2.type)
              switch (d2.type) {
                case shaka.ads.AdManager.ADS_LOADED:
                  c2.stats_.addLoadTime(d2.loadTime);
                  break;
                case shaka.ads.AdManager.AD_STARTED:
                  c2.stats_.incrementStarted();
                  break;
                case shaka.ads.AdManager.AD_COMPLETE:
                  c2.stats_.incrementPlayedCompletely();
                  break;
                case shaka.ads.AdManager.AD_SKIPPED:
                  c2.stats_.incrementSkipped();
              }
            c2.dispatchEvent(d2);
          });
        };
        shaka.ads.AdManager.prototype.release = function() {
          this.csAdManager_ && (this.csAdManager_.release(), this.csAdManager_ = null);
          this.ssAdManager_ && (this.ssAdManager_.release(), this.ssAdManager_ = null);
          shaka.util.FakeEventTarget.prototype.release.call(this);
        };
        shaka.ads.AdManager.prototype.onAssetUnload = function() {
          this.csAdManager_ && this.csAdManager_.stop();
          this.ssAdManager_ && this.ssAdManager_.stop();
          this.dispatchEvent(new shaka.util.FakeEvent(shaka.ads.AdManager.AD_STOPPED));
          this.stats_ = new shaka.ads.AdsStats();
        };
        shaka.ads.AdManager.prototype.requestClientSideAds = function(a2) {
          if (!this.csAdManager_)
            throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.ADS, shaka.util.Error.Code.CS_AD_MANAGER_NOT_INITIALIZED);
          this.csAdManager_.requestAds(a2);
        };
        shaka.ads.AdManager.prototype.initServerSide = function(a2, b2) {
          var c2 = this;
          if (!window.google || !google.ima || !google.ima.dai)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.ADS, shaka.util.Error.Code.SS_IMA_SDK_MISSING);
          this.ssAdManager_ && this.ssAdManager_.release();
          this.ssAdManager_ = new shaka.ads.ServerSideAdManager(a2, b2, this.locale_, function(d2) {
            if (d2 && d2.type)
              switch (d2.type) {
                case shaka.ads.AdManager.ADS_LOADED:
                  c2.stats_.addLoadTime(d2.loadTime);
                  break;
                case shaka.ads.AdManager.AD_STARTED:
                  c2.stats_.incrementStarted();
                  break;
                case shaka.ads.AdManager.AD_COMPLETE:
                  c2.stats_.incrementPlayedCompletely();
                  break;
                case shaka.ads.AdManager.AD_SKIPPED:
                  c2.stats_.incrementSkipped();
              }
            c2.dispatchEvent(d2);
          });
        };
        shaka.ads.AdManager.prototype.requestServerSideStream = function(a2, b2) {
          b2 = void 0 === b2 ? "" : b2;
          if (!this.ssAdManager_)
            throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.ADS, shaka.util.Error.Code.SS_AD_MANAGER_NOT_INITIALIZED);
          a2.adTagParameters || (a2.adTagParameters = {});
          var c2 = a2.adTagParameters;
          (c2.mpt || c2.mpv) && shaka.log.alwaysWarn('You have attempted to set "mpt" and/or "mpv" parameters of the ad tag. Please note that those parameters are used for Shaka adoption tracking and will be overriden.');
          a2.adTagParameters.mpt = "shaka-player";
          a2.adTagParameters.mpv = shaka.Player.version;
          return this.ssAdManager_.streamRequest(a2, b2);
        };
        shaka.ads.AdManager.prototype.replaceServerSideAdTagParameters = function(a2) {
          if (!this.ssAdManager_)
            throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.ADS, shaka.util.Error.Code.SS_AD_MANAGER_NOT_INITIALIZED);
          (a2.mpt || a2.mpv) && shaka.log.alwaysWarn('You have attempted to set "mpt" and/or "mpv" parameters of the ad tag. Please note that those parameters are used for Shaka adoption tracking and will be overriden.');
          a2.mpt = "Shaka Player";
          a2.mpv = shaka.Player.version;
          this.ssAdManager_.replaceAdTagParameters(a2);
        };
        shaka.ads.AdManager.prototype.getServerSideCuePoints = function() {
          if (!this.ssAdManager_)
            throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.ADS, shaka.util.Error.Code.SS_AD_MANAGER_NOT_INITIALIZED);
          return this.ssAdManager_.getCuePoints();
        };
        shaka.ads.AdManager.prototype.getStats = function() {
          return this.stats_.getBlob();
        };
        shaka.ads.AdManager.prototype.onDashTimedMetadata = function(a2) {
          if (this.ssAdManager_ && "urn:google:dai:2018" == a2.schemeIdUri) {
            var b2 = a2.schemeIdUri, c2 = a2.eventElement ? a2.eventElement.getAttribute("messageData") : null;
            this.ssAdManager_.onTimedMetadata(b2, c2, a2.startTime);
          }
        };
        shaka.ads.AdManager.prototype.onHlsTimedMetadata = function(a2, b2) {
          if (this.ssAdManager_)
            this.ssAdManager_.onTimedMetadata("ID3", a2.data, b2);
          else
            shaka.log.warning("ID3 metadata processing was called without initializing server side ad logic. Ad-related metadata will not take effect");
        };
        shaka.ads.AdManager.prototype.onCueMetadataChange = function(a2) {
          if (this.ssAdManager_)
            this.ssAdManager_.onCueMetadataChange(a2);
          else
            shaka.log.warning("ID3 metadata processing was called without initializing server side ad logic. Ad-related metadata will not take effect");
        };
        goog.exportSymbol("shaka.ads.AdManager", shaka.ads.AdManager);
        goog.exportProperty(shaka.ads.AdManager.prototype, "onCueMetadataChange", shaka.ads.AdManager.prototype.onCueMetadataChange);
        goog.exportProperty(shaka.ads.AdManager.prototype, "onHlsTimedMetadata", shaka.ads.AdManager.prototype.onHlsTimedMetadata);
        goog.exportProperty(shaka.ads.AdManager.prototype, "onDashTimedMetadata", shaka.ads.AdManager.prototype.onDashTimedMetadata);
        goog.exportProperty(shaka.ads.AdManager.prototype, "getStats", shaka.ads.AdManager.prototype.getStats);
        goog.exportProperty(shaka.ads.AdManager.prototype, "getServerSideCuePoints", shaka.ads.AdManager.prototype.getServerSideCuePoints);
        goog.exportProperty(shaka.ads.AdManager.prototype, "replaceServerSideAdTagParameters", shaka.ads.AdManager.prototype.replaceServerSideAdTagParameters);
        goog.exportProperty(shaka.ads.AdManager.prototype, "requestServerSideStream", shaka.ads.AdManager.prototype.requestServerSideStream);
        goog.exportProperty(shaka.ads.AdManager.prototype, "initServerSide", shaka.ads.AdManager.prototype.initServerSide);
        goog.exportProperty(shaka.ads.AdManager.prototype, "requestClientSideAds", shaka.ads.AdManager.prototype.requestClientSideAds);
        goog.exportProperty(shaka.ads.AdManager.prototype, "onAssetUnload", shaka.ads.AdManager.prototype.onAssetUnload);
        goog.exportProperty(shaka.ads.AdManager.prototype, "release", shaka.ads.AdManager.prototype.release);
        goog.exportProperty(shaka.ads.AdManager.prototype, "initClientSide", shaka.ads.AdManager.prototype.initClientSide);
        goog.exportProperty(shaka.ads.AdManager.prototype, "setLocale", shaka.ads.AdManager.prototype.setLocale);
        shaka.ads.AdManager.ADS_LOADED = "ads-loaded";
        goog.exportProperty(shaka.ads.AdManager, "ADS_LOADED", shaka.ads.AdManager.ADS_LOADED);
        shaka.ads.AdManager.AD_STARTED = "ad-started";
        goog.exportProperty(shaka.ads.AdManager, "AD_STARTED", shaka.ads.AdManager.AD_STARTED);
        shaka.ads.AdManager.AD_FIRST_QUARTILE = "ad-first-quartile";
        goog.exportProperty(shaka.ads.AdManager, "AD_FIRST_QUARTILE", shaka.ads.AdManager.AD_FIRST_QUARTILE);
        shaka.ads.AdManager.AD_MIDPOINT = "ad-midpoint";
        goog.exportProperty(shaka.ads.AdManager, "AD_MIDPOINT", shaka.ads.AdManager.AD_MIDPOINT);
        shaka.ads.AdManager.AD_THIRD_QUARTILE = "ad-third-quartile";
        goog.exportProperty(shaka.ads.AdManager, "AD_THIRD_QUARTILE", shaka.ads.AdManager.AD_THIRD_QUARTILE);
        shaka.ads.AdManager.AD_COMPLETE = "ad-complete";
        goog.exportProperty(shaka.ads.AdManager, "AD_COMPLETE", shaka.ads.AdManager.AD_COMPLETE);
        shaka.ads.AdManager.AD_STOPPED = "ad-stopped";
        goog.exportProperty(shaka.ads.AdManager, "AD_STOPPED", shaka.ads.AdManager.AD_STOPPED);
        shaka.ads.AdManager.AD_SKIPPED = "ad-skipped";
        goog.exportProperty(shaka.ads.AdManager, "AD_SKIPPED", shaka.ads.AdManager.AD_SKIPPED);
        shaka.ads.AdManager.AD_VOLUME_CHANGED = "ad-volume-changed";
        goog.exportProperty(shaka.ads.AdManager, "AD_VOLUME_CHANGED", shaka.ads.AdManager.AD_VOLUME_CHANGED);
        shaka.ads.AdManager.AD_MUTED = "ad-muted";
        goog.exportProperty(shaka.ads.AdManager, "AD_MUTED", shaka.ads.AdManager.AD_MUTED);
        shaka.ads.AdManager.AD_PAUSED = "ad-paused";
        goog.exportProperty(shaka.ads.AdManager, "AD_PAUSED", shaka.ads.AdManager.AD_PAUSED);
        shaka.ads.AdManager.AD_RESUMED = "ad-resumed";
        goog.exportProperty(shaka.ads.AdManager, "AD_RESUMED", shaka.ads.AdManager.AD_RESUMED);
        shaka.ads.AdManager.AD_SKIP_STATE_CHANGED = "ad-skip-state-changed";
        goog.exportProperty(shaka.ads.AdManager, "AD_SKIP_STATE_CHANGED", shaka.ads.AdManager.AD_SKIP_STATE_CHANGED);
        shaka.ads.AdManager.CUEPOINTS_CHANGED = "ad-cue-points-changed";
        goog.exportProperty(shaka.ads.AdManager, "CUEPOINTS_CHANGED", shaka.ads.AdManager.CUEPOINTS_CHANGED);
        shaka.ads.AdManager.IMA_AD_MANAGER_LOADED = "ima-ad-manager-loaded";
        goog.exportProperty(shaka.ads.AdManager, "IMA_AD_MANAGER_LOADED", shaka.ads.AdManager.IMA_AD_MANAGER_LOADED);
        shaka.ads.AdManager.IMA_STREAM_MANAGER_LOADED = "ima-stream-manager-loaded";
        goog.exportProperty(shaka.ads.AdManager, "IMA_STREAM_MANAGER_LOADED", shaka.ads.AdManager.IMA_STREAM_MANAGER_LOADED);
        shaka.ads.AdManager.AD_CLICKED = "ad-clicked";
        goog.exportProperty(shaka.ads.AdManager, "AD_CLICKED", shaka.ads.AdManager.AD_CLICKED);
        shaka.ads.AdManager.AD_PROGRESS = "ad-progress";
        goog.exportProperty(shaka.ads.AdManager, "AD_PROGRESS", shaka.ads.AdManager.AD_PROGRESS);
        shaka.ads.AdManager.AD_BUFFERING = "ad-buffering";
        goog.exportProperty(shaka.ads.AdManager, "AD_BUFFERING", shaka.ads.AdManager.AD_BUFFERING);
        shaka.ads.AdManager.AD_IMPRESSION = "ad-impression";
        goog.exportProperty(shaka.ads.AdManager, "AD_IMPRESSION", shaka.ads.AdManager.AD_IMPRESSION);
        shaka.ads.AdManager.AD_DURATION_CHANGED = "ad-duration-changed";
        goog.exportProperty(shaka.ads.AdManager, "AD_DURATION_CHANGED", shaka.ads.AdManager.AD_DURATION_CHANGED);
        shaka.ads.AdManager.AD_CLOSED = "ad-closed";
        goog.exportProperty(shaka.ads.AdManager, "AD_CLOSED", shaka.ads.AdManager.AD_CLOSED);
        shaka.ads.AdManager.AD_LOADED = "ad-loaded";
        goog.exportProperty(shaka.ads.AdManager, "AD_LOADED", shaka.ads.AdManager.AD_LOADED);
        shaka.ads.AdManager.ALL_ADS_COMPLETED = "all-ads-completed";
        goog.exportProperty(shaka.ads.AdManager, "ALL_ADS_COMPLETED", shaka.ads.AdManager.ALL_ADS_COMPLETED);
        shaka.ads.AdManager.AD_LINEAR_CHANGED = "ad-linear-changed";
        goog.exportProperty(shaka.ads.AdManager, "AD_LINEAR_CHANGED", shaka.ads.AdManager.AD_LINEAR_CHANGED);
        shaka.ads.AdManager.AD_METADATA = "ad-metadata";
        goog.exportProperty(shaka.ads.AdManager, "AD_METADATA", shaka.ads.AdManager.AD_METADATA);
        shaka.ads.AdManager.AD_RECOVERABLE_ERROR = "ad-recoverable-error";
        goog.exportProperty(shaka.ads.AdManager, "AD_RECOVERABLE_ERROR", shaka.ads.AdManager.AD_RECOVERABLE_ERROR);
        shaka.ads.AdManager.AD_BREAK_READY = "ad-break-ready";
        goog.exportProperty(shaka.ads.AdManager, "AD_BREAK_READY", shaka.ads.AdManager.AD_BREAK_READY);
        shaka.ads.AdManager.AD_INTERACTION = "ad-interaction";
        goog.exportProperty(shaka.ads.AdManager, "AD_INTERACTION", shaka.ads.AdManager.AD_INTERACTION);
        shaka.Player.setAdManagerFactory(function() {
          return new shaka.ads.AdManager();
        });
        shaka.cast = {};
        shaka.cast.CastUtils = function() {
        };
        shaka.cast.CastUtils.serialize = function(a2) {
          return JSON.stringify(a2, function(b2, c2) {
            if ("function" != typeof c2) {
              if (c2 instanceof Event || c2 instanceof shaka.util.FakeEvent) {
                var d2 = {}, e2;
                for (e2 in c2) {
                  var f2 = c2[e2];
                  f2 && "object" == typeof f2 ? "detail" == e2 && (d2[e2] = f2) : e2 in Event || (d2[e2] = f2);
                }
                return d2;
              }
              return c2 instanceof Error ? shaka.cast.CastUtils.unpackError_(c2) : c2 instanceof TimeRanges ? shaka.cast.CastUtils.unpackTimeRanges_(c2) : c2 instanceof Uint8Array ? shaka.cast.CastUtils.unpackUint8Array_(c2) : "number" == typeof c2 ? isNaN(c2) ? "NaN" : isFinite(c2) ? c2 : 0 > c2 ? "-Infinity" : "Infinity" : c2;
            }
          });
        };
        shaka.cast.CastUtils.deserialize = function(a2) {
          return JSON.parse(a2, function(b2, c2) {
            return "NaN" == c2 ? NaN : "-Infinity" == c2 ? -Infinity : "Infinity" == c2 ? Infinity : c2 && "object" == typeof c2 && "TimeRanges" == c2.__type__ ? shaka.cast.CastUtils.simulateTimeRanges_(c2) : c2 && "object" == typeof c2 && "Uint8Array" == c2.__type__ ? shaka.cast.CastUtils.makeUint8Array_(c2) : c2 && "object" == typeof c2 && "Error" == c2.__type__ ? shaka.cast.CastUtils.makeError_(c2) : c2;
          });
        };
        shaka.cast.CastUtils.unpackTimeRanges_ = function(a2) {
          var b2 = { __type__: "TimeRanges", length: a2.length, start: [], end: [] };
          a2 = $jscomp.makeIterator(shaka.media.TimeRangesUtils.getBufferedInfo(a2));
          for (var c2 = a2.next(); !c2.done; c2 = a2.next()) {
            c2 = c2.value;
            var d2 = c2.end;
            b2.start.push(c2.start);
            b2.end.push(d2);
          }
          return b2;
        };
        shaka.cast.CastUtils.simulateTimeRanges_ = function(a2) {
          return { length: a2.length, start: function(b2) {
            return a2.start[b2];
          }, end: function(b2) {
            return a2.end[b2];
          } };
        };
        shaka.cast.CastUtils.unpackUint8Array_ = function(a2) {
          return { __type__: "Uint8Array", entries: Array.from(a2) };
        };
        shaka.cast.CastUtils.makeUint8Array_ = function(a2) {
          return new Uint8Array(a2.entries);
        };
        shaka.cast.CastUtils.unpackError_ = function(a2) {
          var b2 = /* @__PURE__ */ new Set(["name", "message", "stack"]), c2;
          for (c2 in a2)
            b2.add(c2);
          var d2 = $jscomp.makeIterator(Object.getOwnPropertyNames(a2));
          for (c2 = d2.next(); !c2.done; c2 = d2.next())
            b2.add(c2.value);
          d2 = {};
          b2 = $jscomp.makeIterator(b2);
          for (c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, d2[c2] = a2[c2];
          return { __type__: "Error", contents: d2 };
        };
        shaka.cast.CastUtils.makeError_ = function(a2) {
          a2 = a2.contents;
          var b2 = Error(a2.message), c2;
          for (c2 in a2)
            b2[c2] = a2[c2];
          return b2;
        };
        shaka.cast.CastUtils.VideoEvents = "ended play playing pause pausing ratechange seeked seeking timeupdate volumechange".split(" ");
        shaka.cast.CastUtils.VideoAttributes = "buffered currentTime duration ended loop muted paused playbackRate seeking videoHeight videoWidth volume".split(" ");
        shaka.cast.CastUtils.VideoInitStateAttributes = ["loop", "playbackRate"];
        shaka.cast.CastUtils.VideoVoidMethods = ["pause", "play"];
        shaka.cast.CastUtils.PlayerGetterMethods = { getAssetUri: 2, getAudioLanguages: 4, getAudioLanguagesAndRoles: 4, getBufferFullness: 1, getBufferedInfo: 2, getConfiguration: 4, getExpiration: 2, getKeyStatuses: 2, getPlaybackRate: 2, getTextLanguages: 4, getTextLanguagesAndRoles: 4, getTextTracks: 2, getStats: 5, getVariantTracks: 2, getImageTracks: 2, getThumbnails: 2, isAudioOnly: 10, isBuffering: 1, isInProgress: 1, isLive: 10, isTextTrackVisible: 1, keySystem: 10, seekRange: 1, getLoadMode: 10 };
        shaka.cast.CastUtils.PlayerGetterMethodsThatRequireLive = { getPlayheadTimeAsDate: 1, getPresentationStartTimeAsDate: 20 };
        shaka.cast.CastUtils.PlayerInitState = [["getConfiguration", "configure"]];
        shaka.cast.CastUtils.PlayerInitAfterLoadState = [["isTextTrackVisible", "setTextTrackVisibility"]];
        shaka.cast.CastUtils.PlayerVoidMethods = "addChaptersTrack addTextTrack addTextTrackAsync cancelTrickPlay configure getChapters getChaptersTracks resetConfiguration retryStreaming selectAudioLanguage selectTextLanguage selectTextTrack selectVariantTrack selectVariantsByLabel setTextTrackVisibility trickPlay updateStartTime goToLive".split(" ");
        shaka.cast.CastUtils.PlayerPromiseMethods = ["attach", "detach", "load", "unload"];
        shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE = "urn:x-cast:com.google.shaka.v2";
        shaka.cast.CastUtils.GENERIC_MESSAGE_NAMESPACE = "urn:x-cast:com.google.cast.media";
        shaka.cast.CastSender = function(a2, b2, c2, d2, e2, f2) {
          var g = this;
          this.receiverAppId_ = a2;
          this.statusChangeTimer_ = new shaka.util.Timer(b2);
          this.onFirstCastStateUpdate_ = c2;
          this.hasJoinedExistingSession_ = false;
          this.onRemoteEvent_ = d2;
          this.onResumeLocal_ = e2;
          this.onInitStateRequired_ = f2;
          this.isCasting_ = this.apiReady_ = false;
          this.receiverName_ = "";
          this.appData_ = null;
          this.onConnectionStatusChangedBound_ = function() {
            return g.onConnectionStatusChanged_();
          };
          this.onMessageReceivedBound_ = function(h, k2) {
            return g.onMessageReceived_(h, k2);
          };
          this.cachedProperties_ = { video: {}, player: {} };
          this.nextAsyncCallId_ = 0;
          this.asyncCallPromises_ = {};
          this.castPromise_ = null;
          shaka.cast.CastSender.instances_.add(this);
        };
        shaka.cast.CastSender.prototype.destroy = function() {
          shaka.cast.CastSender.instances_["delete"](this);
          this.rejectAllPromises_();
          shaka.cast.CastSender.session_ && this.removeListeners_();
          this.statusChangeTimer_ && (this.statusChangeTimer_.stop(), this.statusChangeTimer_ = null);
          this.onResumeLocal_ = this.onRemoteEvent_ = null;
          this.isCasting_ = this.apiReady_ = false;
          this.onMessageReceivedBound_ = this.onConnectionStatusChangedBound_ = this.castPromise_ = this.asyncCallPromises_ = this.cachedProperties_ = this.appData_ = null;
          return Promise.resolve();
        };
        shaka.cast.CastSender.prototype.apiReady = function() {
          return this.apiReady_;
        };
        shaka.cast.CastSender.prototype.hasReceivers = function() {
          return shaka.cast.CastSender.hasReceivers_;
        };
        shaka.cast.CastSender.prototype.isCasting = function() {
          return this.isCasting_;
        };
        shaka.cast.CastSender.prototype.receiverName = function() {
          return this.receiverName_;
        };
        shaka.cast.CastSender.prototype.hasRemoteProperties = function() {
          return 0 != Object.keys(this.cachedProperties_.video).length;
        };
        shaka.cast.CastSender.prototype.init = function() {
          var a2 = shaka.cast.CastSender;
          if (this.receiverAppId_.length)
            if (window.chrome && chrome.cast && chrome.cast.isAvailable) {
              this.apiReady_ = true;
              this.statusChangeTimer_.tickNow();
              var b2 = new chrome.cast.SessionRequest(this.receiverAppId_);
              b2 = new chrome.cast.ApiConfig(b2, function(c2) {
                return a2.onExistingSessionJoined_(c2);
              }, function(c2) {
                return a2.onReceiverStatusChanged_(c2);
              }, "origin_scoped");
              chrome.cast.initialize(b2, function() {
                shaka.log.debug("CastSender: init");
              }, function(c2) {
                shaka.log.error(
                  "CastSender: init error",
                  c2
                );
              });
              shaka.cast.CastSender.hasReceivers_ && this.statusChangeTimer_.tickAfter(shaka.cast.CastSender.STATUS_DELAY);
              (b2 = shaka.cast.CastSender.session_) && b2.status != chrome.cast.SessionStatus.STOPPED ? (shaka.log.debug("CastSender: re-using existing connection"), this.onExistingSessionJoined_(b2)) : shaka.cast.CastSender.session_ = null;
            } else
              window.__onGCastApiAvailable || (window.__onGCastApiAvailable = shaka.cast.CastSender.onSdkLoaded_), window.__onGCastApiAvailable != shaka.cast.CastSender.onSdkLoaded_ && shaka.log.alwaysWarn("A global Cast SDK hook is already installed! Shaka Player will be unable to receive a notification when the Cast SDK is ready.");
        };
        shaka.cast.CastSender.prototype.setAppData = function(a2) {
          this.appData_ = a2;
          this.isCasting_ && this.sendMessage_({ type: "appData", appData: this.appData_ });
        };
        shaka.cast.CastSender.prototype.cast = function(a2) {
          var b2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (!b2.apiReady_)
              throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.CAST, shaka.util.Error.Code.CAST_API_UNAVAILABLE);
            if (!shaka.cast.CastSender.hasReceivers_)
              throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.CAST, shaka.util.Error.Code.NO_CAST_RECEIVERS);
            if (b2.isCasting_)
              throw new shaka.util.Error(
                shaka.util.Error.Severity.RECOVERABLE,
                shaka.util.Error.Category.CAST,
                shaka.util.Error.Code.ALREADY_CASTING
              );
            b2.castPromise_ = new shaka.util.PublicPromise();
            chrome.cast.requestSession(function(d2) {
              return b2.onSessionInitiated_(a2, d2);
            }, function(d2) {
              return b2.onConnectionError_(d2);
            });
            return c2.yield(b2.castPromise_, 0);
          });
        };
        shaka.cast.CastSender.prototype.showDisconnectDialog = function() {
          var a2 = this;
          if (this.isCasting_) {
            var b2 = this.onInitStateRequired_();
            chrome.cast.requestSession(function(c2) {
              return a2.onSessionInitiated_(b2, c2);
            }, function(c2) {
              return a2.onConnectionError_(c2);
            });
          }
        };
        shaka.cast.CastSender.prototype.forceDisconnect = function() {
          if (this.isCasting_) {
            this.rejectAllPromises_();
            if (shaka.cast.CastSender.session_) {
              this.removeListeners_();
              try {
                shaka.cast.CastSender.session_.stop(function() {
                }, function() {
                });
              } catch (a2) {
              }
              shaka.cast.CastSender.session_ = null;
            }
            this.onConnectionStatusChanged_();
          }
        };
        shaka.cast.CastSender.prototype.get = function(a2, b2) {
          var c2 = this;
          goog.asserts.assert("video" == a2 || "player" == a2, "Unexpected target name");
          var d2 = shaka.cast.CastUtils;
          if ("video" == a2) {
            if (d2.VideoVoidMethods.includes(b2))
              return function() {
                var f2 = $jscomp.getRestArguments.apply(0, arguments);
                return c2.remoteCall_.apply(c2, [a2, b2].concat($jscomp.arrayFromIterable(f2)));
              };
          } else if ("player" == a2) {
            if (d2.PlayerGetterMethodsThatRequireLive[b2]) {
              var e2 = this.get("player", "isLive")();
              goog.asserts.assert(e2, b2 + " should be called on a live stream!");
              if (!e2)
                return function() {
                };
            }
            if (d2.PlayerVoidMethods.includes(b2))
              return function() {
                var f2 = $jscomp.getRestArguments.apply(0, arguments);
                return c2.remoteCall_.apply(c2, [a2, b2].concat($jscomp.arrayFromIterable(f2)));
              };
            if (d2.PlayerPromiseMethods.includes(b2))
              return function() {
                var f2 = $jscomp.getRestArguments.apply(0, arguments);
                return c2.remoteAsyncCall_.apply(c2, [a2, b2].concat($jscomp.arrayFromIterable(f2)));
              };
            if (d2.PlayerGetterMethods[b2])
              return function() {
                return c2.propertyGetter_(a2, b2);
              };
          }
          return this.propertyGetter_(a2, b2);
        };
        shaka.cast.CastSender.prototype.set = function(a2, b2, c2) {
          goog.asserts.assert("video" == a2 || "player" == a2, "Unexpected target name");
          this.cachedProperties_[a2][b2] = c2;
          this.sendMessage_({ type: "set", targetName: a2, property: b2, value: c2 });
        };
        shaka.cast.CastSender.prototype.onSessionInitiated_ = function(a2, b2) {
          shaka.log.debug("CastSender: onSessionInitiated");
          this.onSessionCreated_(b2);
          this.sendMessage_({ type: "init", initState: a2, appData: this.appData_ });
          this.castPromise_.resolve();
        };
        shaka.cast.CastSender.prototype.onConnectionError_ = function(a2) {
          var b2 = shaka.util.Error.Code.UNEXPECTED_CAST_ERROR;
          switch (a2.code) {
            case "cancel":
              b2 = shaka.util.Error.Code.CAST_CANCELED_BY_USER;
              break;
            case "timeout":
              b2 = shaka.util.Error.Code.CAST_CONNECTION_TIMED_OUT;
              break;
            case "receiver_unavailable":
              b2 = shaka.util.Error.Code.CAST_RECEIVER_APP_UNAVAILABLE;
          }
          this.castPromise_.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.CAST, b2, a2));
        };
        shaka.cast.CastSender.prototype.propertyGetter_ = function(a2, b2) {
          goog.asserts.assert("video" == a2 || "player" == a2, "Unexpected target name");
          return this.cachedProperties_[a2][b2];
        };
        shaka.cast.CastSender.prototype.remoteCall_ = function(a2, b2) {
          var c2 = $jscomp.getRestArguments.apply(2, arguments);
          goog.asserts.assert("video" == a2 || "player" == a2, "Unexpected target name");
          this.sendMessage_({ type: "call", targetName: a2, methodName: b2, args: c2 });
        };
        shaka.cast.CastSender.prototype.remoteAsyncCall_ = function(a2, b2) {
          var c2 = $jscomp.getRestArguments.apply(2, arguments);
          goog.asserts.assert("video" == a2 || "player" == a2, "Unexpected target name");
          var d2 = new shaka.util.PublicPromise(), e2 = this.nextAsyncCallId_.toString();
          this.nextAsyncCallId_++;
          this.asyncCallPromises_[e2] = d2;
          try {
            this.sendMessage_({ type: "asyncCall", targetName: a2, methodName: b2, args: c2, id: e2 });
          } catch (f2) {
            d2.reject(f2);
          }
          return d2;
        };
        shaka.cast.CastSender.onExistingSessionJoined_ = function(a2) {
          for (var b2 = $jscomp.makeIterator(shaka.cast.CastSender.instances_), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2.value.onExistingSessionJoined_(a2);
        };
        shaka.cast.CastSender.prototype.onExistingSessionJoined_ = function(a2) {
          shaka.log.debug("CastSender: onExistingSessionJoined");
          var b2 = this.onInitStateRequired_();
          this.castPromise_ = new shaka.util.PublicPromise();
          this.hasJoinedExistingSession_ = true;
          this.onSessionInitiated_(b2, a2);
        };
        shaka.cast.CastSender.onReceiverStatusChanged_ = function(a2) {
          for (var b2 = $jscomp.makeIterator(shaka.cast.CastSender.instances_), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2.value.onReceiverStatusChanged_(a2);
        };
        shaka.cast.CastSender.prototype.onReceiverStatusChanged_ = function(a2) {
          shaka.log.debug("CastSender: receiver status", a2);
          shaka.cast.CastSender.hasReceivers_ = "available" == a2;
          this.statusChangeTimer_.tickNow();
        };
        shaka.cast.CastSender.prototype.onSessionCreated_ = function(a2) {
          shaka.cast.CastSender.session_ = a2;
          a2.addUpdateListener(this.onConnectionStatusChangedBound_);
          a2.addMessageListener(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE, this.onMessageReceivedBound_);
          this.onConnectionStatusChanged_();
        };
        shaka.cast.CastSender.prototype.removeListeners_ = function() {
          var a2 = shaka.cast.CastSender.session_;
          a2.removeUpdateListener(this.onConnectionStatusChangedBound_);
          a2.removeMessageListener(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE, this.onMessageReceivedBound_);
        };
        shaka.cast.CastSender.prototype.onConnectionStatusChanged_ = function() {
          var a2 = shaka.cast.CastSender.session_ ? "connected" == shaka.cast.CastSender.session_.status : false;
          shaka.log.debug("CastSender: connection status", a2);
          if (this.isCasting_ && !a2) {
            this.onResumeLocal_();
            for (var b2 in this.cachedProperties_)
              this.cachedProperties_[b2] = {};
            this.rejectAllPromises_();
          }
          this.receiverName_ = (this.isCasting_ = a2) ? shaka.cast.CastSender.session_.receiver.friendlyName : "";
          this.statusChangeTimer_.tickNow();
        };
        shaka.cast.CastSender.prototype.rejectAllPromises_ = function() {
          for (var a2 in this.asyncCallPromises_) {
            var b2 = this.asyncCallPromises_[a2];
            delete this.asyncCallPromises_[a2];
            b2.reject(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.LOAD_INTERRUPTED));
          }
        };
        shaka.cast.CastSender.prototype.onMessageReceived_ = function(a2, b2) {
          var c2 = shaka.cast.CastUtils.deserialize(b2);
          shaka.log.v2("CastSender: message", c2);
          switch (c2.type) {
            case "event":
              var d2 = c2.targetName;
              c2 = shaka.util.FakeEvent.fromRealEvent(c2.event);
              this.onRemoteEvent_(d2, c2);
              break;
            case "update":
              d2 = c2.update;
              for (var e2 in d2) {
                c2 = this.cachedProperties_[e2] || {};
                for (var f2 in d2[e2])
                  c2[f2] = d2[e2][f2];
              }
              this.hasJoinedExistingSession_ && (this.onFirstCastStateUpdate_(), this.hasJoinedExistingSession_ = false);
              break;
            case "asyncComplete":
              if (e2 = c2.id, c2 = c2.error, f2 = this.asyncCallPromises_[e2], delete this.asyncCallPromises_[e2], goog.asserts.assert(f2, "Unexpected async id"), f2)
                if (c2) {
                  e2 = new shaka.util.Error(c2.severity, c2.category, c2.code);
                  for (d2 in c2)
                    e2[d2] = c2[d2];
                  f2.reject(e2);
                } else
                  f2.resolve();
          }
        };
        shaka.cast.CastSender.prototype.sendMessage_ = function(a2) {
          a2 = shaka.cast.CastUtils.serialize(a2);
          var b2 = shaka.cast.CastSender.session_;
          try {
            b2.sendMessage(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE, a2, function() {
            }, shaka.log.error);
          } catch (c2) {
            throw shaka.log.error("Cast session sendMessage threw", c2), a2 = new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.CAST, shaka.util.Error.Code.CAST_CONNECTION_TIMED_OUT, c2), b2 = new shaka.util.FakeEvent("error", (/* @__PURE__ */ new Map()).set("detail", a2)), this.onRemoteEvent_(
              "player",
              b2
            ), this.forceDisconnect(), a2;
          }
        };
        shaka.cast.CastSender.STATUS_DELAY = 0.02;
        shaka.cast.CastSender.hasReceivers_ = false;
        shaka.cast.CastSender.session_ = null;
        shaka.cast.CastSender.instances_ = /* @__PURE__ */ new Set();
        shaka.cast.CastSender.onSdkLoaded_ = function(a2) {
          if (a2) {
            a2 = $jscomp.makeIterator(shaka.cast.CastSender.instances_);
            for (var b2 = a2.next(); !b2.done; b2 = a2.next())
              b2.value.init();
          }
        };
        shaka.cast.CastProxy = function(a2, b2, c2) {
          shaka.util.FakeEventTarget.call(this);
          var d2 = this;
          this.localVideo_ = a2;
          this.localPlayer_ = b2;
          this.eventManager_ = this.playerEventTarget_ = this.videoEventTarget_ = this.playerProxy_ = this.videoProxy_ = null;
          this.receiverAppId_ = c2;
          this.compiledToExternNames_ = /* @__PURE__ */ new Map();
          this.sender_ = new shaka.cast.CastSender(
            c2,
            function() {
              return d2.onCastStatusChanged_();
            },
            function() {
              return d2.onFirstCastStateUpdate_();
            },
            function(e2, f2) {
              return d2.onRemoteEvent_(e2, f2);
            },
            function() {
              return d2.onResumeLocal_();
            },
            function() {
              return d2.getInitState_();
            }
          );
          this.init_();
        };
        $jscomp.inherits(shaka.cast.CastProxy, shaka.util.FakeEventTarget);
        shaka.cast.CastProxy.prototype.destroy = function(a2) {
          a2 && this.sender_.forceDisconnect();
          this.eventManager_ && (this.eventManager_.release(), this.eventManager_ = null);
          a2 = [];
          this.localPlayer_ && (a2.push(this.localPlayer_.destroy()), this.localPlayer_ = null);
          this.sender_ && (a2.push(this.sender_.destroy()), this.sender_ = null);
          this.playerProxy_ = this.videoProxy_ = this.localVideo_ = null;
          shaka.util.FakeEventTarget.prototype.release.call(this);
          return Promise.all(a2);
        };
        shaka.cast.CastProxy.prototype.getVideo = function() {
          return this.videoProxy_;
        };
        shaka.cast.CastProxy.prototype.getPlayer = function() {
          return this.playerProxy_;
        };
        shaka.cast.CastProxy.prototype.canCast = function() {
          return this.sender_.apiReady() && this.sender_.hasReceivers();
        };
        shaka.cast.CastProxy.prototype.isCasting = function() {
          return this.sender_.isCasting();
        };
        shaka.cast.CastProxy.prototype.receiverName = function() {
          return this.sender_.receiverName();
        };
        shaka.cast.CastProxy.prototype.cast = function() {
          var a2 = this, b2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            return 1 == c2.nextAddress ? (b2 = a2.getInitState_(), c2.yield(a2.sender_.cast(b2), 2)) : a2.localPlayer_ ? c2.yield(a2.localPlayer_.unload(), 0) : c2["return"]();
          });
        };
        shaka.cast.CastProxy.prototype.setAppData = function(a2) {
          this.sender_.setAppData(a2);
        };
        shaka.cast.CastProxy.prototype.suggestDisconnect = function() {
          this.sender_.showDisconnectDialog();
        };
        shaka.cast.CastProxy.prototype.forceDisconnect = function() {
          this.sender_.forceDisconnect();
        };
        shaka.cast.CastProxy.prototype.changeReceiverId = function(a2) {
          var b2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (1 == c2.nextAddress) {
              if (a2 == b2.receiverAppId_)
                return c2["return"]();
              b2.receiverAppId_ = a2;
              b2.sender_.forceDisconnect();
              return c2.yield(b2.sender_.destroy(), 2);
            }
            b2.sender_ = null;
            b2.sender_ = new shaka.cast.CastSender(
              a2,
              function() {
                return b2.onCastStatusChanged_();
              },
              function() {
                return b2.onFirstCastStateUpdate_();
              },
              function(d2, e2) {
                return b2.onRemoteEvent_(d2, e2);
              },
              function() {
                return b2.onResumeLocal_();
              },
              function() {
                return b2.getInitState_();
              }
            );
            b2.sender_.init();
            c2.jumpToEnd();
          });
        };
        shaka.cast.CastProxy.prototype.init_ = function() {
          var a2 = this;
          this.sender_.init();
          this.eventManager_ = new shaka.util.EventManager();
          for (var b2 = $jscomp.makeIterator(shaka.cast.CastUtils.VideoEvents), c2 = b2.next(); !c2.done; c2 = b2.next())
            this.eventManager_.listen(this.localVideo_, c2.value, function(f2) {
              return a2.videoProxyLocalEvent_(f2);
            });
          for (var d2 in shaka.Player.EventName)
            this.eventManager_.listen(this.localPlayer_, shaka.Player.EventName[d2], function(f2) {
              return a2.playerProxyLocalEvent_(f2);
            });
          this.videoProxy_ = {};
          b2 = {};
          for (var e2 in this.localVideo_)
            b2.$jscomp$loop$prop$k$604 = e2, Object.defineProperty(this.videoProxy_, b2.$jscomp$loop$prop$k$604, { configurable: false, enumerable: true, get: function(f2) {
              return function() {
                return a2.videoProxyGet_(f2.$jscomp$loop$prop$k$604);
              };
            }(b2), set: function(f2) {
              return function(g) {
                a2.videoProxySet_(f2.$jscomp$loop$prop$k$604, g);
              };
            }(b2) }), b2 = { $jscomp$loop$prop$k$604: b2.$jscomp$loop$prop$k$604 };
          this.playerProxy_ = {};
          this.iterateOverPlayerMethods_(function(f2, g) {
            goog.asserts.assert(a2.playerProxy_, "Must have player proxy!");
            Object.defineProperty(a2.playerProxy_, f2, {
              configurable: false,
              enumerable: true,
              get: function() {
                return a2.playerProxyGet_(f2);
              }
            });
          });
          COMPILED && this.mapCompiledToUncompiledPlayerMethodNames_();
          this.videoEventTarget_ = new shaka.util.FakeEventTarget();
          this.videoEventTarget_.dispatchTarget = this.videoProxy_;
          this.playerEventTarget_ = new shaka.util.FakeEventTarget();
          this.playerEventTarget_.dispatchTarget = this.playerProxy_;
        };
        shaka.cast.CastProxy.prototype.mapCompiledToUncompiledPlayerMethodNames_ = function() {
          var a2 = this, b2 = /* @__PURE__ */ new Map();
          this.iterateOverPlayerMethods_(function(c2, d2) {
            if (b2.has(d2)) {
              var e2 = b2.get(d2);
              c2.length < e2.length ? a2.compiledToExternNames_.set(c2, e2) : a2.compiledToExternNames_.set(e2, c2);
            } else
              b2.set(d2, c2);
          });
        };
        shaka.cast.CastProxy.prototype.iterateOverPlayerMethods_ = function(a2) {
          function b2(k2) {
            return "constructor" == k2 || "function" != typeof c2[k2] ? false : !d2.has(k2);
          }
          goog.asserts.assert(this.localPlayer_, "Must have player!");
          var c2 = this.localPlayer_, d2 = /* @__PURE__ */ new Set();
          for (e2 in c2)
            b2(e2) && (d2.add(e2), a2(e2, c2[e2]));
          var e2 = Object.getPrototypeOf(c2);
          for (var f2 = Object.getPrototypeOf({}); e2 && e2 != f2; ) {
            for (var g = $jscomp.makeIterator(Object.getOwnPropertyNames(e2)), h = g.next(); !h.done; h = g.next())
              h = h.value, b2(h) && (d2.add(h), a2(h, c2[h]));
            e2 = Object.getPrototypeOf(e2);
          }
        };
        shaka.cast.CastProxy.prototype.getInitState_ = function() {
          var a2 = { video: {}, player: {}, playerAfterLoad: {}, manifest: this.localPlayer_.getAssetUri(), startTime: null };
          this.localVideo_.pause();
          for (var b2 = $jscomp.makeIterator(shaka.cast.CastUtils.VideoInitStateAttributes), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, a2.video[c2] = this.localVideo_[c2];
          this.localVideo_.ended || (a2.startTime = this.localVideo_.currentTime);
          b2 = $jscomp.makeIterator(shaka.cast.CastUtils.PlayerInitState);
          for (c2 = b2.next(); !c2.done; c2 = b2.next()) {
            var d2 = c2.value;
            c2 = d2[1];
            d2 = this.localPlayer_[d2[0]]();
            a2.player[c2] = d2;
          }
          b2 = $jscomp.makeIterator(shaka.cast.CastUtils.PlayerInitAfterLoadState);
          for (c2 = b2.next(); !c2.done; c2 = b2.next())
            d2 = c2.value, c2 = d2[1], d2 = this.localPlayer_[d2[0]](), a2.playerAfterLoad[c2] = d2;
          return a2;
        };
        shaka.cast.CastProxy.prototype.onCastStatusChanged_ = function() {
          var a2 = new shaka.util.FakeEvent("caststatuschanged");
          this.dispatchEvent(a2);
        };
        shaka.cast.CastProxy.prototype.onFirstCastStateUpdate_ = function() {
          var a2 = new shaka.util.FakeEvent(this.videoProxy_.paused ? "pause" : "play");
          this.videoEventTarget_.dispatchEvent(a2);
        };
        shaka.cast.CastProxy.prototype.onResumeLocal_ = function() {
          for (var a2 = this, b2 = $jscomp.makeIterator(shaka.cast.CastUtils.PlayerInitState), c2 = b2.next(); !c2.done; c2 = b2.next()) {
            var d2 = c2.value;
            c2 = d2[1];
            d2 = this.sender_.get("player", d2[0])();
            this.localPlayer_[c2](d2);
          }
          var e2 = this.sender_.get("player", "getAssetUri")();
          c2 = this.sender_.get("video", "ended");
          b2 = Promise.resolve();
          var f2 = this.localVideo_.autoplay;
          d2 = null;
          c2 || (d2 = this.sender_.get("video", "currentTime"));
          e2 && (this.localVideo_.autoplay = false, b2 = this.localPlayer_.load(e2, d2));
          var g = {};
          c2 = $jscomp.makeIterator(shaka.cast.CastUtils.VideoInitStateAttributes);
          for (d2 = c2.next(); !d2.done; d2 = c2.next())
            d2 = d2.value, g[d2] = this.sender_.get("video", d2);
          b2.then(function() {
            if (a2.localVideo_) {
              for (var h = $jscomp.makeIterator(shaka.cast.CastUtils.VideoInitStateAttributes), k2 = h.next(); !k2.done; k2 = h.next())
                k2 = k2.value, a2.localVideo_[k2] = g[k2];
              h = $jscomp.makeIterator(shaka.cast.CastUtils.PlayerInitAfterLoadState);
              for (k2 = h.next(); !k2.done; k2 = h.next()) {
                var l = k2.value;
                k2 = l[1];
                l = a2.sender_.get("player", l[0])();
                a2.localPlayer_[k2](l);
              }
              a2.localVideo_.autoplay = f2;
              e2 && a2.localVideo_.play();
            }
          }, function(h) {
            goog.asserts.assert(h instanceof shaka.util.Error, "Wrong error type!");
            var k2 = shaka.Player.EventName.Error;
            h = (/* @__PURE__ */ new Map()).set("detail", h);
            k2 = new shaka.util.FakeEvent(k2, h);
            a2.localPlayer_.dispatchEvent(k2);
          });
        };
        shaka.cast.CastProxy.prototype.videoProxyGet_ = function(a2) {
          var b2 = this;
          if ("addEventListener" == a2)
            return function(d2, e2, f2) {
              return b2.videoEventTarget_.addEventListener(d2, e2, f2);
            };
          if ("removeEventListener" == a2)
            return function(d2, e2, f2) {
              return b2.videoEventTarget_.removeEventListener(d2, e2, f2);
            };
          if (this.sender_.isCasting() && !this.sender_.hasRemoteProperties()) {
            var c2 = this.localVideo_[a2];
            if ("function" != typeof c2)
              return c2;
          }
          return this.sender_.isCasting() ? this.sender_.get("video", a2) : (a2 = this.localVideo_[a2], "function" == typeof a2 && (a2 = a2.bind(this.localVideo_)), a2);
        };
        shaka.cast.CastProxy.prototype.videoProxySet_ = function(a2, b2) {
          this.sender_.isCasting() ? this.sender_.set("video", a2, b2) : this.localVideo_[a2] = b2;
        };
        shaka.cast.CastProxy.prototype.videoProxyLocalEvent_ = function(a2) {
          this.sender_.isCasting() || (a2 = shaka.util.FakeEvent.fromRealEvent(a2), this.videoEventTarget_.dispatchEvent(a2));
        };
        shaka.cast.CastProxy.prototype.playerProxyGet_ = function(a2) {
          var b2 = this;
          this.compiledToExternNames_.has(a2) && (a2 = this.compiledToExternNames_.get(a2));
          if ("addEventListener" == a2)
            return function(d2, e2, f2) {
              return b2.playerEventTarget_.addEventListener(d2, e2, f2);
            };
          if ("removeEventListener" == a2)
            return function(d2, e2, f2) {
              return b2.playerEventTarget_.removeEventListener(d2, e2, f2);
            };
          if ("getMediaElement" == a2)
            return function() {
              return b2.videoProxy_;
            };
          if ("getSharedConfiguration" == a2)
            return shaka.log.warning("Can't share configuration across a network. Returning copy."), this.sender_.get("player", "getConfiguration");
          if ("getNetworkingEngine" == a2)
            return this.sender_.isCasting() && shaka.log.warning("NOTE: getNetworkingEngine() is always local!"), function() {
              return b2.localPlayer_.getNetworkingEngine();
            };
          if ("getDrmEngine" == a2)
            return this.sender_.isCasting() && shaka.log.warning("NOTE: getDrmEngine() is always local!"), function() {
              return b2.localPlayer_.getDrmEngine();
            };
          if ("getAdManager" == a2)
            return this.sender_.isCasting() && shaka.log.warning("NOTE: getAdManager() is always local!"), function() {
              return b2.localPlayer_.getAdManager();
            };
          if ("setVideoContainer" == a2)
            return this.sender_.isCasting() && shaka.log.warning("NOTE: setVideoContainer() is always local!"), function(d2) {
              return b2.localPlayer_.setVideoContainer(d2);
            };
          if (this.sender_.isCasting()) {
            if ("getManifest" == a2 || "drmInfo" == a2)
              return function() {
                shaka.log.alwaysWarn(a2 + "() does not work while casting!");
                return null;
              };
            if ("attach" == a2 || "detach" == a2)
              return function() {
                shaka.log.alwaysWarn(a2 + "() does not work while casting!");
                return Promise.resolve();
              };
          }
          if (this.sender_.isCasting() && !this.sender_.hasRemoteProperties() && shaka.cast.CastUtils.PlayerGetterMethods[a2]) {
            var c2 = this.localPlayer_[a2];
            goog.asserts.assert("function" == typeof c2, "only methods on Player");
            return c2.bind(this.localPlayer_);
          }
          return this.sender_.isCasting() ? this.sender_.get("player", a2) : (c2 = this.localPlayer_[a2], goog.asserts.assert("function" == typeof c2, "only methods on Player"), c2.bind(this.localPlayer_));
        };
        shaka.cast.CastProxy.prototype.playerProxyLocalEvent_ = function(a2) {
          this.sender_.isCasting() || this.playerEventTarget_.dispatchEvent(a2);
        };
        shaka.cast.CastProxy.prototype.onRemoteEvent_ = function(a2, b2) {
          goog.asserts.assert(this.sender_.isCasting(), "Should only receive remote events while casting");
          this.sender_.isCasting() && ("video" == a2 ? this.videoEventTarget_.dispatchEvent(b2) : "player" == a2 && this.playerEventTarget_.dispatchEvent(b2));
        };
        goog.exportSymbol("shaka.cast.CastProxy", shaka.cast.CastProxy);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "changeReceiverId", shaka.cast.CastProxy.prototype.changeReceiverId);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "forceDisconnect", shaka.cast.CastProxy.prototype.forceDisconnect);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "suggestDisconnect", shaka.cast.CastProxy.prototype.suggestDisconnect);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "setAppData", shaka.cast.CastProxy.prototype.setAppData);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "cast", shaka.cast.CastProxy.prototype.cast);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "receiverName", shaka.cast.CastProxy.prototype.receiverName);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "isCasting", shaka.cast.CastProxy.prototype.isCasting);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "canCast", shaka.cast.CastProxy.prototype.canCast);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "getPlayer", shaka.cast.CastProxy.prototype.getPlayer);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "getVideo", shaka.cast.CastProxy.prototype.getVideo);
        goog.exportProperty(shaka.cast.CastProxy.prototype, "destroy", shaka.cast.CastProxy.prototype.destroy);
        shaka.cast.CastReceiver = function(a2, b2, c2, d2) {
          shaka.util.FakeEventTarget.call(this);
          var e2 = this;
          this.video_ = a2;
          this.player_ = b2;
          this.eventManager_ = new shaka.util.EventManager();
          this.targets_ = { video: a2, player: b2 };
          this.appDataCallback_ = c2 || function() {
          };
          this.contentIdCallback_ = d2 || function(f2) {
            return f2;
          };
          this.metadata_ = null;
          this.isConnected_ = false;
          this.isIdle_ = true;
          this.updateNumber_ = 0;
          this.startUpdatingUpdateNumber_ = false;
          this.initialStatusUpdatePending_ = true;
          this.genericBus_ = this.shakaBus_ = null;
          this.pollTimer_ = new shaka.util.Timer(function() {
            e2.pollAttributes_();
          });
          this.init_();
        };
        $jscomp.inherits(shaka.cast.CastReceiver, shaka.util.FakeEventTarget);
        shaka.cast.CastReceiver.prototype.isConnected = function() {
          return this.isConnected_;
        };
        shaka.cast.CastReceiver.prototype.isIdle = function() {
          return this.isIdle_;
        };
        shaka.cast.CastReceiver.prototype.setContentMetadata = function(a2) {
          this.metadata_ = a2;
        };
        shaka.cast.CastReceiver.prototype.clearContentMetadata = function() {
          this.metadata_ = null;
        };
        shaka.cast.CastReceiver.prototype.setContentTitle = function(a2) {
          this.metadata_ || (this.metadata_ = { metadataType: cast.receiver.media.MetadataType.GENERIC });
          this.metadata_.title = a2;
        };
        shaka.cast.CastReceiver.prototype.setContentImage = function(a2) {
          this.metadata_ || (this.metadata_ = { metadataType: cast.receiver.media.MetadataType.GENERIC });
          this.metadata_.images = [{ url: a2 }];
        };
        shaka.cast.CastReceiver.prototype.setContentArtist = function(a2) {
          this.metadata_ || (this.metadata_ = {});
          this.metadata_.artist = a2;
          this.metadata_.metadataType = cast.receiver.media.MetadataType.MUSIC_TRACK;
        };
        shaka.cast.CastReceiver.prototype.destroy = function() {
          var a2 = this, b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return a2.eventManager_ && (a2.eventManager_.release(), a2.eventManager_ = null), b2 = [], a2.player_ && (b2.push(a2.player_.destroy()), a2.player_ = null), a2.pollTimer_ && (a2.pollTimer_.stop(), a2.pollTimer_ = null), a2.video_ = null, a2.targets_ = null, a2.appDataCallback_ = null, a2.isConnected_ = false, a2.isIdle_ = true, a2.shakaBus_ = null, a2.genericBus_ = null, shaka.util.FakeEventTarget.prototype.release.call(a2), d2.yield(Promise.all(b2), 2);
            c2 = cast.receiver.CastReceiverManager.getInstance();
            c2.stop();
            d2.jumpToEnd();
          });
        };
        shaka.cast.CastReceiver.prototype.init_ = function() {
          var a2 = this, b2 = cast.receiver.CastReceiverManager.getInstance();
          b2.onSenderConnected = function() {
            return a2.onSendersChanged_();
          };
          b2.onSenderDisconnected = function() {
            return a2.onSendersChanged_();
          };
          b2.onSystemVolumeChanged = function() {
            return a2.fakeVolumeChangeEvent_();
          };
          this.genericBus_ = b2.getCastMessageBus(shaka.cast.CastUtils.GENERIC_MESSAGE_NAMESPACE);
          this.genericBus_.onMessage = function(e2) {
            return a2.onGenericMessage_(e2);
          };
          this.shakaBus_ = b2.getCastMessageBus(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE);
          this.shakaBus_.onMessage = function(e2) {
            return a2.onShakaMessage_(e2);
          };
          goog.DEBUG ? shaka.util.Platform.isChromecast() && b2.start() : b2.start();
          b2 = $jscomp.makeIterator(shaka.cast.CastUtils.VideoEvents);
          for (var c2 = b2.next(); !c2.done; c2 = b2.next())
            this.eventManager_.listen(this.video_, c2.value, function(e2) {
              return a2.proxyEvent_("video", e2);
            });
          for (var d2 in shaka.Player.EventName)
            this.eventManager_.listen(this.player_, shaka.Player.EventName[d2], function(e2) {
              return a2.proxyEvent_("player", e2);
            });
          cast.__platform__ && cast.__platform__.canDisplayType('video/mp4; codecs="avc1.640028"; width=3840; height=2160') ? this.player_.setMaxHardwareResolution(3840, 2160) : this.player_.setMaxHardwareResolution(1920, 1080);
          this.eventManager_.listen(this.video_, "loadeddata", function() {
            a2.startUpdatingUpdateNumber_ = true;
          });
          this.eventManager_.listen(this.player_, "loading", function() {
            a2.isIdle_ = false;
            a2.onCastStatusChanged_();
          });
          this.eventManager_.listen(this.video_, "playing", function() {
            a2.isIdle_ = false;
            a2.onCastStatusChanged_();
          });
          this.eventManager_.listen(this.video_, "pause", function() {
            a2.onCastStatusChanged_();
          });
          this.eventManager_.listen(
            this.player_,
            "unloading",
            function() {
              a2.isIdle_ = true;
              a2.onCastStatusChanged_();
            }
          );
          this.eventManager_.listen(this.video_, "ended", function() {
            new shaka.util.Timer(function() {
              a2.video_ && a2.video_.ended && (a2.isIdle_ = true, a2.onCastStatusChanged_());
            }).tickAfter(shaka.cast.CastReceiver.IDLE_INTERVAL);
          });
        };
        shaka.cast.CastReceiver.prototype.onSendersChanged_ = function() {
          this.updateNumber_ = 0;
          this.initialStatusUpdatePending_ = true;
          this.isConnected_ = 0 != cast.receiver.CastReceiverManager.getInstance().getSenders().length;
          this.onCastStatusChanged_();
        };
        shaka.cast.CastReceiver.prototype.onCastStatusChanged_ = function() {
          var a2 = this, b2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (1 == c2.nextAddress)
              return c2.yield(Promise.resolve(), 2);
            if (!a2.player_)
              return c2["return"]();
            b2 = new shaka.util.FakeEvent("caststatuschanged");
            a2.dispatchEvent(b2);
            a2.maybeSendMediaInfoMessage_() || a2.sendMediaStatus_();
            c2.jumpToEnd();
          });
        };
        shaka.cast.CastReceiver.prototype.initState_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n, p, q;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(r) {
            switch (r.nextAddress) {
              case 1:
                for (d2 in a2.player)
                  e2 = a2.player[d2], c2.player_[d2](e2);
                c2.appDataCallback_(b2);
                f2 = c2.video_.autoplay;
                return a2.manifest ? (c2.video_.autoplay = false, r.setCatchFinallyBlocks(5), r.yield(c2.player_.load(a2.manifest, a2.startTime), 7)) : r.yield(Promise.resolve(), 3);
              case 7:
                r.leaveTryBlock(3);
                break;
              case 5:
                return g = r.enterCatchBlock(), goog.asserts.assert(g instanceof shaka.util.Error, "Wrong error type!"), h = shaka.Player.EventName.Error, k2 = (/* @__PURE__ */ new Map()).set("detail", g), l = new shaka.util.FakeEvent(h, k2), c2.player_ && c2.player_.dispatchEvent(l), r["return"]();
              case 3:
                if (!c2.player_)
                  return r["return"]();
                for (m in a2.video)
                  n = a2.video[m], c2.video_[m] = n;
                for (p in a2.playerAfterLoad)
                  q = a2.playerAfterLoad[p], c2.player_[p](q);
                c2.video_.autoplay = f2;
                a2.manifest && (c2.video_.play(), c2.sendMediaStatus_());
                r.jumpToEnd();
            }
          });
        };
        shaka.cast.CastReceiver.prototype.proxyEvent_ = function(a2, b2) {
          this.player_ && (this.pollAttributes_(), this.sendMessage_({ type: "event", targetName: a2, event: b2 }, this.shakaBus_));
        };
        shaka.cast.CastReceiver.prototype.pollAttributes_ = function() {
          this.pollTimer_.tickAfter(shaka.cast.CastReceiver.POLL_INTERVAL);
          for (var a2 = { video: {}, player: {} }, b2 = $jscomp.makeIterator(shaka.cast.CastUtils.VideoAttributes), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, a2.video[c2] = this.video_[c2];
          if (this.player_.isLive()) {
            b2 = shaka.cast.CastUtils.PlayerGetterMethodsThatRequireLive;
            for (var d2 in b2)
              0 == this.updateNumber_ % b2[d2] && (a2.player[d2] = this.player_[d2]());
          }
          for (var e2 in shaka.cast.CastUtils.PlayerGetterMethods)
            0 == this.updateNumber_ % shaka.cast.CastUtils.PlayerGetterMethods[e2] && (a2.player[e2] = this.player_[e2]());
          if (d2 = cast.receiver.CastReceiverManager.getInstance().getSystemVolume())
            a2.video.volume = d2.level, a2.video.muted = d2.muted;
          this.startUpdatingUpdateNumber_ && (this.updateNumber_ += 1);
          this.sendMessage_({ type: "update", update: a2 }, this.shakaBus_);
          this.maybeSendMediaInfoMessage_();
        };
        shaka.cast.CastReceiver.prototype.maybeSendMediaInfoMessage_ = function() {
          return this.initialStatusUpdatePending_ && (this.video_.duration || this.player_.isLive()) ? (this.sendMediaInfoMessage_(), this.initialStatusUpdatePending_ = false, true) : false;
        };
        shaka.cast.CastReceiver.prototype.sendMediaInfoMessage_ = function(a2) {
          a2 = void 0 === a2 ? 0 : a2;
          var b2 = { contentId: this.player_.getAssetUri(), streamType: this.player_.isLive() ? "LIVE" : "BUFFERED", contentType: "" };
          this.player_.isLive() || (b2.duration = this.video_.duration);
          this.metadata_ && (b2.metadata = this.metadata_);
          this.sendMediaStatus_(a2, b2);
        };
        shaka.cast.CastReceiver.prototype.fakeVolumeChangeEvent_ = function() {
          var a2 = cast.receiver.CastReceiverManager.getInstance().getSystemVolume();
          goog.asserts.assert(a2, "System volume should not be null!");
          a2 && this.sendMessage_({ type: "update", update: { video: { volume: a2.level, muted: a2.muted } } }, this.shakaBus_);
          this.sendMessage_({ type: "event", targetName: "video", event: { type: "volumechange" } }, this.shakaBus_);
        };
        shaka.cast.CastReceiver.prototype.onShakaMessage_ = function(a2) {
          var b2 = this, c2 = shaka.cast.CastUtils.deserialize(a2.data);
          shaka.log.debug("CastReceiver: message", c2);
          switch (c2.type) {
            case "init":
              this.updateNumber_ = 0;
              this.startUpdatingUpdateNumber_ = false;
              this.initialStatusUpdatePending_ = true;
              this.initState_(c2.initState, c2.appData);
              this.pollAttributes_();
              break;
            case "appData":
              this.appDataCallback_(c2.appData);
              break;
            case "set":
              var d2 = c2.targetName, e2 = c2.property;
              c2 = c2.value;
              if ("video" == d2) {
                if (a2 = cast.receiver.CastReceiverManager.getInstance(), "volume" == e2) {
                  a2.setSystemVolumeLevel(c2);
                  break;
                } else if ("muted" == e2) {
                  a2.setSystemVolumeMuted(c2);
                  break;
                }
              }
              this.targets_[d2][e2] = c2;
              break;
            case "call":
              d2 = this.targets_[c2.targetName];
              d2[c2.methodName].apply(d2, c2.args);
              break;
            case "asyncCall":
              d2 = c2.targetName;
              e2 = c2.methodName;
              "player" == d2 && "load" == e2 && (this.updateNumber_ = 0, this.startUpdatingUpdateNumber_ = false);
              var f2 = c2.id, g = a2.senderId;
              a2 = this.targets_[d2];
              c2 = a2[e2].apply(a2, c2.args);
              "player" == d2 && "load" == e2 && (c2 = c2.then(function() {
                b2.initialStatusUpdatePending_ = true;
              }));
              c2.then(function() {
                return b2.sendAsyncComplete_(
                  g,
                  f2,
                  null
                );
              }, function(h) {
                return b2.sendAsyncComplete_(g, f2, h);
              });
          }
        };
        shaka.cast.CastReceiver.prototype.onGenericMessage_ = function(a2) {
          var b2 = this, c2 = shaka.cast.CastUtils.deserialize(a2.data);
          shaka.log.debug("CastReceiver: message", c2);
          switch (c2.type) {
            case "PLAY":
              this.video_.play();
              this.sendMediaStatus_();
              break;
            case "PAUSE":
              this.video_.pause();
              this.sendMediaStatus_();
              break;
            case "SEEK":
              a2 = c2.currentTime;
              var d2 = c2.resumeState;
              null != a2 && (this.video_.currentTime = Number(a2));
              d2 && "PLAYBACK_START" == d2 ? (this.video_.play(), this.sendMediaStatus_()) : d2 && "PLAYBACK_PAUSE" == d2 && (this.video_.pause(), this.sendMediaStatus_());
              break;
            case "STOP":
              this.player_.unload().then(function() {
                b2.player_ && b2.sendMediaStatus_();
              });
              break;
            case "GET_STATUS":
              this.sendMediaInfoMessage_(Number(c2.requestId));
              break;
            case "VOLUME":
              d2 = c2.volume;
              a2 = d2.level;
              d2 = d2.muted;
              var e2 = this.video_.volume, f2 = this.video_.muted;
              null != a2 && (this.video_.volume = Number(a2));
              null != d2 && (this.video_.muted = d2);
              e2 == this.video_.volume && f2 == this.video_.muted || this.sendMediaStatus_();
              break;
            case "LOAD":
              this.updateNumber_ = 0;
              this.initialStatusUpdatePending_ = this.startUpdatingUpdateNumber_ = false;
              a2 = c2.media;
              d2 = c2.currentTime;
              e2 = this.contentIdCallback_(a2.contentId);
              f2 = c2.autoplay || true;
              this.appDataCallback_(a2.customData);
              f2 && (this.video_.autoplay = true);
              this.player_.load(e2, d2).then(function() {
                b2.player_ && b2.sendMediaInfoMessage_();
              })["catch"](function(g) {
                goog.asserts.assert(g instanceof shaka.util.Error, "Wrong error type!");
                var h = "LOAD_FAILED";
                g.category == shaka.util.Error.Category.PLAYER && g.code == shaka.util.Error.Code.LOAD_INTERRUPTED && (h = "LOAD_CANCELLED");
                b2.sendMessage_({
                  requestId: Number(c2.requestId),
                  type: h
                }, b2.genericBus_);
              });
              break;
            default:
              shaka.log.warning("Unrecognized message type from the generic Chromecast controller!", c2.type), this.sendMessage_({ requestId: Number(c2.requestId), type: "INVALID_REQUEST", reason: "INVALID_COMMAND" }, this.genericBus_);
          }
        };
        shaka.cast.CastReceiver.prototype.sendAsyncComplete_ = function(a2, b2, c2) {
          this.player_ && this.sendMessage_({ type: "asyncComplete", id: b2, error: c2 }, this.shakaBus_, a2);
        };
        shaka.cast.CastReceiver.prototype.sendMessage_ = function(a2, b2, c2) {
          this.isConnected_ && (a2 = shaka.cast.CastUtils.serialize(a2), c2 ? b2.getCastChannel(c2).send(a2) : b2.broadcast(a2));
        };
        shaka.cast.CastReceiver.prototype.getPlayState_ = function() {
          var a2 = shaka.cast.CastReceiver.PLAY_STATE;
          return this.isIdle_ ? a2.IDLE : this.player_.isBuffering() ? a2.BUFFERING : this.video_.paused ? a2.PAUSED : a2.PLAYING;
        };
        shaka.cast.CastReceiver.prototype.sendMediaStatus_ = function(a2, b2) {
          a2 = void 0 === a2 ? 0 : a2;
          b2 = void 0 === b2 ? null : b2;
          var c2 = { mediaSessionId: 0, playbackRate: this.video_.playbackRate, playerState: this.getPlayState_(), currentTime: this.video_.currentTime, supportedMediaCommands: 63, volume: { level: this.video_.volume, muted: this.video_.muted } };
          b2 && (c2.media = b2);
          this.sendMessage_({ requestId: a2, type: "MEDIA_STATUS", status: [c2] }, this.genericBus_);
        };
        goog.exportSymbol("shaka.cast.CastReceiver", shaka.cast.CastReceiver);
        goog.exportProperty(shaka.cast.CastReceiver.prototype, "destroy", shaka.cast.CastReceiver.prototype.destroy);
        goog.exportProperty(shaka.cast.CastReceiver.prototype, "setContentArtist", shaka.cast.CastReceiver.prototype.setContentArtist);
        goog.exportProperty(shaka.cast.CastReceiver.prototype, "setContentImage", shaka.cast.CastReceiver.prototype.setContentImage);
        goog.exportProperty(shaka.cast.CastReceiver.prototype, "setContentTitle", shaka.cast.CastReceiver.prototype.setContentTitle);
        goog.exportProperty(shaka.cast.CastReceiver.prototype, "clearContentMetadata", shaka.cast.CastReceiver.prototype.clearContentMetadata);
        goog.exportProperty(shaka.cast.CastReceiver.prototype, "setContentMetadata", shaka.cast.CastReceiver.prototype.setContentMetadata);
        goog.exportProperty(shaka.cast.CastReceiver.prototype, "isIdle", shaka.cast.CastReceiver.prototype.isIdle);
        goog.exportProperty(shaka.cast.CastReceiver.prototype, "isConnected", shaka.cast.CastReceiver.prototype.isConnected);
        shaka.cast.CastReceiver.POLL_INTERVAL = 0.5;
        shaka.cast.CastReceiver.IDLE_INTERVAL = 5;
        shaka.cast.CastReceiver.PLAY_STATE = { IDLE: "IDLE", PLAYING: "PLAYING", BUFFERING: "BUFFERING", PAUSED: "PAUSED" };
        shaka.util.Pssh = function(a2) {
          var b2 = this;
          this.systemIds = [];
          this.cencKeyIds = [];
          this.data = [];
          new shaka.util.Mp4Parser().box("moov", shaka.util.Mp4Parser.children).fullBox("pssh", function(c2) {
            return b2.parsePsshBox_(c2);
          }).parse(a2);
          0 == this.data.length && shaka.log.warning("No pssh box found!");
        };
        shaka.util.Pssh.prototype.parsePsshBox_ = function(a2) {
          goog.asserts.assert(null != a2.version, "PSSH boxes are full boxes and must have a valid version");
          goog.asserts.assert(null != a2.flags, "PSSH boxes are full boxes and must have a valid flag");
          if (1 < a2.version)
            shaka.log.warning("Unrecognized PSSH version found!");
          else {
            var b2 = a2.reader.getDataView();
            goog.asserts.assert(12 <= b2.byteOffset, "DataView at incorrect position");
            b2 = shaka.util.BufferUtils.toUint8(b2, -12, a2.size);
            this.data.push(b2);
            this.systemIds.push(shaka.util.Uint8ArrayUtils.toHex(a2.reader.readBytes(16)));
            if (0 < a2.version) {
              b2 = a2.reader.readUint32();
              for (var c2 = 0; c2 < b2; c2++) {
                var d2 = shaka.util.Uint8ArrayUtils.toHex(a2.reader.readBytes(16));
                this.cencKeyIds.push(d2);
              }
            }
          }
        };
        shaka.util.Pssh.createPssh = function(a2, b2) {
          goog.asserts.assert(16 == b2.byteLength, "Invalid system ID length");
          var c2 = a2.length, d2 = 12 + b2.length + 4 + c2, e2 = new Uint8Array(d2), f2 = shaka.util.BufferUtils.toDataView(e2), g = 0;
          f2.setUint32(g, d2);
          g += 4;
          f2.setUint32(g, 1886614376);
          g += 4;
          f2.setUint32(g, 0);
          g += 4;
          e2.set(b2, g);
          g += b2.length;
          f2.setUint32(g, c2);
          g += 4;
          e2.set(a2, g);
          goog.asserts.assert(g + c2 === d2, "PSSH invalid length.");
          return e2;
        };
        shaka.util.Pssh.normaliseInitData = function(a2) {
          if (!a2)
            return a2;
          var b2 = new shaka.util.Pssh(a2);
          if (1 >= b2.data.length)
            return a2;
          a2 = [];
          var c2 = {};
          b2 = $jscomp.makeIterator(b2.data);
          for (var d2 = b2.next(); !d2.done; c2 = { $jscomp$loop$prop$initData$491$606: c2.$jscomp$loop$prop$initData$491$606 }, d2 = b2.next())
            c2.$jscomp$loop$prop$initData$491$606 = d2.value, a2.some(function(e2) {
              return function(f2) {
                return shaka.util.BufferUtils.equal(f2, e2.$jscomp$loop$prop$initData$491$606);
              };
            }(c2)) || a2.push(c2.$jscomp$loop$prop$initData$491$606);
          return shaka.util.Uint8ArrayUtils.concat.apply(
            shaka.util.Uint8ArrayUtils,
            $jscomp.arrayFromIterable(a2)
          );
        };
        shaka.util.XmlUtils = function() {
        };
        shaka.util.XmlUtils.findChild = function(a2, b2) {
          var c2 = shaka.util.XmlUtils.findChildren(a2, b2);
          return 1 != c2.length ? null : c2[0];
        };
        shaka.util.XmlUtils.findChildNS = function(a2, b2, c2) {
          a2 = shaka.util.XmlUtils.findChildrenNS(a2, b2, c2);
          return 1 != a2.length ? null : a2[0];
        };
        shaka.util.XmlUtils.findChildren = function(a2, b2) {
          for (var c2 = [], d2 = $jscomp.makeIterator(a2.childNodes), e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = e2.value, e2 instanceof Element && e2.tagName == b2 && c2.push(e2);
          return c2;
        };
        shaka.util.XmlUtils.getChildren = function(a2) {
          return Array.from(a2.childNodes).filter(function(b2) {
            return b2 instanceof Element;
          });
        };
        shaka.util.XmlUtils.findChildrenNS = function(a2, b2, c2) {
          var d2 = [];
          a2 = $jscomp.makeIterator(a2.childNodes);
          for (var e2 = a2.next(); !e2.done; e2 = a2.next())
            e2 = e2.value, e2 instanceof Element && e2.localName == c2 && e2.namespaceURI == b2 && d2.push(e2);
          return d2;
        };
        shaka.util.XmlUtils.getAttributeNS = function(a2, b2, c2) {
          return a2.hasAttributeNS(b2, c2) ? a2.getAttributeNS(b2, c2) : null;
        };
        shaka.util.XmlUtils.getAttributeNSList = function(a2, b2, c2) {
          b2 = $jscomp.makeIterator(b2);
          for (var d2 = b2.next(); !d2.done; d2 = b2.next())
            if (d2 = d2.value, a2.hasAttributeNS(d2, c2))
              return a2.getAttributeNS(d2, c2);
          return null;
        };
        shaka.util.XmlUtils.getContents = function(a2) {
          var b2 = shaka.util.XmlUtils;
          return Array.from(a2.childNodes).every(b2.isText) ? a2.textContent.trim() : null;
        };
        shaka.util.XmlUtils.isText = function(a2) {
          return a2.nodeType == Node.TEXT_NODE || a2.nodeType == Node.CDATA_SECTION_NODE;
        };
        shaka.util.XmlUtils.parseAttr = function(a2, b2, c2, d2) {
          d2 = void 0 === d2 ? null : d2;
          var e2 = null;
          a2 = a2.getAttribute(b2);
          null != a2 && (e2 = c2(a2));
          return null == e2 ? d2 : e2;
        };
        shaka.util.XmlUtils.parseDate = function(a2) {
          if (!a2)
            return null;
          /^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/.test(a2) && (a2 += "Z");
          a2 = Date.parse(a2);
          return isNaN(a2) ? null : Math.floor(a2 / 1e3);
        };
        shaka.util.XmlUtils.parseDuration = function(a2) {
          if (!a2)
            return null;
          var b2 = RegExp("^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$").exec(a2);
          if (!b2)
            return shaka.log.warning("Invalid duration string:", a2), null;
          a2 = 31536e3 * Number(b2[1] || null) + 2592e3 * Number(b2[2] || null) + 86400 * Number(b2[3] || null) + 3600 * Number(b2[4] || null) + 60 * Number(b2[5] || null) + Number(b2[6] || null);
          return isFinite(a2) ? a2 : null;
        };
        shaka.util.XmlUtils.parseRange = function(a2) {
          var b2 = /([0-9]+)-([0-9]+)/.exec(a2);
          if (!b2)
            return null;
          a2 = Number(b2[1]);
          if (!isFinite(a2))
            return null;
          b2 = Number(b2[2]);
          return isFinite(b2) ? { start: a2, end: b2 } : null;
        };
        shaka.util.XmlUtils.parseInt = function(a2) {
          a2 = Number(a2);
          return 0 === a2 % 1 ? a2 : null;
        };
        shaka.util.XmlUtils.parsePositiveInt = function(a2) {
          a2 = Number(a2);
          return 0 === a2 % 1 && 0 < a2 ? a2 : null;
        };
        shaka.util.XmlUtils.parseNonNegativeInt = function(a2) {
          a2 = Number(a2);
          return 0 === a2 % 1 && 0 <= a2 ? a2 : null;
        };
        shaka.util.XmlUtils.parseFloat = function(a2) {
          a2 = Number(a2);
          return isNaN(a2) ? null : a2;
        };
        shaka.util.XmlUtils.evalDivision = function(a2) {
          var b2;
          var c2 = (b2 = a2.match(/^(\d+)\/(\d+)$/)) ? Number(b2[1]) / Number(b2[2]) : Number(a2);
          return isNaN(c2) ? null : c2;
        };
        shaka.util.XmlUtils.parseXmlString = function(a2, b2) {
          var c2 = new DOMParser(), d2 = null;
          try {
            d2 = c2.parseFromString(a2, "text/xml");
          } catch (f2) {
            return shaka.log.error("XML parsing exception:", f2), null;
          }
          goog.asserts.assert(d2, "Parsed XML document cannot be null!");
          c2 = d2.documentElement;
          if (!c2)
            return shaka.log.error("XML document was empty!"), null;
          var e2 = c2.getElementsByTagName("parsererror");
          return e2.length ? (shaka.log.error("XML parser error found:", e2[0]), null) : d2.documentElement.tagName != b2 ? (shaka.log.error('XML tag name does not match expected "' + b2 + '":', d2.documentElement.tagName), null) : c2;
        };
        shaka.util.XmlUtils.parseXml = function(a2, b2) {
          try {
            var c2 = shaka.util.StringUtils.fromUTF8(a2);
            return shaka.util.XmlUtils.parseXmlString(c2, b2);
          } catch (d2) {
            return shaka.log.error("parseXmlString threw!", d2), null;
          }
        };
        shaka.dash = {};
        shaka.dash.ContentProtection = function() {
        };
        shaka.dash.ContentProtection.parseFromAdaptationSet = function(a2, b2, c2) {
          var d2 = shaka.dash.ContentProtection, e2 = shaka.util.ManifestParserUtils, f2 = d2.parseElements_(a2), g = null;
          a2 = [];
          var h = [], k2 = new Set(f2.map(function(l) {
            return l.keyId;
          }));
          k2["delete"](null);
          if (1 < k2.size)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_CONFLICTING_KEY_IDS);
          b2 || (h = f2.filter(function(l) {
            return l.schemeUri == d2.MP4Protection_ ? (goog.asserts.assert(
              !l.init || l.init.length,
              "Init data must be null or non-empty."
            ), g = l.init || g, false) : true;
          }), h.length && (a2 = d2.convertElements_(g, h, c2), 0 == a2.length && (a2 = [e2.createDrmInfo("", g)])));
          if (f2.length && (b2 || !h.length))
            for (a2 = [], b2 = $jscomp.makeIterator(Object.values(c2)), c2 = b2.next(); !c2.done; c2 = b2.next())
              c2 = c2.value, "org.w3.clearkey" != c2 && (c2 = e2.createDrmInfo(c2, g), a2.push(c2));
          if (e2 = Array.from(k2)[0] || null)
            for (k2 = $jscomp.makeIterator(a2), b2 = k2.next(); !b2.done; b2 = k2.next())
              for (b2 = $jscomp.makeIterator(b2.value.initData), c2 = b2.next(); !c2.done; c2 = b2.next())
                c2.value.keyId = e2;
          return {
            defaultKeyId: e2,
            defaultInit: g,
            drmInfos: a2,
            firstRepresentation: true
          };
        };
        shaka.dash.ContentProtection.parseFromRepresentation = function(a2, b2, c2, d2) {
          var e2 = shaka.dash.ContentProtection.parseFromAdaptationSet(a2, c2, d2);
          if (b2.firstRepresentation) {
            a2 = 1 == b2.drmInfos.length && !b2.drmInfos[0].keySystem;
            c2 = 0 == e2.drmInfos.length;
            if (0 == b2.drmInfos.length || a2 && !c2)
              b2.drmInfos = e2.drmInfos;
            b2.firstRepresentation = false;
          } else if (0 < e2.drmInfos.length && (b2.drmInfos = b2.drmInfos.filter(function(f2) {
            return e2.drmInfos.some(function(g) {
              return g.keySystem == f2.keySystem;
            });
          }), 0 == b2.drmInfos.length))
            throw new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.MANIFEST,
              shaka.util.Error.Code.DASH_NO_COMMON_KEY_SYSTEM
            );
          return e2.defaultKeyId || b2.defaultKeyId;
        };
        shaka.dash.ContentProtection.getWidevineLicenseUrl = function(a2) {
          return (a2 = shaka.util.XmlUtils.findChildNS(a2.node, "urn:microsoft", "laurl")) ? a2.getAttribute("licenseUrl") || "" : "";
        };
        shaka.dash.ContentProtection.parseMsProRecords_ = function(a2, b2) {
          for (var c2 = []; b2 < a2.byteLength - 1; ) {
            var d2 = a2.getUint16(b2, true);
            b2 += 2;
            var e2 = a2.getUint16(b2, true);
            b2 += 2;
            if (0 != (e2 & 1) || e2 + b2 > a2.byteLength)
              return shaka.log.warning("Malformed MS PRO object"), [];
            var f2 = shaka.util.BufferUtils.toUint8(a2, b2, e2);
            c2.push({ type: d2, value: f2 });
            b2 += e2;
          }
          return c2;
        };
        shaka.dash.ContentProtection.parseMsPro_ = function(a2) {
          var b2 = 0, c2 = shaka.util.BufferUtils.toDataView(a2), d2 = c2.getUint32(b2, true);
          b2 += 4;
          return d2 != a2.byteLength ? (shaka.log.warning("PlayReady Object with invalid length encountered."), []) : shaka.dash.ContentProtection.parseMsProRecords_(c2, b2 + 2);
        };
        shaka.dash.ContentProtection.getLaurl_ = function(a2) {
          a2 = $jscomp.makeIterator(a2.getElementsByTagName("DATA"));
          for (var b2 = a2.next(); !b2.done; b2 = a2.next()) {
            b2 = $jscomp.makeIterator(b2.value.childNodes);
            for (var c2 = b2.next(); !c2.done; c2 = b2.next())
              if (c2 = c2.value, c2 instanceof Element && "LA_URL" == c2.tagName)
                return c2.textContent;
          }
          return "";
        };
        shaka.dash.ContentProtection.getPlayReadyLicenseUrl = function(a2) {
          var b2 = shaka.util.XmlUtils.findChildNS(a2.node, "urn:microsoft:playready", "pro");
          if (!b2)
            return "";
          a2 = shaka.dash.ContentProtection;
          var c2 = a2.PLAYREADY_RECORD_TYPES;
          b2 = shaka.util.Uint8ArrayUtils.fromBase64(b2.textContent);
          b2 = a2.parseMsPro_(b2).filter(function(d2) {
            return d2.type === c2.RIGHTS_MANAGEMENT;
          })[0];
          if (!b2)
            return "";
          b2 = shaka.util.StringUtils.fromUTF16(b2.value, true);
          return (b2 = shaka.util.XmlUtils.parseXmlString(b2, "WRMHEADER")) ? a2.getLaurl_(b2) : "";
        };
        shaka.dash.ContentProtection.getInitDataFromPro_ = function(a2) {
          var b2 = shaka.util.XmlUtils.findChildNS(a2.node, "urn:microsoft:playready", "pro");
          if (!b2)
            return null;
          b2 = shaka.util.Uint8ArrayUtils.fromBase64(b2.textContent);
          var c2 = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]);
          return [{ initData: shaka.util.Pssh.createPssh(b2, c2), initDataType: "cenc", keyId: a2.keyId }];
        };
        shaka.dash.ContentProtection.convertElements_ = function(a2, b2, c2) {
          var d2 = shaka.dash.ContentProtection, e2 = shaka.util.ManifestParserUtils, f2 = d2.licenseUrlParsers_, g = [];
          b2 = $jscomp.makeIterator(b2);
          for (var h = b2.next(); !h.done; h = b2.next()) {
            h = h.value;
            var k2 = c2[h.schemeUri];
            if (k2) {
              goog.asserts.assert(!h.init || h.init.length, "Init data must be null or non-empty.");
              var l = d2.getInitDataFromPro_(h);
              l = e2.createDrmInfo(k2, h.init || a2 || l);
              if (k2 = f2.get(k2))
                l.licenseServerUri = k2(h);
              g.push(l);
            }
          }
          return g;
        };
        shaka.dash.ContentProtection.parseElements_ = function(a2) {
          var b2 = [];
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next())
            (c2 = shaka.dash.ContentProtection.parseElement_(c2.value)) && b2.push(c2);
          return b2;
        };
        shaka.dash.ContentProtection.parseElement_ = function(a2) {
          var b2 = shaka.dash.ContentProtection.CencNamespaceUri_, c2 = a2.getAttribute("schemeIdUri"), d2 = shaka.util.XmlUtils.getAttributeNS(a2, b2, "default_KID");
          b2 = shaka.util.XmlUtils.findChildrenNS(a2, b2, "pssh").map(shaka.util.XmlUtils.getContents);
          if (!c2)
            return shaka.log.error("Missing required schemeIdUri attribute on", "ContentProtection element", a2), null;
          c2 = c2.toLowerCase();
          if (d2 && (d2 = d2.replace(/-/g, "").toLowerCase(), d2.includes(" ")))
            throw new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.MANIFEST,
              shaka.util.Error.Code.DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED
            );
          var e2 = [];
          try {
            e2 = b2.map(function(f2) {
              return { initDataType: "cenc", initData: shaka.util.Uint8ArrayUtils.fromBase64(f2), keyId: null };
            });
          } catch (f2) {
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_PSSH_BAD_ENCODING);
          }
          return { node: a2, schemeUri: c2, keyId: d2, init: 0 < e2.length ? e2 : null };
        };
        shaka.dash.ContentProtection.PLAYREADY_RECORD_TYPES = { RIGHTS_MANAGEMENT: 1, RESERVED: 2, EMBEDDED_LICENSE: 3 };
        shaka.dash.ContentProtection.licenseUrlParsers_ = (/* @__PURE__ */ new Map()).set("com.widevine.alpha", shaka.dash.ContentProtection.getWidevineLicenseUrl).set("com.microsoft.playready", shaka.dash.ContentProtection.getPlayReadyLicenseUrl).set("com.microsoft.playready.recommendation", shaka.dash.ContentProtection.getPlayReadyLicenseUrl).set("com.microsoft.playready.software", shaka.dash.ContentProtection.getPlayReadyLicenseUrl).set("com.microsoft.playready.hardware", shaka.dash.ContentProtection.getPlayReadyLicenseUrl);
        shaka.dash.ContentProtection.MP4Protection_ = "urn:mpeg:dash:mp4protection:2011";
        shaka.dash.ContentProtection.CencNamespaceUri_ = "urn:mpeg:cenc:2013";
        shaka.dash.MpdUtils = function() {
        };
        shaka.dash.MpdUtils.fillUriTemplate = function(a2, b2, c2, d2, e2) {
          var f2 = { RepresentationID: b2, Number: c2, Bandwidth: d2, Time: e2 };
          return a2.replace(/\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)([diouxX]))?\$/g, function(g, h, k2, l) {
            if ("$$" == g)
              return "$";
            var m = f2[h];
            goog.asserts.assert(void 0 !== m, "Unrecognized identifier");
            if (null == m)
              return shaka.log.warning("URL template does not have an available substitution for ", 'identifier "' + h + '":', a2), g;
            "RepresentationID" == h && k2 && (shaka.log.warning(
              "URL template should not contain a width specifier for identifier",
              '"RepresentationID":',
              a2
            ), k2 = void 0);
            "Time" == h && (goog.asserts.assert("number" == typeof m, "Time value should be a number!"), goog.asserts.assert(0.2 > Math.abs(m - Math.round(m)), "Calculated $Time$ values must be close to integers"), m = Math.round(m));
            switch (l) {
              case void 0:
              case "d":
              case "i":
              case "u":
                g = m.toString();
                break;
              case "o":
                g = m.toString(8);
                break;
              case "x":
                g = m.toString(16);
                break;
              case "X":
                g = m.toString(16).toUpperCase();
                break;
              default:
                goog.asserts.assert(false, "Unhandled format specifier"), g = m.toString();
            }
            k2 = window.parseInt(k2, 10) || 1;
            return Array(Math.max(
              0,
              k2 - g.length
            ) + 1).join("0") + g;
          });
        };
        shaka.dash.MpdUtils.createTimeline = function(a2, b2, c2, d2) {
          goog.asserts.assert(0 < b2 && Infinity > b2, "timescale must be a positive, finite integer");
          goog.asserts.assert(0 < d2, "period duration must be a positive integer");
          var e2 = shaka.util.XmlUtils;
          a2 = e2.findChildren(a2, "S");
          for (var f2 = [], g = -c2, h = 0; h < a2.length; ++h) {
            var k2 = a2[h], l = a2[h + 1], m = e2.parseAttr(k2, "t", e2.parseNonNegativeInt), n = e2.parseAttr(k2, "d", e2.parseNonNegativeInt), p = e2.parseAttr(k2, "r", e2.parseInt);
            null != m && (m -= c2);
            if (!n) {
              shaka.log.warning(
                '"S" element must have a duration:',
                'ignoring the remaining "S" elements.',
                k2
              );
              break;
            }
            m = null != m ? m : g;
            p = p || 0;
            if (0 > p)
              if (l) {
                l = e2.parseAttr(l, "t", e2.parseNonNegativeInt);
                if (null == l) {
                  shaka.log.warning('An "S" element cannot have a negative repeat', 'if the next "S" element does not have a valid start time:', 'ignoring the remaining "S" elements.', k2);
                  break;
                } else if (m >= l) {
                  shaka.log.warning('An "S" element cannot have a negative repeatif its start ', `time exceeds the next "S" element's start time:`, 'ignoring the remaining "S" elements.', k2);
                  break;
                }
                p = Math.ceil((l - m) / n) - 1;
              } else {
                if (Infinity == d2) {
                  shaka.log.warning('The last "S" element cannot have a negative repeat', "if the Period has an infinite duration:", 'ignoring the last "S" element.', k2);
                  break;
                } else if (m / b2 >= d2) {
                  shaka.log.warning('The last "S" element cannot have a negative repeat', "if its start time exceeds the Period's duration:", 'igoring the last "S" element.', k2);
                  break;
                }
                p = Math.ceil((d2 * b2 - m) / n) - 1;
              }
            0 < f2.length && m != g && (Math.abs((m - g) / b2) >= shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS && shaka.log.warning(
              "SegmentTimeline contains a large gap/overlap:",
              "the content may have errors in it.",
              k2
            ), f2[f2.length - 1].end = m / b2);
            for (k2 = 0; k2 <= p; ++k2)
              g = m + n, f2.push({ start: m / b2, end: g / b2, unscaledStart: m }), m = g;
          }
          return f2;
        };
        shaka.dash.MpdUtils.parseSegmentInfo = function(a2, b2) {
          goog.asserts.assert(b2(a2.representation), "There must be at least one element of the given type.");
          var c2 = shaka.dash.MpdUtils, d2 = shaka.util.XmlUtils, e2 = c2.inheritAttribute(a2, b2, "timescale"), f2 = 1;
          e2 && (f2 = d2.parsePositiveInt(e2) || 1);
          var g = c2.inheritAttribute(a2, b2, "duration");
          e2 = d2.parsePositiveInt(g || "");
          a2.representation.contentType == shaka.util.ManifestParserUtils.ContentType.IMAGE && (e2 = d2.parseFloat(g || ""));
          e2 && (e2 /= f2);
          var h = c2.inheritAttribute(a2, b2, "startNumber");
          g = Number(c2.inheritAttribute(
            a2,
            b2,
            "presentationTimeOffset"
          )) || 0;
          d2 = d2.parseNonNegativeInt(h || "");
          if (null == h || null == d2)
            d2 = 1;
          h = c2.inheritChild(a2, b2, "SegmentTimeline");
          var k2 = null;
          h && (k2 = c2.createTimeline(h, f2, g, a2.periodInfo.duration || Infinity));
          return { timescale: f2, segmentDuration: e2, startNumber: d2, scaledPresentationTimeOffset: g / f2 || 0, unscaledPresentationTimeOffset: g, timeline: k2 };
        };
        shaka.dash.MpdUtils.inheritAttribute = function(a2, b2, c2) {
          var d2 = shaka.util.Functional;
          goog.asserts.assert(b2(a2.representation), "There must be at least one element of the given type");
          return [b2(a2.representation), b2(a2.adaptationSet), b2(a2.period)].filter(d2.isNotNull).map(function(e2) {
            return e2.getAttribute(c2);
          }).reduce(function(e2, f2) {
            return e2 || f2;
          });
        };
        shaka.dash.MpdUtils.inheritChild = function(a2, b2, c2) {
          var d2 = shaka.util.Functional;
          goog.asserts.assert(b2(a2.representation), "There must be at least one element of the given type");
          a2 = [b2(a2.representation), b2(a2.adaptationSet), b2(a2.period)].filter(d2.isNotNull);
          var e2 = shaka.util.XmlUtils;
          return a2.map(function(f2) {
            return e2.findChild(f2, c2);
          }).reduce(function(f2, g) {
            return f2 || g;
          });
        };
        shaka.dash.MpdUtils.handleXlinkInElement_ = function(a2, b2, c2, d2, e2, f2) {
          var g = shaka.util.XmlUtils, h = shaka.util.Error, k2 = shaka.util.ManifestParserUtils, l = shaka.dash.MpdUtils.XlinkNamespaceUri_, m = g.getAttributeNS(a2, l, "href");
          g = g.getAttributeNS(a2, l, "actuate") || "onRequest";
          for (var n = $jscomp.makeIterator(Array.from(a2.attributes)), p = n.next(); !p.done; p = n.next())
            p = p.value, p.namespaceURI == l && a2.removeAttributeNS(p.namespaceURI, p.localName);
          if (5 <= f2)
            return shaka.util.AbortableOperation.failed(new h(
              h.Severity.CRITICAL,
              h.Category.MANIFEST,
              h.Code.DASH_XLINK_DEPTH_LIMIT
            ));
          if ("onLoad" != g)
            return shaka.util.AbortableOperation.failed(new h(h.Severity.CRITICAL, h.Category.MANIFEST, h.Code.DASH_UNSUPPORTED_XLINK_ACTUATE));
          var q = k2.resolveUris([d2], [m]);
          d2 = shaka.net.NetworkingEngine.RequestType.MANIFEST;
          k2 = shaka.net.NetworkingEngine.makeRequest(q, b2);
          d2 = e2.request(d2, k2);
          goog.asserts.assert(d2 instanceof shaka.util.AbortableOperation, "Unexpected implementation of IAbortableOperation!");
          return d2.chain(function(r) {
            r = shaka.util.XmlUtils.parseXml(
              r.data,
              a2.tagName
            );
            if (!r)
              return shaka.util.AbortableOperation.failed(new h(h.Severity.CRITICAL, h.Category.MANIFEST, h.Code.DASH_INVALID_XML, m));
            for (; a2.childNodes.length; )
              a2.removeChild(a2.childNodes[0]);
            for (; r.childNodes.length; ) {
              var t = r.childNodes[0];
              r.removeChild(t);
              a2.appendChild(t);
            }
            r = $jscomp.makeIterator(Array.from(r.attributes));
            for (t = r.next(); !t.done; t = r.next())
              a2.setAttributeNode(t.value.cloneNode(false));
            return shaka.dash.MpdUtils.processXlinks(a2, b2, c2, q[0], e2, f2 + 1);
          });
        };
        shaka.dash.MpdUtils.processXlinks = function(a2, b2, c2, d2, e2, f2) {
          f2 = void 0 === f2 ? 0 : f2;
          var g = shaka.dash.MpdUtils, h = shaka.util.XmlUtils, k2 = g.XlinkNamespaceUri_;
          if (h.getAttributeNS(a2, k2, "href"))
            return h = g.handleXlinkInElement_(a2, b2, c2, d2, e2, f2), c2 && (h = h.chain(void 0, function(p) {
              return g.processXlinks(a2, b2, c2, d2, e2, f2);
            })), h;
          for (var l = [], m = $jscomp.makeIterator(Array.from(a2.childNodes)), n = m.next(); !n.done; n = m.next())
            n = n.value, n instanceof Element && ("urn:mpeg:dash:resolve-to-zero:2013" == h.getAttributeNS(n, k2, "href") ? a2.removeChild(n) : "SegmentTimeline" != n.tagName && l.push(shaka.dash.MpdUtils.processXlinks(n, b2, c2, d2, e2, f2)));
          return shaka.util.AbortableOperation.all(l).chain(function() {
            return a2;
          });
        };
        shaka.dash.MpdUtils.XlinkNamespaceUri_ = "http://www.w3.org/1999/xlink";
        shaka.media.Mp4SegmentIndexParser = function() {
        };
        shaka.media.Mp4SegmentIndexParser.parse = function(a2, b2, c2, d2, e2, f2, g) {
          var h = shaka.media.Mp4SegmentIndexParser, k2, l = new shaka.util.Mp4Parser().fullBox("sidx", function(m) {
            k2 = h.parseSIDX_(b2, d2, e2, f2, g, c2, m);
          });
          a2 && l.parse(a2);
          if (k2)
            return k2;
          shaka.log.error('Invalid box type, expected "sidx".');
          throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.MP4_SIDX_WRONG_BOX_TYPE);
        };
        shaka.media.Mp4SegmentIndexParser.parseSIDX_ = function(a2, b2, c2, d2, e2, f2, g) {
          goog.asserts.assert(null != g.version, "SIDX is a full box and should have a valid version.");
          var h = [];
          g.reader.skip(4);
          var k2 = g.reader.readUint32();
          if (0 == k2)
            throw shaka.log.error("Invalid timescale."), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.MP4_SIDX_INVALID_TIMESCALE);
          if (0 == g.version) {
            var l = g.reader.readUint32();
            var m = g.reader.readUint32();
          } else
            l = g.reader.readUint64(), m = g.reader.readUint64();
          g.reader.skip(2);
          var n = g.reader.readUint16();
          a2 = a2 + g.size + m;
          for (m = 0; m < n; m++) {
            var p = g.reader.readUint32(), q = (p & 2147483648) >>> 31;
            p &= 2147483647;
            var r = g.reader.readUint32();
            g.reader.skip(4);
            if (1 == q)
              throw shaka.log.error("Heirarchical SIDXs are not supported."), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.MP4_SIDX_TYPE_NOT_SUPPORTED);
            h.push(new shaka.media.SegmentReference(l / k2 + c2, (l + r) / k2 + c2, function() {
              return f2;
            }, a2, a2 + p - 1, b2, c2, d2, e2));
            l += r;
            a2 += p;
          }
          g.parser.stop();
          return h;
        };
        shaka.util.EbmlParser = function(a2) {
          this.dataView_ = shaka.util.BufferUtils.toDataView(a2);
          this.reader_ = new shaka.util.DataViewReader(this.dataView_, shaka.util.DataViewReader.Endianness.BIG_ENDIAN);
        };
        shaka.util.EbmlParser.prototype.hasMoreData = function() {
          return this.reader_.hasMoreData();
        };
        shaka.util.EbmlParser.prototype.parseElement = function() {
          var a2 = this.parseId_(), b2 = this.parseVint_();
          b2 = shaka.util.EbmlParser.isDynamicSizeValue_(b2) ? this.dataView_.byteLength - this.reader_.getPosition() : shaka.util.EbmlParser.getVintValue_(b2);
          b2 = this.reader_.getPosition() + b2 <= this.dataView_.byteLength ? b2 : this.dataView_.byteLength - this.reader_.getPosition();
          var c2 = shaka.util.BufferUtils.toDataView(this.dataView_, this.reader_.getPosition(), b2);
          this.reader_.skip(b2);
          return new shaka.util.EbmlElement(a2, c2);
        };
        shaka.util.EbmlParser.prototype.parseId_ = function() {
          var a2 = this.parseVint_();
          if (7 < a2.length)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.EBML_OVERFLOW);
          var b2 = 0;
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next())
            b2 = 256 * b2 + c2.value;
          return b2;
        };
        shaka.util.EbmlParser.prototype.parseVint_ = function() {
          var a2 = this.reader_.getPosition(), b2 = this.reader_.readUint8();
          if (0 == b2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.EBML_OVERFLOW);
          b2 = 8 - Math.floor(Math.log2(b2));
          goog.asserts.assert(8 >= b2 && 1 <= b2, "Incorrect log2 value");
          this.reader_.skip(b2 - 1);
          return shaka.util.BufferUtils.toUint8(this.dataView_, a2, b2);
        };
        shaka.util.EbmlParser.getVintValue_ = function(a2) {
          if (8 == a2.length && a2[1] & 224)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.JS_INTEGER_OVERFLOW);
          for (var b2 = 0, c2 = 0; c2 < a2.length; c2++) {
            var d2 = a2[c2];
            b2 = 0 == c2 ? d2 & (1 << 8 - a2.length) - 1 : 256 * b2 + d2;
          }
          return b2;
        };
        shaka.util.EbmlParser.isDynamicSizeValue_ = function(a2) {
          for (var b2 = shaka.util.BufferUtils, c2 = $jscomp.makeIterator(shaka.util.EbmlParser.DYNAMIC_SIZES), d2 = c2.next(); !d2.done; d2 = c2.next())
            if (b2.equal(a2, new Uint8Array(d2.value)))
              return true;
          return false;
        };
        shaka.util.EbmlParser.DYNAMIC_SIZES = [[255], [127, 255], [63, 255, 255], [31, 255, 255, 255], [15, 255, 255, 255, 255], [7, 255, 255, 255, 255, 255], [3, 255, 255, 255, 255, 255, 255], [1, 255, 255, 255, 255, 255, 255, 255]];
        shaka.util.EbmlElement = function(a2, b2) {
          this.id = a2;
          this.dataView_ = b2;
        };
        shaka.util.EbmlElement.prototype.getOffset = function() {
          return this.dataView_.byteOffset;
        };
        shaka.util.EbmlElement.prototype.createParser = function() {
          return new shaka.util.EbmlParser(this.dataView_);
        };
        shaka.util.EbmlElement.prototype.getUint = function() {
          if (8 < this.dataView_.byteLength)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.EBML_OVERFLOW);
          if (8 == this.dataView_.byteLength && this.dataView_.getUint8(0) & 224)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.JS_INTEGER_OVERFLOW);
          for (var a2 = 0, b2 = 0; b2 < this.dataView_.byteLength; b2++) {
            var c2 = this.dataView_.getUint8(b2);
            a2 = 256 * a2 + c2;
          }
          return a2;
        };
        shaka.util.EbmlElement.prototype.getFloat = function() {
          if (4 == this.dataView_.byteLength)
            return this.dataView_.getFloat32(0);
          if (8 == this.dataView_.byteLength)
            return this.dataView_.getFloat64(0);
          throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.EBML_BAD_FLOATING_POINT_SIZE);
        };
        shaka.media.WebmSegmentIndexParser = function() {
        };
        shaka.media.WebmSegmentIndexParser.parse = function(a2, b2, c2, d2, e2, f2, g) {
          b2 = shaka.media.WebmSegmentIndexParser.parseWebmContainer_(b2);
          a2 = new shaka.util.EbmlParser(a2).parseElement();
          if (a2.id != shaka.media.WebmSegmentIndexParser.CUES_ID)
            throw shaka.log.error("Not a Cues element."), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.WEBM_CUES_ELEMENT_MISSING);
          return shaka.media.WebmSegmentIndexParser.parseCues_(
            a2,
            b2.segmentOffset,
            b2.timecodeScale,
            b2.duration,
            c2,
            d2,
            e2,
            f2,
            g
          );
        };
        shaka.media.WebmSegmentIndexParser.parseWebmContainer_ = function(a2) {
          a2 = new shaka.util.EbmlParser(a2);
          if (a2.parseElement().id != shaka.media.WebmSegmentIndexParser.EBML_ID)
            throw shaka.log.error("Not an EBML element."), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.WEBM_EBML_HEADER_ELEMENT_MISSING);
          var b2 = a2.parseElement();
          if (b2.id != shaka.media.WebmSegmentIndexParser.SEGMENT_ID)
            throw shaka.log.error("Not a Segment element."), new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.MEDIA,
              shaka.util.Error.Code.WEBM_SEGMENT_ELEMENT_MISSING
            );
          a2 = b2.getOffset();
          b2 = shaka.media.WebmSegmentIndexParser.parseSegment_(b2);
          return { segmentOffset: a2, timecodeScale: b2.timecodeScale, duration: b2.duration };
        };
        shaka.media.WebmSegmentIndexParser.parseSegment_ = function(a2) {
          a2 = a2.createParser();
          for (var b2 = null; a2.hasMoreData(); ) {
            var c2 = a2.parseElement();
            if (c2.id == shaka.media.WebmSegmentIndexParser.INFO_ID) {
              b2 = c2;
              break;
            }
          }
          if (!b2)
            throw shaka.log.error("Not an Info element."), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.WEBM_INFO_ELEMENT_MISSING);
          return shaka.media.WebmSegmentIndexParser.parseInfo_(b2);
        };
        shaka.media.WebmSegmentIndexParser.parseInfo_ = function(a2) {
          var b2 = a2.createParser(), c2 = 1e6;
          for (a2 = null; b2.hasMoreData(); ) {
            var d2 = b2.parseElement();
            d2.id == shaka.media.WebmSegmentIndexParser.TIMECODE_SCALE_ID ? c2 = d2.getUint() : d2.id == shaka.media.WebmSegmentIndexParser.DURATION_ID && (a2 = d2.getFloat());
          }
          if (null == a2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.WEBM_DURATION_ELEMENT_MISSING);
          b2 = c2 / 1e9;
          return { timecodeScale: b2, duration: a2 * b2 };
        };
        shaka.media.WebmSegmentIndexParser.parseCues_ = function(a2, b2, c2, d2, e2, f2, g, h, k2) {
          var l = [], m = function() {
            return e2;
          };
          a2 = a2.createParser();
          for (var n = null, p = null; a2.hasMoreData(); ) {
            var q = a2.parseElement();
            if (q.id == shaka.media.WebmSegmentIndexParser.CUE_POINT_ID) {
              var r = shaka.media.WebmSegmentIndexParser.parseCuePoint_(q);
              r && (q = c2 * r.unscaledTime, r = b2 + r.relativeOffset, null != n && (goog.asserts.assert(null != p, "last offset cannot be null"), l.push(new shaka.media.SegmentReference(n + g, q + g, m, p, r - 1, f2, g, h, k2))), n = q, p = r);
            }
          }
          null != n && (goog.asserts.assert(null != p, "last offset cannot be null"), l.push(new shaka.media.SegmentReference(n + g, d2 + g, m, p, null, f2, g, h, k2)));
          return l;
        };
        shaka.media.WebmSegmentIndexParser.parseCuePoint_ = function(a2) {
          var b2 = a2.createParser();
          a2 = b2.parseElement();
          if (a2.id != shaka.media.WebmSegmentIndexParser.CUE_TIME_ID)
            throw shaka.log.warning("Not a CueTime element."), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.WEBM_CUE_TIME_ELEMENT_MISSING);
          a2 = a2.getUint();
          b2 = b2.parseElement();
          if (b2.id != shaka.media.WebmSegmentIndexParser.CUE_TRACK_POSITIONS_ID)
            throw shaka.log.warning("Not a CueTrackPositions element."), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MEDIA, shaka.util.Error.Code.WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING);
          b2 = b2.createParser();
          for (var c2 = 0; b2.hasMoreData(); ) {
            var d2 = b2.parseElement();
            if (d2.id == shaka.media.WebmSegmentIndexParser.CUE_CLUSTER_POSITION) {
              c2 = d2.getUint();
              break;
            }
          }
          return { unscaledTime: a2, relativeOffset: c2 };
        };
        shaka.media.WebmSegmentIndexParser.EBML_ID = 440786851;
        shaka.media.WebmSegmentIndexParser.SEGMENT_ID = 408125543;
        shaka.media.WebmSegmentIndexParser.INFO_ID = 357149030;
        shaka.media.WebmSegmentIndexParser.TIMECODE_SCALE_ID = 2807729;
        shaka.media.WebmSegmentIndexParser.DURATION_ID = 17545;
        shaka.media.WebmSegmentIndexParser.CUES_ID = 475249515;
        shaka.media.WebmSegmentIndexParser.CUE_POINT_ID = 187;
        shaka.media.WebmSegmentIndexParser.CUE_TIME_ID = 179;
        shaka.media.WebmSegmentIndexParser.CUE_TRACK_POSITIONS_ID = 183;
        shaka.media.WebmSegmentIndexParser.CUE_CLUSTER_POSITION = 241;
        shaka.dash.SegmentBase = function() {
        };
        shaka.dash.SegmentBase.createInitSegment = function(a2, b2) {
          var c2 = shaka.util.XmlUtils, d2 = shaka.util.ManifestParserUtils, e2 = shaka.dash.MpdUtils.inheritChild(a2, b2, "Initialization");
          if (!e2)
            return null;
          var f2 = a2.representation.baseUris, g = e2.getAttribute("sourceURL");
          g && (f2 = d2.resolveUris(a2.representation.baseUris, [g]));
          d2 = 0;
          g = null;
          if (c2 = c2.parseAttr(e2, "range", c2.parseRange))
            d2 = c2.start, g = c2.end;
          c2 = shaka.dash.SegmentBase.createQualityInfo(a2);
          return new shaka.media.InitSegmentReference(function() {
            return f2;
          }, d2, g, c2);
        };
        shaka.dash.SegmentBase.createStreamInfo = function(a2, b2) {
          goog.asserts.assert(a2.representation.segmentBase, "Should only be called with SegmentBase");
          var c2 = shaka.dash.MpdUtils, d2 = shaka.dash.SegmentBase, e2 = shaka.util.XmlUtils, f2 = Number(c2.inheritAttribute(a2, d2.fromInheritance_, "presentationTimeOffset")) || 0;
          c2 = c2.inheritAttribute(a2, d2.fromInheritance_, "timescale");
          var g = 1;
          c2 && (g = e2.parsePositiveInt(c2) || 1);
          var h = f2 / g || 0, k2 = d2.createInitSegment(a2, d2.fromInheritance_);
          d2.checkSegmentIndexRangeSupport_(a2, k2);
          var l = shaka.util.ObjectUtils.shallowCloneObject(a2);
          return { generateSegmentIndex: function() {
            return d2.generateSegmentIndex_(l, b2, k2, h);
          } };
        };
        shaka.dash.SegmentBase.generateSegmentIndexFromUris = function(a2, b2, c2, d2, e2, f2, g) {
          var h, k2, l, m, n, p, q, r, t, u, v, y, w, x, z;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(A) {
            if (1 == A.nextAddress)
              return h = a2.presentationTimeline, k2 = !a2.dynamic || !a2.periodInfo.isLastPeriod, l = a2.periodInfo.start, m = a2.periodInfo.duration, n = a2.representation.mimeType.split("/")[1], p = b2, q = null, r = [p(d2, e2, f2), "webm" == n ? p(c2.getUris(), c2.startByte, c2.endByte) : null], p = null, A.yield(Promise.all(r), 2);
            t = A.yieldResult;
            u = t[0];
            v = t[1] || null;
            y = null;
            w = l - g;
            x = l;
            z = m ? l + m : Infinity;
            "mp4" == n ? y = shaka.media.Mp4SegmentIndexParser.parse(u, e2, d2, c2, w, x, z) : (goog.asserts.assert(v, "WebM requires init data"), y = shaka.media.WebmSegmentIndexParser.parse(u, v, d2, c2, w, x, z));
            h.notifySegments(y);
            goog.asserts.assert(!q, "Should not call generateSegmentIndex twice");
            q = new shaka.media.SegmentIndex(y);
            k2 && q.fit(x, z, true);
            return A["return"](q);
          });
        };
        shaka.dash.SegmentBase.fromInheritance_ = function(a2) {
          return a2.segmentBase;
        };
        shaka.dash.SegmentBase.computeIndexRange_ = function(a2) {
          var b2 = shaka.dash.MpdUtils, c2 = shaka.dash.SegmentBase, d2 = shaka.util.XmlUtils, e2 = b2.inheritChild(a2, c2.fromInheritance_, "RepresentationIndex");
          a2 = b2.inheritAttribute(a2, c2.fromInheritance_, "indexRange");
          a2 = d2.parseRange(a2 || "");
          e2 && (a2 = d2.parseAttr(e2, "range", d2.parseRange, a2));
          return a2;
        };
        shaka.dash.SegmentBase.computeIndexUris_ = function(a2) {
          var b2 = shaka.util.ManifestParserUtils, c2 = shaka.dash.MpdUtils.inheritChild(a2, shaka.dash.SegmentBase.fromInheritance_, "RepresentationIndex"), d2 = a2.representation.baseUris;
          c2 && (c2 = c2.getAttribute("sourceURL")) && (d2 = b2.resolveUris(a2.representation.baseUris, [c2]));
          return d2;
        };
        shaka.dash.SegmentBase.checkSegmentIndexRangeSupport_ = function(a2, b2) {
          var c2 = shaka.dash.SegmentBase;
          c2.checkSegmentIndexSupport(a2, b2);
          if (!c2.computeIndexRange_(a2))
            throw shaka.log.error("SegmentBase does not contain sufficient segment information:", "the SegmentBase does not contain @indexRange", "or a RepresentationIndex element.", a2.representation), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);
        };
        shaka.dash.SegmentBase.checkSegmentIndexSupport = function(a2, b2) {
          var c2 = shaka.util.ManifestParserUtils.ContentType, d2 = a2.representation.contentType, e2 = a2.representation.mimeType.split("/")[1];
          if (d2 != c2.TEXT && "mp4" != e2 && "webm" != e2)
            throw shaka.log.error("SegmentBase specifies an unsupported container type.", a2.representation), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_UNSUPPORTED_CONTAINER);
          if ("webm" == e2 && !b2)
            throw shaka.log.error(
              "SegmentBase does not contain sufficient segment information:",
              "the SegmentBase uses a WebM container,",
              "but does not contain an Initialization element.",
              a2.representation
            ), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_WEBM_MISSING_INIT);
        };
        shaka.dash.SegmentBase.generateSegmentIndex_ = function(a2, b2, c2, d2) {
          var e2 = shaka.dash.SegmentBase, f2 = e2.computeIndexUris_(a2);
          e2 = e2.computeIndexRange_(a2);
          goog.asserts.assert(e2, "Index range should not be null!");
          return shaka.dash.SegmentBase.generateSegmentIndexFromUris(a2, b2, c2, f2, e2.start, e2.end, d2);
        };
        shaka.dash.SegmentBase.createQualityInfo = function(a2) {
          var b2 = a2.representation;
          return { bandwidth: a2.bandwidth, audioSamplingRate: b2.audioSamplingRate, codecs: b2.codecs, contentType: b2.contentType, frameRate: b2.frameRate || null, height: b2.height || null, mimeType: b2.mimeType, channelsCount: b2.numChannels, pixelAspectRatio: b2.pixelAspectRatio || null, width: b2.width || null };
        };
        shaka.dash.SegmentList = function() {
        };
        shaka.dash.SegmentList.createStreamInfo = function(a2, b2) {
          goog.asserts.assert(a2.representation.segmentList, "Should only be called with SegmentList");
          var c2 = shaka.dash.SegmentList, d2 = shaka.dash.SegmentBase.createInitSegment(a2, c2.fromInheritance_), e2 = c2.parseSegmentListInfo_(a2);
          c2.checkSegmentListInfo_(a2, e2);
          var f2 = null, g = null;
          a2.period.id && a2.representation.id && (g = b2[a2.period.id + "," + a2.representation.id]) && (f2 = g.segmentIndex);
          var h = c2.createSegmentReferences_(
            a2.periodInfo.start,
            a2.periodInfo.duration,
            e2.startNumber,
            a2.representation.baseUris,
            e2,
            d2
          );
          c2 = !f2;
          f2 ? (d2 = a2.presentationTimeline.getSegmentAvailabilityStart(), f2.mergeAndEvict(h, d2)) : f2 = new shaka.media.SegmentIndex(h);
          a2.presentationTimeline.notifySegments(h);
          a2.dynamic && a2.periodInfo.isLastPeriod || f2.fit(a2.periodInfo.start, a2.periodInfo.duration ? a2.periodInfo.start + a2.periodInfo.duration : Infinity, c2);
          g && (g.segmentIndex = f2);
          return { generateSegmentIndex: function() {
            f2 && !f2.isEmpty() || f2.merge(h);
            return Promise.resolve(f2);
          } };
        };
        shaka.dash.SegmentList.fromInheritance_ = function(a2) {
          return a2.segmentList;
        };
        shaka.dash.SegmentList.parseSegmentListInfo_ = function(a2) {
          var b2 = shaka.dash.SegmentList, c2 = shaka.dash.MpdUtils, d2 = b2.parseMediaSegments_(a2);
          a2 = c2.parseSegmentInfo(a2, b2.fromInheritance_);
          b2 = a2.startNumber;
          0 == b2 && (shaka.log.warning("SegmentList@startNumber must be > 0"), b2 = 1);
          c2 = 0;
          a2.segmentDuration ? c2 = a2.segmentDuration * (b2 - 1) : a2.timeline && 0 < a2.timeline.length && (c2 = a2.timeline[0].start);
          return {
            segmentDuration: a2.segmentDuration,
            startTime: c2,
            startNumber: b2,
            scaledPresentationTimeOffset: a2.scaledPresentationTimeOffset,
            timeline: a2.timeline,
            mediaSegments: d2
          };
        };
        shaka.dash.SegmentList.checkSegmentListInfo_ = function(a2, b2) {
          if (!b2.segmentDuration && !b2.timeline && 1 < b2.mediaSegments.length)
            throw shaka.log.warning("SegmentList does not contain sufficient segment information:", "the SegmentList specifies multiple segments,", "but does not specify a segment duration or timeline.", a2.representation), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);
          if (!b2.segmentDuration && !a2.periodInfo.duration && !b2.timeline && 1 == b2.mediaSegments.length)
            throw shaka.log.warning("SegmentList does not contain sufficient segment information:", "the SegmentList specifies one segment,", "but does not specify a segment duration, period duration,", "or timeline.", a2.representation), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);
          if (b2.timeline && 0 == b2.timeline.length)
            throw shaka.log.warning(
              "SegmentList does not contain sufficient segment information:",
              "the SegmentList has an empty timeline.",
              a2.representation
            ), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);
        };
        shaka.dash.SegmentList.createSegmentReferences_ = function(a2, b2, c2, d2, e2, f2) {
          c2 = shaka.util.ManifestParserUtils;
          var g = e2.mediaSegments.length;
          e2.timeline && e2.timeline.length != e2.mediaSegments.length && (g = Math.min(e2.timeline.length, e2.mediaSegments.length), shaka.log.warning("The number of items in the segment timeline and the number of ", "segment URLs do not match, truncating", e2.mediaSegments.length, "to", g));
          for (var h = a2 - e2.scaledPresentationTimeOffset, k2 = b2 ? a2 + b2 : Infinity, l = [], m = e2.startTime, n = {}, p = 0; p < g; n = { $jscomp$loop$prop$mediaUri$608: n.$jscomp$loop$prop$mediaUri$608 }, p++) {
            var q = e2.mediaSegments[p];
            n.$jscomp$loop$prop$mediaUri$608 = c2.resolveUris(d2, [q.mediaUri]);
            var r = void 0;
            null != e2.segmentDuration ? r = m + e2.segmentDuration : e2.timeline ? r = e2.timeline[p].end : (goog.asserts.assert(1 == e2.mediaSegments.length && b2, "There should be exactly one segment with a Period duration."), r = m + b2);
            var t = function(u) {
              return function() {
                return u.$jscomp$loop$prop$mediaUri$608;
              };
            }(n);
            l.push(new shaka.media.SegmentReference(a2 + m, a2 + r, t, q.start, q.end, f2, h, a2, k2));
            m = r;
          }
          return l;
        };
        shaka.dash.SegmentList.parseMediaSegments_ = function(a2) {
          var b2 = [a2.representation.segmentList, a2.adaptationSet.segmentList, a2.period.segmentList].filter(shaka.util.Functional.isNotNull), c2 = shaka.util.XmlUtils;
          return b2.map(function(d2) {
            return c2.findChildren(d2, "SegmentURL");
          }).reduce(function(d2, e2) {
            return 0 < d2.length ? d2 : e2;
          }).map(function(d2) {
            d2.getAttribute("indexRange") && !a2.indexRangeWarningGiven && (a2.indexRangeWarningGiven = true, shaka.log.warning("We do not support the SegmentURL@indexRange attribute on SegmentList.  We only use the SegmentList@duration attribute or SegmentTimeline, which must be accurate."));
            var e2 = d2.getAttribute("media");
            d2 = c2.parseAttr(d2, "mediaRange", c2.parseRange, { start: 0, end: null });
            return { mediaUri: e2, start: d2.start, end: d2.end };
          });
        };
        shaka.dash.SegmentTemplate = function() {
        };
        shaka.dash.SegmentTemplate.createStreamInfo = function(a2, b2, c2, d2, e2, f2) {
          goog.asserts.assert(a2.representation.segmentTemplate, "Should only be called with SegmentTemplate");
          var g = shaka.dash.SegmentTemplate, h = g.createInitSegment_(a2), k2 = g.parseSegmentTemplateInfo_(a2);
          g.checkSegmentTemplateInfo_(a2, k2);
          var l = shaka.util.ObjectUtils.shallowCloneObject(a2);
          if (k2.indexTemplate)
            return shaka.dash.SegmentBase.checkSegmentIndexSupport(a2, h), { generateSegmentIndex: function() {
              return g.generateSegmentIndexFromIndexTemplate_(
                l,
                b2,
                h,
                k2
              );
            } };
          if (k2.segmentDuration)
            return d2 || (a2.presentationTimeline.notifyMaxSegmentDuration(k2.segmentDuration), a2.presentationTimeline.notifyMinSegmentStartTime(a2.periodInfo.start)), { generateSegmentIndex: function() {
              return g.generateSegmentIndexFromDuration_(l, k2, e2, h, f2);
            } };
          var m = null;
          d2 = d2 = null;
          a2.period.id && a2.representation.id && (d2 = a2.period.id + "," + a2.representation.id, d2 = c2[d2]) && (m = d2.segmentIndex);
          var n = g.createFromTimeline_(l, k2, h);
          c2 = a2.periodInfo.start;
          var p = a2.periodInfo.duration ? a2.periodInfo.start + a2.periodInfo.duration : Infinity, q = Infinity != p;
          m ? (q && new shaka.media.SegmentIndex(n).fit(c2, p, true), m.mergeAndEvict(n, a2.presentationTimeline.getSegmentAvailabilityStart())) : m = new shaka.media.SegmentIndex(n);
          a2.presentationTimeline.notifySegments(n);
          q && m.fit(c2, p);
          d2 && a2.dynamic && (d2.segmentIndex = m);
          return { generateSegmentIndex: function() {
            m && !m.isEmpty() || m.merge(n);
            return Promise.resolve(m);
          } };
        };
        shaka.dash.SegmentTemplate.fromInheritance_ = function(a2) {
          return a2.segmentTemplate;
        };
        shaka.dash.SegmentTemplate.parseSegmentTemplateInfo_ = function(a2) {
          var b2 = shaka.dash.SegmentTemplate, c2 = shaka.dash.MpdUtils, d2 = c2.parseSegmentInfo(a2, b2.fromInheritance_), e2 = c2.inheritAttribute(a2, b2.fromInheritance_, "media");
          a2 = c2.inheritAttribute(a2, b2.fromInheritance_, "index");
          return {
            segmentDuration: d2.segmentDuration,
            timescale: d2.timescale,
            startNumber: d2.startNumber,
            scaledPresentationTimeOffset: d2.scaledPresentationTimeOffset,
            unscaledPresentationTimeOffset: d2.unscaledPresentationTimeOffset,
            timeline: d2.timeline,
            mediaTemplate: e2,
            indexTemplate: a2
          };
        };
        shaka.dash.SegmentTemplate.checkSegmentTemplateInfo_ = function(a2, b2) {
          var c2 = b2.indexTemplate ? 1 : 0;
          c2 += b2.timeline ? 1 : 0;
          c2 += b2.segmentDuration ? 1 : 0;
          if (0 == c2)
            throw shaka.log.error("SegmentTemplate does not contain any segment information:", "the SegmentTemplate must contain either an index URL template", "a SegmentTimeline, or a segment duration.", a2.representation), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);
          1 != c2 && (shaka.log.warning(
            "SegmentTemplate containes multiple segment information sources:",
            "the SegmentTemplate should only contain an index URL template,",
            "a SegmentTimeline or a segment duration.",
            a2.representation
          ), b2.indexTemplate ? (shaka.log.info("Using the index URL template by default."), b2.timeline = null) : (goog.asserts.assert(b2.timeline, "There should be a timeline"), shaka.log.info("Using the SegmentTimeline by default.")), b2.segmentDuration = null);
          if (!b2.indexTemplate && !b2.mediaTemplate)
            throw shaka.log.error(
              "SegmentTemplate does not contain sufficient segment information:",
              "the SegmentTemplate's media URL template is missing.",
              a2.representation
            ), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);
        };
        shaka.dash.SegmentTemplate.generateSegmentIndexFromIndexTemplate_ = function(a2, b2, c2, d2) {
          var e2 = shaka.dash.MpdUtils, f2 = shaka.util.ManifestParserUtils;
          goog.asserts.assert(d2.indexTemplate, "must be using index template");
          e2 = e2.fillUriTemplate(d2.indexTemplate, a2.representation.id, null, a2.bandwidth || null, null);
          f2 = f2.resolveUris(a2.representation.baseUris, [e2]);
          return shaka.dash.SegmentBase.generateSegmentIndexFromUris(a2, b2, c2, f2, 0, null, d2.scaledPresentationTimeOffset);
        };
        shaka.dash.SegmentTemplate.generateSegmentIndexFromDuration_ = function(a2, b2, c2, d2, e2) {
          goog.asserts.assert(b2.mediaTemplate, "There should be a media template with duration");
          var f2 = shaka.dash.MpdUtils, g = shaka.util.ManifestParserUtils, h = a2.presentationTimeline, k2 = a2.periodInfo.start, l = a2.period.id, m = a2.periodInfo.duration, n = function() {
            var E = null != l && e2[l] || m;
            return E ? k2 + E : Infinity;
          }, p = b2.segmentDuration;
          goog.asserts.assert(null != p, "Segment duration must not be null!");
          var q = b2.startNumber, r = b2.timescale, t = b2.mediaTemplate, u = a2.bandwidth || null, v = a2.representation.id, y = a2.representation.baseUris, w = k2 - b2.scaledPresentationTimeOffset, x = function() {
            var E = [Math.max(h.getSegmentAvailabilityStart(), k2), Math.min(h.getSegmentAvailabilityEnd(), n())];
            goog.asserts.assert(E.every(isFinite), "Available presentation times must be finite!");
            goog.asserts.assert(E.every(function(G) {
              return 0 <= G;
            }), "Available presentation times must be positive!");
            goog.asserts.assert(null != p, "Segment duration must not be null!");
            E = E.map(function(G) {
              return G - k2;
            });
            return [Math.ceil(E[0] / p), Math.ceil(E[1] / p) - 1].map(function(G) {
              return G + q;
            });
          }, z = x();
          a2 = a2.dynamic ? Math.max(z[0], z[1] - c2 + 1) : z[0];
          z = z[1];
          c2 = [];
          for (var A = function(E) {
            goog.asserts.assert(null != p, "Segment duration must not be null!");
            var G = (E - q) * p, J = G + b2.scaledPresentationTimeOffset, H = G + k2;
            G = H + p;
            var I = Math.min(G, n());
            goog.asserts.assert(H < I, "Generated a segment outside of the period!");
            H = new shaka.media.SegmentReference(
              H,
              I,
              function() {
                var K = f2.fillUriTemplate(t, v, E, u, J * r);
                return g.resolveUris(y, [K]);
              },
              0,
              null,
              d2,
              w,
              k2,
              n()
            );
            H.trueEndTime = G;
            return H;
          }, C = a2; C <= z; ++C) {
            var D = A(C);
            c2.push(D);
          }
          var F = new shaka.media.SegmentIndex(c2);
          c2 = h.getSegmentAvailabilityEnd() < n();
          C = h.isLive();
          if (c2 || C) {
            var B = Math.max(a2, z + 1);
            F.updateEvery(p, function() {
              var E = h.getSegmentAvailabilityStart();
              F.evict(E);
              var G = $jscomp.makeIterator(x());
              G.next();
              G = G.next().value;
              for (var J = []; B <= G; ) {
                var H = A(B);
                J.push(H);
                B++;
              }
              return E > n() && !J.length ? null : J;
            });
          }
          return Promise.resolve(F);
        };
        shaka.dash.SegmentTemplate.createFromTimeline_ = function(a2, b2, c2) {
          var d2 = shaka.dash.MpdUtils, e2 = shaka.util.ManifestParserUtils, f2 = a2.periodInfo.start, g = a2.periodInfo.duration, h = f2 - b2.scaledPresentationTimeOffset;
          g = g ? f2 + g : Infinity;
          for (var k2 = [], l = {}, m = 0; m < b2.timeline.length; l = {
            $jscomp$loop$prop$mediaTemplate$610: l.$jscomp$loop$prop$mediaTemplate$610,
            $jscomp$loop$prop$repId$611: l.$jscomp$loop$prop$repId$611,
            $jscomp$loop$prop$segmentReplacement$612: l.$jscomp$loop$prop$segmentReplacement$612,
            $jscomp$loop$prop$bandwidth$613: l.$jscomp$loop$prop$bandwidth$613,
            $jscomp$loop$prop$timeReplacement$614: l.$jscomp$loop$prop$timeReplacement$614,
            $jscomp$loop$prop$baseUris$615: l.$jscomp$loop$prop$baseUris$615
          }, m++) {
            var n = b2.timeline[m], p = n.start, q = n.unscaledStart;
            n = n.end;
            l.$jscomp$loop$prop$segmentReplacement$612 = m + b2.startNumber;
            l.$jscomp$loop$prop$timeReplacement$614 = q + b2.unscaledPresentationTimeOffset;
            l.$jscomp$loop$prop$repId$611 = a2.representation.id;
            l.$jscomp$loop$prop$bandwidth$613 = a2.bandwidth || null;
            l.$jscomp$loop$prop$mediaTemplate$610 = b2.mediaTemplate;
            l.$jscomp$loop$prop$baseUris$615 = a2.representation.baseUris;
            q = function(r) {
              return function() {
                goog.asserts.assert(r.$jscomp$loop$prop$mediaTemplate$610, "There should be a media template with a timeline");
                var t = d2.fillUriTemplate(r.$jscomp$loop$prop$mediaTemplate$610, r.$jscomp$loop$prop$repId$611, r.$jscomp$loop$prop$segmentReplacement$612, r.$jscomp$loop$prop$bandwidth$613 || null, r.$jscomp$loop$prop$timeReplacement$614);
                return e2.resolveUris(r.$jscomp$loop$prop$baseUris$615, [t]).map(function(u) {
                  return u.toString();
                });
              };
            }(l);
            k2.push(new shaka.media.SegmentReference(f2 + p, f2 + n, q, 0, null, c2, h, f2, g));
          }
          return k2;
        };
        shaka.dash.SegmentTemplate.createInitSegment_ = function(a2) {
          var b2 = shaka.dash.MpdUtils, c2 = shaka.util.ManifestParserUtils, d2 = b2.inheritAttribute(a2, shaka.dash.SegmentTemplate.fromInheritance_, "initialization");
          if (!d2)
            return null;
          var e2 = a2.representation.id, f2 = a2.bandwidth || null, g = a2.representation.baseUris;
          a2 = shaka.dash.SegmentBase.createQualityInfo(a2);
          return new shaka.media.InitSegmentReference(function() {
            goog.asserts.assert(d2, "Should have returned earler");
            var h = b2.fillUriTemplate(d2, e2, null, f2, null);
            return c2.resolveUris(
              g,
              [h]
            );
          }, 0, null, a2);
        };
        shaka.util.PeriodCombiner = function() {
          this.variants_ = [];
          this.audioStreams_ = [];
          this.videoStreams_ = [];
          this.textStreams_ = [];
          this.imageStreams_ = [];
          this.usedPeriodIds_ = /* @__PURE__ */ new Set();
        };
        shaka.util.PeriodCombiner.prototype.release = function() {
          var a2 = this.audioStreams_.concat(this.videoStreams_, this.textStreams_, this.imageStreams_);
          a2 = $jscomp.makeIterator(a2);
          for (var b2 = a2.next(); !b2.done; b2 = a2.next())
            b2 = b2.value, b2.segmentIndex && b2.segmentIndex.release();
          this.audioStreams_ = [];
          this.videoStreams_ = [];
          this.textStreams_ = [];
          this.imageStreams_ = [];
          this.variants_ = [];
        };
        shaka.util.PeriodCombiner.prototype.getVariants = function() {
          return this.variants_;
        };
        shaka.util.PeriodCombiner.prototype.getTextStreams = function() {
          return this.textStreams_.slice();
        };
        shaka.util.PeriodCombiner.prototype.getImageStreams = function() {
          return this.imageStreams_;
        };
        shaka.util.PeriodCombiner.prototype.combinePeriods = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y, w, x, z, A, C, D, F, B, E, G, J, H, I, K;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(L) {
            switch (L.nextAddress) {
              case 1:
                d2 = shaka.util.ManifestParserUtils.ContentType;
                shaka.util.PeriodCombiner.filterOutAudioStreamDuplicates_(a2);
                shaka.util.PeriodCombiner.filterOutVideoStreamDuplicates_(a2);
                shaka.util.PeriodCombiner.filterOutTextStreamDuplicates_(a2);
                shaka.util.PeriodCombiner.filterOutImageStreamDuplicates_(a2);
                if (!b2 && 1 == a2.length) {
                  e2 = a2[0];
                  c2.audioStreams_ = e2.audioStreams;
                  c2.videoStreams_ = e2.videoStreams;
                  c2.textStreams_ = e2.textStreams;
                  c2.imageStreams_ = e2.imageStreams;
                  L.jumpTo(2);
                  break;
                }
                f2 = -1;
                for (g = 0; g < a2.length; g++)
                  h = a2[g], c2.usedPeriodIds_.has(h.id) || (c2.usedPeriodIds_.add(h.id), -1 == f2 && (f2 = g));
                if (-1 == f2)
                  return L["return"]();
                k2 = a2.map(function(N) {
                  return N.audioStreams;
                });
                l = a2.map(function(N) {
                  return N.videoStreams;
                });
                m = a2.map(function(N) {
                  return N.textStreams;
                });
                n = a2.map(function(N) {
                  return N.imageStreams;
                });
                p = $jscomp.makeIterator(m);
                for (q = p.next(); !q.done; q = p.next())
                  r = q.value, r.push(shaka.util.PeriodCombiner.dummyStream_(d2.TEXT));
                t = $jscomp.makeIterator(n);
                for (u = t.next(); !u.done; u = t.next())
                  v = u.value, v.push(shaka.util.PeriodCombiner.dummyStream_(d2.IMAGE));
                return L.yield(shaka.util.PeriodCombiner.combine_(c2.audioStreams_, k2, f2, shaka.util.PeriodCombiner.cloneStream_, shaka.util.PeriodCombiner.concatenateStreams_), 3);
              case 3:
                return L.yield(
                  shaka.util.PeriodCombiner.combine_(c2.videoStreams_, l, f2, shaka.util.PeriodCombiner.cloneStream_, shaka.util.PeriodCombiner.concatenateStreams_),
                  4
                );
              case 4:
                return L.yield(shaka.util.PeriodCombiner.combine_(c2.textStreams_, m, f2, shaka.util.PeriodCombiner.cloneStream_, shaka.util.PeriodCombiner.concatenateStreams_), 5);
              case 5:
                return L.yield(shaka.util.PeriodCombiner.combine_(c2.imageStreams_, n, f2, shaka.util.PeriodCombiner.cloneStream_, shaka.util.PeriodCombiner.concatenateStreams_), 2);
              case 2:
                y = 0;
                w = [];
                if (c2.videoStreams_.length && c2.audioStreams_.length)
                  for (F = $jscomp.makeIterator(c2.audioStreams_), B = F.next(); !B.done; B = F.next())
                    for (E = B.value, G = $jscomp.makeIterator(c2.videoStreams_), J = G.next(); !J.done; J = G.next())
                      H = J.value, I = shaka.media.DrmEngine.getCommonDrmInfos(E.drmInfos, H.drmInfos), E.drmInfos.length && H.drmInfos.length && !I.length ? shaka.log.warning("Incompatible DRM in audio & video, skipping variant creation.", E, H) : (K = y++, w.push({ id: K, language: E.language, primary: E.primary, audio: E, video: H, bandwidth: (E.bandwidth || 0) + (H.bandwidth || 0), drmInfos: I, allowedByApplication: true, allowedByKeySystem: true, decodingInfos: [] }));
                else
                  for (x = c2.videoStreams_.concat(c2.audioStreams_), z = $jscomp.makeIterator(x), A = z.next(); !A.done; A = z.next())
                    C = A.value, D = y++, w.push({ id: D, language: C.language, primary: C.primary, audio: C.type == d2.AUDIO ? C : null, video: C.type == d2.VIDEO ? C : null, bandwidth: C.bandwidth || 0, drmInfos: C.drmInfos, allowedByApplication: true, allowedByKeySystem: true, decodingInfos: [] });
                c2.variants_ = w;
                L.jumpToEnd();
            }
          });
        };
        shaka.util.PeriodCombiner.filterOutAudioStreamDuplicates_ = function(a2) {
          var b2 = shaka.util.ArrayUtils;
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next()) {
            c2 = c2.value;
            for (var d2 = [], e2 = $jscomp.makeIterator(c2.audioStreams), f2 = e2.next(); !f2.done; f2 = e2.next()) {
              f2 = f2.value;
              for (var g = false, h = $jscomp.makeIterator(d2), k2 = h.next(); !k2.done; k2 = h.next())
                k2 = k2.value, f2.id != k2.id && f2.channelsCount == k2.channelsCount && f2.language == k2.language && f2.bandwidth == k2.bandwidth && f2.label == k2.label && f2.codecs == k2.codecs && f2.mimeType == k2.mimeType && b2.hasSameElements(f2.roles, k2.roles) && f2.audioSamplingRate == k2.audioSamplingRate && f2.primary == k2.primary && (g = true);
              g || d2.push(f2);
            }
            c2.audioStreams = d2;
          }
        };
        shaka.util.PeriodCombiner.filterOutTextStreamDuplicates_ = function(a2) {
          var b2 = shaka.util.ArrayUtils;
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next()) {
            c2 = c2.value;
            for (var d2 = [], e2 = $jscomp.makeIterator(c2.textStreams), f2 = e2.next(); !f2.done; f2 = e2.next()) {
              f2 = f2.value;
              for (var g = false, h = $jscomp.makeIterator(d2), k2 = h.next(); !k2.done; k2 = h.next())
                k2 = k2.value, f2.id != k2.id && f2.language == k2.language && f2.label == k2.label && f2.codecs == k2.codecs && f2.mimeType == k2.mimeType && f2.bandwidth == k2.bandwidth && b2.hasSameElements(f2.roles, k2.roles) && (g = true);
              g || d2.push(f2);
            }
            c2.textStreams = d2;
          }
        };
        shaka.util.PeriodCombiner.filterOutVideoStreamDuplicates_ = function(a2) {
          var b2 = shaka.util.ArrayUtils, c2 = shaka.util.MapUtils;
          a2 = $jscomp.makeIterator(a2);
          for (var d2 = a2.next(); !d2.done; d2 = a2.next()) {
            d2 = d2.value;
            for (var e2 = [], f2 = $jscomp.makeIterator(d2.videoStreams), g = f2.next(); !g.done; g = f2.next()) {
              g = g.value;
              for (var h = false, k2 = $jscomp.makeIterator(e2), l = k2.next(); !l.done; l = k2.next())
                l = l.value, g.id != l.id && g.width == l.width && g.frameRate == l.frameRate && g.codecs == l.codecs && g.mimeType == l.mimeType && g.label == l.label && b2.hasSameElements(
                  g.roles,
                  l.roles
                ) && c2.hasSameElements(g.closedCaptions, l.closedCaptions) && g.bandwidth == l.bandwidth && (h = true);
              h || e2.push(g);
            }
            d2.videoStreams = e2;
          }
        };
        shaka.util.PeriodCombiner.filterOutImageStreamDuplicates_ = function(a2) {
          a2 = $jscomp.makeIterator(a2);
          for (var b2 = a2.next(); !b2.done; b2 = a2.next()) {
            b2 = b2.value;
            for (var c2 = [], d2 = $jscomp.makeIterator(b2.imageStreams), e2 = d2.next(); !e2.done; e2 = d2.next()) {
              e2 = e2.value;
              for (var f2 = false, g = $jscomp.makeIterator(c2), h = g.next(); !h.done; h = g.next())
                h = h.value, e2.id != h.id && e2.width == h.width && e2.codecs == h.codecs && e2.mimeType == h.mimeType && (f2 = true);
              f2 || c2.push(e2);
            }
            b2.imageStreams = c2;
          }
        };
        shaka.util.PeriodCombiner.combineDbStreams = function(a2) {
          var b2, c2, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y, w, x, z, A, C, D, F, B, E;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(G) {
            switch (G.nextAddress) {
              case 1:
                b2 = shaka.util.ManifestParserUtils.ContentType;
                if (1 == a2.length)
                  return G["return"](a2[0]);
                c2 = a2.map(function(J) {
                  return J.filter(function(H) {
                    return H.type == b2.AUDIO;
                  });
                });
                d2 = a2.map(function(J) {
                  return J.filter(function(H) {
                    return H.type == b2.VIDEO;
                  });
                });
                e2 = a2.map(function(J) {
                  return J.filter(function(H) {
                    return H.type == b2.TEXT;
                  });
                });
                f2 = a2.map(function(J) {
                  return J.filter(function(H) {
                    return H.type == b2.IMAGE;
                  });
                });
                g = $jscomp.makeIterator(e2);
                for (h = g.next(); !h.done; h = g.next())
                  k2 = h.value, k2.push(shaka.util.PeriodCombiner.dummyStreamDB_(b2.TEXT));
                l = $jscomp.makeIterator(f2);
                for (m = l.next(); !m.done; m = l.next())
                  n = m.value, n.push(shaka.util.PeriodCombiner.dummyStreamDB_(b2.IMAGE));
                return G.yield(shaka.util.PeriodCombiner.combine_([], c2, 0, shaka.util.PeriodCombiner.cloneStreamDB_, shaka.util.PeriodCombiner.concatenateStreamDBs_), 2);
              case 2:
                return p = G.yieldResult, G.yield(shaka.util.PeriodCombiner.combine_([], d2, 0, shaka.util.PeriodCombiner.cloneStreamDB_, shaka.util.PeriodCombiner.concatenateStreamDBs_), 3);
              case 3:
                return q = G.yieldResult, G.yield(shaka.util.PeriodCombiner.combine_([], e2, 0, shaka.util.PeriodCombiner.cloneStreamDB_, shaka.util.PeriodCombiner.concatenateStreamDBs_), 4);
              case 4:
                return r = G.yieldResult, G.yield(shaka.util.PeriodCombiner.combine_([], f2, 0, shaka.util.PeriodCombiner.cloneStreamDB_, shaka.util.PeriodCombiner.concatenateStreamDBs_), 5);
              case 5:
                t = G.yieldResult;
                u = 0;
                if (q.length && p.length)
                  for (z = $jscomp.makeIterator(p), A = z.next(); !A.done; A = z.next())
                    for (C = A.value, D = $jscomp.makeIterator(q), F = D.next(); !F.done; F = D.next())
                      B = F.value, E = u++, B.variantIds.push(E), C.variantIds.push(E);
                else
                  for (v = q.concat(p), y = $jscomp.makeIterator(v), w = y.next(); !w.done; w = y.next())
                    x = w.value, x.variantIds = [u++];
                return G["return"](q.concat(p).concat(r).concat(t));
            }
          });
        };
        shaka.util.PeriodCombiner.combine_ = function(a2, b2, c2, d2, e2) {
          var f2, g, h, k2, l, m, n, p, q, r, t, u, v, y, w, x, z, A, C, D, F;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(B) {
            switch (B.nextAddress) {
              case 1:
                f2 = shaka.util.ManifestParserUtils.ContentType;
                g = [];
                for (h = 0; h < b2.length; h++)
                  h >= c2 ? g.push(new Set(b2[h])) : g.push(/* @__PURE__ */ new Set());
                k2 = $jscomp.makeIterator(a2);
                l = k2.next();
              case 2:
                if (l.done) {
                  B.jumpTo(4);
                  break;
                }
                m = l.value;
                return B.yield(shaka.util.PeriodCombiner.extendExistingOutputStream_(m, b2, c2, e2, g), 5);
              case 5:
                n = B.yieldResult;
                if (!n)
                  throw new shaka.util.Error(
                    shaka.util.Error.Severity.CRITICAL,
                    shaka.util.Error.Category.MANIFEST,
                    shaka.util.Error.Code.PERIOD_FLATTENING_FAILED
                  );
                l = k2.next();
                B.jumpTo(2);
                break;
              case 4:
                p = $jscomp.makeIterator(g);
                for (q = p.next(); !q.done; q = p.next())
                  for (r = q.value, t = $jscomp.makeIterator(r), u = t.next(); !u.done; u = t.next())
                    v = u.value, (y = shaka.util.PeriodCombiner.createNewOutputStream_(v, b2, d2, e2, g)) && a2.push(y);
                w = $jscomp.makeIterator(g);
                for (q = w.next(); !q.done; q = w.next())
                  for (x = q.value, z = {}, A = $jscomp.makeIterator(x), u = A.next(); !u.done; z = { $jscomp$loop$prop$stream$498$617: z.$jscomp$loop$prop$stream$498$617 }, u = A.next())
                    if (z.$jscomp$loop$prop$stream$498$617 = u.value, C = z.$jscomp$loop$prop$stream$498$617.type == f2.TEXT && !z.$jscomp$loop$prop$stream$498$617.language, D = z.$jscomp$loop$prop$stream$498$617.type == f2.IMAGE && !z.$jscomp$loop$prop$stream$498$617.tilesLayout, !C && !D && (F = a2.some(function(E) {
                      return function(G) {
                        return G.mimeType == E.$jscomp$loop$prop$stream$498$617.mimeType && shaka.util.MimeUtils.getNormalizedCodec(G.codecs) == shaka.util.MimeUtils.getNormalizedCodec(E.$jscomp$loop$prop$stream$498$617.codecs);
                      };
                    }(z))))
                      throw shaka.log.error(
                        "Unused stream in period-flattening!",
                        z.$jscomp$loop$prop$stream$498$617,
                        a2
                      ), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.PERIOD_FLATTENING_FAILED);
                return B["return"](a2);
            }
          });
        };
        shaka.util.PeriodCombiner.extendExistingOutputStream_ = function(a2, b2, c2, d2, e2) {
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            if (1 == f2.nextAddress)
              return shaka.util.PeriodCombiner.findMatchesInAllPeriods_(b2, a2), goog.asserts.assert(a2.createSegmentIndex, "outputStream should be a Stream type!"), a2.matchedStreams ? a2.segmentIndex ? f2.yield(shaka.util.PeriodCombiner.extendOutputSegmentIndex_(a2, c2), 2) : f2.jumpTo(2) : (shaka.log.error("No matches extending output stream!", a2, b2), f2["return"](false));
            shaka.util.PeriodCombiner.extendOutputStream_(
              a2,
              c2,
              d2,
              e2
            );
            return f2["return"](true);
          });
        };
        shaka.util.PeriodCombiner.extendOutputSegmentIndex_ = function(a2, b2) {
          var c2, d2, e2, f2, g, h, k2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(l) {
            if (1 == l.nextAddress) {
              c2 = [];
              d2 = a2.matchedStreams;
              goog.asserts.assert(d2, "matched streams should be valid");
              e2 = $jscomp.makeIterator(d2);
              for (f2 = e2.next(); !f2.done; f2 = e2.next())
                g = f2.value, c2.push(g.createSegmentIndex()), g.trickModeVideo && !g.trickModeVideo.segmentIndex && c2.push(g.trickModeVideo.createSegmentIndex());
              return l.yield(Promise.all(c2), 2);
            }
            if (a2.segmentIndex instanceof shaka.media.MetaSegmentIndex)
              for (h = 0; h < d2.length; h++)
                k2 = d2[h], k2.segmentIndex && h >= b2 && (goog.asserts.assert(k2.segmentIndex, "stream should have a segmentIndex."), a2.segmentIndex.appendSegmentIndex(k2.segmentIndex));
            l.jumpToEnd();
          });
        };
        shaka.util.PeriodCombiner.createNewOutputStream_ = function(a2, b2, c2, d2, e2) {
          var f2 = c2(a2);
          shaka.util.PeriodCombiner.findMatchesInAllPeriods_(b2, f2);
          f2.createSegmentIndex && (f2.createSegmentIndex = function() {
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(g) {
              if (f2.segmentIndex)
                return g.jumpTo(0);
              f2.segmentIndex = new shaka.media.MetaSegmentIndex();
              return g.yield(shaka.util.PeriodCombiner.extendOutputSegmentIndex_(f2, 0), 0);
            });
          });
          if (!f2.matchedStreams)
            return null;
          shaka.util.PeriodCombiner.extendOutputStream_(
            f2,
            0,
            d2,
            e2
          );
          return f2;
        };
        shaka.util.PeriodCombiner.extendOutputStream_ = function(a2, b2, c2, d2) {
          var e2 = shaka.util.ManifestParserUtils.ContentType, f2 = shaka.util.LanguageUtils, g = a2.matchedStreams;
          goog.asserts.assert(a2.matchedStreams, "matchedStreams should be non-null");
          for (var h = 0; h < g.length; h++)
            if (h >= b2) {
              var k2 = g[h];
              c2(a2, k2);
              var l = true;
              a2.type == e2.AUDIO && 0 == f2.relatedness(a2.language, k2.language) && (l = false);
              l && d2[h]["delete"](k2);
            }
        };
        shaka.util.PeriodCombiner.cloneStream_ = function(a2) {
          var b2 = Object.assign({}, a2);
          b2.originalId = null;
          b2.createSegmentIndex = function() {
            return Promise.resolve();
          };
          b2.closeSegmentIndex = function() {
            b2.segmentIndex && (b2.segmentIndex.release(), b2.segmentIndex = null);
            if (b2.matchedStreams)
              for (var c2 = $jscomp.makeIterator(b2.matchedStreams), d2 = c2.next(); !d2.done; d2 = c2.next())
                d2 = d2.value, d2.segmentIndex && (d2.segmentIndex.release(), d2.segmentIndex = null);
          };
          b2.segmentIndex = null;
          b2.emsgSchemeIdUris = [];
          b2.keyIds = /* @__PURE__ */ new Set();
          b2.closedCaptions = null;
          b2.trickModeVideo = null;
          return b2;
        };
        shaka.util.PeriodCombiner.cloneStreamDB_ = function(a2) {
          a2 = Object.assign({}, a2);
          a2.keyIds = /* @__PURE__ */ new Set();
          a2.segments = [];
          a2.variantIds = [];
          a2.closedCaptions = null;
          return a2;
        };
        shaka.util.PeriodCombiner.concatenateStreams_ = function(a2, b2) {
          a2.roles = Array.from(new Set(a2.roles.concat(b2.roles)));
          b2.emsgSchemeIdUris && (a2.emsgSchemeIdUris = Array.from(new Set(a2.emsgSchemeIdUris.concat(b2.emsgSchemeIdUris))));
          a2.keyIds = function(f2, g) {
            return new Set([].concat($jscomp.arrayFromIterable(f2), $jscomp.arrayFromIterable(g)));
          }(a2.keyIds, b2.keyIds);
          a2.originalId = null == a2.originalId ? b2.originalId : a2.originalId + ("," + (b2.originalId || ""));
          var c2 = shaka.media.DrmEngine.getCommonDrmInfos(a2.drmInfos, b2.drmInfos);
          if (b2.drmInfos.length && a2.drmInfos.length && !c2.length)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.INCONSISTENT_DRM_ACROSS_PERIODS);
          a2.drmInfos = c2;
          a2.encrypted = a2.encrypted || b2.encrypted;
          if (b2.closedCaptions) {
            a2.closedCaptions || (a2.closedCaptions = /* @__PURE__ */ new Map());
            c2 = $jscomp.makeIterator(b2.closedCaptions);
            for (var d2 = c2.next(); !d2.done; d2 = c2.next()) {
              var e2 = $jscomp.makeIterator(d2.value);
              d2 = e2.next().value;
              e2 = e2.next().value;
              a2.closedCaptions.set(d2, e2);
            }
          }
          b2.trickModeVideo ? (a2.trickModeVideo || (a2.trickModeVideo = shaka.util.PeriodCombiner.cloneStream_(b2.trickModeVideo), a2.trickModeVideo.createSegmentIndex = function() {
            goog.asserts.assert(a2.segmentIndex instanceof shaka.media.MetaSegmentIndex, "The stream should have a MetaSegmentIndex.");
            a2.trickModeVideo.segmentIndex = a2.segmentIndex.clone();
            return Promise.resolve();
          }), shaka.util.PeriodCombiner.concatenateStreams_(a2.trickModeVideo, b2.trickModeVideo)) : a2.trickModeVideo && shaka.util.PeriodCombiner.concatenateStreams_(
            a2.trickModeVideo,
            b2
          );
        };
        shaka.util.PeriodCombiner.concatenateStreamDBs_ = function(a2, b2) {
          a2.roles = Array.from(new Set(a2.roles.concat(b2.roles)));
          var c2 = b2.keyIds;
          c2 = new Set([].concat($jscomp.arrayFromIterable(a2.keyIds), $jscomp.arrayFromIterable(c2)));
          a2.keyIds = c2;
          a2.encrypted = a2.encrypted && b2.encrypted;
          a2.segments.push.apply(a2.segments, $jscomp.arrayFromIterable(b2.segments));
          if (b2.closedCaptions) {
            a2.closedCaptions || (a2.closedCaptions = /* @__PURE__ */ new Map());
            c2 = $jscomp.makeIterator(b2.closedCaptions);
            for (var d2 = c2.next(); !d2.done; d2 = c2.next()) {
              var e2 = $jscomp.makeIterator(d2.value);
              d2 = e2.next().value;
              e2 = e2.next().value;
              a2.closedCaptions.set(d2, e2);
            }
          }
        };
        shaka.util.PeriodCombiner.findMatchesInAllPeriods_ = function(a2, b2) {
          for (var c2 = [], d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next()) {
            e2 = shaka.util.PeriodCombiner.findBestMatchInPeriod_(e2.value, b2);
            if (!e2)
              return;
            c2.push(e2);
          }
          b2.matchedStreams = c2;
        };
        shaka.util.PeriodCombiner.findBestMatchInPeriod_ = function(a2, b2) {
          for (var c2 = { audio: shaka.util.PeriodCombiner.areAVStreamsCompatible_, video: shaka.util.PeriodCombiner.areAVStreamsCompatible_, text: shaka.util.PeriodCombiner.areTextStreamsCompatible_, image: shaka.util.PeriodCombiner.areImageStreamsCompatible_ }[b2.type], d2 = { audio: shaka.util.PeriodCombiner.isAudioStreamBetterMatch_, video: shaka.util.PeriodCombiner.isVideoStreamBetterMatch_, text: shaka.util.PeriodCombiner.isTextStreamBetterMatch_, image: shaka.util.PeriodCombiner.isImageStreamBetterMatch_ }[b2.type], e2 = null, f2 = $jscomp.makeIterator(a2), g = f2.next(); !g.done; g = f2.next())
            g = g.value, !c2(b2, g) || e2 && !d2(b2, e2, g) || (e2 = g);
          return e2;
        };
        shaka.util.PeriodCombiner.areAVStreamsCompatible_ = function(a2, b2) {
          return b2.mimeType != a2.mimeType || shaka.util.MimeUtils.getNormalizedCodec(b2.codecs) != shaka.util.MimeUtils.getNormalizedCodec(a2.codecs) || a2.drmInfos && !shaka.media.DrmEngine.areDrmCompatible(a2.drmInfos, b2.drmInfos) ? false : true;
        };
        shaka.util.PeriodCombiner.areTextStreamsCompatible_ = function(a2, b2) {
          return a2.language ? b2.language ? 0 == shaka.util.LanguageUtils.relatedness(a2.language, b2.language) || b2.kind != a2.kind ? false : true : true : false;
        };
        shaka.util.PeriodCombiner.areImageStreamsCompatible_ = function(a2, b2) {
          return a2.tilesLayout ? true : false;
        };
        shaka.util.PeriodCombiner.isAudioStreamBetterMatch_ = function(a2, b2, c2) {
          var d2 = shaka.util.LanguageUtils, e2 = shaka.util.PeriodCombiner.BetterOrWorse, f2 = e2.BETTER;
          e2 = e2.WORSE;
          if (a2.id == c2.id)
            return true;
          var g = d2.relatedness(a2.language, b2.language);
          d2 = d2.relatedness(a2.language, c2.language);
          if (d2 > g)
            return true;
          if (d2 < g)
            return false;
          if (!b2.primary && c2.primary)
            return true;
          if (b2.primary && !c2.primary)
            return false;
          if (a2.roles.length)
            return f2 = b2.roles.filter(function(h) {
              return a2.roles.includes(h);
            }), e2 = c2.roles.filter(function(h) {
              return a2.roles.includes(h);
            }), e2.length > f2.length ? true : e2.length < f2.length ? false : c2.roles.length < b2.roles.length;
          if (!c2.roles.length && b2.roles.length)
            return true;
          if (c2.roles.length && !b2.roles.length)
            return false;
          d2 = shaka.util.PeriodCombiner.compareClosestPreferLower(a2.channelsCount, b2.channelsCount, c2.channelsCount);
          if (d2 == f2)
            return true;
          if (d2 == e2)
            return false;
          d2 = shaka.util.PeriodCombiner.compareClosestPreferLower(a2.audioSamplingRate, b2.audioSamplingRate, c2.audioSamplingRate);
          return d2 == f2 ? true : d2 == e2 ? false : a2.bandwidth && shaka.util.PeriodCombiner.compareClosestPreferMinimalAbsDiff_(
            a2.bandwidth,
            b2.bandwidth,
            c2.bandwidth
          ) == f2 ? true : false;
        };
        shaka.util.PeriodCombiner.isVideoStreamBetterMatch_ = function(a2, b2, c2) {
          var d2 = shaka.util.PeriodCombiner.BetterOrWorse, e2 = d2.BETTER;
          d2 = d2.WORSE;
          if (a2.id == c2.id)
            return true;
          var f2 = shaka.util.PeriodCombiner.compareClosestPreferLower(a2.width * a2.height, b2.width * b2.height, c2.width * c2.height);
          if (f2 == e2)
            return true;
          if (f2 == d2)
            return false;
          if (a2.frameRate) {
            f2 = shaka.util.PeriodCombiner.compareClosestPreferLower(a2.frameRate, b2.frameRate, c2.frameRate);
            if (f2 == e2)
              return true;
            if (f2 == d2)
              return false;
          }
          return a2.bandwidth && shaka.util.PeriodCombiner.compareClosestPreferMinimalAbsDiff_(
            a2.bandwidth,
            b2.bandwidth,
            c2.bandwidth
          ) == e2 ? true : false;
        };
        shaka.util.PeriodCombiner.isTextStreamBetterMatch_ = function(a2, b2, c2) {
          var d2 = shaka.util.LanguageUtils;
          if (a2.id == c2.id)
            return true;
          var e2 = d2.relatedness(a2.language, b2.language);
          d2 = d2.relatedness(a2.language, c2.language);
          if (d2 > e2)
            return true;
          if (d2 < e2)
            return false;
          if (!b2.primary && c2.primary)
            return true;
          if (b2.primary && !c2.primary)
            return false;
          if (a2.roles.length) {
            e2 = b2.roles.filter(function(f2) {
              return a2.roles.includes(f2);
            });
            d2 = c2.roles.filter(function(f2) {
              return a2.roles.includes(f2);
            });
            if (d2.length > e2.length)
              return true;
            if (d2.length < e2.length)
              return false;
          } else {
            if (!c2.roles.length && b2.roles.length)
              return true;
            if (c2.roles.length && !b2.roles.length)
              return false;
          }
          return c2.mimeType != a2.mimeType || c2.codecs != a2.codecs || b2.mimeType == a2.mimeType && b2.codecs == a2.codecs ? false : true;
        };
        shaka.util.PeriodCombiner.isImageStreamBetterMatch_ = function(a2, b2, c2) {
          var d2 = shaka.util.PeriodCombiner.BetterOrWorse.BETTER;
          return a2.id == c2.id ? true : shaka.util.PeriodCombiner.compareClosestPreferLower(a2.width * a2.height, b2.width * b2.height, c2.width * c2.height) == d2 ? true : false;
        };
        shaka.util.PeriodCombiner.dummyStreamDB_ = function(a2) {
          return { id: 0, originalId: "", primary: false, type: a2, mimeType: "", codecs: "", language: "", label: null, width: null, height: null, encrypted: false, keyIds: /* @__PURE__ */ new Set(), segments: [], variantIds: [], roles: [], forced: false, channelsCount: null, audioSamplingRate: null, spatialAudio: false, closedCaptions: null };
        };
        shaka.util.PeriodCombiner.dummyStream_ = function(a2) {
          return { id: 0, originalId: "", createSegmentIndex: function() {
            return Promise.resolve();
          }, segmentIndex: new shaka.media.SegmentIndex([]), mimeType: "", codecs: "", encrypted: false, drmInfos: [], keyIds: /* @__PURE__ */ new Set(), language: "", label: null, type: a2, primary: false, trickModeVideo: null, emsgSchemeIdUris: null, roles: [], forced: false, channelsCount: null, audioSamplingRate: null, spatialAudio: false, closedCaptions: null };
        };
        shaka.util.PeriodCombiner.compareClosestPreferLower = function(a2, b2, c2) {
          var d2 = shaka.util.PeriodCombiner.BetterOrWorse, e2 = d2.BETTER, f2 = d2.WORSE;
          if (b2 == a2 && a2 != c2)
            return f2;
          if (c2 == a2 && a2 != b2)
            return e2;
          if (b2 > a2) {
            if (c2 <= a2 || c2 - a2 < b2 - a2)
              return e2;
            if (c2 - a2 > b2 - a2)
              return f2;
          } else {
            if (c2 > a2)
              return f2;
            if (a2 - c2 < a2 - b2)
              return e2;
            if (a2 - c2 > a2 - b2)
              return f2;
          }
          return d2.EQUAL;
        };
        shaka.util.PeriodCombiner.compareClosestPreferMinimalAbsDiff_ = function(a2, b2, c2) {
          var d2 = shaka.util.PeriodCombiner.BetterOrWorse, e2 = d2.BETTER, f2 = d2.WORSE;
          b2 = Math.abs(a2 - b2);
          a2 = Math.abs(a2 - c2);
          return a2 < b2 ? e2 : b2 < a2 ? f2 : d2.EQUAL;
        };
        shaka.util.PeriodCombiner.BetterOrWorse = { BETTER: 1, EQUAL: 0, WORSE: -1 };
        shaka.dash.DashParser = function() {
          var a2 = this;
          this.playerInterface_ = this.config_ = null;
          this.manifestUris_ = [];
          this.manifest_ = null;
          this.globalId_ = 1;
          this.streamMap_ = {};
          this.periodDurations_ = {};
          this.periodCombiner_ = new shaka.util.PeriodCombiner();
          this.updatePeriod_ = 0;
          this.averageUpdateDuration_ = new shaka.abr.Ewma(5);
          this.updateTimer_ = new shaka.util.Timer(function() {
            a2.onUpdate_();
          });
          this.operationManager_ = new shaka.util.OperationManager();
          this.largestPeriodStartTime_ = null;
          this.lastManifestUpdatePeriodIds_ = [];
          this.minTotalAvailabilityTimeOffset_ = Infinity;
          this.lowLatencyMode_ = false;
        };
        shaka.dash.DashParser.prototype.configure = function(a2) {
          goog.asserts.assert(null != a2.dash, "DashManifestConfiguration should not be null!");
          this.config_ = a2;
        };
        shaka.dash.DashParser.prototype.start = function(a2, b2) {
          var c2 = this, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            if (1 == e2.nextAddress)
              return goog.asserts.assert(c2.config_, "Must call configure() before start()!"), c2.lowLatencyMode_ = b2.isLowLatencyMode(), c2.manifestUris_ = [a2], c2.playerInterface_ = b2, e2.yield(c2.requestManifest_(), 2);
            d2 = e2.yieldResult;
            c2.playerInterface_ && c2.setUpdateTimer_(d2);
            if (!c2.playerInterface_)
              throw new shaka.util.Error(
                shaka.util.Error.Severity.CRITICAL,
                shaka.util.Error.Category.PLAYER,
                shaka.util.Error.Code.OPERATION_ABORTED
              );
            goog.asserts.assert(c2.manifest_, "Manifest should be non-null!");
            return e2["return"](c2.manifest_);
          });
        };
        shaka.dash.DashParser.prototype.stop = function() {
          for (var a2 = $jscomp.makeIterator(Object.values(this.streamMap_)), b2 = a2.next(); !b2.done; b2 = a2.next())
            b2 = b2.value, b2.segmentIndex && b2.segmentIndex.release();
          this.periodCombiner_ && this.periodCombiner_.release();
          this.config_ = this.playerInterface_ = null;
          this.manifestUris_ = [];
          this.manifest_ = null;
          this.streamMap_ = {};
          this.periodCombiner_ = null;
          null != this.updateTimer_ && (this.updateTimer_.stop(), this.updateTimer_ = null);
          return this.operationManager_.destroy();
        };
        shaka.dash.DashParser.prototype.update = function() {
          var a2 = this, b2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (1 == c2.nextAddress)
              return c2.setCatchFinallyBlocks(2), c2.yield(a2.requestManifest_(), 4);
            if (2 != c2.nextAddress)
              return c2.leaveTryBlock(0);
            b2 = c2.enterCatchBlock();
            if (!a2.playerInterface_ || !b2)
              return c2["return"]();
            goog.asserts.assert(b2 instanceof shaka.util.Error, "Bad error type");
            a2.playerInterface_.onError(b2);
            c2.jumpToEnd();
          });
        };
        shaka.dash.DashParser.prototype.onExpirationUpdated = function(a2, b2) {
        };
        shaka.dash.DashParser.prototype.requestManifest_ = function() {
          var a2 = this, b2, c2, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            if (1 == m.nextAddress)
              return b2 = shaka.net.NetworkingEngine.RequestType.MANIFEST, c2 = shaka.net.NetworkingEngine.makeRequest(a2.manifestUris_, a2.config_.retryParameters), d2 = a2.playerInterface_.networkingEngine, e2 = shaka.util.CmcdManager.StreamingFormat.DASH, a2.playerInterface_.modifyManifestRequest(c2, { format: e2 }), f2 = Date.now(), g = d2.request(b2, c2), a2.operationManager_.manage(g), m.yield(g.promise, 2);
            if (3 != m.nextAddress) {
              h = m.yieldResult;
              if (!a2.playerInterface_)
                return m["return"](0);
              h.uri && !a2.manifestUris_.includes(h.uri) && a2.manifestUris_.unshift(h.uri);
              return m.yield(a2.parseManifest_(h.data, h.uri), 3);
            }
            k2 = Date.now();
            l = (k2 - f2) / 1e3;
            a2.averageUpdateDuration_.sample(1, l);
            return m["return"](l);
          });
        };
        shaka.dash.DashParser.prototype.parseManifest_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            if (1 == m.nextAddress) {
              d2 = shaka.util.Error;
              e2 = shaka.dash.MpdUtils;
              f2 = shaka.util.XmlUtils.parseXml(a2, "MPD");
              if (!f2)
                throw new d2(d2.Severity.CRITICAL, d2.Category.MANIFEST, d2.Code.DASH_INVALID_XML, b2);
              if (g = c2.config_.dash.disableXlinkProcessing)
                return m["return"](c2.processManifest_(f2, b2));
              h = c2.config_.dash.xlinkFailGracefully;
              k2 = e2.processXlinks(
                f2,
                c2.config_.retryParameters,
                h,
                b2,
                c2.playerInterface_.networkingEngine
              );
              c2.operationManager_.manage(k2);
              return m.yield(k2.promise, 2);
            }
            l = m.yieldResult;
            return m["return"](c2.processManifest_(l, b2));
          });
        };
        shaka.dash.DashParser.prototype.processManifest_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y, w, x, z, A, C, D, F, B, E, G, J, H, I, K, L, N, M, R, S;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(P) {
            switch (P.nextAddress) {
              case 1:
                d2 = shaka.util.Functional;
                e2 = shaka.util.XmlUtils;
                (f2 = c2.config_.dash.manifestPreprocessor) && f2(a2);
                g = [b2];
                h = e2.findChildren(a2, "Location").map(e2.getContents).filter(d2.isNotNull);
                0 < h.length && (k2 = shaka.util.ManifestParserUtils.resolveUris(g, h), g = c2.manifestUris_ = k2);
                l = e2.findChildren(
                  a2,
                  "BaseURL"
                );
                m = l.map(e2.getContents);
                n = shaka.util.ManifestParserUtils.resolveUris(g, m);
                p = 0;
                l && l.length && (p = e2.parseAttr(l[0], "availabilityTimeOffset", e2.parseFloat) || 0);
                q = c2.config_.dash.ignoreMinBufferTime;
                r = 0;
                q || (r = e2.parseAttr(a2, "minBufferTime", e2.parseDuration) || 0);
                c2.updatePeriod_ = e2.parseAttr(a2, "minimumUpdatePeriod", e2.parseDuration, -1);
                t = e2.parseAttr(a2, "availabilityStartTime", e2.parseDate);
                u = e2.parseAttr(a2, "timeShiftBufferDepth", e2.parseDuration);
                v = c2.config_.dash.ignoreSuggestedPresentationDelay;
                y = null;
                v || (y = e2.parseAttr(a2, "suggestedPresentationDelay", e2.parseDuration));
                w = c2.config_.dash.ignoreMaxSegmentDuration;
                x = null;
                w || (x = e2.parseAttr(a2, "maxSegmentDuration", e2.parseDuration));
                z = a2.getAttribute("type") || "static";
                if (c2.manifest_)
                  for (A = c2.manifest_.presentationTimeline, C = $jscomp.makeIterator(Object.values(c2.streamMap_)), D = C.next(); !D.done; D = C.next())
                    F = D.value, F.segmentIndex && F.segmentIndex.evict(A.getSegmentAvailabilityStart());
                else
                  B = c2.config_.defaultPresentationDelay || 1.5 * r, E = null != y ? y : B, A = new shaka.media.PresentationTimeline(
                    t,
                    E,
                    c2.config_.dash.autoCorrectDrift
                  );
                A.setStatic("static" == z);
                (G = A.isLive()) && !isNaN(c2.config_.availabilityWindowOverride) && (u = c2.config_.availabilityWindowOverride);
                null == u && (u = Infinity);
                A.setSegmentAvailabilityDuration(u);
                J = a2.getAttribute("profiles") || "";
                H = { dynamic: "static" != z, presentationTimeline: A, period: null, periodInfo: null, adaptationSet: null, representation: null, bandwidth: 0, indexRangeWarningGiven: false, availabilityTimeOffset: p, profiles: J.split(",") };
                I = c2.parsePeriods_(H, n, a2);
                K = I.duration;
                L = I.periods;
                "static" != z && I.durationDerivedFromPeriods || A.setDuration(K || Infinity);
                c2.minTotalAvailabilityTimeOffset_ && !c2.lowLatencyMode_ && (N = c2.playerInterface_.isAutoLowLatencyMode()) && (c2.playerInterface_.enableLowLatencyMode(), c2.lowLatencyMode_ = c2.playerInterface_.isLowLatencyMode());
                c2.lowLatencyMode_ ? A.setAvailabilityTimeOffset(c2.minTotalAvailabilityTimeOffset_) : c2.minTotalAvailabilityTimeOffset_ && shaka.log.alwaysWarn("Low-latency DASH live stream detected, but low-latency streaming mode is not enabled in Shaka Player. Set streaming.lowLatencyMode configuration to true, and see https://bit.ly/3clctcj for details.");
                A.notifyMaxSegmentDuration(x || 1);
                goog.DEBUG && A.assertIsValid();
                return P.yield(c2.periodCombiner_.combinePeriods(L, H.dynamic), 2);
              case 2:
                if (c2.manifest_) {
                  c2.manifest_.variants = c2.periodCombiner_.getVariants();
                  c2.manifest_.textStreams = c2.periodCombiner_.getTextStreams();
                  c2.manifest_.imageStreams = c2.periodCombiner_.getImageStreams();
                  c2.playerInterface_.filter(c2.manifest_);
                  P.jumpTo(3);
                  break;
                }
                c2.manifest_ = {
                  presentationTimeline: A,
                  variants: c2.periodCombiner_.getVariants(),
                  textStreams: c2.periodCombiner_.getTextStreams(),
                  imageStreams: c2.periodCombiner_.getImageStreams(),
                  offlineSessionIds: [],
                  minBufferTime: r || 0
                };
                if (!A.usingPresentationStartTime()) {
                  P.jumpTo(4);
                  break;
                }
                M = shaka.util.XmlUtils;
                R = M.findChildren(a2, "UTCTiming");
                return P.yield(c2.parseUtcTiming_(n, R), 5);
              case 5:
                S = P.yieldResult;
                if (!c2.playerInterface_)
                  return P["return"]();
                A.setClockOffset(S);
              case 4:
                A.lockStartTime();
              case 3:
                c2.playerInterface_.makeTextStreamsForClosedCaptions(c2.manifest_), P.jumpToEnd();
            }
          });
        };
        shaka.dash.DashParser.prototype.parsePeriods_ = function(a2, b2, c2) {
          var d2 = shaka.util.XmlUtils, e2 = d2.parseAttr(c2, "mediaPresentationDuration", d2.parseDuration), f2 = [], g = 0;
          c2 = d2.findChildren(c2, "Period");
          for (var h = 0; h < c2.length; h++) {
            var k2 = c2[h], l = c2[h + 1], m = d2.parseAttr(k2, "start", d2.parseDuration, g), n = k2.id, p = d2.parseAttr(k2, "duration", d2.parseDuration), q = null;
            if (l) {
              var r = d2.parseAttr(l, "start", d2.parseDuration);
              null != r && (q = r - m);
            } else
              null != e2 && (q = e2 - m);
            r = shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS;
            q && p && Math.abs(q - p) > r && shaka.log.warning("There is a gap/overlap between Periods", k2);
            null == q && (q = p);
            if (null !== this.largestPeriodStartTime_ && null !== n && null !== m && m < this.largestPeriodStartTime_ && !this.lastManifestUpdatePeriodIds_.includes(n) && h + 1 != c2.length)
              shaka.log.debug("Skipping Period with ID " + n + " as its start time is smaller than the largest period start time that has been seen, and ID is unseen before");
            else {
              null !== m && (null === this.largestPeriodStartTime_ || m > this.largestPeriodStartTime_) && (this.largestPeriodStartTime_ = m);
              g = this.parsePeriod_(a2, b2, { start: m, duration: q, node: k2, isLastPeriod: null == q || !l });
              f2.push(g);
              a2.period.id && q && (this.periodDurations_[a2.period.id] = q);
              if (null == q) {
                l && shaka.log.warning("Skipping Period", h + 1, "and any subsequent Periods:", "Period", h + 1, "does not have a valid start time.", l);
                g = null;
                break;
              }
              g = m + q;
            }
          }
          this.lastManifestUpdatePeriodIds_ = f2.map(function(t) {
            return t.id;
          });
          return null != e2 ? (g != e2 && shaka.log.warning("@mediaPresentationDuration does not match the total duration of ", "all Periods."), {
            periods: f2,
            duration: e2,
            durationDerivedFromPeriods: false
          }) : { periods: f2, duration: g, durationDerivedFromPeriods: true };
        };
        shaka.dash.DashParser.prototype.parsePeriod_ = function(a2, b2, c2) {
          var d2 = this, e2 = shaka.util.Functional, f2 = shaka.util.XmlUtils, g = shaka.util.ManifestParserUtils.ContentType;
          a2.period = this.createFrame_(c2.node, null, b2);
          a2.periodInfo = c2;
          a2.period.availabilityTimeOffset = a2.availabilityTimeOffset;
          a2.period.id || (shaka.log.info("No Period ID given for Period with start time " + c2.start + ",  Assigning a default"), a2.period.id = "__shaka_period_" + c2.start);
          var h = f2.findChildren(c2.node, "EventStream");
          b2 = a2.presentationTimeline.getSegmentAvailabilityStart();
          h = $jscomp.makeIterator(h);
          for (var k2 = h.next(); !k2.done; k2 = h.next())
            this.parseEventStream_(c2.start, c2.duration, k2.value, b2);
          e2 = f2.findChildren(c2.node, "AdaptationSet").map(function(n) {
            return d2.parseAdaptationSet_(a2, n);
          }).filter(e2.isNotNull);
          if (a2.dynamic) {
            c2 = [];
            f2 = $jscomp.makeIterator(e2);
            for (b2 = f2.next(); !b2.done; b2 = f2.next())
              for (b2 = $jscomp.makeIterator(b2.value.representationIds), h = b2.next(); !h.done; h = b2.next())
                c2.push(h.value);
            f2 = new Set(c2);
            if (c2.length != f2.size)
              throw new shaka.util.Error(
                shaka.util.Error.Severity.CRITICAL,
                shaka.util.Error.Category.MANIFEST,
                shaka.util.Error.Code.DASH_DUPLICATE_REPRESENTATION_ID
              );
          }
          c2 = e2.filter(function(n) {
            return !n.trickModeFor;
          });
          e2 = e2.filter(function(n) {
            return n.trickModeFor;
          });
          e2 = $jscomp.makeIterator(e2);
          for (f2 = e2.next(); !f2.done; f2 = e2.next())
            for (f2 = f2.value, b2 = f2.trickModeFor.split(" "), h = $jscomp.makeIterator(c2), k2 = h.next(); !k2.done; k2 = h.next()) {
              var l = k2.value;
              if (b2.includes(l.id)) {
                k2 = {};
                l = $jscomp.makeIterator(l.streams);
                for (var m = l.next(); !m.done; k2 = { $jscomp$loop$prop$stream$619: k2.$jscomp$loop$prop$stream$619 }, m = l.next())
                  k2.$jscomp$loop$prop$stream$619 = m.value, k2.$jscomp$loop$prop$stream$619.trickModeVideo = f2.streams.find(function(n) {
                    return function(p) {
                      return shaka.util.MimeUtils.getNormalizedCodec(n.$jscomp$loop$prop$stream$619.codecs) == shaka.util.MimeUtils.getNormalizedCodec(p.codecs);
                    };
                  }(k2));
              }
            }
          f2 = this.config_.disableAudio ? [] : this.getSetsOfType_(c2, g.AUDIO);
          b2 = this.config_.disableVideo ? [] : this.getSetsOfType_(c2, g.VIDEO);
          e2 = this.config_.disableText ? [] : this.getSetsOfType_(c2, g.TEXT);
          c2 = this.config_.disableThumbnails ? [] : this.getSetsOfType_(c2, g.IMAGE);
          if (!b2.length && !f2.length)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_EMPTY_PERIOD);
          g = [];
          f2 = $jscomp.makeIterator(f2);
          for (h = f2.next(); !h.done; h = f2.next())
            g.push.apply(g, $jscomp.arrayFromIterable(h.value.streams));
          f2 = [];
          b2 = $jscomp.makeIterator(b2);
          for (h = b2.next(); !h.done; h = b2.next())
            f2.push.apply(f2, $jscomp.arrayFromIterable(h.value.streams));
          b2 = [];
          e2 = $jscomp.makeIterator(e2);
          for (h = e2.next(); !h.done; h = e2.next())
            b2.push.apply(
              b2,
              $jscomp.arrayFromIterable(h.value.streams)
            );
          e2 = [];
          c2 = $jscomp.makeIterator(c2);
          for (h = c2.next(); !h.done; h = c2.next())
            e2.push.apply(e2, $jscomp.arrayFromIterable(h.value.streams));
          return { id: a2.period.id, audioStreams: g, videoStreams: f2, textStreams: b2, imageStreams: e2 };
        };
        shaka.dash.DashParser.prototype.getSetsOfType_ = function(a2, b2) {
          return a2.filter(function(c2) {
            return c2.contentType == b2;
          });
        };
        shaka.dash.DashParser.prototype.parseAdaptationSet_ = function(a2, b2) {
          var c2 = this, d2 = shaka.util.XmlUtils, e2 = shaka.util.Functional, f2 = shaka.util.ManifestParserUtils, g = f2.ContentType, h = shaka.dash.ContentProtection;
          a2.adaptationSet = this.createFrame_(b2, a2.period, null);
          var k2 = false, l = d2.findChildren(b2, "Role"), m = l.map(function(B) {
            return B.getAttribute("value");
          }).filter(e2.isNotNull), n = void 0;
          if (e2 = a2.adaptationSet.contentType == g.TEXT)
            n = f2.TextStreamKind.SUBTITLE;
          l = $jscomp.makeIterator(l);
          for (var p = l.next(); !p.done; p = l.next()) {
            p = p.value;
            var q = p.getAttribute("schemeIdUri");
            if (null == q || "urn:mpeg:dash:role:2011" == q)
              switch (p = p.getAttribute("value"), p) {
                case "main":
                  k2 = true;
                  break;
                case "caption":
                case "subtitle":
                  n = p;
              }
          }
          var r;
          q = function(B) {
            switch (B) {
              case 1:
              case 6:
              case 13:
              case 14:
              case 15:
                return "SDR";
              case 16:
                return "PQ";
              case 18:
                return "HLG";
            }
          };
          var t = d2.findChildren(b2, "EssentialProperty");
          l = null;
          p = false;
          t = $jscomp.makeIterator(t);
          for (var u = t.next(); !u.done; u = t.next()) {
            u = u.value;
            var v = u.getAttribute("schemeIdUri");
            "http://dashif.org/guidelines/trickmode" == v ? l = u.getAttribute("value") : "urn:mpeg:mpegB:cicp:TransferCharacteristics" == v ? r = q(parseInt(u.getAttribute("value"), 10)) : p = true;
          }
          t = d2.findChildren(b2, "SupplementalProperty");
          t = $jscomp.makeIterator(t);
          for (u = t.next(); !u.done; u = t.next())
            u = u.value, "urn:mpeg:mpegB:cicp:TransferCharacteristics" == u.getAttribute("schemeIdUri") && (r = q(parseInt(u.getAttribute("value"), 10)));
          t = d2.findChildren(b2, "Accessibility");
          q = shaka.util.LanguageUtils;
          var y = /* @__PURE__ */ new Map();
          t = $jscomp.makeIterator(t);
          for (u = t.next(); !u.done; u = t.next())
            if (v = u.value, u = v.getAttribute("schemeIdUri"), v = v.getAttribute("value"), "urn:scte:dash:cc:cea-608:2015" == u)
              if (u = 1, null != v) {
                v = v.split(";");
                for (var w = $jscomp.makeIterator(v), x = w.next(); !x.done; x = w.next()) {
                  var z = x.value, A = x = void 0;
                  z.includes("=") ? (z = z.split("="), x = z[0].startsWith("CC") ? z[0] : "CC" + z[0], A = z[1] || "und") : (x = "CC" + u, 2 == v.length ? u += 2 : u++, A = z);
                  y.set(x, q.normalize(A));
                }
              } else
                y.set("CC1", "und");
            else if ("urn:scte:dash:cc:cea-708:2015" == u)
              if (u = 1, null != v)
                for (v = $jscomp.makeIterator(v.split(";")), x = v.next(); !x.done; x = v.next())
                  x = x.value, z = w = void 0, x.includes("=") ? (x = x.split("="), w = "svc" + x[0], z = x[1].split(",")[0].split(":").pop()) : (w = "svc" + u, u++, z = x), y.set(w, q.normalize(z));
              else
                y.set("svc1", "und");
            else
              "urn:mpeg:dash:role:2011" == u && null != v && (m.push(v), "captions" == v && (n = f2.TextStreamKind.CLOSED_CAPTION));
          if (p)
            return null;
          f2 = d2.findChildren(b2, "ContentProtection");
          var C = h.parseFromAdaptationSet(f2, this.config_.dash.ignoreDrmInfo, this.config_.dash.keySystemsByURI), D = shaka.util.LanguageUtils.normalize(b2.getAttribute("lang") || "und"), F = b2.getAttribute("label");
          (h = d2.findChildren(b2, "Label")) && h.length && (h = h[0], h.textContent && (F = h.textContent));
          h = d2.findChildren(b2, "Representation");
          d2 = h.map(function(B) {
            if (B = c2.parseRepresentation_(a2, C, n, D, F, k2, m, y, B))
              B.hdr = B.hdr || r;
            return B;
          }).filter(function(B) {
            return !!B;
          });
          if (0 == d2.length) {
            l = a2.adaptationSet.contentType == g.IMAGE;
            if (this.config_.dash.ignoreEmptyAdaptationSet || e2 || l)
              return null;
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.DASH_EMPTY_ADAPTATION_SET);
          }
          if (!a2.adaptationSet.contentType || a2.adaptationSet.contentType == g.APPLICATION)
            for (a2.adaptationSet.contentType = shaka.dash.DashParser.guessContentType_(d2[0].mimeType, d2[0].codecs), g = $jscomp.makeIterator(d2), e2 = g.next(); !e2.done; e2 = g.next())
              e2.value.type = a2.adaptationSet.contentType;
          g = $jscomp.makeIterator(d2);
          for (e2 = g.next(); !e2.done; e2 = g.next())
            for (e2 = e2.value, f2 = $jscomp.makeIterator(C.drmInfos), p = f2.next(); !p.done; p = f2.next())
              p = p.value, p.keyIds = p.keyIds && e2.keyIds ? new Set([].concat(
                $jscomp.arrayFromIterable(p.keyIds),
                $jscomp.arrayFromIterable(e2.keyIds)
              )) : p.keyIds || e2.keyIds;
          g = h.map(function(B) {
            return B.getAttribute("id");
          }).filter(shaka.util.Functional.isNotNull);
          return { id: a2.adaptationSet.id || "__fake__" + this.globalId_++, contentType: a2.adaptationSet.contentType, language: D, main: k2, streams: d2, drmInfos: C.drmInfos, trickModeFor: l, representationIds: g };
        };
        shaka.dash.DashParser.prototype.parseRepresentation_ = function(a2, b2, c2, d2, e2, f2, g, h, k2) {
          var l = this, m = shaka.util.XmlUtils, n = shaka.util.ManifestParserUtils.ContentType;
          a2.representation = this.createFrame_(k2, a2.adaptationSet, null);
          this.minTotalAvailabilityTimeOffset_ = Math.min(this.minTotalAvailabilityTimeOffset_, a2.representation.availabilityTimeOffset);
          if (!this.verifyRepresentation_(a2.representation))
            return shaka.log.warning("Skipping Representation", a2.representation), null;
          var p = a2.periodInfo.start;
          a2.bandwidth = m.parseAttr(k2, "bandwidth", m.parsePositiveInt) || 0;
          var q = a2.representation.contentType, r = q == n.TEXT || q == n.APPLICATION;
          n = q == n.IMAGE;
          try {
            if (q = function(D, F, B) {
              return l.requestInitSegment_(D, F, B);
            }, a2.representation.segmentBase)
              var t = shaka.dash.SegmentBase.createStreamInfo(a2, q);
            else if (a2.representation.segmentList)
              t = shaka.dash.SegmentList.createStreamInfo(a2, this.streamMap_);
            else if (a2.representation.segmentTemplate)
              t = shaka.dash.SegmentTemplate.createStreamInfo(
                a2,
                q,
                this.streamMap_,
                !!this.manifest_,
                this.config_.dash.initialSegmentLimit,
                this.periodDurations_
              );
            else {
              goog.asserts.assert(r, "Must have Segment* with non-text streams.");
              var u = a2.representation.baseUris, v = a2.periodInfo.duration || 0;
              t = { generateSegmentIndex: function() {
                return Promise.resolve(shaka.media.SegmentIndex.forSingleSegment(p, v, u));
              } };
            }
          } catch (D) {
            if ((r || n) && D.code == shaka.util.Error.Code.DASH_NO_SEGMENT_INFO)
              return null;
            throw D;
          }
          q = m.findChildren(k2, "ContentProtection");
          q = shaka.dash.ContentProtection.parseFromRepresentation(q, b2, this.config_.dash.ignoreDrmInfo, this.config_.dash.keySystemsByURI);
          q = new Set(q ? [q] : []);
          var y = false;
          m.findChildren(k2, "SupplementalProperty").some(function(D) {
            return "tag:dolby.com,2018:dash:EC3_ExtensionType:2018" == D.getAttribute("schemeIdUri") && "JOC" == D.getAttribute("value");
          }) && (y = true);
          var w = false;
          r && (w = g.includes("forced_subtitle") || g.includes("forced-subtitle"));
          var x;
          if (n && ((k2 = m.findChildren(k2, "EssentialProperty").find(function(D) {
            return ["http://dashif.org/thumbnail_tile", "http://dashif.org/guidelines/thumbnail_tile"].includes(D.getAttribute("schemeIdUri"));
          })) && (x = k2.getAttribute("value")), !x))
            return null;
          var z;
          k2 = a2.representation.codecs;
          a2.profiles.includes("http://dashif.org/guidelines/dash-if-uhd#hevc-hdr-pq10") && (k2.includes("hvc1.2.4.L153.B0") || k2.includes("hev1.2.4.L153.B0")) && (z = "PQ");
          var A = a2.representation.id ? a2.period.id + "," + a2.representation.id : "", C = {
            id: this.globalId_++,
            originalId: a2.representation.id,
            createSegmentIndex: function() {
              var D, F, B;
              return $jscomp.asyncExecutePromiseGeneratorProgram(function(E) {
                if (1 == E.nextAddress) {
                  F = (D = A && a2.dynamic && l.streamMap_[A]) ? l.streamMap_[A] : C;
                  if (F.segmentIndex)
                    return E.jumpTo(0);
                  B = F;
                  return E.yield(t.generateSegmentIndex(), 3);
                }
                B.segmentIndex = E.yieldResult;
                E.jumpToEnd();
              });
            },
            closeSegmentIndex: function() {
              C.segmentIndex && (C.segmentIndex.release(), C.segmentIndex = null);
            },
            segmentIndex: null,
            mimeType: a2.representation.mimeType,
            codecs: a2.representation.codecs,
            frameRate: a2.representation.frameRate,
            pixelAspectRatio: a2.representation.pixelAspectRatio,
            bandwidth: a2.bandwidth,
            width: a2.representation.width,
            height: a2.representation.height,
            kind: c2,
            encrypted: 0 < b2.drmInfos.length,
            drmInfos: b2.drmInfos,
            keyIds: q,
            language: d2,
            label: e2,
            type: a2.adaptationSet.contentType,
            primary: f2,
            trickModeVideo: null,
            emsgSchemeIdUris: a2.representation.emsgSchemeIdUris,
            roles: g,
            forced: w,
            channelsCount: a2.representation.numChannels,
            audioSamplingRate: a2.representation.audioSamplingRate,
            spatialAudio: y,
            closedCaptions: h,
            hdr: z,
            tilesLayout: x,
            matchedStreams: []
          };
          A && a2.dynamic && !this.streamMap_[A] && (this.streamMap_[A] = C);
          return C;
        };
        shaka.dash.DashParser.prototype.onUpdate_ = function() {
          var a2 = this, b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            switch (d2.nextAddress) {
              case 1:
                return goog.asserts.assert(0 <= a2.updatePeriod_, "There should be an update period"), shaka.log.info("Updating manifest..."), b2 = 0, d2.setCatchFinallyBlocks(2), d2.yield(a2.requestManifest_(), 4);
              case 4:
                b2 = d2.yieldResult;
                d2.leaveTryBlock(3);
                break;
              case 2:
                c2 = d2.enterCatchBlock(), goog.asserts.assert(c2 instanceof shaka.util.Error, "Should only receive a Shaka error"), a2.playerInterface_ && (c2.severity = shaka.util.Error.Severity.RECOVERABLE, a2.playerInterface_.onError(c2));
              case 3:
                if (!a2.playerInterface_)
                  return d2["return"]();
                a2.setUpdateTimer_(b2);
                d2.jumpToEnd();
            }
          });
        };
        shaka.dash.DashParser.prototype.setUpdateTimer_ = function(a2) {
          0 > this.updatePeriod_ || (a2 = Math.max(shaka.dash.DashParser.MIN_UPDATE_PERIOD_, this.updatePeriod_ - a2, this.averageUpdateDuration_.getEstimate()), this.updateTimer_.tickAfter(a2));
        };
        shaka.dash.DashParser.prototype.createFrame_ = function(a2, b2, c2) {
          goog.asserts.assert(b2 || c2, "Must provide either parent or baseUris");
          var d2 = shaka.util.ManifestParserUtils, e2 = shaka.util.XmlUtils;
          b2 = b2 || { contentType: "", mimeType: "", codecs: "", emsgSchemeIdUris: [], frameRate: void 0, pixelAspectRatio: void 0, numChannels: null, audioSamplingRate: null, availabilityTimeOffset: 0 };
          c2 = c2 || b2.baseUris;
          var f2 = e2.parseNonNegativeInt, g = e2.evalDivision, h = e2.findChildren(a2, "BaseURL"), k2 = h.map(e2.getContents), l = a2.getAttribute("contentType") || b2.contentType, m = a2.getAttribute("mimeType") || b2.mimeType, n = a2.getAttribute("codecs") || b2.codecs;
          g = e2.parseAttr(a2, "frameRate", g) || b2.frameRate;
          var p = a2.getAttribute("sar") || b2.pixelAspectRatio, q = this.emsgSchemeIdUris_(e2.findChildren(a2, "InbandEventStream"), b2.emsgSchemeIdUris), r = e2.findChildren(a2, "AudioChannelConfiguration");
          r = this.parseAudioChannels_(r) || b2.numChannels;
          var t = e2.parseAttr(a2, "audioSamplingRate", f2) || b2.audioSamplingRate;
          l || (l = shaka.dash.DashParser.guessContentType_(m, n));
          var u = e2.findChild(a2, "SegmentBase"), v = e2.findChild(a2, "SegmentTemplate"), y = u ? e2.parseAttr(u, "availabilityTimeOffset", e2.parseFloat) || 0 : 0, w = v ? e2.parseAttr(v, "availabilityTimeOffset", e2.parseFloat) || 0 : 0;
          h = h && h.length ? e2.parseAttr(h[0], "availabilityTimeOffset", e2.parseFloat) || 0 : 0;
          h = b2.availabilityTimeOffset + h + y + w;
          return {
            baseUris: d2.resolveUris(c2, k2),
            segmentBase: u || b2.segmentBase,
            segmentList: e2.findChild(a2, "SegmentList") || b2.segmentList,
            segmentTemplate: v || b2.segmentTemplate,
            width: e2.parseAttr(a2, "width", f2) || b2.width,
            height: e2.parseAttr(a2, "height", f2) || b2.height,
            contentType: l,
            mimeType: m,
            codecs: n,
            frameRate: g,
            pixelAspectRatio: p,
            emsgSchemeIdUris: q,
            id: a2.getAttribute("id"),
            numChannels: r,
            audioSamplingRate: t,
            availabilityTimeOffset: h
          };
        };
        shaka.dash.DashParser.prototype.emsgSchemeIdUris_ = function(a2, b2) {
          for (var c2 = b2.slice(), d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = e2.value.getAttribute("schemeIdUri"), c2.includes(e2) || c2.push(e2);
          return c2;
        };
        shaka.dash.DashParser.prototype.parseAudioChannels_ = function(a2) {
          a2 = $jscomp.makeIterator(a2);
          for (var b2 = a2.next(); !b2.done; b2 = a2.next()) {
            var c2 = b2.value;
            if (b2 = c2.getAttribute("schemeIdUri")) {
              if (c2 = c2.getAttribute("value"))
                switch (b2) {
                  case "urn:mpeg:dash:outputChannelPositionList:2012":
                    return c2.trim().split(/ +/).length;
                  case "urn:mpeg:dash:23003:3:audio_channel_configuration:2011":
                  case "urn:dts:dash:audio_channel_configuration:2012":
                    var d2 = parseInt(c2, 10);
                    if (!d2) {
                      shaka.log.warning(
                        "Channel parsing failure! Ignoring scheme and value",
                        b2,
                        c2
                      );
                      continue;
                    }
                    return d2;
                  case "tag:dolby.com,2014:dash:audio_channel_configuration:2011":
                  case "urn:dolby:dash:audio_channel_configuration:2011":
                    d2 = parseInt(c2, 16);
                    if (!d2) {
                      shaka.log.warning("Channel parsing failure! Ignoring scheme and value", b2, c2);
                      continue;
                    }
                    for (a2 = 0; d2; )
                      d2 & 1 && ++a2, d2 >>= 1;
                    return a2;
                  case "urn:mpeg:mpegB:cicp:ChannelConfiguration":
                    d2 = [0, 1, 2, 3, 4, 5, 6, 8, 2, 3, 4, 7, 8, 24, 8, 12, 10, 12, 14, 12, 14];
                    var e2 = parseInt(c2, 10);
                    if (!e2) {
                      shaka.log.warning("Channel parsing failure! Ignoring scheme and value", b2, c2);
                      continue;
                    }
                    if (0 < e2 && e2 < d2.length)
                      return d2[e2];
                    continue;
                  default:
                    shaka.log.warning("Unrecognized audio channel scheme:", b2, c2);
                }
            }
          }
          return null;
        };
        shaka.dash.DashParser.prototype.verifyRepresentation_ = function(a2) {
          var b2 = shaka.util.ManifestParserUtils.ContentType;
          var c2 = a2.segmentBase ? 1 : 0;
          c2 += a2.segmentList ? 1 : 0;
          c2 += a2.segmentTemplate ? 1 : 0;
          if (0 == c2) {
            if (a2.contentType == b2.TEXT || a2.contentType == b2.APPLICATION)
              return true;
            shaka.log.warning("Representation does not contain a segment information source:", "the Representation must contain one of SegmentBase, SegmentList,", 'SegmentTemplate, or explicitly indicate that it is "text".', a2);
            return false;
          }
          1 != c2 && (shaka.log.warning(
            "Representation contains multiple segment information sources:",
            "the Representation should only contain one of SegmentBase,",
            "SegmentList, or SegmentTemplate.",
            a2
          ), a2.segmentBase ? (shaka.log.info("Using SegmentBase by default."), a2.segmentList = null) : (goog.asserts.assert(a2.segmentList, "There should be a SegmentList"), shaka.log.info("Using SegmentList by default.")), a2.segmentTemplate = null);
          return true;
        };
        shaka.dash.DashParser.prototype.requestForTiming_ = function(a2, b2, c2) {
          var d2 = this, e2, f2, g, h, k2, l, m;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(n) {
            if (1 == n.nextAddress)
              return e2 = shaka.util.ManifestParserUtils.resolveUris(a2, [b2]), f2 = shaka.net.NetworkingEngine.makeRequest(e2, d2.config_.retryParameters), f2.method = c2, g = shaka.net.NetworkingEngine.RequestType.TIMING, h = d2.playerInterface_.networkingEngine.request(g, f2), d2.operationManager_.manage(h), n.yield(h.promise, 2);
            k2 = n.yieldResult;
            if ("HEAD" == c2) {
              if (!k2.headers || !k2.headers.date)
                return shaka.log.warning("UTC timing response is missing", "expected date header"), n["return"](0);
              l = k2.headers.date;
            } else
              l = shaka.util.StringUtils.fromUTF8(k2.data);
            m = Date.parse(l);
            return isNaN(m) ? (shaka.log.warning("Unable to parse date from UTC timing response"), n["return"](0)) : n["return"](m - Date.now());
          });
        };
        shaka.dash.DashParser.prototype.parseUtcTiming_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(p) {
            switch (p.nextAddress) {
              case 1:
                d2 = b2.map(function(q) {
                  return { scheme: q.getAttribute("schemeIdUri"), value: q.getAttribute("value") };
                }), e2 = c2.config_.dash.clockSyncUri, !d2.length && e2 && d2.push({ scheme: "urn:mpeg:dash:utc:http-head:2014", value: e2 }), f2 = $jscomp.makeIterator(d2), g = f2.next();
              case 2:
                if (g.done) {
                  p.jumpTo(4);
                  break;
                }
                h = g.value;
                p.setCatchFinallyBlocks(5);
                k2 = h.scheme;
                l = h.value;
                switch (k2) {
                  case "urn:mpeg:dash:utc:http-head:2014":
                  case "urn:mpeg:dash:utc:http-head:2012":
                    return p.jumpTo(7);
                  case "urn:mpeg:dash:utc:http-xsdate:2014":
                  case "urn:mpeg:dash:utc:http-iso:2014":
                  case "urn:mpeg:dash:utc:http-xsdate:2012":
                  case "urn:mpeg:dash:utc:http-iso:2012":
                    return p.jumpTo(8);
                  case "urn:mpeg:dash:utc:direct:2014":
                  case "urn:mpeg:dash:utc:direct:2012":
                    return m = Date.parse(l), p["return"](isNaN(m) ? 0 : m - Date.now());
                  case "urn:mpeg:dash:utc:http-ntp:2014":
                  case "urn:mpeg:dash:utc:ntp:2014":
                  case "urn:mpeg:dash:utc:sntp:2014":
                    shaka.log.alwaysWarn("NTP UTCTiming scheme is not supported");
                    break;
                  default:
                    shaka.log.alwaysWarn("Unrecognized scheme in UTCTiming element", k2);
                }
                p.jumpTo(9);
                break;
              case 7:
                return p.yield(c2.requestForTiming_(a2, l, "HEAD"), 10);
              case 10:
                return p["return"](p.yieldResult);
              case 8:
                return p.yield(c2.requestForTiming_(a2, l, "GET"), 11);
              case 11:
                return p["return"](p.yieldResult);
              case 9:
                p.leaveTryBlock(3);
                break;
              case 5:
                n = p.enterCatchBlock(), shaka.log.warning("Error fetching time from UTCTiming elem", n.message);
              case 3:
                g = f2.next();
                p.jumpTo(2);
                break;
              case 4:
                return shaka.log.alwaysWarn("A UTCTiming element should always be given in live manifests! This content may not play on clients with bad clocks!"), p["return"](0);
            }
          });
        };
        shaka.dash.DashParser.prototype.parseEventStream_ = function(a2, b2, c2, d2) {
          var e2 = shaka.util.XmlUtils, f2 = e2.parseNonNegativeInt, g = c2.getAttribute("schemeIdUri") || "", h = c2.getAttribute("value") || "", k2 = e2.parseAttr(c2, "timescale", f2) || 1;
          c2 = $jscomp.makeIterator(e2.findChildren(c2, "Event"));
          for (var l = c2.next(); !l.done; l = c2.next()) {
            l = l.value;
            var m = e2.parseAttr(l, "presentationTime", f2) || 0, n = e2.parseAttr(l, "duration", f2) || 0;
            m = m / k2 + a2;
            n = m + n / k2;
            null != b2 && (m = Math.min(m, a2 + b2), n = Math.min(n, a2 + b2));
            n < d2 || (l = {
              schemeIdUri: g,
              value: h,
              startTime: m,
              endTime: n,
              id: l.getAttribute("id") || "",
              eventElement: l
            }, this.playerInterface_.onTimelineRegionAdded(l));
          }
        };
        shaka.dash.DashParser.prototype.requestInitSegment_ = function(a2, b2, c2) {
          var d2 = this, e2, f2, g, h, k2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(l) {
            if (1 == l.nextAddress)
              return e2 = shaka.net.NetworkingEngine.RequestType.SEGMENT, f2 = shaka.util.Networking.createSegmentRequest(a2, b2, c2, d2.config_.retryParameters), g = d2.playerInterface_.networkingEngine, h = g.request(e2, f2), d2.operationManager_.manage(h), l.yield(h.promise, 2);
            k2 = l.yieldResult;
            return l["return"](k2.data);
          });
        };
        shaka.dash.DashParser.guessContentType_ = function(a2, b2) {
          var c2 = shaka.util.MimeUtils.getFullType(a2, b2);
          return shaka.text.TextEngine.isTypeSupported(c2) ? shaka.util.ManifestParserUtils.ContentType.TEXT : a2.split("/")[0];
        };
        goog.exportSymbol("shaka.dash.DashParser", shaka.dash.DashParser);
        shaka.dash.DashParser.MIN_UPDATE_PERIOD_ = 3;
        shaka.media.ManifestParser.registerParserByExtension("mpd", function() {
          return new shaka.dash.DashParser();
        });
        shaka.media.ManifestParser.registerParserByMime("application/dash+xml", function() {
          return new shaka.dash.DashParser();
        });
        shaka.media.ManifestParser.registerParserByMime("video/vnd.mpeg.dash.mpd", function() {
          return new shaka.dash.DashParser();
        });
        shaka.hls = {};
        shaka.hls.Playlist = function(a2, b2, c2, d2) {
          this.absoluteUri = a2;
          this.type = b2;
          this.tags = c2;
          this.segments = d2 || null;
        };
        shaka.hls.PlaylistType = { MASTER: 0, MEDIA: 1 };
        shaka.hls.Tag = function(a2, b2, c2, d2) {
          this.id = a2;
          this.name = b2;
          this.attributes = c2;
          this.value = void 0 === d2 ? null : d2;
        };
        shaka.hls.Tag.prototype.toString = function() {
          var a2 = function(c2) {
            var d2 = isNaN(Number(c2.value)) ? '"' + c2.value + '"' : c2.value;
            return c2.name + "=" + d2;
          }, b2 = "#" + this.name;
          a2 = this.attributes ? this.attributes.map(a2) : [];
          this.value && a2.unshift(this.value);
          0 < a2.length && (b2 += ":" + a2.join(","));
          return b2;
        };
        shaka.hls.Tag.prototype.addAttribute = function(a2) {
          this.attributes.push(a2);
        };
        shaka.hls.Tag.prototype.getAttribute = function(a2) {
          var b2 = this.attributes.filter(function(c2) {
            return c2.name == a2;
          });
          goog.asserts.assert(2 > b2.length, "A tag should not have multiple attributes with the same name!");
          return b2.length ? b2[0] : null;
        };
        shaka.hls.Tag.prototype.getAttributeValue = function(a2, b2) {
          var c2 = this.getAttribute(a2);
          return c2 ? c2.value : b2 || null;
        };
        shaka.hls.Tag.prototype.getRequiredAttrValue = function(a2) {
          var b2 = this.getAttribute(a2);
          if (!b2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_REQUIRED_ATTRIBUTE_MISSING, a2);
          return b2.value;
        };
        shaka.hls.Tag.prototype.setName = function(a2) {
          this.name = a2;
        };
        shaka.hls.Segment = function(a2, b2, c2) {
          c2 = void 0 === c2 ? [] : c2;
          this.tags = b2;
          this.absoluteUri = a2;
          this.partialSegments = c2;
        };
        shaka.hls.Attribute = function(a2, b2) {
          this.name = a2;
          this.value = b2;
        };
        shaka.hls.Utils = function() {
        };
        shaka.hls.Utils.filterTagsByName = function(a2, b2) {
          return a2.filter(function(c2) {
            return c2.name == b2;
          });
        };
        shaka.hls.Utils.filterTagsByType = function(a2, b2) {
          return a2.filter(function(c2) {
            return c2.getRequiredAttrValue("TYPE") == b2;
          });
        };
        shaka.hls.Utils.getFirstTagWithName = function(a2, b2) {
          var c2 = shaka.hls.Utils.filterTagsByName(a2, b2);
          return c2.length ? c2[0] : null;
        };
        shaka.hls.Utils.getFirstTagWithNameAsNumber = function(a2, b2, c2) {
          c2 = void 0 === c2 ? 0 : c2;
          return (a2 = shaka.hls.Utils.getFirstTagWithName(a2, b2)) ? Number(a2.value) : c2;
        };
        shaka.hls.Utils.constructAbsoluteUri = function(a2, b2) {
          return shaka.util.ManifestParserUtils.resolveUris([a2], [b2])[0];
        };
        shaka.hls.Utils.isComment = function(a2) {
          return /^#(?!EXT)/m.test(a2);
        };
        shaka.util.TextParser = function(a2) {
          this.data_ = a2;
          this.position_ = 0;
        };
        shaka.util.TextParser.prototype.atEnd = function() {
          return this.position_ == this.data_.length;
        };
        shaka.util.TextParser.prototype.readLine = function() {
          return this.readRegexReturnCapture_(/(.*?)(\n|$)/gm, 1);
        };
        shaka.util.TextParser.prototype.readWord = function() {
          return this.readRegexReturnCapture_(/[^ \t\n]*/gm, 0);
        };
        shaka.util.TextParser.prototype.skipWhitespace = function() {
          this.readRegex(/[ \t]+/gm);
        };
        shaka.util.TextParser.prototype.readRegex = function(a2) {
          a2 = this.indexOf_(a2);
          if (this.atEnd() || null == a2 || a2.position != this.position_)
            return null;
          this.position_ += a2.length;
          return a2.results;
        };
        shaka.util.TextParser.prototype.readRegexReturnCapture_ = function(a2, b2) {
          if (this.atEnd())
            return null;
          var c2 = this.readRegex(a2);
          return c2 ? c2[b2] : null;
        };
        shaka.util.TextParser.prototype.indexOf_ = function(a2) {
          goog.asserts.assert(a2.global, "global flag should be set");
          a2.lastIndex = this.position_;
          a2 = a2.exec(this.data_);
          return null == a2 ? null : { position: a2.index, length: a2[0].length, results: a2 };
        };
        shaka.hls.ManifestTextParser = function() {
          this.globalId_ = 0;
        };
        shaka.hls.ManifestTextParser.prototype.parsePlaylist = function(a2, b2) {
          var c2 = shaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS, d2 = shaka.hls.ManifestTextParser.SEGMENT_TAGS, e2 = shaka.util.StringUtils.fromUTF8(a2);
          e2 = e2.replace(/\r\n|\r(?=[^\n]|$)/gm, "\n").trim();
          var f2 = e2.split(/\n+/m);
          if (!/^#EXTM3U($|[ \t\n])/m.test(f2[0]))
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_PLAYLIST_HEADER_MISSING);
          e2 = shaka.hls.PlaylistType.MASTER;
          for (var g = true, h = $jscomp.makeIterator(f2), k2 = h.next(); !k2.done; k2 = h.next())
            if (k2 = k2.value, shaka.hls.Utils.isComment(k2) || g)
              g = false;
            else if (k2 = this.parseTag_(k2), --this.globalId_, c2.includes(k2.name)) {
              e2 = shaka.hls.PlaylistType.MEDIA;
              break;
            } else
              "EXT-X-STREAM-INF" == k2.name && (g = true);
          c2 = [];
          g = true;
          for (h = 0; h < f2.length; h++) {
            var l = f2[h];
            k2 = f2[h + 1];
            if (shaka.hls.Utils.isComment(l) || g)
              g = false;
            else {
              l = this.parseTag_(l);
              if (d2.includes(l.name)) {
                if (e2 != shaka.hls.PlaylistType.MEDIA)
                  throw new shaka.util.Error(
                    shaka.util.Error.Severity.CRITICAL,
                    shaka.util.Error.Category.MANIFEST,
                    shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY
                  );
                d2 = f2.splice(h, f2.length - h);
                d2 = this.parseSegments_(b2, d2, c2);
                return new shaka.hls.Playlist(b2, e2, c2, d2);
              }
              c2.push(l);
              "EXT-X-STREAM-INF" == l.name && (g = new shaka.hls.Attribute("URI", k2), l.addAttribute(g), g = true);
            }
          }
          return new shaka.hls.Playlist(b2, e2, c2);
        };
        shaka.hls.ManifestTextParser.prototype.parseSegments_ = function(a2, b2, c2) {
          var d2 = [], e2 = [], f2 = [], g = null;
          b2 = $jscomp.makeIterator(b2);
          for (var h = b2.next(); !h.done; h = b2.next())
            h = h.value, /^(#EXT)/.test(h) ? (h = this.parseTag_(h), shaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS.includes(h.name) ? c2.push(h) : "EXT-X-MAP" == h.name ? g = h : "EXT-X-PART" == h.name ? f2.push(h) : "EXT-X-PRELOAD-HINT" == h.name ? "PART" == h.getAttributeValue("TYPE") ? f2.push(h) : "MAP" == h.getAttributeValue("TYPE") && (h.setName("EXT-X-MAP"), g = h) : e2.push(h)) : shaka.hls.Utils.isComment(h) || (h = h.trim(), h = shaka.hls.Utils.constructAbsoluteUri(a2, h), g && e2.push(g), e2 = new shaka.hls.Segment(h, e2, f2), d2.push(e2), e2 = [], f2 = []);
          f2.length && (g && e2.push(g), a2 = new shaka.hls.Segment("", e2, f2), d2.push(a2));
          return d2;
        };
        shaka.hls.ManifestTextParser.prototype.parseTag_ = function(a2) {
          return shaka.hls.ManifestTextParser.parseTag(this.globalId_++, a2);
        };
        shaka.hls.ManifestTextParser.parseTag = function(a2, b2) {
          var c2 = b2.match(/^#(EXT[^:]*)(?::(.*))?$/);
          if (!c2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.INVALID_HLS_TAG, b2);
          var d2 = c2[1], e2 = c2[2];
          c2 = [];
          var f2;
          if (e2) {
            e2 = new shaka.util.TextParser(e2);
            var g, h = e2.readRegex(/^([^,=]+)(?:,|$)/g);
            h && (f2 = h[1]);
            for (h = /([^=]+)=(?:"([^"]*)"|([^",]*))(?:,|$)/g; g = e2.readRegex(h); )
              g = new shaka.hls.Attribute(g[1], g[2] || g[3]), c2.push(g), e2.skipWhitespace();
          }
          return new shaka.hls.Tag(
            a2,
            d2,
            c2,
            f2
          );
        };
        shaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS = "EXT-X-TARGETDURATION EXT-X-MEDIA-SEQUENCE EXT-X-DISCONTINUITY-SEQUENCE EXT-X-PLAYLIST-TYPE EXT-X-I-FRAMES-ONLY EXT-X-ENDLIST EXT-X-SERVER-CONTROL EXT-X-SKIP".split(" ");
        shaka.hls.ManifestTextParser.SEGMENT_TAGS = "EXTINF EXT-X-BYTERANGE EXT-X-DISCONTINUITY EXT-X-PROGRAM-DATE-TIME EXT-X-KEY EXT-X-DATERANGE EXT-X-MAP".split(" ");
        shaka.net.DataUriPlugin = function() {
        };
        shaka.net.DataUriPlugin.parse = function(a2, b2, c2, d2) {
          try {
            var e2 = shaka.net.DataUriPlugin.parseRaw(a2);
            return shaka.util.AbortableOperation.completed({ uri: a2, originalUri: a2, data: e2.data, headers: { "content-type": e2.contentType } });
          } catch (f2) {
            return shaka.util.AbortableOperation.failed(f2);
          }
        };
        shaka.net.DataUriPlugin.parseRaw = function(a2) {
          var b2 = a2.split(":");
          if (2 > b2.length || "data" != b2[0])
            throw shaka.log.error("Bad data URI, failed to parse scheme"), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.MALFORMED_DATA_URI, a2);
          b2 = b2.slice(1).join(":").split(",");
          if (2 > b2.length)
            throw shaka.log.error("Bad data URI, failed to extract encoding and MIME type"), new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.NETWORK,
              shaka.util.Error.Code.MALFORMED_DATA_URI,
              a2
            );
          var c2 = b2[0];
          a2 = window.decodeURIComponent(b2.slice(1).join(","));
          b2 = c2.split(";");
          c2 = b2[0];
          var d2 = false;
          1 < b2.length && "base64" == b2[b2.length - 1] && (d2 = true, b2.pop());
          return { data: d2 ? shaka.util.Uint8ArrayUtils.fromBase64(a2) : shaka.util.StringUtils.toUTF8(a2), contentType: c2 };
        };
        goog.exportSymbol("shaka.net.DataUriPlugin", shaka.net.DataUriPlugin);
        goog.exportProperty(shaka.net.DataUriPlugin, "parse", shaka.net.DataUriPlugin.parse);
        shaka.net.NetworkingEngine.registerScheme("data", shaka.net.DataUriPlugin.parse);
        shaka.hls.HlsParser = function() {
          var a2 = this;
          this.config_ = this.playerInterface_ = null;
          this.globalId_ = 1;
          this.globalVariables_ = /* @__PURE__ */ new Map();
          this.groupIdToStreamInfosMap_ = /* @__PURE__ */ new Map();
          this.variantUriSet_ = /* @__PURE__ */ new Set();
          this.uriToStreamInfosMap_ = /* @__PURE__ */ new Map();
          this.presentationTimeline_ = null;
          this.masterPlaylistUri_ = "";
          this.manifestTextParser_ = new shaka.hls.ManifestTextParser();
          this.updatePlaylistDelay_ = 0;
          this.updatePlaylistTimer_ = new shaka.util.Timer(function() {
            a2.onUpdate_();
          });
          this.presentationType_ = shaka.hls.HlsParser.PresentationType_.VOD;
          this.manifest_ = null;
          this.maxTargetDuration_ = 0;
          this.minTargetDuration_ = Infinity;
          this.lowLatencyPresentationDelay_ = this.partialTargetDuration_ = 0;
          this.operationManager_ = new shaka.util.OperationManager();
          this.segmentsToNotifyByStream_ = [];
          this.groupIdToClosedCaptionsMap_ = /* @__PURE__ */ new Map();
          this.aesEncrypted_ = false;
          this.groupIdToCodecsMap_ = /* @__PURE__ */ new Map();
          this.playlistStartTime_ = null;
          this.mapTagToInitSegmentRefMap_ = /* @__PURE__ */ new Map();
          this.discontinuityToTso_ = /* @__PURE__ */ new Map();
          this.lowLatencyMode_ = false;
        };
        shaka.hls.HlsParser.prototype.configure = function(a2) {
          this.config_ = a2;
        };
        shaka.hls.HlsParser.prototype.start = function(a2, b2) {
          var c2 = this, d2, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            if (1 == f2.nextAddress)
              return goog.asserts.assert(c2.config_, "Must call configure() before start()!"), c2.playerInterface_ = b2, c2.lowLatencyMode_ = b2.isLowLatencyMode(), f2.yield(c2.requestManifest_(a2), 2);
            if (3 != f2.nextAddress)
              return d2 = f2.yieldResult, c2.masterPlaylistUri_ = d2.uri, goog.asserts.assert(d2.data, "Response data should be non-null!"), f2.yield(c2.parseManifest_(d2.data), 3);
            e2 = c2.updatePlaylistDelay_;
            0 < e2 && c2.updatePlaylistTimer_.tickAfter(e2);
            goog.asserts.assert(c2.manifest_, "Manifest should be non-null");
            return f2["return"](c2.manifest_);
          });
        };
        shaka.hls.HlsParser.prototype.stop = function() {
          this.updatePlaylistTimer_ && (this.updatePlaylistTimer_.stop(), this.updatePlaylistTimer_ = null);
          var a2 = [];
          this.operationManager_ && (a2.push(this.operationManager_.destroy()), this.operationManager_ = null);
          this.config_ = this.playerInterface_ = null;
          this.variantUriSet_.clear();
          this.manifest_ = null;
          this.uriToStreamInfosMap_.clear();
          this.groupIdToStreamInfosMap_.clear();
          this.groupIdToCodecsMap_.clear();
          this.globalVariables_.clear();
          return Promise.all(a2);
        };
        shaka.hls.HlsParser.prototype.update = function() {
          var a2 = this, b2, c2, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            if (1 == e2.nextAddress) {
              if (!a2.isLive_())
                return e2["return"]();
              b2 = [];
              a2.playlistStartTime_ = null;
              c2 = Array.from(a2.uriToStreamInfosMap_.values());
              return c2.length ? e2.yield(a2.updateStream_(c2[0]), 2) : e2.jumpTo(2);
            }
            for (d2 = 1; d2 < c2.length; d2++)
              b2.push(a2.updateStream_(c2[d2]));
            return e2.yield(Promise.all(b2), 0);
          });
        };
        shaka.hls.HlsParser.prototype.updateStream_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l, m, n, p, q, r;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(t) {
            if (1 == t.nextAddress)
              return c2 = shaka.hls.HlsParser.PresentationType_, d2 = a2.absoluteMediaPlaylistUri, e2 = new goog.Uri(d2), b2.lowLatencyMode_ && a2.canSkipSegments && e2.setQueryData(new goog.Uri.QueryData("_HLS_skip=YES")), t.yield(b2.requestManifest_(e2.toString()), 2);
            if (3 != t.nextAddress) {
              f2 = t.yieldResult;
              g = b2.manifestTextParser_.parsePlaylist(f2.data, f2.uri);
              if (g.type != shaka.hls.PlaylistType.MEDIA)
                throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY);
              h = shaka.hls.Utils.filterTagsByName(g.tags, "EXT-X-DEFINE");
              k2 = b2.parseMediaVariables_(h);
              l = a2.stream;
              return t.yield(b2.createSegments_(a2.verbatimMediaPlaylistUri, g, l.type, l.mimeType, a2.mediaSequenceToStartTime, k2, a2.discontinuityToMediaSequence, l.codecs, l.bandwidth), 3);
            }
            m = t.yieldResult;
            l.segmentIndex.mergeAndEvict(m, b2.presentationTimeline_.getSegmentAvailabilityStart());
            m.length && (n = shaka.hls.Utils.getFirstTagWithNameAsNumber(g.tags, "EXT-X-MEDIA-SEQUENCE", 0), p = a2.mediaSequenceToStartTime.get(n), l.segmentIndex.evict(p));
            q = m[m.length - 1];
            goog.asserts.assert(q, "Should have segments!");
            if (r = shaka.hls.Utils.getFirstTagWithName(g.tags, "EXT-X-ENDLIST"))
              b2.setPresentationType_(c2.VOD), b2.presentationTimeline_.setDuration(q.endTime);
            t.jumpToEnd();
          });
        };
        shaka.hls.HlsParser.prototype.onExpirationUpdated = function(a2, b2) {
        };
        shaka.hls.HlsParser.prototype.parseManifest_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y, w, x, z, A, C, D, F, B, E, G, J, H, I, K, L, N, M, R, S, P;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(O) {
            switch (O.nextAddress) {
              case 1:
                c2 = shaka.hls.Utils;
                goog.asserts.assert(b2.masterPlaylistUri_, "Master playlist URI must be set before calling parseManifest_!");
                d2 = b2.manifestTextParser_.parsePlaylist(a2, b2.masterPlaylistUri_);
                if (d2.type != shaka.hls.PlaylistType.MASTER)
                  throw new shaka.util.Error(
                    shaka.util.Error.Severity.CRITICAL,
                    shaka.util.Error.Category.MANIFEST,
                    shaka.util.Error.Code.HLS_MASTER_PLAYLIST_NOT_PROVIDED
                  );
                e2 = c2.filterTagsByName(d2.tags, "EXT-X-DEFINE");
                b2.parseMasterVariables_(e2);
                f2 = c2.filterTagsByName(d2.tags, "EXT-X-MEDIA");
                g = c2.filterTagsByName(d2.tags, "EXT-X-STREAM-INF");
                h = c2.filterTagsByName(d2.tags, "EXT-X-IMAGE-STREAM-INF");
                b2.parseCodecs_(g);
                k2 = c2.filterTagsByName(d2.tags, "EXT-X-SESSION-DATA");
                l = $jscomp.makeIterator(k2);
                for (m = l.next(); !m.done; m = l.next())
                  if (n = m.value, p = n.getAttributeValue("DATA-ID"), q = n.getAttributeValue("URI"), r = n.getAttributeValue("LANGUAGE"), t = n.getAttributeValue("VALUE"), u = (/* @__PURE__ */ new Map()).set("id", p), q && u.set("uri", shaka.hls.Utils.constructAbsoluteUri(b2.masterPlaylistUri_, q)), r && u.set("language", r), t && u.set("value", t), v = new shaka.util.FakeEvent("sessiondata", u), b2.playerInterface_)
                    b2.playerInterface_.onEvent(v);
                return O.yield(b2.createStreamInfosFromMediaTags_(f2), 2);
              case 2:
                return b2.parseClosedCaptions_(f2), O.yield(b2.createVariantsForTags_(g), 3);
              case 3:
                return y = O.yieldResult, O.yield(b2.parseTexts_(f2), 4);
              case 4:
                return w = O.yieldResult, O.yield(b2.parseImages_(h), 5);
              case 5:
                x = O.yieldResult;
                if (!b2.playerInterface_)
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.OPERATION_ABORTED);
                if (b2.aesEncrypted_ && 0 == y.length)
                  throw shaka.log.info("No stream is created, because we don't support AES-128", "encryption yet"), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_AES_128_ENCRYPTION_NOT_SUPPORTED);
                A = z = Infinity;
                C = $jscomp.makeIterator(b2.uriToStreamInfosMap_.values());
                for (D = C.next(); !D.done; D = C.next())
                  F = D.value, z = Math.min(z, F.minTimestamp), "text" != F.stream.type && (A = Math.min(A, F.maxTimestamp - F.minTimestamp));
                goog.asserts.assert(null == b2.presentationTimeline_, "Presentation timeline created early!");
                b2.createPresentationTimeline_();
                goog.asserts.assert(b2.presentationTimeline_, "Presentation timeline not created!");
                if (b2.isLive_())
                  b2.updatePlaylistDelay_ = b2.minTargetDuration_, B = shaka.hls.HlsParser.PresentationType_, b2.presentationType_ == B.LIVE && (E = b2.presentationTimeline_.getDelay(), isNaN(b2.config_.availabilityWindowOverride) || (E = b2.config_.availabilityWindowOverride), b2.presentationTimeline_.setSegmentAvailabilityDuration(E));
                else
                  for (b2.presentationTimeline_.setDuration(A), b2.presentationTimeline_.offset(-z), G = $jscomp.makeIterator(b2.uriToStreamInfosMap_.values()), D = G.next(); !D.done; D = G.next())
                    J = D.value, J.stream.segmentIndex.offset(-z), J.stream.segmentIndex.fit(0, A);
                b2.segmentsToNotifyByStream_ = [];
                H = [];
                I = $jscomp.makeIterator(y);
                for (K = I.next(); !K.done; K = I.next())
                  for (L = K.value, N = $jscomp.makeIterator([L.video, L.audio]), M = N.next(); !M.done; M = N.next())
                    (R = M.value) && H.push(R);
                return O.yield(Promise.all(H.map(function(T) {
                  return $jscomp.asyncExecutePromiseGeneratorProgram(function(U) {
                    return U.yield(T.createSegmentIndex(), 0);
                  });
                })), 6);
              case 6:
                S = $jscomp.makeIterator(H);
                for (M = S.next(); !M.done; M = S.next())
                  P = M.value, b2.segmentsToNotifyByStream_.push(P.segmentIndex.references);
                b2.notifySegments_();
                b2.presentationTimeline_.lockStartTime();
                goog.asserts.assert(
                  !b2.presentationTimeline_.usingPresentationStartTime(),
                  "We should not be using the presentation start time in HLS!"
                );
                b2.manifest_ = { presentationTimeline: b2.presentationTimeline_, variants: y, textStreams: w, imageStreams: x, offlineSessionIds: [], minBufferTime: 0 };
                b2.playerInterface_.makeTextStreamsForClosedCaptions(b2.manifest_);
                O.jumpToEnd();
            }
          });
        };
        shaka.hls.HlsParser.prototype.parseMasterVariables_ = function(a2) {
          a2 = $jscomp.makeIterator(a2);
          for (var b2 = a2.next(); !b2.done; b2 = a2.next()) {
            var c2 = b2.value;
            b2 = c2.getAttributeValue("NAME");
            c2 = c2.getAttributeValue("VALUE");
            b2 && c2 && (this.globalVariables_.has(b2) || this.globalVariables_.set(b2, c2));
          }
        };
        shaka.hls.HlsParser.prototype.parseMediaVariables_ = function(a2) {
          var b2 = /* @__PURE__ */ new Map();
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next()) {
            var d2 = c2.value;
            c2 = d2.getAttributeValue("NAME");
            var e2 = d2.getAttributeValue("VALUE");
            d2 = d2.getAttributeValue("IMPORT");
            c2 && e2 && b2.set(c2, e2);
            d2 && (c2 = this.globalVariables_.get(d2)) && b2.set(d2, c2);
          }
          return b2;
        };
        shaka.hls.HlsParser.prototype.parseCodecs_ = function(a2) {
          var b2 = shaka.util.ManifestParserUtils.ContentType;
          a2 = $jscomp.makeIterator(a2);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next()) {
            var d2 = c2.value, e2 = d2.getAttributeValue("AUDIO");
            c2 = d2.getAttributeValue("VIDEO");
            var f2 = d2.getAttributeValue("SUBTITLES");
            d2 = this.getCodecsForVariantTag_(d2);
            if (f2) {
              var g = shaka.util.ManifestParserUtils.guessCodecsSafe(b2.TEXT, d2);
              goog.asserts.assert(null != g, "Text codecs should be valid.");
              this.groupIdToCodecsMap_.set(f2, g);
              shaka.util.ArrayUtils.remove(
                d2,
                g
              );
            }
            e2 && (f2 = shaka.util.ManifestParserUtils.guessCodecs(b2.AUDIO, d2), this.groupIdToCodecsMap_.set(e2, f2));
            c2 && (e2 = shaka.util.ManifestParserUtils.guessCodecs(b2.VIDEO, d2), this.groupIdToCodecsMap_.set(c2, e2));
          }
        };
        shaka.hls.HlsParser.prototype.parseTexts_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l, m, n, p, q;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(r) {
            if (1 == r.nextAddress)
              return c2 = shaka.hls.Utils.filterTagsByType(a2, "SUBTITLES"), d2 = c2.map(function(t) {
                var u, v, y;
                return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
                  if (1 == w.nextAddress) {
                    if (u = b2.config_.disableText)
                      return w["return"](null);
                    w.setCatchFinallyBlocks(2);
                    return w.yield(b2.createStreamInfoFromMediaTag_(t), 4);
                  }
                  if (2 != w.nextAddress)
                    return v = w.yieldResult, goog.asserts.assert(v, "Should always have a streamInfo for text"), w["return"](v.stream);
                  y = w.enterCatchBlock();
                  if (b2.config_.hls.ignoreTextStreamFailures)
                    return w["return"](null);
                  throw y;
                });
              }), r.yield(Promise.all(d2), 2);
            e2 = r.yieldResult;
            f2 = $jscomp.makeIterator(c2);
            for (g = f2.next(); !g.done; g = f2.next())
              if (h = g.value, k2 = h.getRequiredAttrValue("GROUP-ID"), l = b2.groupIdToCodecsMap_.get(k2)) {
                if (m = b2.groupIdToStreamInfosMap_.get(k2))
                  for (n = $jscomp.makeIterator(m), p = n.next(); !p.done; p = n.next())
                    q = p.value, q.stream.codecs = l;
              }
            return r["return"](e2.filter(function(t) {
              return t;
            }));
          });
        };
        shaka.hls.HlsParser.prototype.parseImages_ = function(a2) {
          var b2 = this, c2, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            if (1 == e2.nextAddress)
              return c2 = a2.map(function(f2) {
                var g, h, k2;
                return $jscomp.asyncExecutePromiseGeneratorProgram(function(l) {
                  if (1 == l.nextAddress) {
                    if (g = b2.config_.disableThumbnails)
                      return l["return"](null);
                    l.setCatchFinallyBlocks(2);
                    return l.yield(b2.createStreamInfoFromImageTag_(f2), 4);
                  }
                  if (2 != l.nextAddress)
                    return h = l.yieldResult, goog.asserts.assert(h, "Should always have a streamInfo for image"), l["return"](h.stream);
                  k2 = l.enterCatchBlock();
                  if (b2.config_.hls.ignoreImageStreamFailures)
                    return l["return"](null);
                  throw k2;
                });
              }), e2.yield(Promise.all(c2), 2);
            d2 = e2.yieldResult;
            return e2["return"](d2.filter(function(f2) {
              return f2;
            }));
          });
        };
        shaka.hls.HlsParser.prototype.createStreamInfosFromMediaTags_ = function(a2) {
          var b2 = this, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return a2 = a2.filter(function(e2) {
                var f2 = e2.getAttributeValue("URI") || "";
                return "SUBTITLES" != e2.getAttributeValue("TYPE") && "" != f2;
              }), a2.length ? d2.yield(b2.createStreamInfoFromMediaTag_(a2[0]), 2) : d2.jumpTo(2);
            c2 = a2.slice(1).map(function(e2) {
              return b2.createStreamInfoFromMediaTag_(e2);
            });
            return d2.yield(Promise.all(c2), 0);
          });
        };
        shaka.hls.HlsParser.prototype.createVariantsForTags_ = function(a2) {
          var b2 = this, c2, d2, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            if (1 == f2.nextAddress)
              return c2 = a2.map(function(g) {
                var h, k2, l, m, n, p, q, r;
                return $jscomp.asyncExecutePromiseGeneratorProgram(function(t) {
                  return 1 == t.nextAddress ? (h = g.getAttributeValue("FRAME-RATE"), k2 = Number(g.getAttributeValue("AVERAGE-BANDWIDTH")) || Number(g.getRequiredAttrValue("BANDWIDTH")), l = g.getAttributeValue("RESOLUTION"), m = $jscomp.makeIterator(l ? l.split("x") : [null, null]), n = m.next().value, p = m.next().value, q = g.getAttributeValue("VIDEO-RANGE"), t.yield(b2.createStreamInfosForVariantTag_(g, l, h, k2), 2)) : (r = t.yieldResult) ? (goog.asserts.assert(r.audio.length || r.video.length, "We should have created a stream!"), t["return"](b2.createVariants_(r.audio, r.video, k2, n, p, h, q))) : t["return"]([]);
                });
              }), f2.yield(Promise.all(c2), 2);
            d2 = f2.yieldResult;
            e2 = d2.reduce(shaka.util.Functional.collapseArrays, []);
            e2 = e2.filter(function(g) {
              return null != g;
            });
            return f2["return"](e2);
          });
        };
        shaka.hls.HlsParser.prototype.createStreamInfosForVariantTag_ = function(a2, b2, c2, d2) {
          var e2 = this, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
            if (1 == w.nextAddress)
              return f2 = shaka.util.ManifestParserUtils.ContentType, g = e2.getCodecsForVariantTag_(a2), h = a2.getAttributeValue("AUDIO"), k2 = a2.getAttributeValue("VIDEO"), goog.asserts.assert(null == h || null == k2, "Unexpected: both video and audio described by media tags!"), m = (l = h || k2) && e2.groupIdToStreamInfosMap_.has(l) ? e2.groupIdToStreamInfosMap_.get(l) : [], n = { audio: h ? m : [], video: k2 ? m : [] }, shaka.log.debug("Guessing stream type for", a2.toString()), q = false, r = a2.getRequiredAttrValue("URI"), t = n.audio.find(function(x) {
                return x && x.verbatimMediaPlaylistUri == r;
              }), u = shaka.util.ManifestParserUtils.guessCodecsSafe(f2.VIDEO, g), (v = shaka.util.ManifestParserUtils.guessCodecsSafe(f2.AUDIO, g)) && !u ? (p = f2.AUDIO, shaka.log.debug("Guessing audio-only.")) : !m.length && v && u ? (shaka.log.debug("Guessing multiplexed audio+video."), p = f2.VIDEO, g = [[u, v].join()]) : n.audio.length && t ? (shaka.log.debug("Guessing audio-only."), p = f2.AUDIO, q = true) : n.video.length ? (shaka.log.debug("Guessing audio-only."), p = f2.AUDIO) : (shaka.log.debug("Guessing video-only."), p = f2.VIDEO), q ? w.jumpTo(2) : w.yield(e2.createStreamInfoFromVariantTag_(a2, g, p, d2), 3);
            2 != w.nextAddress && (y = w.yieldResult);
            if (y)
              n[y.stream.type] = [y];
            else if (null === y)
              return shaka.log.debug("streamInfo is null"), w["return"](null);
            e2.filterLegacyCodecs_(n);
            return w["return"](n);
          });
        };
        shaka.hls.HlsParser.prototype.getCodecsForVariantTag_ = function(a2) {
          var b2 = [];
          this.config_.disableVideo || b2.push(this.config_.hls.defaultVideoCodec);
          this.config_.disableAudio || b2.push(this.config_.hls.defaultAudioCodec);
          b2 = b2.join(",");
          var c2 = a2.getAttributeValue("CODECS", b2).split(/\s*,\s*/);
          a2 = /* @__PURE__ */ new Set();
          b2 = [];
          c2 = $jscomp.makeIterator(c2);
          for (var d2 = c2.next(); !d2.done; d2 = c2.next()) {
            d2 = d2.value;
            var e2 = shaka.util.MimeUtils.getCodecBase(d2);
            a2.has(e2) ? shaka.log.debug("Ignoring duplicate codec") : (b2.push(d2), a2.add(e2));
          }
          return b2;
        };
        shaka.hls.HlsParser.prototype.getChannelsCount_ = function(a2) {
          a2 = a2.getAttributeValue("CHANNELS");
          if (!a2)
            return null;
          a2 = a2.split("/")[0];
          return parseInt(a2, 10);
        };
        shaka.hls.HlsParser.prototype.isSpatialAudio_ = function(a2) {
          return (a2 = a2.getAttributeValue("CHANNELS")) ? a2.includes("/JOC") : false;
        };
        shaka.hls.HlsParser.prototype.getClosedCaptions_ = function(a2, b2) {
          var c2 = shaka.util.ManifestParserUtils.ContentType, d2 = a2.getAttributeValue("CLOSED-CAPTIONS");
          return b2 == c2.VIDEO && d2 && "NONE" != d2 ? this.groupIdToClosedCaptionsMap_.get(d2) : null;
        };
        shaka.hls.HlsParser.prototype.getLanguage_ = function(a2) {
          var b2 = shaka.util.LanguageUtils;
          a2 = a2.getAttributeValue("LANGUAGE") || "und";
          return b2.normalize(a2);
        };
        shaka.hls.HlsParser.prototype.getType_ = function(a2) {
          a2 = a2.getRequiredAttrValue("TYPE").toLowerCase();
          "subtitles" == a2 && (a2 = shaka.util.ManifestParserUtils.ContentType.TEXT);
          return a2;
        };
        shaka.hls.HlsParser.prototype.filterLegacyCodecs_ = function(a2) {
          a2 = $jscomp.makeIterator(a2.audio.concat(a2.video));
          for (var b2 = a2.next(); !b2.done; b2 = a2.next())
            if (b2 = b2.value) {
              var c2 = b2.stream.codecs.split(",");
              c2 = c2.filter(function(d2) {
                return "mp4a.40.34" != d2;
              });
              b2.stream.codecs = c2.join(",");
            }
        };
        shaka.hls.HlsParser.prototype.createVariants_ = function(a2, b2, c2, d2, e2, f2, g) {
          for (var h = shaka.util.ManifestParserUtils.ContentType, k2 = shaka.media.DrmEngine, l = $jscomp.makeIterator(b2), m = l.next(); !m.done; m = l.next())
            this.addVideoAttributes_(m.value.stream, d2, e2, f2, g);
          d2 = this.config_.disableAudio;
          if (!a2.length || d2)
            a2 = [null];
          d2 = this.config_.disableVideo;
          if (!b2.length || d2)
            b2 = [null];
          d2 = [];
          a2 = $jscomp.makeIterator(a2);
          for (e2 = a2.next(); !e2.done; e2 = a2.next())
            for (e2 = e2.value, f2 = $jscomp.makeIterator(b2), g = f2.next(); !g.done; g = f2.next()) {
              var n = g.value;
              g = e2 ? e2.stream : null;
              l = n ? n.stream : null;
              m = e2 ? e2.stream.drmInfos : null;
              var p = n ? n.stream.drmInfos : null;
              n = (n ? n.verbatimMediaPlaylistUri : "") + " - " + (e2 ? e2.verbatimMediaPlaylistUri : "");
              g && l && !k2.areDrmCompatible(m, p) ? shaka.log.warning("Incompatible DRM info in HLS variant.  Skipping.") : this.variantUriSet_.has(n) ? shaka.log.debug("Skipping variant which only differs in text streams.") : (goog.asserts.assert(!g || g.type == h.AUDIO, "Audio parameter mismatch!"), goog.asserts.assert(!l || l.type == h.VIDEO, "Video parameter mismatch!"), g = { id: this.globalId_++, language: g ? g.language : "und", primary: !!g && g.primary || !!l && l.primary, audio: g, video: l, bandwidth: c2, allowedByApplication: true, allowedByKeySystem: true, decodingInfos: [] }, d2.push(g), this.variantUriSet_.add(n));
            }
          return d2;
        };
        shaka.hls.HlsParser.prototype.parseClosedCaptions_ = function(a2) {
          a2 = shaka.hls.Utils.filterTagsByType(a2, "CLOSED-CAPTIONS");
          a2 = $jscomp.makeIterator(a2);
          for (var b2 = a2.next(); !b2.done; b2 = a2.next()) {
            var c2 = b2.value;
            goog.asserts.assert("EXT-X-MEDIA" == c2.name, "Should only be called on media tags!");
            b2 = this.getLanguage_(c2);
            var d2 = c2.getRequiredAttrValue("GROUP-ID");
            c2 = c2.getRequiredAttrValue("INSTREAM-ID");
            this.groupIdToClosedCaptionsMap_.get(d2) || this.groupIdToClosedCaptionsMap_.set(d2, /* @__PURE__ */ new Map());
            this.groupIdToClosedCaptionsMap_.get(d2).set(
              c2,
              b2
            );
          }
        };
        shaka.hls.HlsParser.prototype.createStreamInfoFromMediaTag_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(u) {
            if (1 == u.nextAddress) {
              goog.asserts.assert("EXT-X-MEDIA" == a2.name, "Should only be called on media tags!");
              c2 = a2.getRequiredAttrValue("GROUP-ID");
              d2 = "";
              e2 = b2.getType_(a2);
              e2 != shaka.util.ManifestParserUtils.ContentType.TEXT && c2 && b2.groupIdToCodecsMap_.has(c2) && (d2 = b2.groupIdToCodecsMap_.get(c2));
              f2 = b2.variableSubstitution_(a2.getRequiredAttrValue("URI"), b2.globalVariables_);
              if (b2.uriToStreamInfosMap_.has(f2))
                return u["return"](b2.uriToStreamInfosMap_.get(f2));
              g = b2.getLanguage_(a2);
              h = a2.getAttributeValue("NAME");
              k2 = a2.getAttributeValue("DEFAULT");
              l = "YES" == k2;
              m = "audio" == e2 ? b2.getChannelsCount_(a2) : null;
              n = "audio" == e2 ? b2.isSpatialAudio_(a2) : false;
              p = a2.getAttributeValue("CHARACTERISTICS");
              q = a2.getAttributeValue("FORCED");
              r = "YES" == q;
              return u.yield(b2.createStreamInfo_(f2, d2, e2, g, l, h, m, null, p, r, n), 2);
            }
            t = u.yieldResult;
            b2.groupIdToStreamInfosMap_.has(c2) ? b2.groupIdToStreamInfosMap_.get(c2).push(t) : b2.groupIdToStreamInfosMap_.set(
              c2,
              [t]
            );
            if (null == t)
              return u["return"](null);
            if (b2.uriToStreamInfosMap_.has(f2))
              return u["return"](b2.uriToStreamInfosMap_.get(f2));
            b2.uriToStreamInfosMap_.set(f2, t);
            return u["return"](t);
          });
        };
        shaka.hls.HlsParser.prototype.createStreamInfoFromImageTag_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l, m, n, p;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(q) {
            if (1 == q.nextAddress) {
              goog.asserts.assert("EXT-X-IMAGE-STREAM-INF" == a2.name, "Should only be called on image tags!");
              c2 = shaka.util.ManifestParserUtils.ContentType.IMAGE;
              d2 = b2.variableSubstitution_(a2.getRequiredAttrValue("URI"), b2.globalVariables_);
              e2 = a2.getAttributeValue("CODECS", "jpeg") || "";
              if (b2.uriToStreamInfosMap_.has(d2))
                return q["return"](b2.uriToStreamInfosMap_.get(d2));
              f2 = b2.getLanguage_(a2);
              g = a2.getAttributeValue("NAME");
              h = a2.getAttributeValue("CHARACTERISTICS");
              return q.yield(b2.createStreamInfo_(d2, e2, c2, f2, false, g, null, null, h, false, false), 2);
            }
            k2 = q.yieldResult;
            if (null == k2)
              return q["return"](null);
            if (b2.uriToStreamInfosMap_.has(d2))
              return q["return"](b2.uriToStreamInfosMap_.get(d2));
            if (l = a2.getAttributeValue("RESOLUTION")) {
              if (m = k2.stream.segmentIndex.get(0), n = m.getTilesLayout())
                k2.stream.width = Number(l.split("x")[0]) * Number(n.split("x")[0]), k2.stream.height = Number(l.split("x")[1]) * Number(n.split("x")[1]);
            }
            if (p = a2.getAttributeValue("BANDWIDTH"))
              k2.stream.bandwidth = Number(p);
            b2.uriToStreamInfosMap_.set(d2, k2);
            return q["return"](k2);
          });
        };
        shaka.hls.HlsParser.prototype.createStreamInfoFromVariantTag_ = function(a2, b2, c2, d2) {
          var e2 = this, f2, g, h, k2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(l) {
            if (1 == l.nextAddress) {
              goog.asserts.assert("EXT-X-STREAM-INF" == a2.name, "Should only be called on variant tags!");
              f2 = e2.variableSubstitution_(a2.getRequiredAttrValue("URI"), e2.globalVariables_);
              if (e2.uriToStreamInfosMap_.has(f2))
                return l["return"](e2.uriToStreamInfosMap_.get(f2));
              g = e2.getClosedCaptions_(a2, c2);
              h = shaka.util.ManifestParserUtils.guessCodecs(
                c2,
                b2
              );
              return l.yield(e2.createStreamInfo_(f2, h, c2, "und", false, null, null, g, null, false, false, d2), 2);
            }
            k2 = l.yieldResult;
            if (null == k2)
              return l["return"](null);
            if (e2.uriToStreamInfosMap_.has(f2))
              return l["return"](e2.uriToStreamInfosMap_.get(f2));
            e2.uriToStreamInfosMap_.set(f2, k2);
            return l["return"](k2);
          });
        };
        shaka.hls.HlsParser.prototype.createStreamInfo_ = function(a2, b2, c2, d2, e2, f2, g, h, k2, l, m, n) {
          var p = this, q, r, t, u, v, y, w, x, z, A, C, D, F, B, E, G, J, H, I, K, L, N, M, R, S, P, O, T, U, Y, Z, aa, W, X, V, ba, ca, da, ea;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(Q) {
            switch (Q.nextAddress) {
              case 1:
                return q = shaka.hls.Utils.constructAbsoluteUri(p.masterPlaylistUri_, a2), Q.yield(p.requestManifest_(q), 2);
              case 2:
                r = Q.yieldResult;
                q = r.uri;
                t = p.manifestTextParser_.parsePlaylist(r.data, q);
                if (t.type != shaka.hls.PlaylistType.MEDIA)
                  throw new shaka.util.Error(
                    shaka.util.Error.Severity.CRITICAL,
                    shaka.util.Error.Category.MANIFEST,
                    shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY
                  );
                u = [];
                if (t.segments)
                  for (v = $jscomp.makeIterator(t.segments), y = v.next(); !y.done; y = v.next())
                    w = y.value, x = shaka.hls.Utils.filterTagsByName(w.tags, "EXT-X-KEY"), u.push.apply(u, $jscomp.arrayFromIterable(x));
                z = false;
                A = [];
                C = /* @__PURE__ */ new Set();
                D = $jscomp.makeIterator(u);
                for (F = D.next(); !F.done; F = D.next())
                  if (B = F.value, E = B.getRequiredAttrValue("METHOD"), "NONE" != E) {
                    z = true;
                    if ("AES-128" == E)
                      return shaka.log.warning(
                        "Unsupported HLS Encryption",
                        E
                      ), p.aesEncrypted_ = true, Q["return"](null);
                    G = B.getRequiredAttrValue("KEYFORMAT");
                    if (H = (J = shaka.hls.HlsParser.KEYFORMATS_TO_DRM_PARSERS_[G]) ? J(B) : null) {
                      if (H.keyIds)
                        for (I = $jscomp.makeIterator(H.keyIds), K = I.next(); !K.done; K = I.next())
                          L = K.value, C.add(L);
                      A.push(H);
                    } else
                      shaka.log.warning("Unsupported HLS KEYFORMAT", G);
                  }
                if (z && !A.length)
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_KEYFORMATS_NOT_SUPPORTED);
                N = shaka.hls.Utils.filterTagsByName(
                  t.tags,
                  "EXT-X-DEFINE"
                );
                M = p.parseMediaVariables_(N);
                goog.asserts.assert(null != t.segments, "Media playlist should have segments!");
                p.determinePresentationType_(t);
                return Q.yield(p.guessMimeType_(c2, b2, t, M), 3);
              case 3:
                return R = Q.yieldResult, shaka.hls.HlsParser.RAW_FORMATS_.includes(R) && (b2 = ""), S = /* @__PURE__ */ new Map(), P = /* @__PURE__ */ new Map(), Q.setCatchFinallyBlocks(4), Q.yield(p.createSegments_(a2, t, c2, R, S, M, P, b2, n), 6);
              case 6:
                O = Q.yieldResult;
                Q.leaveTryBlock(5);
                break;
              case 4:
                T = Q.enterCatchBlock();
                if (T.code == shaka.util.Error.Code.HLS_INTERNAL_SKIP_STREAM)
                  return shaka.log.alwaysWarn(
                    "Skipping unsupported HLS stream",
                    R,
                    a2
                  ), Q["return"](null);
                throw T;
              case 5:
                U = O[0].startTime;
                Y = O[O.length - 1].endTime;
                Z = new shaka.media.SegmentIndex(O);
                aa = c2 == shaka.util.ManifestParserUtils.ContentType.TEXT ? shaka.util.ManifestParserUtils.TextStreamKind.SUBTITLE : void 0;
                W = [];
                if (k2)
                  for (X = $jscomp.makeIterator(k2.split(",")), V = X.next(); !V.done; V = X.next())
                    ba = V.value, W.push(ba);
                da = (ca = shaka.hls.Utils.getFirstTagWithName(t.tags, "EXT-X-SERVER-CONTROL")) ? null != ca.getAttribute("CAN-SKIP-UNTIL") : false;
                ea = {
                  id: p.globalId_++,
                  originalId: f2,
                  createSegmentIndex: function() {
                    return Promise.resolve();
                  },
                  segmentIndex: Z,
                  mimeType: R,
                  codecs: b2,
                  kind: aa,
                  encrypted: z,
                  drmInfos: A,
                  keyIds: C,
                  language: d2,
                  label: f2,
                  type: c2,
                  primary: e2,
                  trickModeVideo: null,
                  emsgSchemeIdUris: null,
                  frameRate: void 0,
                  pixelAspectRatio: void 0,
                  width: void 0,
                  height: void 0,
                  bandwidth: void 0,
                  roles: W,
                  forced: l,
                  channelsCount: g,
                  audioSamplingRate: null,
                  spatialAudio: m,
                  closedCaptions: h,
                  hdr: void 0,
                  tilesLayout: void 0
                };
                return Q["return"]({
                  stream: ea,
                  verbatimMediaPlaylistUri: a2,
                  absoluteMediaPlaylistUri: q,
                  minTimestamp: U,
                  maxTimestamp: Y,
                  mediaSequenceToStartTime: S,
                  discontinuityToMediaSequence: P,
                  canSkipSegments: da
                });
            }
          });
        };
        shaka.hls.HlsParser.prototype.determinePresentationType_ = function(a2) {
          var b2 = shaka.hls.HlsParser.PresentationType_, c2 = shaka.hls.Utils.getFirstTagWithName(a2.tags, "EXT-X-PLAYLIST-TYPE"), d2 = shaka.hls.Utils.getFirstTagWithName(a2.tags, "EXT-X-ENDLIST");
          d2 = c2 && "VOD" == c2.value || d2;
          c2 = c2 && "EVENT" == c2.value && !d2;
          c2 = !d2 && !c2;
          d2 ? this.setPresentationType_(b2.VOD) : (c2 ? this.setPresentationType_(b2.LIVE) : this.setPresentationType_(b2.EVENT), b2 = this.getRequiredTag_(a2.tags, "EXT-X-TARGETDURATION"), b2 = Number(b2.value), d2 = shaka.hls.Utils.getFirstTagWithName(
            a2.tags,
            "EXT-X-PART-INF"
          ), this.lowLatencyMode_ && d2 ? (this.partialTargetDuration_ = Number(d2.getRequiredAttrValue("PART-TARGET")), this.minTargetDuration_ = Math.min(this.partialTargetDuration_, this.minTargetDuration_), this.lowLatencyPresentationDelay_ = (a2 = shaka.hls.Utils.getFirstTagWithName(a2.tags, "EXT-X-SERVER-CONTROL")) ? Number(a2.getRequiredAttrValue("PART-HOLD-BACK")) : 0) : this.minTargetDuration_ = Math.min(b2, this.minTargetDuration_), this.maxTargetDuration_ = Math.max(b2, this.maxTargetDuration_));
        };
        shaka.hls.HlsParser.prototype.createPresentationTimeline_ = function() {
          this.isLive_() ? (this.presentationTimeline_ = new shaka.media.PresentationTimeline(0, this.config_.defaultPresentationDelay ? this.config_.defaultPresentationDelay : this.lowLatencyPresentationDelay_ ? this.lowLatencyPresentationDelay_ : 3 * this.maxTargetDuration_), this.presentationTimeline_.setStatic(false)) : (this.presentationTimeline_ = new shaka.media.PresentationTimeline(null, 0), this.presentationTimeline_.setStatic(true));
        };
        shaka.hls.HlsParser.prototype.getInitSegmentReference_ = function(a2, b2, c2) {
          b2 = shaka.hls.Utils.getFirstTagWithName(b2, "EXT-X-MAP");
          if (!b2)
            return null;
          var d2 = b2.getRequiredAttrValue("URI");
          c2 = this.variableSubstitution_(shaka.hls.Utils.constructAbsoluteUri(a2, d2), c2);
          a2 = [c2, b2.getAttributeValue("BYTERANGE", "")].join("-");
          this.mapTagToInitSegmentRefMap_.has(a2) || (b2 = this.createInitSegmentReference_(c2, b2), this.mapTagToInitSegmentRefMap_.set(a2, b2));
          return this.mapTagToInitSegmentRefMap_.get(a2);
        };
        shaka.hls.HlsParser.prototype.createInitSegmentReference_ = function(a2, b2) {
          var c2 = 0, d2 = null, e2 = b2.getAttributeValue("BYTERANGE");
          e2 && (c2 = e2.split("@"), d2 = Number(c2[0]), c2 = Number(c2[1]), d2 = c2 + d2 - 1);
          return new shaka.media.InitSegmentReference(function() {
            return [a2];
          }, c2, d2);
        };
        shaka.hls.HlsParser.prototype.createSegmentReference_ = function(a2, b2, c2, d2, e2, f2, g, h) {
          var k2 = c2.tags, l = this.variableSubstitution_(c2.absoluteUri, f2), m = shaka.hls.Utils.getFirstTagWithName(k2, "EXTINF"), n = 0;
          f2 = 0;
          var p = null;
          if (!m) {
            if (0 == c2.partialSegments.length)
              throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_REQUIRED_TAG_MISSING, "EXTINF");
            if (!this.lowLatencyMode_)
              return null;
          }
          var q = [];
          if (this.lowLatencyMode_) {
            n = {};
            for (var r = 0; r < c2.partialSegments.length; n = { $jscomp$loop$prop$pAbsoluteUri$621: n.$jscomp$loop$prop$pAbsoluteUri$621 }, r++) {
              var t = c2.partialSegments[r], u = 0 == r ? b2 : q[q.length - 1], v = 0 == r ? d2 : u.endTime, y = Number(t.getAttributeValue("DURATION")) || this.partialTargetDuration_;
              if (y) {
                y = v + y;
                var w = 0, x = null;
                "EXT-X-PRELOAD-HINT" == t.name ? w = (u = t.getAttributeValue("BYTERANGE-START")) ? Number(u) : 0 : (w = t.getAttributeValue("BYTERANGE"), u = $jscomp.makeIterator(this.parseByteRange_(u, w)), w = u.next().value, x = u.next().value);
                if (t = t.getAttributeValue("URI"))
                  n.$jscomp$loop$prop$pAbsoluteUri$621 = shaka.hls.Utils.constructAbsoluteUri(g, t), v = new shaka.media.SegmentReference(v, y, function(z) {
                    return function() {
                      return [z.$jscomp$loop$prop$pAbsoluteUri$621];
                    };
                  }(n), w, x, a2, e2, 0, Infinity), q.push(v);
              }
            }
          }
          m ? (c2 = m.value.split(","), n = d2 + Number(c2[0])) : n = q[q.length - 1].endTime;
          (c2 = shaka.hls.Utils.getFirstTagWithName(k2, "EXT-X-BYTERANGE")) ? (p = $jscomp.makeIterator(this.parseByteRange_(b2, c2.value)), f2 = p.next().value, p = p.next().value) : q.length && (f2 = q[0].startByte, p = q[q.length - 1].endByte);
          b2 = "";
          c2 = null;
          h == shaka.util.ManifestParserUtils.ContentType.IMAGE && (b2 = "1x1", h = shaka.hls.Utils.getFirstTagWithName(k2, "EXT-X-TILES")) && (b2 = h.getRequiredAttrValue("LAYOUT"), (h = h.getAttributeValue("DURATION")) && (c2 = Number(h)));
          return new shaka.media.SegmentReference(d2, n, function() {
            return l.length ? [l] : [];
          }, f2, p, a2, e2, 0, Infinity, q, b2, c2);
        };
        shaka.hls.HlsParser.prototype.parseByteRange_ = function(a2, b2) {
          var c2 = 0, d2 = null;
          b2 && (c2 = b2.split("@"), d2 = Number(c2[0]), c2[1] ? c2 = Number(c2[1]) : (goog.asserts.assert(a2, "Cannot refer back to previous HLS segment!"), c2 = a2.endByte + 1), d2 = c2 + d2 - 1);
          return [c2, d2];
        };
        shaka.hls.HlsParser.prototype.notifySegments_ = function() {
          if (this.presentationTimeline_) {
            for (var a2 = $jscomp.makeIterator(this.segmentsToNotifyByStream_), b2 = a2.next(); !b2.done; b2 = a2.next())
              this.presentationTimeline_.notifySegments(b2.value);
            this.segmentsToNotifyByStream_ = [];
          }
        };
        shaka.hls.HlsParser.prototype.createSegments_ = function(a2, b2, c2, d2, e2, f2, g, h, k2) {
          var l = this, m, n, p, q, r, t, u, v, y, w, x, z, A, C, D, F, B, E, G, J, H;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(I) {
            switch (I.nextAddress) {
              case 1:
                m = b2.segments;
                goog.asserts.assert(m.length, "Playlist should have segments!");
                p = shaka.hls.Utils.getFirstTagWithNameAsNumber(b2.tags, "EXT-X-MEDIA-SEQUENCE", 0);
                r = (q = shaka.hls.Utils.getFirstTagWithName(b2.tags, "EXT-X-SKIP")) ? Number(q.getAttributeValue("SKIPPED-SEGMENTS")) : 0;
                t = p + r;
                if (l.isLive_() && e2.has(t)) {
                  u = e2.get(t);
                  I.jumpTo(2);
                  break;
                }
                if (null != l.playlistStartTime_) {
                  I.jumpTo(3);
                  break;
                }
                n = l.getInitSegmentReference_(b2.absoluteUri, m[0].tags, f2);
                goog.asserts.assert(c2 != shaka.util.ManifestParserUtils.ContentType.TEXT && c2 != shaka.util.ManifestParserUtils.ContentType.IMAGE, "Should only get start time from audio or video streams");
                v = l;
                return I.yield(l.getStartTime_(a2, n, d2, t, false, m[0], f2, c2, h, k2), 4);
              case 4:
                v.playlistStartTime_ = I.yieldResult;
              case 3:
                u = l.playlistStartTime_;
              case 2:
                y = m[0].absoluteUri;
                shaka.log.debug(
                  "First segment",
                  y.split("/").pop(),
                  "starts at",
                  u
                );
                w = shaka.hls.Utils.getFirstTagWithNameAsNumber(b2.tags, "EXT-X-DISCONTINUITY-SEQUENCE");
                if (l.lowLatencyMode_ && (g.has(w) || g.set(w, t), r))
                  for (x = g; x.has(w + 1) && x.get(w + 1) < t; )
                    w++;
                z = l.discontinuityToTso_.get(w) || 0;
                A = [];
                C = 0;
              case 5:
                if (!(C < m.length)) {
                  I.jumpTo(7);
                  break;
                }
                D = m[C];
                F = A[A.length - 1];
                B = 0 == C ? u : F.endTime;
                t = p + r + C;
                e2.set(t, B);
                n = l.getInitSegmentReference_(b2.absoluteUri, D.tags, f2);
                E = shaka.hls.Utils.getFirstTagWithName(D.tags, "EXT-X-DISCONTINUITY");
                if (!E) {
                  I.jumpTo(8);
                  break;
                }
                w++;
                g.set(w, t);
                return I.yield(l.getTimestampOffset_(w, a2, n, d2, t, D, f2, B, c2, h, k2), 9);
              case 9:
                z = I.yieldResult;
              case 8:
                !l.lowLatencyMode_ && (G = l.playerInterface_.isAutoLowLatencyMode()) && (l.playerInterface_.enableLowLatencyMode(), l.lowLatencyMode_ = l.playerInterface_.isLowLatencyMode());
                J = shaka.hls.Utils.getFirstTagWithName(D.tags, "EXTINF");
                l.lowLatencyMode_ || J ? (H = l.createSegmentReference_(n, F, D, B, z, f2, b2.absoluteUri, c2)) && A.push(H) : l.lowLatencyMode_ || shaka.log.alwaysWarn("Low-latency HLS live stream detected, but low-latency streaming mode is not enabled in Shaka Player. Set streaming.lowLatencyMode configuration to true, and see https://bit.ly/3clctcj for details.");
                C++;
                I.jumpTo(5);
                break;
              case 7:
                return I["return"](A);
            }
          });
        };
        shaka.hls.HlsParser.prototype.getTimestampOffset_ = function(a2, b2, c2, d2, e2, f2, g, h, k2, l, m) {
          var n = this, p, q;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(r) {
            if (1 == r.nextAddress)
              return p = 0, n.discontinuityToTso_.has(a2) ? (p = n.discontinuityToTso_.get(a2), r.jumpTo(2)) : r.yield(n.getStartTime_(b2, c2, d2, e2, true, f2, g, k2, l, m), 3);
            2 != r.nextAddress && (q = r.yieldResult, p = h - q, shaka.log.v1("Segment timestampOffset =", p), n.discontinuityToTso_.set(a2, p));
            return r["return"](p);
          });
        };
        shaka.hls.HlsParser.prototype.fetchStartOfSegment_ = function(a2, b2, c2, d2, e2) {
          var f2 = this, g, h, k2, l, m, n;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(p) {
            switch (p.nextAddress) {
              case 1:
                g = shaka.net.NetworkingEngine.RequestType.SEGMENT;
                h = shaka.util.Networking.createSegmentRequest(a2.getUris(), a2.startByte, a2.endByte, f2.config_.retryParameters);
                f2.playerInterface_.modifySegmentRequest(h, { type: b2, init: a2 instanceof shaka.media.InitSegmentReference, duration: a2.endTime - a2.startTime, mimeType: c2, codecs: d2, bandwidth: e2 });
                if (f2.config_.hls.useFullSegmentsForStartTime)
                  return p["return"](f2.makeNetworkRequest_(h, g));
                k2 = shaka.util.Networking.createSegmentRequest(a2.getUris(), a2.startByte, a2.startByte + shaka.hls.HlsParser.START_OF_SEGMENT_SIZE_ - 1, f2.config_.retryParameters);
                f2.playerInterface_.modifySegmentRequest(k2, { type: b2, init: a2 instanceof shaka.media.InitSegmentReference, duration: a2.endTime - a2.startTime, mimeType: c2, codecs: d2, bandwidth: e2 });
                p.setCatchFinallyBlocks(2);
                return p.yield(f2.makeNetworkRequest_(k2, g), 4);
              case 4:
                return l = p.yieldResult, p["return"](l);
              case 2:
                m = p.enterCatchBlock();
                if (m.code == shaka.util.Error.Code.OPERATION_ABORTED)
                  throw m;
                shaka.log.alwaysWarn("Unable to fetch the starting part of HLS segment! Falling back to a full segment request, which is expensive!  Your server should support Range requests and CORS preflights.", k2.uris[0]);
                return p.yield(f2.makeNetworkRequest_(h, g), 5);
              case 5:
                return n = p.yieldResult, p["return"](n);
            }
          });
        };
        shaka.hls.HlsParser.prototype.getStartTime_ = function(a2, b2, c2, d2, e2, f2, g, h, k2, l) {
          var m = this, n, p, q, r, t, u, v, y;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
            switch (w.nextAddress) {
              case 1:
                n = m.createSegmentReference_(b2, null, f2, 0, 0, g, "", h);
                goog.asserts.assert(null != n, "Segment reference should not be null!");
                if (m.manifest_ && !e2) {
                  p = m.uriToStreamInfosMap_.get(a2);
                  q = p.mediaSequenceToStartTime.get(d2);
                  if (void 0 != q)
                    return shaka.log.v1("Found segment start time in previous manifest", q), w["return"](q);
                  shaka.log.debug("Unable to find segment start time in previous manifest!");
                }
                shaka.log.v1("Fetching segment to find start time");
                c2 = c2.toLowerCase();
                if (shaka.hls.HlsParser.RAW_FORMATS_.includes(c2))
                  throw shaka.log.alwaysWarn("Raw formats are not yet supported.  Skipping " + c2), new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_INTERNAL_SKIP_STREAM);
                if ("video/webm" == c2)
                  throw shaka.log.alwaysWarn("WebM in HLS is not yet supported.  Skipping."), new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_INTERNAL_SKIP_STREAM);
                if ("video/mp4" != c2 && "audio/mp4" != c2) {
                  w.jumpTo(2);
                  break;
                }
                r = [m.fetchStartOfSegment_(n, h, c2, k2, l)];
                b2 && r.push(m.fetchStartOfSegment_(b2, h, c2, k2, l));
                return w.yield(Promise.all(r), 3);
              case 3:
                return t = w.yieldResult, u = t[0], v = t[1] || t[0], w["return"](m.getStartTimeFromMp4Segment_(a2, u.uri, u.data, v.data));
              case 2:
                if ("video/mp2t" != c2) {
                  w.jumpTo(4);
                  break;
                }
                return w.yield(m.fetchStartOfSegment_(n, h, c2, k2, l), 5);
              case 5:
                return y = w.yieldResult, goog.asserts.assert(y.data, "Should have a response body!"), w["return"](m.getStartTimeFromTsSegment_(
                  a2,
                  y.uri,
                  y.data
                ));
              case 4:
                throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME, a2);
            }
          });
        };
        shaka.hls.HlsParser.prototype.getStartTimeFromMp4Segment_ = function(a2, b2, c2, d2) {
          var e2 = shaka.util.Mp4Parser, f2 = 0;
          new e2().box("moov", e2.children).box("trak", e2.children).box("mdia", e2.children).fullBox("mdhd", function(k2) {
            goog.asserts.assert(0 == k2.version || 1 == k2.version, "MDHD version can only be 0 or 1");
            f2 = shaka.util.Mp4BoxParsers.parseMDHD(k2.reader, k2.version).timescale;
            k2.parser.stop();
          }).parse(d2, true);
          if (!f2)
            throw shaka.log.error("Unable to find timescale in init segment!"), new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.MANIFEST,
              shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME,
              a2,
              b2
            );
          var g = 0, h = false;
          new e2().box("moof", e2.children).box("traf", e2.children).fullBox("tfdt", function(k2) {
            goog.asserts.assert(0 == k2.version || 1 == k2.version, "TFDT version can only be 0 or 1");
            g = shaka.util.Mp4BoxParsers.parseTFDT(k2.reader, k2.version).baseMediaDecodeTime / f2;
            h = true;
            k2.parser.stop();
          }).parse(c2, true);
          if (!h)
            throw new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.MANIFEST,
              shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME,
              a2,
              b2
            );
          return g;
        };
        shaka.hls.HlsParser.prototype.getStartTimeFromTsSegment_ = function(a2, b2, c2) {
          var d2 = new shaka.util.DataViewReader(c2, shaka.util.DataViewReader.Endianness.BIG_ENDIAN), e2 = function() {
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME, a2, b2);
          }, f2 = 0, g = 0;
          c2 = function() {
            d2.seek(f2 + 188);
            g = d2.readUint8();
            71 != g && (d2.seek(f2 + 192), g = d2.readUint8());
            71 != g && (d2.seek(f2 + 204), g = d2.readUint8());
            71 != g && e2();
            d2.rewind(1);
          };
          for (var h = Math.min(d2.getLength() - 188, 940); ; ) {
            f2 = d2.getPosition();
            g = d2.readUint8();
            if (71 != g) {
              if (0 < h) {
                --h;
                continue;
              }
              e2();
            }
            h = 0;
            var k2 = d2.readUint16();
            if (8191 == (k2 & 8191))
              c2();
            else if (k2 & 16384)
              if (k2 = (d2.readUint8() & 48) >> 4, 0 != k2 && 2 != k2 || e2(), 3 == k2 && (k2 = d2.readUint8(), d2.skip(k2)), 1 != d2.readUint32() >> 8)
                c2();
              else
                return d2.skip(3), c2 = d2.readUint8() >> 6, 0 != c2 && 1 != c2 || e2(), h = d2.readUint8(), 0 == h && e2(), 2 == c2 ? goog.asserts.assert(5 == h, "Bad PES header?") : 3 == c2 && goog.asserts.assert(10 == h, "Bad PES header?"), c2 = d2.readUint8(), h = d2.readUint16(), k2 = d2.readUint16(), (1073741824 * ((c2 & 14) >> 1) + ((h & 65534) << 14 | (k2 & 65534) >> 1)) / shaka.hls.HlsParser.TS_TIMESCALE_;
            else
              c2();
          }
        };
        shaka.hls.HlsParser.prototype.variableSubstitution_ = function(a2, b2) {
          var c2 = String(a2).replace(/%7B/g, "{").replace(/%7D/g, "}"), d2 = c2.match(/{\$\w*}/g);
          if (d2) {
            d2 = $jscomp.makeIterator(d2);
            for (var e2 = d2.next(); !e2.done; e2 = d2.next()) {
              e2 = e2.value;
              var f2 = e2.slice(2, e2.length - 1), g = b2.get(f2);
              if (g)
                c2 = c2.replace(e2, g);
              else
                throw shaka.log.error("A variable has been found that is not declared", f2), new shaka.util.Error(
                  shaka.util.Error.Severity.CRITICAL,
                  shaka.util.Error.Category.MANIFEST,
                  shaka.util.Error.Code.HLS_VARIABLE_NOT_FOUND,
                  f2
                );
            }
          }
          return c2;
        };
        shaka.hls.HlsParser.prototype.guessMimeType_ = function(a2, b2, c2, d2) {
          var e2 = this, f2, g, h, k2, l, m, n, p, q, r, t, u;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(v) {
            if (1 == v.nextAddress) {
              f2 = shaka.hls.HlsParser;
              g = shaka.util.ManifestParserUtils.ContentType;
              h = shaka.net.NetworkingEngine.RequestType.SEGMENT;
              goog.asserts.assert(c2.segments.length, "Playlist should have segments!");
              k2 = e2.variableSubstitution_(c2.segments[0].absoluteUri, d2);
              l = new goog.Uri(k2);
              m = l.getPath().split(".").pop();
              n = f2.EXTENSION_MAP_BY_CONTENT_TYPE_[a2];
              if (p = n[m])
                return v["return"](p);
              if (a2 == g.TEXT)
                return b2 && "vtt" != b2 && "wvtt" != b2 ? v["return"]("application/mp4") : v["return"]("text/vtt");
              if (a2 == g.IMAGE && (!b2 || "jpeg" == b2))
                return v["return"]("image/jpeg");
              q = shaka.net.NetworkingEngine.makeRequest([k2], e2.config_.retryParameters);
              q.method = "HEAD";
              return v.yield(e2.makeNetworkRequest_(q, h), 2);
            }
            r = v.yieldResult;
            t = r.headers["content-type"];
            return t ? v["return"](t.split(";")[0]) : (u = n.mp4, v["return"](u));
          });
        };
        shaka.hls.HlsParser.prototype.getRequiredTag_ = function(a2, b2) {
          var c2 = shaka.hls.Utils.getFirstTagWithName(a2, b2);
          if (!c2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.HLS_REQUIRED_TAG_MISSING, b2);
          return c2;
        };
        shaka.hls.HlsParser.prototype.addVideoAttributes_ = function(a2, b2, c2, d2, e2) {
          a2 && (a2.width = Number(b2) || void 0, a2.height = Number(c2) || void 0, a2.frameRate = Number(d2) || void 0, a2.hdr = e2 || void 0);
        };
        shaka.hls.HlsParser.prototype.requestManifest_ = function(a2) {
          var b2 = shaka.net.NetworkingEngine.RequestType.MANIFEST;
          a2 = shaka.net.NetworkingEngine.makeRequest([a2], this.config_.retryParameters);
          this.playerInterface_.modifyManifestRequest(a2, { format: shaka.util.CmcdManager.StreamingFormat.HLS });
          return this.makeNetworkRequest_(a2, b2);
        };
        shaka.hls.HlsParser.prototype.onUpdate_ = function() {
          var a2 = this, b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress) {
              shaka.log.info("Updating manifest...");
              goog.asserts.assert(0 < a2.updatePlaylistDelay_, "We should only call |onUpdate_| when we are suppose to be updating.");
              if (!a2.playerInterface_)
                return d2["return"]();
              d2.setCatchFinallyBlocks(2);
              return d2.yield(a2.update(), 4);
            }
            if (2 != d2.nextAddress)
              return b2 = a2.updatePlaylistDelay_, a2.updatePlaylistTimer_.tickAfter(b2), d2.leaveTryBlock(0);
            c2 = d2.enterCatchBlock();
            if (!a2.playerInterface_)
              return d2["return"]();
            goog.asserts.assert(c2 instanceof shaka.util.Error, "Should only receive a Shaka error");
            c2.severity = shaka.util.Error.Severity.RECOVERABLE;
            a2.playerInterface_.onError(c2);
            a2.updatePlaylistTimer_.tickAfter(0.1);
            d2.jumpToEnd();
          });
        };
        shaka.hls.HlsParser.prototype.isLive_ = function() {
          return this.presentationType_ != shaka.hls.HlsParser.PresentationType_.VOD;
        };
        shaka.hls.HlsParser.prototype.setPresentationType_ = function(a2) {
          this.presentationType_ = a2;
          this.presentationTimeline_ && this.presentationTimeline_.setStatic(!this.isLive_());
          this.isLive_() || this.updatePlaylistTimer_.stop();
        };
        shaka.hls.HlsParser.prototype.makeNetworkRequest_ = function(a2, b2) {
          if (!this.operationManager_)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.PLAYER, shaka.util.Error.Code.OPERATION_ABORTED);
          var c2 = this.playerInterface_.networkingEngine.request(b2, a2);
          this.operationManager_.manage(c2);
          return c2.promise;
        };
        shaka.hls.HlsParser.widevineDrmParser_ = function(a2) {
          var b2 = a2.getRequiredAttrValue("METHOD"), c2 = ["SAMPLE-AES", "SAMPLE-AES-CTR"];
          if (!c2.includes(b2))
            return shaka.log.error("Widevine in HLS is only supported with [", c2.join(", "), "], not", b2), null;
          b2 = a2.getRequiredAttrValue("URI");
          b2 = shaka.net.DataUriPlugin.parseRaw(b2);
          b2 = shaka.util.BufferUtils.toUint8(b2.data);
          b2 = shaka.util.ManifestParserUtils.createDrmInfo("com.widevine.alpha", [{ initDataType: "cenc", initData: b2 }]);
          if (a2 = a2.getAttributeValue("KEYID"))
            a2 = a2.toLowerCase(), goog.asserts.assert(a2.startsWith("0x"), "Incorrect KEYID format!"), b2.keyIds = /* @__PURE__ */ new Set([a2.substr(2)]);
          return b2;
        };
        shaka.hls.HlsParser.playreadyDrmParser_ = function(a2) {
          var b2 = a2.getRequiredAttrValue("METHOD"), c2 = ["SAMPLE-AES", "SAMPLE-AES-CTR"];
          if (!c2.includes(b2))
            return shaka.log.error("PlayReady in HLS is only supported with [", c2.join(", "), "], not", b2), null;
          a2 = a2.getRequiredAttrValue("URI");
          a2 = shaka.net.DataUriPlugin.parseRaw(a2);
          a2 = shaka.util.BufferUtils.toUint8(a2.data);
          b2 = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]);
          a2 = shaka.util.Pssh.createPssh(a2, b2);
          return shaka.util.ManifestParserUtils.createDrmInfo(
            "com.microsoft.playready",
            [{ initDataType: "cenc", initData: a2 }]
          );
        };
        goog.exportSymbol("shaka.hls.HlsParser", shaka.hls.HlsParser);
        shaka.hls.HlsParser.AUDIO_EXTENSIONS_TO_MIME_TYPES_ = { mp4: "audio/mp4", mp4a: "audio/mp4", m4s: "audio/mp4", m4i: "audio/mp4", m4a: "audio/mp4", m4f: "audio/mp4", cmfa: "audio/mp4", ts: "video/mp2t", aac: "audio/aac", ac3: "audio/ac3", ec3: "audio/ec3", mp3: "audio/mpeg" };
        shaka.hls.HlsParser.RAW_FORMATS_ = ["audio/aac", "audio/ac3", "audio/ec3", "audio/mpeg"];
        shaka.hls.HlsParser.VIDEO_EXTENSIONS_TO_MIME_TYPES_ = { mp4: "video/mp4", mp4v: "video/mp4", m4s: "video/mp4", m4i: "video/mp4", m4v: "video/mp4", m4f: "video/mp4", cmfv: "video/mp4", ts: "video/mp2t" };
        shaka.hls.HlsParser.TEXT_EXTENSIONS_TO_MIME_TYPES_ = { mp4: "application/mp4", m4s: "application/mp4", m4i: "application/mp4", m4f: "application/mp4", cmft: "application/mp4", vtt: "text/vtt", ttml: "application/ttml+xml" };
        shaka.hls.HlsParser.IMAGE_EXTENSIONS_TO_MIME_TYPES_ = { jpg: "image/jpeg", png: "image/png", svg: "image/svg+xml", webp: "image/webp", avif: "image/avif" };
        shaka.hls.HlsParser.EXTENSION_MAP_BY_CONTENT_TYPE_ = { audio: shaka.hls.HlsParser.AUDIO_EXTENSIONS_TO_MIME_TYPES_, video: shaka.hls.HlsParser.VIDEO_EXTENSIONS_TO_MIME_TYPES_, text: shaka.hls.HlsParser.TEXT_EXTENSIONS_TO_MIME_TYPES_, image: shaka.hls.HlsParser.IMAGE_EXTENSIONS_TO_MIME_TYPES_ };
        shaka.hls.HlsParser.KEYFORMATS_TO_DRM_PARSERS_ = { "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": shaka.hls.HlsParser.widevineDrmParser_, "com.microsoft.playready": shaka.hls.HlsParser.playreadyDrmParser_ };
        shaka.hls.HlsParser.PresentationType_ = { VOD: "VOD", EVENT: "EVENT", LIVE: "LIVE" };
        shaka.hls.HlsParser.TS_TIMESCALE_ = 9e4;
        shaka.hls.HlsParser.START_OF_SEGMENT_SIZE_ = 2048;
        shaka.media.ManifestParser.registerParserByExtension("m3u8", function() {
          return new shaka.hls.HlsParser();
        });
        shaka.media.ManifestParser.registerParserByMime("application/x-mpegurl", function() {
          return new shaka.hls.HlsParser();
        });
        shaka.media.ManifestParser.registerParserByMime("application/vnd.apple.mpegurl", function() {
          return new shaka.hls.HlsParser();
        });
        shaka.net.HttpPluginUtils = function() {
        };
        shaka.net.HttpPluginUtils.makeResponse = function(a2, b2, c2, d2, e2, f2) {
          if (200 <= c2 && 299 >= c2 && 202 != c2)
            return { uri: e2 || d2, originalUri: d2, data: b2, status: c2, headers: a2, fromCache: !!a2["x-shaka-from-cache"] };
          e2 = null;
          try {
            e2 = shaka.util.StringUtils.fromBytesAutoDetect(b2);
          } catch (g) {
          }
          shaka.log.debug("HTTP error text:", e2);
          throw new shaka.util.Error(401 == c2 || 403 == c2 ? shaka.util.Error.Severity.CRITICAL : shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.BAD_HTTP_STATUS, d2, c2, e2, a2, f2);
        };
        shaka.net.HttpFetchPlugin = function() {
        };
        shaka.net.HttpFetchPlugin.parse = function(a2, b2, c2, d2, e2) {
          var f2 = new shaka.net.HttpFetchPlugin.Headers_();
          shaka.util.MapUtils.asMap(b2.headers).forEach(function(l, m) {
            f2.append(m, l);
          });
          var g = new shaka.net.HttpFetchPlugin.AbortController_(), h = { canceled: false, timedOut: false };
          a2 = shaka.net.HttpFetchPlugin.request_(a2, c2, { body: b2.body || void 0, headers: f2, method: b2.method, signal: g.signal, credentials: b2.allowCrossSiteCredentials ? "include" : void 0 }, h, d2, e2, b2.streamDataCallback);
          a2 = new shaka.util.AbortableOperation(a2, function() {
            h.canceled = true;
            g.abort();
            return Promise.resolve();
          });
          if (b2 = b2.retryParameters.timeout) {
            var k2 = new shaka.util.Timer(function() {
              h.timedOut = true;
              g.abort();
            });
            k2.tickAfter(b2 / 1e3);
            a2["finally"](function() {
              k2.stop();
            });
          }
          return a2;
        };
        shaka.net.HttpFetchPlugin.request_ = function(a2, b2, c2, d2, e2, f2, g) {
          var h, k2, l, m, n, p, q, r, t, u, v, y, w;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(x) {
            switch (x.nextAddress) {
              case 1:
                return h = shaka.net.HttpFetchPlugin.fetch_, k2 = shaka.net.HttpFetchPlugin.ReadableStream_, p = n = 0, q = Date.now(), x.setCatchFinallyBlocks(2), x.yield(h(a2, c2), 4);
              case 4:
                return l = x.yieldResult, f2(shaka.net.HttpFetchPlugin.headersToGenericObject_(l.headers)), r = l.clone().body.getReader(), u = (t = l.headers.get("Content-Length")) ? parseInt(
                  t,
                  10
                ) : 0, v = function(z) {
                  var A = function() {
                    var C, D, F;
                    return $jscomp.asyncExecutePromiseGeneratorProgram(function(B) {
                      switch (B.nextAddress) {
                        case 1:
                          return B.setCatchFinallyBlocks(2), B.yield(r.read(), 4);
                        case 4:
                          C = B.yieldResult;
                          B.leaveTryBlock(3);
                          break;
                        case 2:
                          return D = B.enterCatchBlock(), shaka.log.v1("error reading from stream", D.message), B["return"]();
                        case 3:
                          if (C.done) {
                            B.jumpTo(5);
                            break;
                          }
                          n += C.value.byteLength;
                          if (!g) {
                            B.jumpTo(5);
                            break;
                          }
                          return B.yield(g(C.value), 5);
                        case 5:
                          F = Date.now();
                          if (100 < F - q || C.done)
                            e2(F - q, n - p, u - n), p = n, q = F;
                          C.done ? (goog.asserts.assert(!C.value, 'readObj should be unset when "done" is true.'), z.close()) : (z.enqueue(C.value), A());
                          B.jumpToEnd();
                      }
                    });
                  };
                  A();
                }, new k2({ start: v }), x.yield(l.arrayBuffer(), 5);
              case 5:
                m = x.yieldResult;
                x.leaveTryBlock(3);
                break;
              case 2:
                y = x.enterCatchBlock();
                if (d2.canceled)
                  throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.OPERATION_ABORTED, a2, b2);
                if (d2.timedOut)
                  throw new shaka.util.Error(
                    shaka.util.Error.Severity.RECOVERABLE,
                    shaka.util.Error.Category.NETWORK,
                    shaka.util.Error.Code.TIMEOUT,
                    a2,
                    b2
                  );
                throw new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.HTTP_ERROR, a2, y, b2);
              case 3:
                return w = shaka.net.HttpFetchPlugin.headersToGenericObject_(l.headers), x["return"](shaka.net.HttpPluginUtils.makeResponse(w, m, l.status, a2, l.url, b2));
            }
          });
        };
        shaka.net.HttpFetchPlugin.headersToGenericObject_ = function(a2) {
          var b2 = {};
          a2.forEach(function(c2, d2) {
            b2[d2.trim()] = c2;
          });
          return b2;
        };
        shaka.net.HttpFetchPlugin.isSupported = function() {
          if (window.ReadableStream)
            try {
              new ReadableStream({});
            } catch (a2) {
              return false;
            }
          else
            return false;
          return !(!window.fetch || !window.AbortController);
        };
        goog.exportSymbol("shaka.net.HttpFetchPlugin", shaka.net.HttpFetchPlugin);
        goog.exportProperty(shaka.net.HttpFetchPlugin, "isSupported", shaka.net.HttpFetchPlugin.isSupported);
        goog.exportProperty(shaka.net.HttpFetchPlugin, "parse", shaka.net.HttpFetchPlugin.parse);
        shaka.net.HttpFetchPlugin.fetch_ = window.fetch;
        shaka.net.HttpFetchPlugin.AbortController_ = window.AbortController;
        shaka.net.HttpFetchPlugin.ReadableStream_ = window.ReadableStream;
        shaka.net.HttpFetchPlugin.Headers_ = window.Headers;
        shaka.net.HttpFetchPlugin.isSupported() && (shaka.net.NetworkingEngine.registerScheme("http", shaka.net.HttpFetchPlugin.parse, shaka.net.NetworkingEngine.PluginPriority.PREFERRED, true), shaka.net.NetworkingEngine.registerScheme("https", shaka.net.HttpFetchPlugin.parse, shaka.net.NetworkingEngine.PluginPriority.PREFERRED, true), shaka.net.NetworkingEngine.registerScheme("blob", shaka.net.HttpFetchPlugin.parse, shaka.net.NetworkingEngine.PluginPriority.PREFERRED, true));
        shaka.net.HttpXHRPlugin = function() {
        };
        shaka.net.HttpXHRPlugin.parse = function(a2, b2, c2, d2, e2) {
          var f2 = new shaka.net.HttpXHRPlugin.Xhr_(), g = Date.now(), h = 0, k2 = new Promise(function(l, m) {
            f2.open(b2.method, a2, true);
            f2.responseType = "arraybuffer";
            f2.timeout = b2.retryParameters.timeout;
            f2.withCredentials = b2.allowCrossSiteCredentials;
            f2.onabort = function() {
              m(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.OPERATION_ABORTED, a2, c2));
            };
            var n = false;
            f2.onreadystatechange = function(r) {
              2 != f2.readyState || n || (r = shaka.net.HttpXHRPlugin.headersToGenericObject_(f2), e2(r), n = true);
            };
            f2.onload = function(r) {
              r = shaka.net.HttpXHRPlugin.headersToGenericObject_(f2);
              goog.asserts.assert(f2.response instanceof ArrayBuffer, "XHR should have a response by now!");
              var t = f2.response;
              try {
                var u = shaka.net.HttpPluginUtils.makeResponse(r, t, f2.status, a2, f2.responseURL, c2);
                l(u);
              } catch (v) {
                goog.asserts.assert(v instanceof shaka.util.Error, "Wrong error type!"), m(v);
              }
            };
            f2.onerror = function(r) {
              m(new shaka.util.Error(
                shaka.util.Error.Severity.RECOVERABLE,
                shaka.util.Error.Category.NETWORK,
                shaka.util.Error.Code.HTTP_ERROR,
                a2,
                r,
                c2
              ));
            };
            f2.ontimeout = function(r) {
              m(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.TIMEOUT, a2, c2));
            };
            f2.onprogress = function(r) {
              var t = Date.now();
              if (100 < t - g || r.lengthComputable && r.loaded == r.total)
                d2(t - g, r.loaded - h, r.total - r.loaded), h = r.loaded, g = t;
            };
            for (var p in b2.headers) {
              var q = p.toLowerCase();
              f2.setRequestHeader(q, b2.headers[p]);
            }
            f2.send(b2.body);
          });
          return new shaka.util.AbortableOperation(k2, function() {
            f2.abort();
            return Promise.resolve();
          });
        };
        shaka.net.HttpXHRPlugin.headersToGenericObject_ = function(a2) {
          var b2 = a2.getAllResponseHeaders().trim().split("\r\n");
          a2 = {};
          b2 = $jscomp.makeIterator(b2);
          for (var c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value.split(": "), a2[c2[0].toLowerCase()] = c2.slice(1).join(": ");
          return a2;
        };
        goog.exportSymbol("shaka.net.HttpXHRPlugin", shaka.net.HttpXHRPlugin);
        goog.exportProperty(shaka.net.HttpXHRPlugin, "parse", shaka.net.HttpXHRPlugin.parse);
        shaka.net.HttpXHRPlugin.Xhr_ = window.XMLHttpRequest;
        shaka.net.NetworkingEngine.registerScheme("http", shaka.net.HttpXHRPlugin.parse, shaka.net.NetworkingEngine.PluginPriority.FALLBACK, true);
        shaka.net.NetworkingEngine.registerScheme("https", shaka.net.HttpXHRPlugin.parse, shaka.net.NetworkingEngine.PluginPriority.FALLBACK, true);
        shaka.net.NetworkingEngine.registerScheme("blob", shaka.net.HttpXHRPlugin.parse, shaka.net.NetworkingEngine.PluginPriority.FALLBACK, true);
        shaka.offline = {};
        shaka.offline.DownloadInfo = function(a2, b2, c2, d2) {
          this.ref = a2;
          this.estimateId = b2;
          this.groupId = c2;
          this.isInitSegment = d2;
        };
        shaka.offline.DownloadInfo.idForSegmentRef = function(a2) {
          return a2.getUris().map(function(b2) {
            return "{" + encodeURI(b2) + "}";
          }).join("") + ":" + a2.startByte + ":" + a2.endByte;
        };
        shaka.offline.DownloadInfo.prototype.getRefId = function() {
          return shaka.offline.DownloadInfo.idForSegmentRef(this.ref);
        };
        shaka.offline.DownloadInfo.prototype.makeSegmentRequest = function(a2) {
          return shaka.util.Networking.createSegmentRequest(this.ref.getUris(), this.ref.startByte, this.ref.endByte, a2.streaming.retryParameters);
        };
        shaka.offline.DownloadProgressEstimator = function() {
          this.actualDownloaded_ = this.estimatedDownloaded_ = this.estimatedTotal_ = 0;
          this.pending_ = /* @__PURE__ */ new Map();
          this.nextId_ = 0;
        };
        shaka.offline.DownloadProgressEstimator.prototype.open = function(a2) {
          this.estimatedTotal_ += a2;
          var b2 = this.nextId_;
          this.nextId_++;
          this.pending_.set(b2, a2);
          return b2;
        };
        shaka.offline.DownloadProgressEstimator.prototype.close = function(a2, b2) {
          if (this.pending_.has(a2)) {
            var c2 = this.pending_.get(a2);
            this.pending_["delete"](a2);
            this.estimatedDownloaded_ += c2;
            this.actualDownloaded_ += b2;
          }
        };
        shaka.offline.DownloadProgressEstimator.prototype.getEstimatedProgress = function() {
          return 0 == this.estimatedTotal_ ? 0 : this.estimatedDownloaded_ / this.estimatedTotal_;
        };
        shaka.offline.DownloadProgressEstimator.prototype.getTotalDownloaded = function() {
          return this.actualDownloaded_;
        };
        shaka.offline.DownloadManager = function(a2) {
          var b2 = this;
          this.networkingEngine_ = a2;
          this.groups_ = /* @__PURE__ */ new Map();
          this.destroyer_ = new shaka.util.Destroyer(function() {
            return b2.abortAll()["catch"](function() {
            });
          });
          this.abortCallbacks_ = [];
          this.onProgress_ = function(c2, d2) {
          };
          this.onInitData_ = function(c2, d2) {
          };
          this.estimator_ = new shaka.offline.DownloadProgressEstimator();
        };
        shaka.offline.DownloadManager.prototype.destroy = function() {
          return this.destroyer_.destroy();
        };
        shaka.offline.DownloadManager.prototype.setCallbacks = function(a2, b2) {
          this.onProgress_ = a2;
          this.onInitData_ = b2;
        };
        shaka.offline.DownloadManager.prototype.abortAll = function() {
          var a2 = this.abortCallbacks_.map(function(b2) {
            return b2();
          });
          this.abortCallbacks_ = [];
          return Promise.all(a2);
        };
        shaka.offline.DownloadManager.prototype.addDownloadEstimate = function(a2) {
          return this.estimator_.open(a2);
        };
        shaka.offline.DownloadManager.prototype.queue = function(a2, b2, c2, d2, e2) {
          var f2 = this;
          this.destroyer_.ensureNotDestroyed();
          var g = (this.groups_.get(a2) || Promise.resolve()).then(function() {
            var h, k2, l, m, n, p, q;
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(r) {
              if (1 == r.nextAddress)
                return r.yield(f2.fetchSegment_(b2), 2);
              h = r.yieldResult;
              if (f2.destroyer_.destroyed())
                throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.OPERATION_ABORTED);
              if (d2)
                for (m in k2 = shaka.util.BufferUtils.toUint8(h), l = new shaka.util.Pssh(k2), l.data)
                  n = Number(m), p = l.data[n], q = l.systemIds[n], f2.onInitData_(p, q);
              f2.estimator_.close(c2, h.byteLength);
              f2.onProgress_(f2.estimator_.getEstimatedProgress(), f2.estimator_.getTotalDownloaded());
              return r["return"](e2(h));
            });
          });
          this.groups_.set(a2, g);
          return g;
        };
        shaka.offline.DownloadManager.prototype.queueWork = function(a2, b2) {
          this.destroyer_.ensureNotDestroyed();
          var c2 = (this.groups_.get(a2) || Promise.resolve()).then(function() {
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
              return d2.yield(b2(), 0);
            });
          });
          this.groups_.set(a2, c2);
          return c2;
        };
        shaka.offline.DownloadManager.prototype.waitToFinish = function() {
          var a2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            return 1 == b2.nextAddress ? b2.yield(Promise.all(a2.groups_.values()), 2) : b2["return"](a2.estimator_.getTotalDownloaded());
          });
        };
        shaka.offline.DownloadManager.prototype.fetchSegment_ = function(a2) {
          var b2 = this, c2, d2, e2, f2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(g) {
            if (1 == g.nextAddress)
              return c2 = shaka.net.NetworkingEngine.RequestType.SEGMENT, d2 = b2.networkingEngine_.request(c2, a2), e2 = function() {
                return d2.abort();
              }, b2.abortCallbacks_.push(e2), g.yield(d2.promise, 2);
            f2 = g.yieldResult;
            shaka.util.ArrayUtils.remove(b2.abortCallbacks_, e2);
            return g["return"](f2.data);
          });
        };
        shaka.offline.indexeddb = {};
        shaka.offline.indexeddb.DBOperation = function(a2, b2) {
          var c2 = this;
          this.transaction_ = a2;
          this.store_ = a2.objectStore(b2);
          this.promise_ = new shaka.util.PublicPromise();
          a2.onabort = function(d2) {
            d2.preventDefault();
            c2.promise_.reject();
          };
          a2.onerror = function(d2) {
            d2.preventDefault();
            c2.promise_.reject();
          };
          a2.oncomplete = function(d2) {
            c2.promise_.resolve();
          };
        };
        shaka.offline.indexeddb.DBOperation.prototype.abort = function() {
          var a2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            if (1 == b2.nextAddress) {
              try {
                a2.transaction_.abort();
              } catch (c2) {
              }
              b2.setCatchFinallyBlocks(2);
              return b2.yield(a2.promise_, 4);
            }
            if (2 != b2.nextAddress)
              return b2.leaveTryBlock(0);
            b2.enterCatchBlock();
            b2.jumpToEnd();
          });
        };
        shaka.offline.indexeddb.DBOperation.prototype.forEachEntry = function(a2) {
          var b2 = this;
          return new Promise(function(c2, d2) {
            var e2 = b2.store_.openCursor();
            e2.onerror = d2;
            e2.onsuccess = function(f2) {
              var g;
              return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
                if (1 == h.nextAddress) {
                  if (null == e2.result)
                    return c2(), h["return"]();
                  g = e2.result;
                  return h.yield(a2(g.key, g.value, g), 2);
                }
                g["continue"]();
                h.jumpToEnd();
              });
            };
          });
        };
        shaka.offline.indexeddb.DBOperation.prototype.store = function() {
          return this.store_;
        };
        shaka.offline.indexeddb.DBOperation.prototype.promise = function() {
          return this.promise_;
        };
        shaka.offline.indexeddb.DBConnection = function(a2) {
          this.connection_ = a2;
          this.pending_ = [];
        };
        shaka.offline.indexeddb.DBConnection.prototype.destroy = function() {
          return Promise.all(this.pending_.map(function(a2) {
            return a2.abort();
          }));
        };
        shaka.offline.indexeddb.DBConnection.prototype.startReadOnlyOperation = function(a2) {
          return this.startOperation_(a2, "readonly");
        };
        shaka.offline.indexeddb.DBConnection.prototype.startReadWriteOperation = function(a2) {
          return this.startOperation_(a2, "readwrite");
        };
        shaka.offline.indexeddb.DBConnection.prototype.startOperation_ = function(a2, b2) {
          var c2 = this, d2 = this.connection_.transaction([a2], b2), e2 = new shaka.offline.indexeddb.DBOperation(d2, a2);
          this.pending_.push(e2);
          e2.promise().then(function() {
            return c2.stopTracking_(e2);
          }, function() {
            return c2.stopTracking_(e2);
          });
          return e2;
        };
        shaka.offline.indexeddb.DBConnection.prototype.stopTracking_ = function(a2) {
          shaka.util.ArrayUtils.remove(this.pending_, a2);
        };
        shaka.offline.indexeddb.BaseStorageCell = function(a2, b2, c2) {
          this.connection_ = new shaka.offline.indexeddb.DBConnection(a2);
          this.segmentStore_ = b2;
          this.manifestStore_ = c2;
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.destroy = function() {
          return this.connection_.destroy();
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.hasFixedKeySpace = function() {
          return true;
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.addSegments = function(a2) {
          return this.rejectAdd(this.segmentStore_);
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.removeSegments = function(a2, b2) {
          return this.remove_(this.segmentStore_, a2, b2);
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.getSegments = function(a2) {
          var b2 = this, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return d2.yield(b2.get_(b2.segmentStore_, a2), 2);
            c2 = d2.yieldResult;
            return d2["return"](c2.map(function(e2) {
              return b2.convertSegmentData(e2);
            }));
          });
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.addManifests = function(a2) {
          return this.rejectAdd(this.manifestStore_);
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.updateManifest = function(a2, b2) {
          return this.rejectUpdate(this.manifestStore_);
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.updateManifestImplementation = function(a2, b2) {
          var c2 = this.connection_.startReadWriteOperation(this.manifestStore_), d2 = c2.store();
          d2.get(a2).onsuccess = function(e2) {
            d2.put(b2, a2);
          };
          return c2.promise();
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.updateManifestExpiration = function(a2, b2) {
          var c2 = this.connection_.startReadWriteOperation(this.manifestStore_), d2 = c2.store();
          d2.get(a2).onsuccess = function(e2) {
            if (e2 = e2.target.result)
              e2.expiration = b2, d2.put(e2, a2);
          };
          return c2.promise();
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.removeManifests = function(a2, b2) {
          return this.remove_(this.manifestStore_, a2, b2);
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.getManifests = function(a2) {
          var b2 = this, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return d2.yield(b2.get_(b2.manifestStore_, a2), 2);
            c2 = d2.yieldResult;
            return d2["return"](Promise.all(c2.map(function(e2) {
              return b2.convertManifest(e2);
            })));
          });
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.getAllManifests = function() {
          var a2 = this, b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            return 1 == d2.nextAddress ? (b2 = a2.connection_.startReadOnlyOperation(a2.manifestStore_), c2 = /* @__PURE__ */ new Map(), d2.yield(b2.forEachEntry(function(e2, f2) {
              var g;
              return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
                if (1 == h.nextAddress)
                  return h.yield(a2.convertManifest(f2), 2);
                g = h.yieldResult;
                c2.set(e2, g);
                h.jumpToEnd();
              });
            }), 2)) : 3 != d2.nextAddress ? d2.yield(b2.promise(), 3) : d2["return"](c2);
          });
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.convertSegmentData = function(a2) {
          return a2;
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.convertManifest = function(a2) {
          return Promise.resolve(a2);
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.rejectAdd = function(a2) {
          return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.NEW_KEY_OPERATION_NOT_SUPPORTED, "Cannot add new value to " + a2));
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.rejectUpdate = function(a2) {
          return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.MODIFY_OPERATION_NOT_SUPPORTED, "Cannot modify values in " + a2));
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.add = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            if (1 == m.nextAddress) {
              d2 = c2.connection_.startReadWriteOperation(a2);
              e2 = d2.store();
              f2 = [];
              g = {};
              h = $jscomp.makeIterator(b2);
              for (k2 = h.next(); !k2.done; g = { $jscomp$loop$prop$request$623: g.$jscomp$loop$prop$request$623 }, k2 = h.next())
                l = k2.value, g.$jscomp$loop$prop$request$623 = e2.add(l), g.$jscomp$loop$prop$request$623.onsuccess = function(n) {
                  return function(p) {
                    f2.push(n.$jscomp$loop$prop$request$623.result);
                  };
                }(g);
              return m.yield(d2.promise(), 2);
            }
            return m["return"](f2);
          });
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.remove_ = function(a2, b2, c2) {
          a2 = this.connection_.startReadWriteOperation(a2);
          var d2 = a2.store(), e2 = {};
          b2 = $jscomp.makeIterator(b2);
          for (var f2 = b2.next(); !f2.done; e2 = { $jscomp$loop$prop$key$625: e2.$jscomp$loop$prop$key$625 }, f2 = b2.next())
            e2.$jscomp$loop$prop$key$625 = f2.value, d2["delete"](e2.$jscomp$loop$prop$key$625).onsuccess = function(g) {
              return function() {
                return c2(g.$jscomp$loop$prop$key$625);
              };
            }(e2);
          return a2.promise();
        };
        shaka.offline.indexeddb.BaseStorageCell.prototype.get_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            if (1 == m.nextAddress) {
              d2 = c2.connection_.startReadOnlyOperation(a2);
              e2 = d2.store();
              f2 = {};
              g = [];
              h = {};
              k2 = $jscomp.makeIterator(b2);
              for (l = k2.next(); !l.done; h = { $jscomp$loop$prop$request$627: h.$jscomp$loop$prop$request$627, $jscomp$loop$prop$key$628: h.$jscomp$loop$prop$key$628 }, l = k2.next())
                h.$jscomp$loop$prop$key$628 = l.value, h.$jscomp$loop$prop$request$627 = e2.get(h.$jscomp$loop$prop$key$628), h.$jscomp$loop$prop$request$627.onsuccess = function(n) {
                  return function() {
                    void 0 == n.$jscomp$loop$prop$request$627.result && g.push(n.$jscomp$loop$prop$key$628);
                    f2[n.$jscomp$loop$prop$key$628] = n.$jscomp$loop$prop$request$627.result;
                  };
                }(h);
              return m.yield(d2.promise(), 2);
            }
            if (g.length)
              throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.KEY_NOT_FOUND, "Could not find values for " + g);
            return m["return"](b2.map(function(n) {
              return f2[n];
            }));
          });
        };
        shaka.offline.indexeddb.EmeSessionStorageCell = function(a2, b2) {
          this.connection_ = new shaka.offline.indexeddb.DBConnection(a2);
          this.store_ = b2;
        };
        shaka.offline.indexeddb.EmeSessionStorageCell.prototype.destroy = function() {
          return this.connection_.destroy();
        };
        shaka.offline.indexeddb.EmeSessionStorageCell.prototype.getAll = function() {
          var a2 = this, b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            return 1 == d2.nextAddress ? (b2 = a2.connection_.startReadOnlyOperation(a2.store_), c2 = [], d2.yield(b2.forEachEntry(function(e2, f2) {
              c2.push(f2);
            }), 2)) : 3 != d2.nextAddress ? d2.yield(b2.promise(), 3) : d2["return"](c2);
          });
        };
        shaka.offline.indexeddb.EmeSessionStorageCell.prototype.add = function(a2) {
          var b2 = this.connection_.startReadWriteOperation(this.store_), c2 = b2.store();
          a2 = $jscomp.makeIterator(a2);
          for (var d2 = a2.next(); !d2.done; d2 = a2.next())
            c2.add(d2.value);
          return b2.promise();
        };
        shaka.offline.indexeddb.EmeSessionStorageCell.prototype.remove = function(a2) {
          var b2 = this, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            return 1 == d2.nextAddress ? (c2 = b2.connection_.startReadWriteOperation(b2.store_), d2.yield(c2.forEachEntry(function(e2, f2, g) {
              a2.includes(f2.sessionId) && g["delete"]();
            }), 2)) : d2.yield(c2.promise(), 0);
          });
        };
        shaka.offline.StorageCellHandle = {};
        shaka.offline.StorageCellPath = {};
        shaka.offline.StorageMuxer = function() {
          this.mechanisms_ = /* @__PURE__ */ new Map();
        };
        shaka.offline.StorageMuxer.prototype.destroy = function() {
          for (var a2 = [], b2 = $jscomp.makeIterator(this.mechanisms_.values()), c2 = b2.next(); !c2.done; c2 = b2.next())
            a2.push(c2.value.destroy());
          this.mechanisms_.clear();
          return Promise.all(a2);
        };
        shaka.offline.StorageMuxer.prototype.init = function() {
          var a2 = this;
          shaka.offline.StorageMuxer.getRegistry_().forEach(function(e2, f2) {
            var g = e2();
            g ? a2.mechanisms_.set(f2, g) : shaka.log.info("Skipping " + f2 + " as it is not supported on this platform");
          });
          for (var b2 = [], c2 = $jscomp.makeIterator(this.mechanisms_.values()), d2 = c2.next(); !d2.done; d2 = c2.next())
            b2.push(d2.value.init());
          return Promise.all(b2);
        };
        shaka.offline.StorageMuxer.prototype.getActive = function() {
          var a2 = null;
          this.mechanisms_.forEach(function(b2, c2) {
            b2.getCells().forEach(function(d2, e2) {
              d2.hasFixedKeySpace() || a2 || (a2 = { path: { mechanism: c2, cell: e2 }, cell: d2 });
            });
          });
          if (a2)
            return a2;
          throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.MISSING_STORAGE_CELL, "Could not find a cell that supports add-operations");
        };
        shaka.offline.StorageMuxer.prototype.forEachCell = function(a2) {
          this.mechanisms_.forEach(function(b2, c2) {
            b2.getCells().forEach(function(d2, e2) {
              a2({ mechanism: c2, cell: e2 }, d2);
            });
          });
        };
        shaka.offline.StorageMuxer.prototype.getCell = function(a2, b2) {
          var c2 = this.mechanisms_.get(a2);
          if (!c2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.MISSING_STORAGE_CELL, "Could not find mechanism with name " + a2);
          c2 = c2.getCells().get(b2);
          if (!c2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.MISSING_STORAGE_CELL, "Could not find cell with name " + b2);
          return c2;
        };
        shaka.offline.StorageMuxer.prototype.forEachEmeSessionCell = function(a2) {
          this.mechanisms_.forEach(function(b2, c2) {
            a2(b2.getEmeSessionCell());
          });
        };
        shaka.offline.StorageMuxer.prototype.getEmeSessionCell = function() {
          var a2 = Array.from(this.mechanisms_.keys());
          if (!a2.length)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.STORAGE_NOT_SUPPORTED, "No supported storage mechanisms found");
          return this.mechanisms_.get(a2[0]).getEmeSessionCell();
        };
        shaka.offline.StorageMuxer.prototype.resolvePath = function(a2) {
          var b2 = this.mechanisms_.get(a2.mechanism);
          return b2 ? b2.getCells().get(a2.cell) : null;
        };
        shaka.offline.StorageMuxer.prototype.erase = function() {
          var a2 = this, b2, c2, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            return 1 == e2.nextAddress ? (b2 = Array.from(a2.mechanisms_.values()), c2 = 0 < b2.length, c2 || (d2 = shaka.offline.StorageMuxer.getRegistry_(), d2.forEach(function(f2, g) {
              var h = f2();
              h && b2.push(h);
            })), e2.yield(Promise.all(b2.map(function(f2) {
              return f2.erase();
            })), 2)) : c2 ? e2.jumpTo(0) : e2.yield(Promise.all(b2.map(function(f2) {
              return f2.destroy();
            })), 0);
          });
        };
        shaka.offline.StorageMuxer.register = function(a2, b2) {
          shaka.offline.StorageMuxer.registry_.set(a2, b2);
        };
        shaka.offline.StorageMuxer.unregister = function(a2) {
          shaka.offline.StorageMuxer.registry_["delete"](a2);
        };
        shaka.offline.StorageMuxer.support = function() {
          var a2 = shaka.offline.StorageMuxer.getRegistry_();
          a2 = $jscomp.makeIterator(a2.values());
          for (var b2 = a2.next(); !b2.done; b2 = a2.next())
            if (b2 = b2.value, b2 = b2())
              return b2.destroy(), true;
          return false;
        };
        shaka.offline.StorageMuxer.overrideSupport = function(a2) {
          shaka.offline.StorageMuxer.override_ = a2;
        };
        shaka.offline.StorageMuxer.clearOverride = function() {
          shaka.offline.StorageMuxer.override_ = null;
        };
        shaka.offline.StorageMuxer.getRegistry_ = function() {
          var a2 = shaka.offline.StorageMuxer.override_, b2 = shaka.offline.StorageMuxer.registry_;
          return COMPILED ? b2 : a2 || b2;
        };
        goog.exportSymbol("shaka.offline.StorageMuxer", shaka.offline.StorageMuxer);
        goog.exportProperty(shaka.offline.StorageMuxer, "unregister", shaka.offline.StorageMuxer.unregister);
        goog.exportProperty(shaka.offline.StorageMuxer, "register", shaka.offline.StorageMuxer.register);
        goog.exportProperty(shaka.offline.StorageMuxer.prototype, "destroy", shaka.offline.StorageMuxer.prototype.destroy);
        shaka.offline.StorageMuxer.override_ = null;
        shaka.offline.StorageMuxer.registry_ = /* @__PURE__ */ new Map();
        shaka.offline.indexeddb.V1StorageCell = function() {
          shaka.offline.indexeddb.BaseStorageCell.apply(this, arguments);
        };
        $jscomp.inherits(shaka.offline.indexeddb.V1StorageCell, shaka.offline.indexeddb.BaseStorageCell);
        shaka.offline.indexeddb.V1StorageCell.prototype.updateManifestExpiration = function(a2, b2) {
          var c2 = this, d2, e2, f2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(g) {
            d2 = c2.connection_.startReadWriteOperation(c2.manifestStore_);
            e2 = d2.store();
            f2 = new shaka.util.PublicPromise();
            e2.get(a2).onsuccess = function(h) {
              (h = h.target.result) ? (goog.asserts.assert(h.key == a2, "With in-line keys, the keys should match"), h.expiration = b2, e2.put(h), f2.resolve()) : f2.reject(new shaka.util.Error(
                shaka.util.Error.Severity.CRITICAL,
                shaka.util.Error.Category.STORAGE,
                shaka.util.Error.Code.KEY_NOT_FOUND,
                "Could not find values for " + a2
              ));
            };
            return g.yield(Promise.all([d2.promise(), f2]), 0);
          });
        };
        shaka.offline.indexeddb.V1StorageCell.prototype.convertManifest = function(a2) {
          var b2, c2, d2, e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            if (1 == k2.nextAddress) {
              b2 = shaka.offline.indexeddb.V1StorageCell;
              c2 = [];
              for (d2 = 0; d2 < a2.periods.length; ++d2)
                e2 = d2 == a2.periods.length - 1 ? a2.duration : a2.periods[d2 + 1].startTime, f2 = e2 - a2.periods[d2].startTime, g = b2.convertPeriod_(a2.periods[d2], f2), c2.push(g);
              return k2.yield(shaka.util.PeriodCombiner.combineDbStreams(c2), 2);
            }
            h = k2.yieldResult;
            return k2["return"]({
              creationTime: 0,
              originalManifestUri: a2.originalManifestUri,
              duration: a2.duration,
              size: a2.size,
              expiration: null == a2.expiration ? Infinity : a2.expiration,
              streams: h,
              sessionIds: a2.sessionIds,
              drmInfo: a2.drmInfo,
              appMetadata: a2.appMetadata
            });
          });
        };
        shaka.offline.indexeddb.V1StorageCell.convertPeriod_ = function(a2, b2) {
          var c2 = shaka.offline.indexeddb.V1StorageCell;
          c2.fillMissingVariants_(a2);
          for (var d2 = $jscomp.makeIterator(a2.streams), e2 = d2.next(); !e2.done; e2 = d2.next())
            goog.asserts.assert(e2.value.variantIds, "After filling in missing variants, each stream should have variant ids");
          return a2.streams.map(function(f2) {
            return c2.convertStream_(f2, a2.startTime, b2);
          });
        };
        shaka.offline.indexeddb.V1StorageCell.convertStream_ = function(a2, b2, c2) {
          var d2 = shaka.offline.indexeddb.V1StorageCell, e2 = a2.initSegmentUri ? d2.getKeyFromSegmentUri_(a2.initSegmentUri) : null, f2 = b2 + a2.presentationTimeOffset, g = b2 + c2;
          return {
            id: a2.id,
            originalId: null,
            primary: a2.primary,
            type: a2.contentType,
            mimeType: a2.mimeType,
            codecs: a2.codecs,
            frameRate: a2.frameRate,
            pixelAspectRatio: void 0,
            hdr: void 0,
            kind: a2.kind,
            language: a2.language,
            label: a2.label,
            width: a2.width,
            height: a2.height,
            initSegmentKey: e2,
            encrypted: a2.encrypted,
            keyIds: /* @__PURE__ */ new Set([a2.keyId]),
            segments: a2.segments.map(function(h) {
              return d2.convertSegment_(h, e2, b2, g, f2);
            }),
            variantIds: a2.variantIds,
            roles: [],
            forced: false,
            audioSamplingRate: null,
            channelsCount: null,
            spatialAudio: false,
            closedCaptions: null,
            tilesLayout: void 0
          };
        };
        shaka.offline.indexeddb.V1StorageCell.convertSegment_ = function(a2, b2, c2, d2, e2) {
          var f2 = shaka.offline.indexeddb.V1StorageCell.getKeyFromSegmentUri_(a2.uri);
          return { startTime: c2 + a2.startTime, endTime: c2 + a2.endTime, dataKey: f2, initSegmentKey: b2, appendWindowStart: c2, appendWindowEnd: d2, timestampOffset: e2, tilesLayout: "" };
        };
        shaka.offline.indexeddb.V1StorageCell.prototype.convertSegmentData = function(a2) {
          return { data: a2.data };
        };
        shaka.offline.indexeddb.V1StorageCell.getKeyFromSegmentUri_ = function(a2) {
          var b2;
          if ((b2 = /^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(a2)) || (b2 = /^offline:segment\/([0-9]+)$/.exec(a2)))
            return Number(b2[1]);
          throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.MALFORMED_OFFLINE_URI, "Could not parse uri " + a2);
        };
        shaka.offline.indexeddb.V1StorageCell.fillMissingVariants_ = function(a2) {
          var b2 = shaka.util.ManifestParserUtils.ContentType.AUDIO, c2 = shaka.util.ManifestParserUtils.ContentType.VIDEO, d2 = a2.streams.filter(function(l) {
            return l.contentType == b2;
          });
          a2 = a2.streams.filter(function(l) {
            return l.contentType == c2;
          });
          if (!d2.every(function(l) {
            return l.variantIds;
          }) || !a2.every(function(l) {
            return l.variantIds;
          })) {
            goog.asserts.assert(d2.every(function(l) {
              return !l.variantIds;
            }), "Some audio streams have variant ids and some do not.");
            goog.asserts.assert(
              a2.every(function(l) {
                return !l.variantIds;
              }),
              "Some video streams have variant ids and some do not."
            );
            for (var e2 = $jscomp.makeIterator(d2), f2 = e2.next(); !f2.done; f2 = e2.next())
              f2.value.variantIds = [];
            e2 = $jscomp.makeIterator(a2);
            for (f2 = e2.next(); !f2.done; f2 = e2.next())
              f2.value.variantIds = [];
            e2 = 0;
            if (a2.length && !d2.length) {
              shaka.log.debug("Found video-only content. Creating variants for video.");
              var g = e2++, h = $jscomp.makeIterator(a2);
              for (f2 = h.next(); !f2.done; f2 = h.next())
                f2.value.variantIds.push(g);
            }
            if (!a2.length && d2.length)
              for (shaka.log.debug("Found audio-only content. Creating variants for audio."), g = e2++, h = $jscomp.makeIterator(d2), f2 = h.next(); !f2.done; f2 = h.next())
                f2.value.variantIds.push(g);
            if (a2.length && d2.length)
              for (shaka.log.debug("Found audio-video content. Creating variants."), d2 = $jscomp.makeIterator(d2), f2 = d2.next(); !f2.done; f2 = d2.next())
                for (f2 = f2.value, g = $jscomp.makeIterator(a2), h = g.next(); !h.done; h = g.next()) {
                  h = h.value;
                  var k2 = e2++;
                  f2.variantIds.push(k2);
                  h.variantIds.push(k2);
                }
          }
        };
        shaka.offline.indexeddb.V2StorageCell = function() {
          shaka.offline.indexeddb.BaseStorageCell.apply(this, arguments);
        };
        $jscomp.inherits(shaka.offline.indexeddb.V2StorageCell, shaka.offline.indexeddb.BaseStorageCell);
        shaka.offline.indexeddb.V2StorageCell.prototype.convertManifest = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            if (1 == k2.nextAddress) {
              c2 = [];
              for (d2 = 0; d2 < a2.periods.length; ++d2)
                e2 = d2 == a2.periods.length - 1 ? a2.duration : a2.periods[d2 + 1].startTime, f2 = e2 - a2.periods[d2].startTime, g = b2.convertPeriod_(a2.periods[d2], f2), c2.push(g);
              return k2.yield(shaka.util.PeriodCombiner.combineDbStreams(c2), 2);
            }
            h = k2.yieldResult;
            return k2["return"]({
              appMetadata: a2.appMetadata,
              creationTime: 0,
              drmInfo: a2.drmInfo,
              duration: a2.duration,
              expiration: null == a2.expiration ? Infinity : a2.expiration,
              originalManifestUri: a2.originalManifestUri,
              sessionIds: a2.sessionIds,
              size: a2.size,
              streams: h
            });
          });
        };
        shaka.offline.indexeddb.V2StorageCell.prototype.convertPeriod_ = function(a2, b2) {
          for (var c2 = [], d2 = $jscomp.makeIterator(a2.streams), e2 = d2.next(); !e2.done; e2 = d2.next())
            e2 = e2.value, 0 != e2.variantIds.length && c2.push(this.convertStream_(e2, a2.startTime, a2.startTime + b2));
          return c2;
        };
        shaka.offline.indexeddb.V2StorageCell.prototype.convertStream_ = function(a2, b2, c2) {
          var d2 = this;
          return {
            id: a2.id,
            originalId: a2.originalId,
            primary: a2.primary,
            type: a2.contentType,
            mimeType: a2.mimeType,
            codecs: a2.codecs,
            frameRate: a2.frameRate,
            pixelAspectRatio: a2.pixelAspectRatio,
            hdr: void 0,
            kind: a2.kind,
            language: a2.language,
            label: a2.label,
            width: a2.width,
            height: a2.height,
            encrypted: a2.encrypted,
            keyIds: /* @__PURE__ */ new Set([a2.keyId]),
            segments: a2.segments.map(function(e2) {
              return d2.convertSegment_(e2, a2.initSegmentKey, b2, c2, a2.presentationTimeOffset);
            }),
            variantIds: a2.variantIds,
            roles: [],
            forced: false,
            audioSamplingRate: null,
            channelsCount: null,
            spatialAudio: false,
            closedCaptions: null,
            tilesLayout: void 0
          };
        };
        shaka.offline.indexeddb.V2StorageCell.prototype.convertSegment_ = function(a2, b2, c2, d2, e2) {
          return { startTime: c2 + a2.startTime, endTime: c2 + a2.endTime, initSegmentKey: b2, appendWindowStart: c2, appendWindowEnd: d2, timestampOffset: c2 - e2, dataKey: a2.dataKey, tilesLayout: "" };
        };
        shaka.offline.indexeddb.V5StorageCell = function() {
          shaka.offline.indexeddb.BaseStorageCell.apply(this, arguments);
        };
        $jscomp.inherits(shaka.offline.indexeddb.V5StorageCell, shaka.offline.indexeddb.BaseStorageCell);
        shaka.offline.indexeddb.V5StorageCell.prototype.hasFixedKeySpace = function() {
          return false;
        };
        shaka.offline.indexeddb.V5StorageCell.prototype.addSegments = function(a2) {
          return this.add(this.segmentStore_, a2);
        };
        shaka.offline.indexeddb.V5StorageCell.prototype.addManifests = function(a2) {
          return this.add(this.manifestStore_, a2);
        };
        shaka.offline.indexeddb.V5StorageCell.prototype.updateManifest = function(a2, b2) {
          return this.updateManifestImplementation(a2, b2);
        };
        shaka.offline.indexeddb.V5StorageCell.prototype.convertManifest = function(a2) {
          null == a2.expiration && (a2.expiration = Infinity);
          return Promise.resolve(a2);
        };
        shaka.offline.indexeddb.StorageMechanism = function() {
          this.sessions_ = this.v5_ = this.v3_ = this.v2_ = this.v1_ = this.db_ = null;
        };
        shaka.offline.indexeddb.StorageMechanism.prototype.init = function() {
          var a2 = this, b2 = shaka.offline.indexeddb.StorageMechanism.DB_NAME, c2 = shaka.offline.indexeddb.StorageMechanism.VERSION, d2 = new shaka.util.PublicPromise(), e2 = window.indexedDB.open(b2, c2);
          e2.onsuccess = function(f2) {
            f2 = e2.result;
            a2.db_ = f2;
            a2.v1_ = shaka.offline.indexeddb.StorageMechanism.createV1_(f2);
            a2.v2_ = shaka.offline.indexeddb.StorageMechanism.createV2_(f2);
            a2.v3_ = shaka.offline.indexeddb.StorageMechanism.createV3_(f2);
            a2.v5_ = shaka.offline.indexeddb.StorageMechanism.createV5_(f2);
            a2.sessions_ = shaka.offline.indexeddb.StorageMechanism.createEmeSessionCell_(f2);
            d2.resolve();
          };
          e2.onupgradeneeded = function(f2) {
            a2.createStores_(e2.result);
          };
          e2.onerror = function(f2) {
            d2.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.INDEXED_DB_ERROR, e2.error));
            f2.preventDefault();
          };
          return d2;
        };
        shaka.offline.indexeddb.StorageMechanism.prototype.destroy = function() {
          var a2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            switch (b2.nextAddress) {
              case 1:
                if (!a2.v1_) {
                  b2.jumpTo(2);
                  break;
                }
                return b2.yield(a2.v1_.destroy(), 2);
              case 2:
                if (!a2.v2_) {
                  b2.jumpTo(4);
                  break;
                }
                return b2.yield(a2.v2_.destroy(), 4);
              case 4:
                if (!a2.v3_) {
                  b2.jumpTo(6);
                  break;
                }
                return b2.yield(a2.v3_.destroy(), 6);
              case 6:
                if (!a2.v5_) {
                  b2.jumpTo(8);
                  break;
                }
                return b2.yield(a2.v5_.destroy(), 8);
              case 8:
                if (!a2.sessions_) {
                  b2.jumpTo(10);
                  break;
                }
                return b2.yield(
                  a2.sessions_.destroy(),
                  10
                );
              case 10:
                a2.db_ && a2.db_.close(), b2.jumpToEnd();
            }
          });
        };
        shaka.offline.indexeddb.StorageMechanism.prototype.getCells = function() {
          var a2 = /* @__PURE__ */ new Map();
          this.v1_ && a2.set("v1", this.v1_);
          this.v2_ && a2.set("v2", this.v2_);
          this.v3_ && a2.set("v3", this.v3_);
          this.v5_ && a2.set("v5", this.v5_);
          return a2;
        };
        shaka.offline.indexeddb.StorageMechanism.prototype.getEmeSessionCell = function() {
          goog.asserts.assert(this.sessions_, "Cannot be destroyed.");
          return this.sessions_;
        };
        shaka.offline.indexeddb.StorageMechanism.prototype.erase = function() {
          var a2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            switch (b2.nextAddress) {
              case 1:
                if (!a2.v1_) {
                  b2.jumpTo(2);
                  break;
                }
                return b2.yield(a2.v1_.destroy(), 2);
              case 2:
                if (!a2.v2_) {
                  b2.jumpTo(4);
                  break;
                }
                return b2.yield(a2.v2_.destroy(), 4);
              case 4:
                if (!a2.v3_) {
                  b2.jumpTo(6);
                  break;
                }
                return b2.yield(a2.v3_.destroy(), 6);
              case 6:
                if (!a2.v5_) {
                  b2.jumpTo(8);
                  break;
                }
                return b2.yield(a2.v5_.destroy(), 8);
              case 8:
                return a2.db_ && a2.db_.close(), b2.yield(
                  shaka.offline.indexeddb.StorageMechanism.deleteAll_(),
                  10
                );
              case 10:
                return a2.db_ = null, a2.v1_ = null, a2.v2_ = null, a2.v3_ = null, a2.v5_ = null, b2.yield(a2.init(), 0);
            }
          });
        };
        shaka.offline.indexeddb.StorageMechanism.createV1_ = function(a2) {
          var b2 = shaka.offline.indexeddb.StorageMechanism, c2 = b2.V1_SEGMENT_STORE;
          b2 = b2.V1_MANIFEST_STORE;
          var d2 = a2.objectStoreNames;
          return d2.contains(b2) && d2.contains(c2) ? (shaka.log.debug("Mounting v1 idb storage cell"), new shaka.offline.indexeddb.V1StorageCell(a2, c2, b2)) : null;
        };
        shaka.offline.indexeddb.StorageMechanism.createV2_ = function(a2) {
          var b2 = shaka.offline.indexeddb.StorageMechanism, c2 = b2.V2_SEGMENT_STORE;
          b2 = b2.V2_MANIFEST_STORE;
          var d2 = a2.objectStoreNames;
          return d2.contains(b2) && d2.contains(c2) ? (shaka.log.debug("Mounting v2 idb storage cell"), new shaka.offline.indexeddb.V2StorageCell(a2, c2, b2)) : null;
        };
        shaka.offline.indexeddb.StorageMechanism.createV3_ = function(a2) {
          var b2 = shaka.offline.indexeddb.StorageMechanism, c2 = b2.V3_SEGMENT_STORE;
          b2 = b2.V3_MANIFEST_STORE;
          var d2 = a2.objectStoreNames;
          return d2.contains(b2) && d2.contains(c2) ? (shaka.log.debug("Mounting v3 idb storage cell"), new shaka.offline.indexeddb.V2StorageCell(a2, c2, b2)) : null;
        };
        shaka.offline.indexeddb.StorageMechanism.createV5_ = function(a2) {
          var b2 = shaka.offline.indexeddb.StorageMechanism, c2 = b2.V5_SEGMENT_STORE;
          b2 = b2.V5_MANIFEST_STORE;
          var d2 = a2.objectStoreNames;
          return d2.contains(b2) && d2.contains(c2) ? (shaka.log.debug("Mounting v5 idb storage cell"), new shaka.offline.indexeddb.V5StorageCell(a2, c2, b2)) : null;
        };
        shaka.offline.indexeddb.StorageMechanism.createEmeSessionCell_ = function(a2) {
          var b2 = shaka.offline.indexeddb.StorageMechanism.SESSION_ID_STORE;
          return a2.objectStoreNames.contains(b2) ? (shaka.log.debug("Mounting session ID idb storage cell"), new shaka.offline.indexeddb.EmeSessionStorageCell(a2, b2)) : null;
        };
        shaka.offline.indexeddb.StorageMechanism.prototype.createStores_ = function(a2) {
          for (var b2 = $jscomp.makeIterator([shaka.offline.indexeddb.StorageMechanism.V5_SEGMENT_STORE, shaka.offline.indexeddb.StorageMechanism.V5_MANIFEST_STORE, shaka.offline.indexeddb.StorageMechanism.SESSION_ID_STORE]), c2 = b2.next(); !c2.done; c2 = b2.next())
            c2 = c2.value, a2.objectStoreNames.contains(c2) || a2.createObjectStore(c2, { autoIncrement: true });
        };
        shaka.offline.indexeddb.StorageMechanism.deleteAll_ = function() {
          var a2 = shaka.offline.indexeddb.StorageMechanism.DB_NAME, b2 = new shaka.util.PublicPromise(), c2 = window.indexedDB.deleteDatabase(a2);
          c2.onblocked = function(d2) {
            shaka.log.warning("Deleting", a2, "is being blocked", d2);
          };
          c2.onsuccess = function(d2) {
            b2.resolve();
          };
          c2.onerror = function(d2) {
            b2.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.INDEXED_DB_ERROR, c2.error));
            d2.preventDefault();
          };
          return b2;
        };
        shaka.offline.indexeddb.StorageMechanism.DB_NAME = "shaka_offline_db";
        shaka.offline.indexeddb.StorageMechanism.VERSION = 5;
        shaka.offline.indexeddb.StorageMechanism.V1_SEGMENT_STORE = "segment";
        shaka.offline.indexeddb.StorageMechanism.V2_SEGMENT_STORE = "segment-v2";
        shaka.offline.indexeddb.StorageMechanism.V3_SEGMENT_STORE = "segment-v3";
        shaka.offline.indexeddb.StorageMechanism.V5_SEGMENT_STORE = "segment-v5";
        shaka.offline.indexeddb.StorageMechanism.V1_MANIFEST_STORE = "manifest";
        shaka.offline.indexeddb.StorageMechanism.V2_MANIFEST_STORE = "manifest-v2";
        shaka.offline.indexeddb.StorageMechanism.V3_MANIFEST_STORE = "manifest-v3";
        shaka.offline.indexeddb.StorageMechanism.V5_MANIFEST_STORE = "manifest-v5";
        shaka.offline.indexeddb.StorageMechanism.SESSION_ID_STORE = "session-ids";
        shaka.offline.StorageMuxer.register("idb", function() {
          return shaka.util.Platform.isChromecast() || shaka.util.Platform.isXboxOne() || !window.indexedDB ? null : new shaka.offline.indexeddb.StorageMechanism();
        });
        shaka.offline.OfflineUri = function(a2, b2, c2, d2) {
          this.type_ = a2;
          this.mechanism_ = b2;
          this.cell_ = c2;
          this.key_ = d2;
          this.asString_ = ["offline:", a2, "/", b2, "/", c2, "/", d2].join("");
        };
        shaka.offline.OfflineUri.prototype.isManifest = function() {
          return "manifest" == this.type_;
        };
        shaka.offline.OfflineUri.prototype.isSegment = function() {
          return "segment" == this.type_;
        };
        shaka.offline.OfflineUri.prototype.mechanism = function() {
          return this.mechanism_;
        };
        shaka.offline.OfflineUri.prototype.cell = function() {
          return this.cell_;
        };
        shaka.offline.OfflineUri.prototype.key = function() {
          return this.key_;
        };
        shaka.offline.OfflineUri.prototype.toString = function() {
          return this.asString_;
        };
        shaka.offline.OfflineUri.parse = function(a2) {
          a2 = /^offline:([a-z]+)\/([^/]+)\/([^/]+)\/([0-9]+)$/.exec(a2);
          if (null == a2)
            return null;
          var b2 = a2[1];
          if ("manifest" != b2 && "segment" != b2)
            return null;
          var c2 = a2[2];
          if (!c2)
            return null;
          var d2 = a2[3];
          return d2 && null != b2 ? new shaka.offline.OfflineUri(b2, c2, d2, Number(a2[4])) : null;
        };
        shaka.offline.OfflineUri.manifest = function(a2, b2, c2) {
          return new shaka.offline.OfflineUri("manifest", a2, b2, c2);
        };
        shaka.offline.OfflineUri.segment = function(a2, b2, c2) {
          return new shaka.offline.OfflineUri("segment", a2, b2, c2);
        };
        shaka.offline.ManifestConverter = function(a2, b2) {
          this.mechanism_ = a2;
          this.cell_ = b2;
        };
        shaka.offline.ManifestConverter.prototype.fromManifestDB = function(a2) {
          var b2 = this, c2 = new shaka.media.PresentationTimeline(null, 0);
          c2.setDuration(a2.duration);
          var d2 = a2.streams.filter(function(l) {
            return b2.isAudio_(l);
          }), e2 = a2.streams.filter(function(l) {
            return b2.isVideo_(l);
          });
          d2 = this.createVariants(d2, e2, c2);
          e2 = a2.streams.filter(function(l) {
            return b2.isText_(l);
          }).map(function(l) {
            return b2.fromStreamDB_(l, c2);
          });
          var f2 = a2.streams.filter(function(l) {
            return b2.isImage_(l);
          }).map(function(l) {
            return b2.fromStreamDB_(l, c2);
          }), g = a2.drmInfo ? [a2.drmInfo] : [];
          if (a2.drmInfo)
            for (var h = $jscomp.makeIterator(d2.values()), k2 = h.next(); !k2.done; k2 = h.next())
              k2 = k2.value, k2.audio && k2.audio.encrypted && (k2.audio.drmInfos = g), k2.video && k2.video.encrypted && (k2.video.drmInfos = g);
          return { presentationTimeline: c2, minBufferTime: 2, offlineSessionIds: a2.sessionIds, variants: Array.from(d2.values()), textStreams: e2, imageStreams: f2 };
        };
        shaka.offline.ManifestConverter.prototype.createVariants = function(a2, b2, c2) {
          for (var d2 = /* @__PURE__ */ new Set(), e2 = $jscomp.makeIterator(a2), f2 = e2.next(); !f2.done; f2 = e2.next()) {
            var g = $jscomp.makeIterator(f2.value.variantIds);
            for (f2 = g.next(); !f2.done; f2 = g.next())
              d2.add(f2.value);
          }
          e2 = $jscomp.makeIterator(b2);
          for (f2 = e2.next(); !f2.done; f2 = e2.next())
            for (g = $jscomp.makeIterator(f2.value.variantIds), f2 = g.next(); !f2.done; f2 = g.next())
              d2.add(f2.value);
          e2 = /* @__PURE__ */ new Map();
          d2 = $jscomp.makeIterator(d2);
          for (f2 = d2.next(); !f2.done; f2 = d2.next())
            f2 = f2.value, e2.set(f2, this.createEmptyVariant_(f2));
          a2 = $jscomp.makeIterator(a2);
          for (d2 = a2.next(); !d2.done; d2 = a2.next())
            for (d2 = d2.value, f2 = this.fromStreamDB_(d2, c2), g = $jscomp.makeIterator(d2.variantIds), d2 = g.next(); !d2.done; d2 = g.next())
              d2 = e2.get(d2.value), goog.asserts.assert(!d2.audio, "A variant should only have one audio stream"), d2.language = f2.language, d2.primary = d2.primary || f2.primary, d2.audio = f2;
          b2 = $jscomp.makeIterator(b2);
          for (a2 = b2.next(); !a2.done; a2 = b2.next())
            for (d2 = a2.value, a2 = this.fromStreamDB_(d2, c2), f2 = $jscomp.makeIterator(d2.variantIds), d2 = f2.next(); !d2.done; d2 = f2.next())
              d2 = e2.get(d2.value), goog.asserts.assert(!d2.video, "A variant should only have one video stream"), d2.primary = d2.primary || a2.primary, d2.video = a2;
          return e2;
        };
        shaka.offline.ManifestConverter.prototype.fromStreamDB_ = function(a2, b2) {
          var c2 = this, d2 = a2.segments.map(function(e2, f2) {
            return c2.fromSegmentDB_(f2, e2);
          });
          b2.notifySegments(d2);
          d2 = new shaka.media.SegmentIndex(d2);
          return {
            id: a2.id,
            originalId: a2.originalId,
            createSegmentIndex: function() {
              return Promise.resolve();
            },
            segmentIndex: d2,
            mimeType: a2.mimeType,
            codecs: a2.codecs,
            width: a2.width || void 0,
            height: a2.height || void 0,
            frameRate: a2.frameRate,
            pixelAspectRatio: a2.pixelAspectRatio,
            hdr: a2.hdr,
            kind: a2.kind,
            encrypted: a2.encrypted,
            drmInfos: [],
            keyIds: a2.keyIds,
            language: a2.language,
            label: a2.label,
            type: a2.type,
            primary: a2.primary,
            trickModeVideo: null,
            emsgSchemeIdUris: null,
            roles: a2.roles,
            forced: a2.forced,
            channelsCount: a2.channelsCount,
            audioSamplingRate: a2.audioSamplingRate,
            spatialAudio: a2.spatialAudio,
            closedCaptions: a2.closedCaptions,
            tilesLayout: a2.tilesLayout
          };
        };
        shaka.offline.ManifestConverter.prototype.fromSegmentDB_ = function(a2, b2) {
          var c2 = shaka.offline.OfflineUri.segment(this.mechanism_, this.cell_, b2.dataKey), d2 = null != b2.initSegmentKey ? this.fromInitSegmentDB_(b2.initSegmentKey) : null;
          return new shaka.media.SegmentReference(b2.startTime, b2.endTime, function() {
            return [c2.toString()];
          }, 0, null, d2, b2.timestampOffset, b2.appendWindowStart, b2.appendWindowEnd, [], b2.tilesLayout || "");
        };
        shaka.offline.ManifestConverter.prototype.fromInitSegmentDB_ = function(a2) {
          var b2 = shaka.offline.OfflineUri.segment(this.mechanism_, this.cell_, a2);
          return new shaka.media.InitSegmentReference(function() {
            return [b2.toString()];
          }, 0, null);
        };
        shaka.offline.ManifestConverter.prototype.isAudio_ = function(a2) {
          return a2.type == shaka.util.ManifestParserUtils.ContentType.AUDIO;
        };
        shaka.offline.ManifestConverter.prototype.isVideo_ = function(a2) {
          return a2.type == shaka.util.ManifestParserUtils.ContentType.VIDEO;
        };
        shaka.offline.ManifestConverter.prototype.isText_ = function(a2) {
          return a2.type == shaka.util.ManifestParserUtils.ContentType.TEXT;
        };
        shaka.offline.ManifestConverter.prototype.isImage_ = function(a2) {
          return a2.type == shaka.util.ManifestParserUtils.ContentType.IMAGE;
        };
        shaka.offline.ManifestConverter.prototype.createEmptyVariant_ = function(a2) {
          return { id: a2, language: "", primary: false, audio: null, video: null, bandwidth: 0, allowedByApplication: true, allowedByKeySystem: true, decodingInfos: [] };
        };
        shaka.offline.OfflineManifestParser = function() {
          this.uri_ = null;
        };
        shaka.offline.OfflineManifestParser.prototype.configure = function(a2) {
        };
        shaka.offline.OfflineManifestParser.prototype.start = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            switch (m.nextAddress) {
              case 1:
                d2 = shaka.offline.OfflineUri.parse(a2);
                c2.uri_ = d2;
                if (null == d2 || !d2.isManifest())
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.MALFORMED_OFFLINE_URI, a2);
                e2 = new shaka.offline.StorageMuxer();
                m.setFinallyBlock(2);
                return m.yield(e2.init(), 4);
              case 4:
                return m.yield(e2.getCell(
                  d2.mechanism(),
                  d2.cell()
                ), 5);
              case 5:
                return f2 = m.yieldResult, m.yield(f2.getManifests([d2.key()]), 6);
              case 6:
                return g = m.yieldResult, h = g[0], k2 = new shaka.offline.ManifestConverter(d2.mechanism(), d2.cell()), l = k2.fromManifestDB(h), b2.makeTextStreamsForClosedCaptions(l), m["return"](l);
              case 2:
                return m.enterFinallyBlock(), m.yield(e2.destroy(), 7);
              case 7:
                m.leaveFinallyBlock(0);
            }
          });
        };
        shaka.offline.OfflineManifestParser.prototype.stop = function() {
          return Promise.resolve();
        };
        shaka.offline.OfflineManifestParser.prototype.update = function() {
        };
        shaka.offline.OfflineManifestParser.prototype.onExpirationUpdated = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(n) {
            switch (n.nextAddress) {
              case 1:
                return goog.asserts.assert(c2.uri_, "Should not get update event before start has been called"), d2 = c2.uri_, e2 = new shaka.offline.StorageMuxer(), n.setCatchFinallyBlocks(2, 3), n.yield(e2.init(), 5);
              case 5:
                return n.yield(e2.getCell(d2.mechanism(), d2.cell()), 6);
              case 6:
                return f2 = n.yieldResult, n.yield(
                  f2.getManifests([d2.key()]),
                  7
                );
              case 7:
                g = n.yieldResult;
                h = g[0];
                k2 = h.sessionIds.includes(a2);
                l = void 0 == h.expiration || h.expiration > b2;
                if (!k2 || !l) {
                  n.jumpTo(3);
                  break;
                }
                shaka.log.debug("Updating expiration for stored content");
                return n.yield(f2.updateManifestExpiration(d2.key(), b2), 3);
              case 3:
                return n.enterFinallyBlock(), n.yield(e2.destroy(), 10);
              case 10:
                n.leaveFinallyBlock(0);
                break;
              case 2:
                m = n.enterCatchBlock(), shaka.log.error("There was an error updating", d2, m), n.jumpTo(3);
            }
          });
        };
        shaka.media.ManifestParser.registerParserByMime("application/x-offline-manifest", function() {
          return new shaka.offline.OfflineManifestParser();
        });
        shaka.offline.OfflineScheme = function() {
        };
        shaka.offline.OfflineScheme.plugin = function(a2, b2, c2, d2) {
          return (b2 = shaka.offline.OfflineUri.parse(a2)) && b2.isManifest() ? shaka.offline.OfflineScheme.getManifest_(a2) : b2 && b2.isSegment() ? shaka.offline.OfflineScheme.getSegment_(b2.key(), b2) : shaka.util.AbortableOperation.failed(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.NETWORK, shaka.util.Error.Code.MALFORMED_OFFLINE_URI, a2));
        };
        shaka.offline.OfflineScheme.getManifest_ = function(a2) {
          a2 = { uri: a2, originalUri: a2, data: new ArrayBuffer(0), headers: { "content-type": "application/x-offline-manifest" } };
          return shaka.util.AbortableOperation.completed(a2);
        };
        shaka.offline.OfflineScheme.getSegment_ = function(a2, b2) {
          goog.asserts.assert(b2.isSegment(), "Only segment uri's should be given to getSegment");
          var c2 = new shaka.offline.StorageMuxer();
          return shaka.util.AbortableOperation.completed(void 0).chain(function() {
            return c2.init();
          }).chain(function() {
            return c2.getCell(b2.mechanism(), b2.cell());
          }).chain(function(d2) {
            return d2.getSegments([b2.key()]);
          }).chain(function(d2) {
            return { uri: b2, data: d2[0].data, headers: {} };
          })["finally"](function() {
            return c2.destroy();
          });
        };
        goog.exportSymbol("shaka.offline.OfflineScheme", shaka.offline.OfflineScheme);
        goog.exportProperty(shaka.offline.OfflineScheme, "plugin", shaka.offline.OfflineScheme.plugin);
        shaka.net.NetworkingEngine.registerScheme("offline", shaka.offline.OfflineScheme.plugin);
        shaka.offline.SessionDeleter = function() {
        };
        shaka.offline.SessionDeleter.prototype["delete"] = function(a2, b2, c2) {
          var d2 = this, e2, f2, g, h, k2, l, m;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(n) {
            switch (n.nextAddress) {
              case 1:
                e2 = shaka.offline.SessionDeleter, f2 = [], g = $jscomp.makeIterator(e2.createBuckets_(c2)), h = g.next();
              case 2:
                if (h.done) {
                  n.jumpTo(4);
                  break;
                }
                k2 = h.value;
                l = d2.doDelete_(a2, b2, k2);
                return n.yield(l, 5);
              case 5:
                m = n.yieldResult;
                f2 = f2.concat(m);
                h = g.next();
                n.jumpTo(2);
                break;
              case 4:
                return n["return"](f2);
            }
          });
        };
        shaka.offline.SessionDeleter.prototype.doDelete_ = function(a2, b2, c2) {
          var d2, e2, f2, g;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(h) {
            switch (h.nextAddress) {
              case 1:
                return d2 = new shaka.media.DrmEngine({ netEngine: b2, onError: function() {
                }, onKeyStatus: function() {
                }, onExpirationUpdated: function() {
                }, onEvent: function() {
                } }), h.setCatchFinallyBlocks(2), d2.configure(a2), h.yield(d2.initForRemoval(c2.info.keySystem, c2.info.licenseUri, c2.info.serverCertificate, c2.info.audioCapabilities, c2.info.videoCapabilities), 4);
              case 4:
                h.leaveTryBlock(3);
                break;
              case 2:
                return e2 = h.enterCatchBlock(), shaka.log.warning("Error initializing EME", e2), h.yield(d2.destroy(), 5);
              case 5:
                return h["return"]([]);
              case 3:
                return h.setCatchFinallyBlocks(6), h.yield(d2.setServerCertificate(), 8);
              case 8:
                h.leaveTryBlock(7);
                break;
              case 6:
                return f2 = h.enterCatchBlock(), shaka.log.warning("Error setting server certificate", f2), h.yield(d2.destroy(), 9);
              case 9:
                return h["return"]([]);
              case 7:
                return g = [], h.yield(Promise.all(c2.sessionIds.map(function(k2) {
                  var l;
                  return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
                    if (1 == m.nextAddress)
                      return m.setCatchFinallyBlocks(2), m.yield(d2.removeSession(k2), 4);
                    if (2 != m.nextAddress)
                      return g.push(k2), m.leaveTryBlock(0);
                    l = m.enterCatchBlock();
                    shaka.log.warning("Error deleting offline session", l);
                    m.jumpToEnd();
                  });
                })), 10);
              case 10:
                return h.yield(d2.destroy(), 11);
              case 11:
                return h["return"](g);
            }
          });
        };
        shaka.offline.SessionDeleter.createBuckets_ = function(a2) {
          var b2 = shaka.offline.SessionDeleter, c2 = [];
          a2 = $jscomp.makeIterator(a2);
          for (var d2 = a2.next(); !d2.done; d2 = a2.next()) {
            d2 = d2.value;
            for (var e2 = false, f2 = $jscomp.makeIterator(c2), g = f2.next(); !g.done; g = f2.next())
              if (g = g.value, b2.isCompatible_(g.info, d2)) {
                g.sessionIds.push(d2.sessionId);
                e2 = true;
                break;
              }
            e2 || c2.push({ info: d2, sessionIds: [d2.sessionId] });
          }
          return c2;
        };
        shaka.offline.SessionDeleter.isCompatible_ = function(a2, b2) {
          var c2 = shaka.util.ArrayUtils, d2 = function(e2, f2) {
            return e2.robustness == f2.robustness && e2.contentType == f2.contentType;
          };
          return a2.keySystem == b2.keySystem && a2.licenseUri == b2.licenseUri && c2.hasSameElements(a2.audioCapabilities, b2.audioCapabilities, d2) && c2.hasSameElements(a2.videoCapabilities, b2.videoCapabilities, d2);
        };
        shaka.offline.StoredContentUtils = function() {
        };
        shaka.offline.StoredContentUtils.fromManifest = function(a2, b2, c2, d2) {
          goog.asserts.assert(b2.variants.length, "Cannot create stored content from manifest with no variants.");
          var e2 = b2.presentationTimeline.getDuration();
          b2 = shaka.offline.StoredContentUtils.getTracks_(b2);
          return { offlineUri: null, originalManifestUri: a2, duration: e2, size: c2, expiration: Infinity, tracks: b2, appMetadata: d2, isIncomplete: false };
        };
        shaka.offline.StoredContentUtils.fromManifestDB = function(a2, b2) {
          goog.asserts.assert(b2.streams.length, "Cannot create stored content from manifestDB with no streams.");
          var c2 = new shaka.offline.ManifestConverter(a2.mechanism(), a2.cell()).fromManifestDB(b2), d2 = b2.appMetadata || {};
          c2 = shaka.offline.StoredContentUtils.getTracks_(c2);
          goog.asserts.assert(null != b2.expiration, "Manifest expiration must be set by now!");
          return {
            offlineUri: a2.toString(),
            originalManifestUri: b2.originalManifestUri,
            duration: b2.duration,
            size: b2.size,
            expiration: b2.expiration,
            tracks: c2,
            appMetadata: d2,
            isIncomplete: b2.isIncomplete || false
          };
        };
        shaka.offline.StoredContentUtils.getTracks_ = function(a2) {
          var b2 = shaka.util.StreamUtils, c2 = [], d2 = b2.getPlayableVariants(a2.variants);
          d2 = $jscomp.makeIterator(d2);
          for (var e2 = d2.next(); !e2.done; e2 = d2.next())
            c2.push(b2.variantToTrack(e2.value));
          a2 = $jscomp.makeIterator(a2.textStreams);
          for (d2 = a2.next(); !d2.done; d2 = a2.next())
            c2.push(b2.textStreamToTrack(d2.value));
          return c2;
        };
        shaka.offline.StreamBandwidthEstimator = function() {
          this.estimateByStreamId_ = {};
        };
        shaka.offline.StreamBandwidthEstimator.prototype.addVariant = function(a2) {
          var b2 = a2.audio, c2 = a2.video;
          b2 && !c2 && this.setBitrate_(b2.id, b2.bandwidth || a2.bandwidth);
          !b2 && c2 && this.setBitrate_(c2.id, c2.bandwidth || a2.bandwidth);
          if (b2 && c2) {
            var d2 = b2.bandwidth || shaka.offline.StreamBandwidthEstimator.DEFAULT_AUDIO_BITRATE_, e2 = c2.bandwidth || a2.bandwidth - d2;
            0 >= e2 && (shaka.log.warning("Audio bit rate consumes variants bandwidth. Setting video bandwidth to match variant's bandwidth."), e2 = a2.bandwidth);
            this.setBitrate_(b2.id, d2);
            this.setBitrate_(
              c2.id,
              e2
            );
          }
        };
        shaka.offline.StreamBandwidthEstimator.prototype.setBitrate_ = function(a2, b2) {
          this.estimateByStreamId_[a2] = b2;
        };
        shaka.offline.StreamBandwidthEstimator.prototype.addText = function(a2) {
          this.estimateByStreamId_[a2.id] = shaka.offline.StreamBandwidthEstimator.DEFAULT_TEXT_BITRATE_;
        };
        shaka.offline.StreamBandwidthEstimator.prototype.addImage = function(a2) {
          this.estimateByStreamId_[a2.id] = a2.bandwidth || shaka.offline.StreamBandwidthEstimator.DEFAULT_IMAGE_BITRATE_;
        };
        shaka.offline.StreamBandwidthEstimator.prototype.getSegmentEstimate = function(a2, b2) {
          var c2 = b2.endTime - b2.startTime;
          return this.getEstimate_(a2) * c2;
        };
        shaka.offline.StreamBandwidthEstimator.prototype.getInitSegmentEstimate = function(a2) {
          return 0.5 * this.getEstimate_(a2);
        };
        shaka.offline.StreamBandwidthEstimator.prototype.getEstimate_ = function(a2) {
          a2 = this.estimateByStreamId_[a2];
          null == a2 && (a2 = 0, shaka.log.error("Asking for bitrate of stream not given to the estimator"));
          0 == a2 && shaka.log.warning("Using bitrate of 0, this stream won't affect progress");
          return a2;
        };
        shaka.offline.StreamBandwidthEstimator.DEFAULT_AUDIO_BITRATE_ = 393216;
        shaka.offline.StreamBandwidthEstimator.DEFAULT_TEXT_BITRATE_ = 52;
        shaka.offline.StreamBandwidthEstimator.DEFAULT_IMAGE_BITRATE_ = 2048;
        shaka.offline.Storage = function(a2) {
          var b2 = this;
          if (a2 && a2.constructor != shaka.Player)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.LOCAL_PLAYER_INSTANCE_REQUIRED);
          this.networkingEngine_ = this.config_ = null;
          a2 ? (this.config_ = a2.getSharedConfiguration(), this.networkingEngine_ = a2.getNetworkingEngine(), goog.asserts.assert(this.networkingEngine_, "Storage should not be initialized with a player that had |destroy| called on it.")) : (this.config_ = shaka.util.PlayerConfiguration.createDefault(), this.networkingEngine_ = new shaka.net.NetworkingEngine());
          this.openOperations_ = [];
          this.openDownloadManagers_ = [];
          var c2 = !a2;
          this.destroyer_ = new shaka.util.Destroyer(function() {
            var d2, e2, f2, g, h;
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
              switch (k2.nextAddress) {
                case 1:
                  return k2.yield(Promise.all(b2.openDownloadManagers_.map(function(l) {
                    return l.abortAll();
                  })), 2);
                case 2:
                  d2 = function() {
                  };
                  e2 = [];
                  f2 = $jscomp.makeIterator(b2.openOperations_);
                  for (g = f2.next(); !g.done; g = f2.next())
                    h = g.value, e2.push(h.then(d2, d2));
                  return k2.yield(Promise.all(e2), 3);
                case 3:
                  if (!c2) {
                    k2.jumpTo(4);
                    break;
                  }
                  return k2.yield(b2.networkingEngine_.destroy(), 4);
                case 4:
                  b2.config_ = null, b2.networkingEngine_ = null, k2.jumpToEnd();
              }
            });
          });
        };
        shaka.offline.Storage.support = function() {
          return shaka.util.Platform.supportsMediaSource() ? shaka.offline.StorageMuxer.support() : false;
        };
        shaka.offline.Storage.prototype.destroy = function() {
          return this.destroyer_.destroy();
        };
        shaka.offline.Storage.prototype.configure = function(a2, b2) {
          goog.asserts.assert("object" == typeof a2 || 2 == arguments.length, "String configs should have values!");
          2 == arguments.length && "string" == typeof a2 && (a2 = shaka.util.ConfigUtils.convertToConfigObject(a2, b2));
          goog.asserts.assert("object" == typeof a2, "Should be an object!");
          a2.manifest && a2.manifest.dash && "defaultPresentationDelay" in a2.manifest.dash && (shaka.Deprecate.deprecateFeature(4, "manifest.dash.defaultPresentationDelay configuration", "Please Use manifest.defaultPresentationDelay instead."), a2.manifest.defaultPresentationDelay = a2.manifest.dash.defaultPresentationDelay, delete a2.manifest.dash.defaultPresentationDelay);
          goog.asserts.assert(this.config_, "Cannot reconfigure storage after calling destroy.");
          return shaka.util.PlayerConfiguration.mergeConfigObjects(this.config_, a2);
        };
        shaka.offline.Storage.prototype.getConfiguration = function() {
          goog.asserts.assert(this.config_, "Config must not be null!");
          var a2 = shaka.util.PlayerConfiguration.createDefault();
          shaka.util.PlayerConfiguration.mergeConfigObjects(a2, this.config_, shaka.util.PlayerConfiguration.createDefault());
          return a2;
        };
        shaka.offline.Storage.prototype.getNetworkingEngine = function() {
          return this.networkingEngine_;
        };
        shaka.offline.Storage.prototype.store = function(a2, b2, c2) {
          var d2 = this;
          goog.asserts.assert(this.networkingEngine_, "Cannot call |store| after calling |destroy|.");
          var e2 = this.getConfiguration(), f2 = new shaka.offline.DownloadManager(this.networkingEngine_);
          this.openDownloadManagers_.push(f2);
          b2 = this.store_(a2, b2 || {}, function() {
            var h;
            return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
              if (1 == k2.nextAddress)
                return goog.asserts.assert(d2.networkingEngine_, "Should not call |store| after |destroy|"), k2.yield(shaka.media.ManifestParser.getFactory(
                  a2,
                  d2.networkingEngine_,
                  e2.manifest.retryParameters,
                  c2 || null
                ), 2);
              h = k2.yieldResult;
              return k2["return"](shaka.util.Functional.callFactory(h));
            });
          }, e2, f2);
          var g = new shaka.util.AbortableOperation(b2, function() {
            return f2.abortAll();
          });
          g["finally"](function() {
            shaka.util.ArrayUtils.remove(d2.openDownloadManagers_, f2);
          });
          g.then = function(h) {
            shaka.Deprecate.deprecateFeature(4, "shaka.offline.Storage.store.then", "Storage operations now return a shaka.util.AbortableOperation, rather than a promise.  Please update to conform to this new API; you can use the |chain| method instead.");
            return g.promise.then(h);
          };
          return this.startAbortableOperation_(g);
        };
        shaka.offline.Storage.prototype.getStoreInProgress = function() {
          shaka.Deprecate.deprecateFeature(4, "shaka.offline.Storage.getStoreInProgress", "Multiple concurrent downloads are now supported.");
          return false;
        };
        shaka.offline.Storage.prototype.store_ = function(a2, b2, c2, d2, e2) {
          var f2 = this, g, h, k2, l, m, n, p, q, r, t, u, v, y, w;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(x) {
            switch (x.nextAddress) {
              case 1:
                return f2.requireSupport_(), h = g = null, k2 = new shaka.offline.StorageMuxer(), n = m = l = null, x.setCatchFinallyBlocks(2, 3), x.yield(c2(), 5);
              case 5:
                return g = x.yieldResult, x.yield(f2.parseManifest(a2, g, d2), 6);
              case 6:
                p = x.yieldResult;
                f2.ensureNotDestroyed_();
                q = !p.presentationTimeline.isLive() && !p.presentationTimeline.isInProgress();
                if (!q)
                  throw new shaka.util.Error(
                    shaka.util.Error.Severity.CRITICAL,
                    shaka.util.Error.Category.STORAGE,
                    shaka.util.Error.Code.CANNOT_STORE_LIVE_OFFLINE,
                    a2
                  );
                return x.yield(f2.createDrmEngine(p, function(z) {
                  n = n || z;
                }, d2), 7);
              case 7:
                h = x.yieldResult;
                f2.ensureNotDestroyed_();
                if (n)
                  throw n;
                return x.yield(f2.filterManifest_(p, h, d2), 8);
              case 8:
                return x.yield(k2.init(), 9);
              case 9:
                return f2.ensureNotDestroyed_(), x.yield(k2.getActive(), 10);
              case 10:
                return l = x.yieldResult, f2.ensureNotDestroyed_(), goog.asserts.assert(h, "drmEngine should be non-null here."), r = f2.makeManifestDB_(h, p, a2, b2, d2, e2), t = r.manifestDB, u = r.toDownload, x.yield(l.cell.addManifests([t]), 11);
              case 11:
                v = x.yieldResult;
                f2.ensureNotDestroyed_();
                m = v[0];
                goog.asserts.assert(h, "drmEngine should be non-null here.");
                f2.ensureNotDestroyed_();
                if (n)
                  throw n;
                return x.yield(f2.downloadSegments_(u, m, t, e2, d2, l.cell, p, h), 12);
              case 12:
                return f2.ensureNotDestroyed_(), y = shaka.offline.OfflineUri.manifest(l.path.mechanism, l.path.cell, m), x["return"](shaka.offline.StoredContentUtils.fromManifestDB(y, t));
              case 3:
                return x.enterFinallyBlock(), x.yield(k2.destroy(), 13);
              case 13:
                if (!g) {
                  x.jumpTo(14);
                  break;
                }
                return x.yield(g.stop(), 14);
              case 14:
                if (!h) {
                  x.jumpTo(16);
                  break;
                }
                return x.yield(h.destroy(), 16);
              case 16:
                x.leaveFinallyBlock(0);
                break;
              case 2:
                w = x.enterCatchBlock();
                if (null == m) {
                  x.jumpTo(18);
                  break;
                }
                return x.yield(shaka.offline.Storage.cleanStoredManifest(m), 18);
              case 18:
                throw n || w;
            }
          });
        };
        shaka.offline.Storage.prototype.downloadSegments_ = function(a2, b2, c2, d2, e2, f2, g, h) {
          var k2 = this, l, m, n, p, q, r, t, u, v, y;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(w) {
            switch (w.nextAddress) {
              case 1:
                l = {};
                m = 0;
                n = function(x, z) {
                  var A, C, D, F, B, E, G;
                  return $jscomp.asyncExecutePromiseGeneratorProgram(function(J) {
                    if (1 == J.nextAddress) {
                      A = {};
                      C = $jscomp.makeIterator(x);
                      for (D = C.next(); !D.done; A = { $jscomp$loop$prop$download$537$630: A.$jscomp$loop$prop$download$537$630 }, D = C.next())
                        A.$jscomp$loop$prop$download$537$630 = D.value, F = A.$jscomp$loop$prop$download$537$630.makeSegmentRequest(e2), B = A.$jscomp$loop$prop$download$537$630.estimateId, E = A.$jscomp$loop$prop$download$537$630.isInitSegment, G = function(H) {
                          return function(I) {
                            var K, L, N;
                            return $jscomp.asyncExecutePromiseGeneratorProgram(function(M) {
                              if (1 == M.nextAddress)
                                return M.yield(f2.addSegments([{ data: I }]), 2);
                              K = M.yieldResult;
                              k2.ensureNotDestroyed_();
                              L = H.$jscomp$loop$prop$download$537$630.ref;
                              N = shaka.offline.DownloadInfo.idForSegmentRef(L);
                              l[N] = K[0];
                              m += I.byteLength;
                              M.jumpToEnd();
                            });
                          };
                        }(A), d2.queue(A.$jscomp$loop$prop$download$537$630.groupId, F, B, E, G);
                      return J.yield(d2.waitToFinish(), 2);
                    }
                    if (!z)
                      return J.jumpTo(0);
                    k2.ensureNotDestroyed_();
                    k2.setManifestDrmFields_(g, c2, h, e2);
                    return J.yield(f2.updateManifest(b2, c2), 0);
                  });
                };
                p = false;
                w.setCatchFinallyBlocks(2);
                if (!k2.getManifestIsEncrypted_(g) || !p || k2.getManifestIncludesInitData_(g)) {
                  w.jumpTo(4);
                  break;
                }
                return w.yield(n(a2.filter(function(x) {
                  return x.isInitSegment;
                }), true), 5);
              case 5:
                return k2.ensureNotDestroyed_(), a2 = a2.filter(function(x) {
                  return !x.isInitSegment;
                }), q = l, r = m, l = {}, m = 0, w.yield(shaka.offline.Storage.assignSegmentsToManifest(f2, b2, c2, q, r, function() {
                  return k2.ensureNotDestroyed_();
                }), 6);
              case 6:
                k2.ensureNotDestroyed_();
              case 4:
                if (p) {
                  w.jumpTo(7);
                  break;
                }
                return w.yield(n(a2, false), 8);
              case 8:
                return k2.ensureNotDestroyed_(), t = l, u = m, l = {}, m = 0, w.yield(shaka.offline.Storage.assignSegmentsToManifest(f2, b2, c2, t, u, function() {
                  return k2.ensureNotDestroyed_();
                }), 9);
              case 9:
                k2.ensureNotDestroyed_(), goog.asserts.assert(!c2.isIncomplete, "The manifest should be complete by now");
              case 7:
                w.leaveTryBlock(0);
                break;
              case 2:
                return v = w.enterCatchBlock(), y = Object.values(l), w.yield(f2.removeSegments(y, function(x) {
                }), 10);
              case 10:
                throw v;
            }
          });
        };
        shaka.offline.Storage.cleanStoredManifest = function(a2) {
          var b2, c2, d2, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            switch (f2.nextAddress) {
              case 1:
                return b2 = new shaka.offline.StorageMuxer(), f2.yield(b2.init(), 2);
              case 2:
                return f2.yield(b2.getActive(), 3);
              case 3:
                return c2 = f2.yieldResult, d2 = shaka.offline.OfflineUri.manifest(c2.path.mechanism, c2.path.cell, a2), f2.yield(b2.destroy(), 4);
              case 4:
                return e2 = new shaka.offline.Storage(), f2.yield(e2.remove(d2.toString()), 0);
            }
          });
        };
        shaka.offline.Storage.assignSegmentsToManifest = function(a2, b2, c2, d2, e2, f2) {
          var g, h, k2, l, m, n, p, q, r, t, u;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(v) {
            switch (v.nextAddress) {
              case 1:
                g = false;
                v.setCatchFinallyBlocks(2);
                h = true;
                k2 = $jscomp.makeIterator(c2.streams);
                for (l = k2.next(); !l.done; l = k2.next())
                  for (m = l.value, n = $jscomp.makeIterator(m.segments), p = n.next(); !p.done; p = n.next())
                    q = p.value, r = q.pendingSegmentRefId ? d2[q.pendingSegmentRefId] : null, null != r && (q.dataKey = r, q.pendingSegmentRefId = void 0), r = q.pendingInitSegmentRefId ? d2[q.pendingInitSegmentRefId] : null, null != r && (q.initSegmentKey = r, q.pendingInitSegmentRefId = void 0), q.pendingSegmentRefId && (h = false), q.pendingInitSegmentRefId && (h = false);
                c2.size += e2;
                h && (c2.isIncomplete = false);
                return v.yield(a2.updateManifest(b2, c2), 4);
              case 4:
                g = true;
                f2();
                v.leaveTryBlock(0);
                break;
              case 2:
                return t = v.enterCatchBlock(), v.yield(shaka.offline.Storage.cleanStoredManifest(b2), 5);
              case 5:
                if (g) {
                  v.jumpTo(6);
                  break;
                }
                u = Object.values(d2);
                return v.yield(a2.removeSegments(u, function(y) {
                }), 6);
              case 6:
                throw t;
            }
          });
        };
        shaka.offline.Storage.prototype.filterManifest_ = function(a2, b2, c2) {
          var d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u, v, y, w, x, z, A, C, D, F, B, E, G, J, H, I;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(K) {
            switch (K.nextAddress) {
              case 1:
                return d2 = { width: Infinity, height: Infinity }, shaka.util.StreamUtils.filterByRestrictions(a2, c2.restrictions, d2), K.yield(shaka.util.StreamUtils.filterManifestByMediaCapabilities(a2, c2.offline.usePersistentLicense), 2);
              case 2:
                e2 = [];
                f2 = c2.preferredAudioChannelCount;
                g = c2.preferredDecodingAttributes;
                h = c2.preferredVideoCodecs;
                k2 = c2.preferredAudioCodecs;
                shaka.util.StreamUtils.chooseCodecsAndFilterManifest(a2, h, k2, f2, g);
                l = $jscomp.makeIterator(a2.variants);
                for (m = l.next(); !m.done; m = l.next())
                  n = m.value, goog.asserts.assert(shaka.util.StreamUtils.isPlayable(n), 'We should have already filtered by "is playable"'), e2.push(shaka.util.StreamUtils.variantToTrack(n));
                p = $jscomp.makeIterator(a2.textStreams);
                for (q = p.next(); !q.done; q = p.next())
                  r = q.value, e2.push(shaka.util.StreamUtils.textStreamToTrack(r));
                t = $jscomp.makeIterator(a2.imageStreams);
                for (u = t.next(); !u.done; u = t.next())
                  v = u.value, e2.push(shaka.util.StreamUtils.imageStreamToTrack(v));
                return K.yield(c2.offline.trackSelectionCallback(e2), 3);
              case 3:
                y = K.yieldResult;
                w = a2.presentationTimeline.getDuration();
                x = 0;
                z = $jscomp.makeIterator(y);
                for (A = z.next(); !A.done; A = z.next())
                  C = A.value, D = C.bandwidth * w / 8, x += D;
                K.setCatchFinallyBlocks(4);
                return K.yield(c2.offline.downloadSizeCallback(x), 6);
              case 6:
                F = K.yieldResult;
                if (!F)
                  throw new shaka.util.Error(
                    shaka.util.Error.Severity.CRITICAL,
                    shaka.util.Error.Category.STORAGE,
                    shaka.util.Error.Code.STORAGE_LIMIT_REACHED
                  );
                K.leaveTryBlock(5);
                break;
              case 4:
                B = K.enterCatchBlock();
                if (B instanceof shaka.util.Error)
                  throw B;
                shaka.log.warning("downloadSizeCallback has produced an unexpected error", B);
                throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.DOWNLOAD_SIZE_CALLBACK_ERROR);
              case 5:
                E = /* @__PURE__ */ new Set();
                G = /* @__PURE__ */ new Set();
                J = /* @__PURE__ */ new Set();
                H = $jscomp.makeIterator(y);
                for (A = H.next(); !A.done; A = H.next())
                  I = A.value, "variant" == I.type && E.add(I.id), "text" == I.type && G.add(I.id), "image" == I.type && J.add(I.id);
                a2.variants = a2.variants.filter(function(L) {
                  return E.has(L.id);
                });
                a2.textStreams = a2.textStreams.filter(function(L) {
                  return G.has(L.id);
                });
                a2.imageStreams = a2.imageStreams.filter(function(L) {
                  return J.has(L.id);
                });
                shaka.offline.Storage.validateManifest_(a2);
                K.jumpToEnd();
            }
          });
        };
        shaka.offline.Storage.prototype.makeManifestDB_ = function(a2, b2, c2, d2, e2, f2) {
          var g = shaka.offline.StoredContentUtils.fromManifest(c2, b2, 0, d2), h = e2.offline.progressCallback;
          f2.setCallbacks(function(q, r) {
            g.size = r;
            h(g, q);
          }, function(q, r) {
            k2 && e2.offline.usePersistentLicense && l == r && a2.newInitData("cenc", q);
          });
          var k2 = this.getManifestIsEncrypted_(b2) && !this.getManifestIncludesInitData_(b2), l = null;
          if (k2) {
            var m = a2.getDrmInfo();
            l = shaka.offline.Storage.defaultSystemIds_.get(m.keySystem);
          }
          m = new shaka.offline.StreamBandwidthEstimator();
          for (var n = $jscomp.makeIterator(b2.textStreams), p = n.next(); !p.done; p = n.next())
            m.addText(p.value);
          n = $jscomp.makeIterator(b2.imageStreams);
          for (p = n.next(); !p.done; p = n.next())
            m.addImage(p.value);
          p = $jscomp.makeIterator(b2.variants);
          for (n = p.next(); !n.done; n = p.next())
            m.addVariant(n.value);
          m = this.createStreams_(f2, m, a2, b2, e2);
          f2 = m.streams;
          m = m.toDownload;
          p = a2.getDrmInfo();
          n = e2.offline.usePersistentLicense;
          p && n && (p.initData = []);
          return { manifestDB: {
            creationTime: Date.now(),
            originalManifestUri: c2,
            duration: b2.presentationTimeline.getDuration(),
            size: 0,
            expiration: a2.getExpiration(),
            streams: f2,
            sessionIds: n ? a2.getSessionIds() : [],
            drmInfo: p,
            appMetadata: d2,
            isIncomplete: true
          }, toDownload: m };
        };
        shaka.offline.Storage.prototype.getManifestIsEncrypted_ = function(a2) {
          return a2.variants.some(function(b2) {
            var c2 = b2.audio && b2.audio.encrypted;
            return b2.video && b2.video.encrypted || c2;
          });
        };
        shaka.offline.Storage.prototype.getManifestIncludesInitData_ = function(a2) {
          return a2.variants.some(function(b2) {
            return (b2.video ? b2.video.drmInfos : []).concat(b2.audio ? b2.audio.drmInfos : []).some(function(c2) {
              return c2.initData && c2.initData.length;
            });
          });
        };
        shaka.offline.Storage.prototype.setManifestDrmFields_ = function(a2, b2, c2, d2) {
          b2.expiration = c2.getExpiration();
          c2 = c2.getSessionIds();
          b2.sessionIds = d2.offline.usePersistentLicense ? c2 : [];
          if (this.getManifestIsEncrypted_(a2) && d2.offline.usePersistentLicense && !c2.length)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.NO_INIT_DATA_FOR_OFFLINE);
        };
        shaka.offline.Storage.prototype.remove = function(a2) {
          return this.startOperation_(this.remove_(a2));
        };
        shaka.offline.Storage.prototype.remove_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            switch (k2.nextAddress) {
              case 1:
                b2.requireSupport_();
                c2 = shaka.offline.OfflineUri.parse(a2);
                if (null == c2 || !c2.isManifest())
                  throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.MALFORMED_OFFLINE_URI, a2);
                d2 = c2;
                e2 = new shaka.offline.StorageMuxer();
                k2.setFinallyBlock(2);
                return k2.yield(e2.init(), 4);
              case 4:
                return k2.yield(e2.getCell(
                  d2.mechanism(),
                  d2.cell()
                ), 5);
              case 5:
                return f2 = k2.yieldResult, k2.yield(f2.getManifests([d2.key()]), 6);
              case 6:
                return g = k2.yieldResult, h = g[0], k2.yield(Promise.all([b2.removeFromDRM_(d2, h, e2), b2.removeFromStorage_(f2, d2, h)]), 2);
              case 2:
                return k2.enterFinallyBlock(), k2.yield(e2.destroy(), 8);
              case 8:
                k2.leaveFinallyBlock(0);
            }
          });
        };
        shaka.offline.Storage.getCapabilities_ = function(a2, b2) {
          for (var c2 = shaka.util.MimeUtils, d2 = [], e2 = $jscomp.makeIterator(a2.streams), f2 = e2.next(); !f2.done; f2 = e2.next())
            f2 = f2.value, b2 && "video" == f2.type ? d2.push({ contentType: c2.getFullType(f2.mimeType, f2.codecs), robustness: a2.drmInfo.videoRobustness }) : b2 || "audio" != f2.type || d2.push({ contentType: c2.getFullType(f2.mimeType, f2.codecs), robustness: a2.drmInfo.audioRobustness });
          return d2;
        };
        shaka.offline.Storage.prototype.removeFromDRM_ = function(a2, b2, c2) {
          var d2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            goog.asserts.assert(d2.networkingEngine_, "Cannot be destroyed");
            return e2.yield(shaka.offline.Storage.deleteLicenseFor_(d2.networkingEngine_, d2.config_.drm, c2, b2), 0);
          });
        };
        shaka.offline.Storage.prototype.removeFromStorage_ = function(a2, b2, c2) {
          var d2 = this, e2 = shaka.offline.Storage.getAllSegmentIds_(c2), f2 = e2.length + 1, g = 0, h = shaka.offline.StoredContentUtils.fromManifestDB(b2, c2);
          c2 = function(k2) {
            g += 1;
            d2.config_.offline.progressCallback(h, g / f2);
          };
          return Promise.all([a2.removeSegments(e2, c2), a2.removeManifests([b2.key()], c2)]);
        };
        shaka.offline.Storage.prototype.removeEmeSessions = function() {
          return this.startOperation_(this.removeEmeSessions_());
        };
        shaka.offline.Storage.prototype.removeEmeSessions_ = function() {
          var a2 = this, b2, c2, d2, e2, f2, g, h, k2, l, m, n;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(p) {
            switch (p.nextAddress) {
              case 1:
                return a2.requireSupport_(), goog.asserts.assert(a2.networkingEngine_, "Cannot be destroyed"), b2 = a2.networkingEngine_, c2 = a2.config_.drm, d2 = new shaka.offline.StorageMuxer(), e2 = new shaka.offline.SessionDeleter(), f2 = false, p.setFinallyBlock(2), p.yield(d2.init(), 4);
              case 4:
                g = [], d2.forEachEmeSessionCell(function(q) {
                  return g.push(q);
                }), h = $jscomp.makeIterator(g), k2 = h.next();
              case 5:
                if (k2.done) {
                  p.jumpTo(2);
                  break;
                }
                l = k2.value;
                return p.yield(l.getAll(), 8);
              case 8:
                return m = p.yieldResult, p.yield(e2["delete"](c2, b2, m), 9);
              case 9:
                return n = p.yieldResult, p.yield(l.remove(n), 10);
              case 10:
                n.length != m.length && (f2 = true);
                k2 = h.next();
                p.jumpTo(5);
                break;
              case 2:
                return p.enterFinallyBlock(), p.yield(d2.destroy(), 11);
              case 11:
                p.leaveFinallyBlock(3);
                break;
              case 3:
                return p["return"](!f2);
            }
          });
        };
        shaka.offline.Storage.prototype.list = function() {
          return this.startOperation_(this.list_());
        };
        shaka.offline.Storage.prototype.list_ = function() {
          var a2 = this, b2, c2, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            switch (e2.nextAddress) {
              case 1:
                return a2.requireSupport_(), b2 = [], c2 = new shaka.offline.StorageMuxer(), e2.setFinallyBlock(2), e2.yield(c2.init(), 4);
              case 4:
                return d2 = Promise.resolve(), c2.forEachCell(function(f2, g) {
                  d2 = d2.then(function() {
                    var h;
                    return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
                      if (1 == k2.nextAddress)
                        return k2.yield(g.getAllManifests(), 2);
                      h = k2.yieldResult;
                      h.forEach(function(l, m) {
                        var n = shaka.offline.OfflineUri.manifest(f2.mechanism, f2.cell, m);
                        n = shaka.offline.StoredContentUtils.fromManifestDB(n, l);
                        b2.push(n);
                      });
                      k2.jumpToEnd();
                    });
                  });
                }), e2.yield(d2, 2);
              case 2:
                return e2.enterFinallyBlock(), e2.yield(c2.destroy(), 6);
              case 6:
                e2.leaveFinallyBlock(3);
                break;
              case 3:
                return e2["return"](b2);
            }
          });
        };
        shaka.offline.Storage.prototype.parseManifest = function(a2, b2, c2) {
          var d2 = this, e2, f2, g, h, k2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(l) {
            if (1 == l.nextAddress)
              return e2 = null, f2 = d2.networkingEngine_, goog.asserts.assert(f2, "Should be initialized!"), g = { networkingEngine: f2, modifyManifestRequest: function(m, n) {
              }, modifySegmentRequest: function(m, n) {
              }, filter: function() {
                return Promise.resolve();
              }, makeTextStreamsForClosedCaptions: function(m) {
              }, onTimelineRegionAdded: function() {
              }, onEvent: function() {
              }, onError: function(m) {
                e2 = m;
              }, isLowLatencyMode: function() {
                return false;
              }, isAutoLowLatencyMode: function() {
                return false;
              }, enableLowLatencyMode: function() {
              } }, b2.configure(c2.manifest), d2.ensureNotDestroyed_(), l.yield(b2.start(a2, g), 2);
            if (3 != l.nextAddress)
              return h = l.yieldResult, d2.ensureNotDestroyed_(), k2 = shaka.offline.Storage.getAllStreamsFromManifest_(h), l.yield(Promise.all(shaka.util.Iterables.map(k2, function(m) {
                return m.createSegmentIndex();
              })), 3);
            d2.ensureNotDestroyed_();
            if (e2)
              throw e2;
            return l["return"](h);
          });
        };
        shaka.offline.Storage.prototype.createDrmEngine = function(a2, b2, c2) {
          var d2 = this, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            switch (f2.nextAddress) {
              case 1:
                return goog.asserts.assert(d2.networkingEngine_, "Cannot call |createDrmEngine| after |destroy|"), e2 = new shaka.media.DrmEngine({ netEngine: d2.networkingEngine_, onError: b2, onKeyStatus: function() {
                }, onExpirationUpdated: function() {
                }, onEvent: function() {
                } }), e2.configure(c2.drm), f2.yield(
                  e2.initForStorage(a2.variants, c2.offline.usePersistentLicense),
                  2
                );
              case 2:
                return f2.yield(e2.setServerCertificate(), 3);
              case 3:
                return f2.yield(e2.createOrLoad(), 4);
              case 4:
                return f2["return"](e2);
            }
          });
        };
        shaka.offline.Storage.prototype.createStreams_ = function(a2, b2, c2, d2, e2) {
          c2 = /* @__PURE__ */ new Map();
          var f2 = shaka.offline.Storage.getAllStreamsFromManifest_(d2), g = /* @__PURE__ */ new Map();
          f2 = $jscomp.makeIterator(f2);
          for (var h = f2.next(); !h.done; h = f2.next()) {
            h = h.value;
            var k2 = this.createStream_(a2, b2, d2, h, e2, c2);
            g.set(h.id, k2);
          }
          a2 = $jscomp.makeIterator(d2.variants);
          for (b2 = a2.next(); !b2.done; b2 = a2.next())
            b2 = b2.value, b2.audio && g.get(b2.audio.id).variantIds.push(b2.id), b2.video && g.get(b2.video.id).variantIds.push(b2.id);
          return { streams: Array.from(g.values()), toDownload: Array.from(c2.values()) };
        };
        shaka.offline.Storage.prototype.createStream_ = function(a2, b2, c2, d2, e2, f2) {
          var g = {
            id: d2.id,
            originalId: d2.originalId,
            primary: d2.primary,
            type: d2.type,
            mimeType: d2.mimeType,
            codecs: d2.codecs,
            frameRate: d2.frameRate,
            pixelAspectRatio: d2.pixelAspectRatio,
            hdr: d2.hdr,
            kind: d2.kind,
            language: d2.language,
            label: d2.label,
            width: d2.width || null,
            height: d2.height || null,
            encrypted: d2.encrypted,
            keyIds: d2.keyIds,
            segments: [],
            variantIds: [],
            roles: d2.roles,
            forced: d2.forced,
            channelsCount: d2.channelsCount,
            audioSamplingRate: d2.audioSamplingRate,
            spatialAudio: d2.spatialAudio,
            closedCaptions: d2.closedCaptions,
            tilesLayout: d2.tilesLayout
          };
          c2 = c2.presentationTimeline.getSegmentAvailabilityStart();
          shaka.offline.Storage.forEachSegment_(d2, c2, function(h) {
            var k2 = shaka.offline.DownloadInfo.idForSegmentRef(h), l = void 0;
            if (!f2.has(k2)) {
              var m = a2.addDownloadEstimate(b2.getSegmentEstimate(d2.id, h));
              m = new shaka.offline.DownloadInfo(h, m, d2.id, false);
              f2.set(k2, m);
            }
            h.initSegmentReference && (l = shaka.offline.DownloadInfo.idForSegmentRef(h.initSegmentReference), f2.has(l) || (m = a2.addDownloadEstimate(b2.getInitSegmentEstimate(d2.id)), m = new shaka.offline.DownloadInfo(h.initSegmentReference, m, d2.id, true), f2.set(l, m)));
            g.segments.push({ pendingInitSegmentRefId: l, initSegmentKey: l ? 0 : null, startTime: h.startTime, endTime: h.endTime, appendWindowStart: h.appendWindowStart, appendWindowEnd: h.appendWindowEnd, timestampOffset: h.timestampOffset, tilesLayout: h.tilesLayout, pendingSegmentRefId: k2, dataKey: 0 });
          });
          return g;
        };
        shaka.offline.Storage.forEachSegment_ = function(a2, b2, c2) {
          b2 = a2.segmentIndex.find(b2);
          if (null != b2)
            for (var d2 = a2.segmentIndex.get(b2); d2; )
              c2(d2), d2 = a2.segmentIndex.get(++b2);
        };
        shaka.offline.Storage.prototype.ensureNotDestroyed_ = function() {
          if (this.destroyer_.destroyed())
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.OPERATION_ABORTED);
        };
        shaka.offline.Storage.prototype.requireSupport_ = function() {
          if (!shaka.offline.Storage.support())
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE, shaka.util.Error.Code.STORAGE_NOT_SUPPORTED);
        };
        shaka.offline.Storage.prototype.startOperation_ = function(a2) {
          var b2 = this;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(c2) {
            if (1 == c2.nextAddress)
              return b2.openOperations_.push(a2), c2.setFinallyBlock(2), c2.yield(a2, 4);
            if (2 != c2.nextAddress)
              return c2["return"](c2.yieldResult);
            c2.enterFinallyBlock();
            shaka.util.ArrayUtils.remove(b2.openOperations_, a2);
            return c2.leaveFinallyBlock(0);
          });
        };
        shaka.offline.Storage.prototype.startAbortableOperation_ = function(a2) {
          var b2 = this, c2 = a2.promise;
          this.openOperations_.push(c2);
          return a2["finally"](function() {
            shaka.util.ArrayUtils.remove(b2.openOperations_, c2);
          });
        };
        shaka.offline.Storage.getAllSegmentIds_ = function(a2) {
          var b2 = /* @__PURE__ */ new Set();
          a2 = $jscomp.makeIterator(a2.streams);
          for (var c2 = a2.next(); !c2.done; c2 = a2.next()) {
            c2 = $jscomp.makeIterator(c2.value.segments);
            for (var d2 = c2.next(); !d2.done; d2 = c2.next())
              d2 = d2.value, null != d2.initSegmentKey && b2.add(d2.initSegmentKey), b2.add(d2.dataKey);
          }
          return Array.from(b2);
        };
        shaka.offline.Storage.deleteAll = function() {
          var a2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(b2) {
            return 1 == b2.nextAddress ? (a2 = new shaka.offline.StorageMuxer(), b2.setFinallyBlock(2), b2.yield(a2.erase(), 2)) : 5 != b2.nextAddress ? (b2.enterFinallyBlock(), b2.yield(a2.destroy(), 5)) : b2.leaveFinallyBlock(0);
          });
        };
        shaka.offline.Storage.deleteLicenseFor_ = function(a2, b2, c2, d2) {
          var e2, f2, g, h;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(k2) {
            if (1 == k2.nextAddress) {
              if (!d2.drmInfo)
                return k2["return"]();
              e2 = c2.getEmeSessionCell();
              f2 = d2.sessionIds.map(function(l) {
                return { sessionId: l, keySystem: d2.drmInfo.keySystem, licenseUri: d2.drmInfo.licenseServerUri, serverCertificate: d2.drmInfo.serverCertificate, audioCapabilities: shaka.offline.Storage.getCapabilities_(d2, false), videoCapabilities: shaka.offline.Storage.getCapabilities_(d2, true) };
              });
              g = new shaka.offline.SessionDeleter();
              return k2.yield(g["delete"](b2, a2, f2), 2);
            }
            return 3 != k2.nextAddress ? (h = k2.yieldResult, k2.yield(e2.remove(h), 3)) : k2.yield(e2.add(f2.filter(function(l) {
              return !h.includes(l.sessionId);
            })), 0);
          });
        };
        shaka.offline.Storage.getAllStreamsFromManifest_ = function(a2) {
          for (var b2 = /* @__PURE__ */ new Set(), c2 = $jscomp.makeIterator(a2.textStreams), d2 = c2.next(); !d2.done; d2 = c2.next())
            b2.add(d2.value);
          c2 = $jscomp.makeIterator(a2.imageStreams);
          for (d2 = c2.next(); !d2.done; d2 = c2.next())
            b2.add(d2.value);
          a2 = $jscomp.makeIterator(a2.variants);
          for (c2 = a2.next(); !c2.done; c2 = a2.next())
            c2 = c2.value, c2.audio && b2.add(c2.audio), c2.video && b2.add(c2.video);
          return b2;
        };
        shaka.offline.Storage.validateManifest_ = function(a2) {
          var b2 = new Set(a2.variants.map(function(g) {
            return g.video;
          })), c2 = new Set(a2.variants.map(function(g) {
            return g.audio;
          }));
          a2 = a2.textStreams;
          1 < b2.size && shaka.log.warning("Multiple video tracks selected to be stored");
          b2 = $jscomp.makeIterator(c2);
          for (var d2 = b2.next(); !d2.done; d2 = b2.next()) {
            d2 = d2.value;
            for (var e2 = $jscomp.makeIterator(c2), f2 = e2.next(); !f2.done; f2 = e2.next())
              f2 = f2.value, d2 != f2 && d2.language == f2.language && shaka.log.warning(
                "Similar audio tracks were selected to be stored",
                d2.id,
                f2.id
              );
          }
          c2 = $jscomp.makeIterator(a2);
          for (b2 = c2.next(); !b2.done; b2 = c2.next())
            for (b2 = b2.value, d2 = $jscomp.makeIterator(a2), e2 = d2.next(); !e2.done; e2 = d2.next())
              e2 = e2.value, b2 != e2 && b2.language == e2.language && shaka.log.warning("Similar text tracks were selected to be stored", b2.id, e2.id);
        };
        goog.exportSymbol("shaka.offline.Storage", shaka.offline.Storage);
        goog.exportProperty(shaka.offline.Storage, "deleteAll", shaka.offline.Storage.deleteAll);
        goog.exportProperty(shaka.offline.Storage.prototype, "list", shaka.offline.Storage.prototype.list);
        goog.exportProperty(shaka.offline.Storage.prototype, "removeEmeSessions", shaka.offline.Storage.prototype.removeEmeSessions);
        goog.exportProperty(shaka.offline.Storage.prototype, "remove", shaka.offline.Storage.prototype.remove);
        goog.exportProperty(shaka.offline.Storage.prototype, "getStoreInProgress", shaka.offline.Storage.prototype.getStoreInProgress);
        goog.exportProperty(shaka.offline.Storage.prototype, "store", shaka.offline.Storage.prototype.store);
        goog.exportProperty(shaka.offline.Storage.prototype, "getNetworkingEngine", shaka.offline.Storage.prototype.getNetworkingEngine);
        goog.exportProperty(shaka.offline.Storage.prototype, "getConfiguration", shaka.offline.Storage.prototype.getConfiguration);
        goog.exportProperty(shaka.offline.Storage.prototype, "configure", shaka.offline.Storage.prototype.configure);
        goog.exportProperty(shaka.offline.Storage.prototype, "destroy", shaka.offline.Storage.prototype.destroy);
        goog.exportProperty(shaka.offline.Storage, "support", shaka.offline.Storage.support);
        shaka.offline.Storage.defaultSystemIds_ = (/* @__PURE__ */ new Map()).set("org.w3.clearkey", "1077efecc0b24d02ace33c1e52e2fb4b").set("com.widevine.alpha", "edef8ba979d64acea3c827dcd51d21ed").set("com.microsoft.playready", "9a04f07998404286ab92e65be0885f95").set("com.microsoft.playready.recommendation", "9a04f07998404286ab92e65be0885f95").set("com.microsoft.playready.software", "9a04f07998404286ab92e65be0885f95").set("com.microsoft.playready.hardware", "9a04f07998404286ab92e65be0885f95").set("com.adobe.primetime", "f239e769efa348509c16a903c6932efb");
        shaka.Player.registerSupportPlugin("offline", shaka.offline.Storage.support);
        shaka.polyfill = function() {
        };
        shaka.polyfill.installAll = function() {
          for (var a2 = $jscomp.makeIterator(shaka.polyfill.polyfills_), b2 = a2.next(); !b2.done; b2 = a2.next()) {
            b2 = b2.value;
            try {
              b2.callback();
            } catch (c2) {
              shaka.log.alwaysWarn("Error installing polyfill!", c2);
            }
          }
        };
        shaka.polyfill.register = function(a2, b2) {
          for (var c2 = { priority: b2 || 0, callback: a2 }, d2 = 0; d2 < shaka.polyfill.polyfills_.length; d2++)
            if (shaka.polyfill.polyfills_[d2].priority < c2.priority) {
              shaka.polyfill.polyfills_.splice(d2, 0, c2);
              return;
            }
          shaka.polyfill.polyfills_.push(c2);
        };
        goog.exportSymbol("shaka.polyfill", shaka.polyfill);
        goog.exportProperty(shaka.polyfill, "register", shaka.polyfill.register);
        goog.exportProperty(shaka.polyfill, "installAll", shaka.polyfill.installAll);
        shaka.polyfill.polyfills_ = [];
        shaka.polyfill.Aria = function() {
        };
        shaka.polyfill.Aria.install = function() {
          if (Object.getOwnPropertyDescriptor(Element.prototype, "ariaHidden"))
            shaka.log.info("Using native ARIAMixin interface.");
          else {
            shaka.log.info("ARIAMixin interface not detected. Installing polyfill.");
            for (var a2 = $jscomp.makeIterator(["ariaHidden", "ariaLabel", "ariaPressed", "ariaSelected"]), b2 = a2.next(); !b2.done; b2 = a2.next())
              shaka.polyfill.Aria.addARIAMixinAttribute_(b2.value);
          }
        };
        shaka.polyfill.Aria.addARIAMixinAttribute_ = function(a2) {
          var b2 = "aria-" + a2.toLowerCase().replace(/^aria/, "");
          Object.defineProperty(Element.prototype, a2, { get: function() {
            return this.getAttribute(b2);
          }, set: function(c2) {
            null == c2 || void 0 == c2 ? this.removeAttribute(b2) : this.setAttribute(b2, c2);
          } });
        };
        goog.exportProperty(shaka.polyfill, "Aria", shaka.polyfill.Aria);
        goog.exportProperty(shaka.polyfill.Aria, "install", shaka.polyfill.Aria.install);
        shaka.polyfill.register(shaka.polyfill.Aria.install);
        shaka.polyfill.EncryptionScheme = function() {
        };
        shaka.polyfill.EncryptionScheme.install = function() {
          EncryptionSchemePolyfills.install();
        };
        goog.exportProperty(shaka.polyfill, "EncryptionScheme", shaka.polyfill.EncryptionScheme);
        goog.exportProperty(shaka.polyfill.EncryptionScheme, "install", shaka.polyfill.EncryptionScheme.install);
        shaka.polyfill.register(shaka.polyfill.EncryptionScheme.install, -2);
        shaka.polyfill.Fullscreen = function() {
        };
        shaka.polyfill.Fullscreen.install = function() {
          if (window.Document) {
            var a2 = Element.prototype;
            a2.requestFullscreen = a2.requestFullscreen || a2.mozRequestFullScreen || a2.msRequestFullscreen || a2.webkitRequestFullscreen;
            a2 = Document.prototype;
            a2.exitFullscreen = a2.exitFullscreen || a2.mozCancelFullScreen || a2.msExitFullscreen || a2.webkitCancelFullScreen;
            "fullscreenElement" in document || (Object.defineProperty(document, "fullscreenElement", { get: function() {
              return document.mozFullScreenElement || document.msFullscreenElement || document.webkitCurrentFullScreenElement || document.webkitFullscreenElement;
            } }), Object.defineProperty(document, "fullscreenEnabled", { get: function() {
              return document.mozFullScreenEnabled || document.msFullscreenEnabled || document.webkitFullscreenEnabled;
            } }));
            a2 = shaka.polyfill.Fullscreen.proxyEvent_;
            document.addEventListener("webkitfullscreenchange", a2);
            document.addEventListener("webkitfullscreenerror", a2);
            document.addEventListener("mozfullscreenchange", a2);
            document.addEventListener("mozfullscreenerror", a2);
            document.addEventListener(
              "MSFullscreenChange",
              a2
            );
            document.addEventListener("MSFullscreenError", a2);
          }
        };
        shaka.polyfill.Fullscreen.proxyEvent_ = function(a2) {
          var b2 = a2.type.replace(/^(webkit|moz|MS)/, "").toLowerCase(), c2 = document.createEvent("Event");
          c2.initEvent(b2, a2.bubbles, a2.cancelable);
          a2.target.dispatchEvent(c2);
        };
        goog.exportProperty(shaka.polyfill, "Fullscreen", shaka.polyfill.Fullscreen);
        goog.exportProperty(shaka.polyfill.Fullscreen, "install", shaka.polyfill.Fullscreen.install);
        shaka.polyfill.register(shaka.polyfill.Fullscreen.install);
        shaka.polyfill.MathRound = function() {
        };
        shaka.polyfill.MathRound.install = function() {
          shaka.log.debug("mathRound.install");
          var a2 = shaka.polyfill.MathRound.MAX_ACCURATE_INPUT_ + 1;
          if (Math.round(a2) != a2) {
            shaka.log.debug("polyfill Math.round");
            var b2 = Math.round;
            Math.round = function(c2) {
              var d2 = c2;
              c2 <= shaka.polyfill.MathRound.MAX_ACCURATE_INPUT_ && (d2 = b2(c2));
              return d2;
            };
          }
        };
        goog.exportProperty(shaka.polyfill, "MathRound", shaka.polyfill.MathRound);
        goog.exportProperty(shaka.polyfill.MathRound, "install", shaka.polyfill.MathRound.install);
        shaka.polyfill.MathRound.MAX_ACCURATE_INPUT_ = 4503599627370496;
        shaka.polyfill.register(shaka.polyfill.MathRound.install);
        shaka.polyfill.MediaCapabilities = function() {
        };
        shaka.polyfill.MediaCapabilities.install = function() {
          shaka.util.Platform.isChromecast() || shaka.util.Platform.isApple() || shaka.util.Platform.isPS4() || shaka.util.Platform.isPS5() || shaka.util.Platform.isWebOS() || shaka.util.Platform.isTizen() || !navigator.mediaCapabilities ? (shaka.log.info("MediaCapabilities: install"), navigator.mediaCapabilities || (navigator.mediaCapabilities = {}), shaka.polyfill.MediaCapabilities.originalMcap = navigator.mediaCapabilities, navigator.mediaCapabilities.decodingInfo = shaka.polyfill.MediaCapabilities.decodingInfo_) : shaka.log.info("MediaCapabilities: Native mediaCapabilities support found.");
        };
        shaka.polyfill.MediaCapabilities.decodingInfo_ = function(a2) {
          var b2, c2, d2, e2, f2, g, h, k2, l, m, n, p, q, r, t, u;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(v) {
            switch (v.nextAddress) {
              case 1:
                b2 = { supported: false, powerEfficient: true, smooth: true, keySystemAccess: null, configuration: a2 };
                if (!a2)
                  return v["return"](b2);
                if ("media-source" == a2.type) {
                  if (!shaka.util.Platform.supportsMediaSource() || a2.video && (c2 = a2.video.contentType, d2 = MediaSource.isTypeSupported(c2), !d2) || a2.audio && (e2 = a2.audio.contentType, f2 = MediaSource.isTypeSupported(e2), !f2))
                    return v["return"](b2);
                } else if ("file" == a2.type) {
                  if (a2.video && (g = a2.video.contentType, h = shaka.util.Platform.supportsMediaType(g), !h) || a2.audio && (k2 = a2.audio.contentType, l = shaka.util.Platform.supportsMediaType(k2), !l))
                    return v["return"](b2);
                } else
                  return v["return"](b2);
                if (!a2.keySystemConfiguration)
                  return b2.supported = true, v["return"](Promise.resolve(b2));
                m = a2.keySystemConfiguration;
                n = [];
                p = [];
                m.audio && (q = { robustness: m.audio.robustness || "", contentType: a2.audio.contentType }, n.push(q));
                m.video && (r = { robustness: m.video.robustness || "", contentType: a2.video.contentType }, p.push(r));
                t = { initDataTypes: [m.initDataType], distinctiveIdentifier: m.distinctiveIdentifier, persistentState: m.persistentState, sessionTypes: m.sessionTypes };
                n.length && (t.audioCapabilities = n);
                p.length && (t.videoCapabilities = p);
                v.setCatchFinallyBlocks(3);
                return v.yield(navigator.requestMediaKeySystemAccess(m.keySystem, [t]), 5);
              case 5:
                u = v.yieldResult;
                v.leaveTryBlock(4);
                break;
              case 3:
                v.enterCatchBlock(), shaka.log.info("navigator.requestMediaKeySystemAccess failed.");
              case 4:
                u && (b2.supported = true, b2.keySystemAccess = u);
              case 2:
                return v["return"](b2);
            }
          });
        };
        goog.exportProperty(shaka.polyfill, "MediaCapabilities", shaka.polyfill.MediaCapabilities);
        goog.exportProperty(shaka.polyfill.MediaCapabilities, "install", shaka.polyfill.MediaCapabilities.install);
        shaka.polyfill.MediaCapabilities.originalMcap = null;
        goog.exportProperty(shaka.polyfill.MediaCapabilities, "originalMcap", shaka.polyfill.MediaCapabilities.originalMcap);
        shaka.polyfill.register(shaka.polyfill.MediaCapabilities.install, -1);
        shaka.polyfill.MediaSource = function() {
        };
        shaka.polyfill.MediaSource.install = function() {
          shaka.log.debug("MediaSource.install");
          var a2 = shaka.util.Platform.safariVersion();
          window.MediaSource ? window.cast && cast.__platform__ && cast.__platform__.canDisplayType ? (shaka.log.info("Patching Chromecast MSE bugs."), shaka.polyfill.MediaSource.patchCastIsTypeSupported_()) : a2 ? (shaka.polyfill.MediaSource.rejectTsContent_(), 12 >= a2 ? (shaka.log.info("Patching Safari 11 & 12 MSE bugs."), shaka.polyfill.MediaSource.stubAbort_(), shaka.polyfill.MediaSource.patchRemovalRange_()) : (shaka.log.info("Patching Safari 13 MSE bugs."), shaka.polyfill.MediaSource.stubAbort_())) : shaka.util.Platform.isTizen2() || shaka.util.Platform.isTizen3() || shaka.util.Platform.isTizen4() ? (shaka.log.info("Rejecting Opus."), shaka.polyfill.MediaSource.rejectCodec_("opus")) : shaka.log.info("Using native MSE as-is.") : shaka.log.info("No MSE implementation available.");
          window.MediaSource && MediaSource.isTypeSupported('video/webm; codecs="vp9"') && !MediaSource.isTypeSupported('video/webm; codecs="vp09.00.10.08"') && (shaka.log.info("Patching vp09 support queries."), shaka.polyfill.MediaSource.patchVp09_());
        };
        shaka.polyfill.MediaSource.stubAbort_ = function() {
          var a2 = MediaSource.prototype.addSourceBuffer;
          MediaSource.prototype.addSourceBuffer = function() {
            var b2 = $jscomp.getRestArguments.apply(0, arguments);
            b2 = a2.apply(this, b2);
            b2.abort = function() {
            };
            return b2;
          };
        };
        shaka.polyfill.MediaSource.patchRemovalRange_ = function() {
          var a2 = SourceBuffer.prototype.remove;
          SourceBuffer.prototype.remove = function(b2, c2) {
            return a2.call(this, b2, c2 - 1e-3);
          };
        };
        shaka.polyfill.MediaSource.rejectTsContent_ = function() {
          var a2 = MediaSource.isTypeSupported;
          MediaSource.isTypeSupported = function(b2) {
            return "mp2t" == b2.split(/ *; */)[0].split("/")[1].toLowerCase() ? false : a2(b2);
          };
        };
        shaka.polyfill.MediaSource.rejectCodec_ = function(a2) {
          var b2 = MediaSource.isTypeSupported;
          MediaSource.isTypeSupported = function(c2) {
            return shaka.util.MimeUtils.getCodecBase(c2) != a2 && b2(c2);
          };
        };
        shaka.polyfill.MediaSource.patchCastIsTypeSupported_ = function() {
          var a2 = MediaSource.isTypeSupported;
          MediaSource.isTypeSupported = function(b2) {
            var c2 = b2.split(/ *; */);
            c2.shift();
            return c2.some(function(d2) {
              return d2.startsWith("codecs=");
            }) ? cast.__platform__.canDisplayType(b2) : a2(b2);
          };
        };
        shaka.polyfill.MediaSource.patchVp09_ = function() {
          var a2 = MediaSource.isTypeSupported;
          shaka.util.Platform.isWebOS() || (MediaSource.isTypeSupported = function(b2) {
            var c2 = b2.split(/ *; */), d2 = c2.findIndex(function(g) {
              return g.startsWith("codecs=");
            });
            if (0 > d2)
              return a2(b2);
            var e2 = c2[d2].replace("codecs=", "").replace(/"/g, "").split(/\s*,\s*/), f2 = e2.findIndex(function(g) {
              return g.startsWith("vp09");
            });
            0 <= f2 && (e2[f2] = "vp9", c2[d2] = 'codecs="' + e2.join(",") + '"', b2 = c2.join("; "));
            return a2(b2);
          });
        };
        goog.exportProperty(shaka.polyfill, "MediaSource", shaka.polyfill.MediaSource);
        goog.exportProperty(shaka.polyfill.MediaSource, "install", shaka.polyfill.MediaSource.install);
        shaka.polyfill.register(shaka.polyfill.MediaSource.install);
        shaka.polyfill.Orientation = function() {
        };
        shaka.polyfill.Orientation.install = function() {
          screen.orientation || void 0 != window.orientation && shaka.polyfill.Orientation.installBasedOnWindowMethods_();
        };
        shaka.polyfill.Orientation.installBasedOnWindowMethods_ = function() {
          var a2 = new shaka.polyfill.Orientation.FakeOrientation();
          screen.orientation = a2;
          var b2 = function() {
            switch (window.orientation) {
              case -90:
                a2.type = "landscape-secondary";
                a2.angle = 270;
                break;
              case 0:
                a2.type = "portrait-primary";
                a2.angle = 0;
                break;
              case 90:
                a2.type = "landscape-primary";
                a2.angle = 90;
                break;
              case 180:
                a2.type = "portrait-secondary", a2.angle = 180;
            }
          };
          b2();
          window.addEventListener("orientationchange", function() {
            b2();
            a2.dispatchChangeEvent();
          });
        };
        goog.exportProperty(shaka.polyfill, "Orientation", shaka.polyfill.Orientation);
        goog.exportProperty(shaka.polyfill.Orientation, "install", shaka.polyfill.Orientation.install);
        shaka.polyfill.Orientation.FakeOrientation = function() {
          shaka.util.FakeEventTarget.call(this);
          this.type = "";
          this.angle = 0;
        };
        $jscomp.inherits(shaka.polyfill.Orientation.FakeOrientation, shaka.util.FakeEventTarget);
        shaka.polyfill.Orientation.FakeOrientation.prototype.dispatchChangeEvent = function() {
          var a2 = new shaka.util.FakeEvent("change");
          this.dispatchEvent(a2);
        };
        shaka.polyfill.Orientation.FakeOrientation.prototype.lock = function(a2) {
          var b2 = function(d2) {
            return screen.lockOrientation ? screen.lockOrientation(d2) : screen.mozLockOrientation ? screen.mozLockOrientation(d2) : screen.msLockOrientation ? screen.msLockOrientation(d2) : false;
          }, c2 = false;
          switch (a2) {
            case "natural":
              c2 = b2("default");
              break;
            case "any":
              c2 = true;
              this.unlock();
              break;
            default:
              c2 = b2(a2);
          }
          if (c2)
            return Promise.resolve();
          a2 = Error("screen.orientation.lock() is not available on this device");
          a2.name = "NotSupportedError";
          a2.code = DOMException.NOT_SUPPORTED_ERR;
          return Promise.reject(a2);
        };
        shaka.polyfill.Orientation.FakeOrientation.prototype.unlock = function() {
          screen.unlockOrientation ? screen.unlockOrientation() : screen.mozUnlockOrientation ? screen.mozUnlockOrientation() : screen.msUnlockOrientation && screen.msUnlockOrientation();
        };
        shaka.polyfill.register(shaka.polyfill.Orientation.install);
        shaka.polyfill.PatchedMediaKeysApple = function() {
        };
        shaka.polyfill.PatchedMediaKeysApple.install = function() {
          if (window.HTMLVideoElement && window.WebKitMediaKeys) {
            shaka.log.info("Using Apple-prefixed EME");
            var a2 = shaka.polyfill.PatchedMediaKeysApple;
            delete HTMLMediaElement.prototype.mediaKeys;
            HTMLMediaElement.prototype.mediaKeys = null;
            HTMLMediaElement.prototype.setMediaKeys = a2.setMediaKeys;
            window.MediaKeys = a2.MediaKeys;
            window.MediaKeySystemAccess = a2.MediaKeySystemAccess;
            navigator.requestMediaKeySystemAccess = a2.requestMediaKeySystemAccess;
          }
        };
        shaka.polyfill.PatchedMediaKeysApple.requestMediaKeySystemAccess = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysApple.requestMediaKeySystemAccess");
          goog.asserts.assert(this == navigator, 'bad "this" for requestMediaKeySystemAccess');
          var c2 = shaka.polyfill.PatchedMediaKeysApple;
          try {
            var d2 = new c2.MediaKeySystemAccess(a2, b2);
            return Promise.resolve(d2);
          } catch (e2) {
            return Promise.reject(e2);
          }
        };
        shaka.polyfill.PatchedMediaKeysApple.setMediaKeys = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.setMediaKeys");
          goog.asserts.assert(this instanceof HTMLMediaElement, 'bad "this" for setMediaKeys');
          var b2 = shaka.polyfill.PatchedMediaKeysApple, c2 = this.mediaKeys;
          c2 && c2 != a2 && (goog.asserts.assert(c2 instanceof b2.MediaKeys, "non-polyfill instance of oldMediaKeys"), c2.setMedia(null));
          delete this.mediaKeys;
          return (this.mediaKeys = a2) ? (goog.asserts.assert(a2 instanceof b2.MediaKeys, "non-polyfill instance of newMediaKeys"), a2.setMedia(this)) : Promise.resolve();
        };
        shaka.polyfill.PatchedMediaKeysApple.onWebkitNeedKey_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.onWebkitNeedKey_", a2);
          goog.asserts.assert(this.mediaKeys instanceof shaka.polyfill.PatchedMediaKeysApple.MediaKeys, "non-polyfill instance of newMediaKeys");
          goog.asserts.assert(null != a2.initData, "missing init data!");
          a2 = shaka.util.BufferUtils.toUint8(a2.initData);
          if (shaka.util.BufferUtils.toDataView(a2).getUint32(0, true) + 4 != a2.byteLength)
            throw new RangeError("Malformed FairPlay init data");
          a2 = shaka.util.StringUtils.fromUTF16(
            a2.subarray(4),
            true
          );
          a2 = shaka.util.StringUtils.toUTF8(a2);
          var b2 = new Event("encrypted");
          b2.initDataType = "skd";
          b2.initData = shaka.util.BufferUtils.toArrayBuffer(a2);
          this.dispatchEvent(b2);
        };
        goog.exportProperty(shaka.polyfill, "PatchedMediaKeysApple", shaka.polyfill.PatchedMediaKeysApple);
        goog.exportProperty(shaka.polyfill.PatchedMediaKeysApple, "install", shaka.polyfill.PatchedMediaKeysApple.install);
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySystemAccess = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySystemAccess");
          this.keySystem = a2;
          if (a2.startsWith("com.apple.fps")) {
            for (var c2 = $jscomp.makeIterator(b2), d2 = c2.next(); !d2.done; d2 = c2.next())
              if (d2 = this.checkConfig_(d2.value)) {
                this.configuration_ = d2;
                return;
              }
          }
          c2 = Error("Unsupported keySystem");
          c2.name = "NotSupportedError";
          c2.code = DOMException.NOT_SUPPORTED_ERR;
          throw c2;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySystemAccess.prototype.checkConfig_ = function(a2) {
          if ("required" == a2.persistentState)
            return null;
          var b2 = { audioCapabilities: [], videoCapabilities: [], persistentState: "optional", distinctiveIdentifier: "optional", initDataTypes: a2.initDataTypes, sessionTypes: ["temporary"], label: a2.label }, c2 = false, d2 = false;
          if (a2.audioCapabilities) {
            for (var e2 = $jscomp.makeIterator(a2.audioCapabilities), f2 = e2.next(); !f2.done; f2 = e2.next())
              if (f2 = f2.value, f2.contentType) {
                c2 = true;
                var g = f2.contentType.split(";")[0];
                WebKitMediaKeys.isTypeSupported(this.keySystem, g) && (b2.audioCapabilities.push(f2), d2 = true);
              }
          }
          if (a2.videoCapabilities)
            for (a2 = $jscomp.makeIterator(a2.videoCapabilities), f2 = a2.next(); !f2.done; f2 = a2.next())
              e2 = f2.value, e2.contentType && (c2 = true, f2 = e2.contentType.split(";")[0], WebKitMediaKeys.isTypeSupported(this.keySystem, f2) && (b2.videoCapabilities.push(e2), d2 = true));
          c2 || (d2 = WebKitMediaKeys.isTypeSupported(this.keySystem, "video/mp4"));
          return d2 ? b2 : null;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySystemAccess.prototype.createMediaKeys = function() {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySystemAccess.createMediaKeys");
          var a2 = new shaka.polyfill.PatchedMediaKeysApple.MediaKeys(this.keySystem);
          return Promise.resolve(a2);
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySystemAccess.prototype.getConfiguration = function() {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySystemAccess.getConfiguration");
          return this.configuration_;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeys = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeys");
          this.nativeMediaKeys_ = new WebKitMediaKeys(a2);
          this.eventManager_ = new shaka.util.EventManager();
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeys.prototype.createSession = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeys.createSession");
          a2 = a2 || "temporary";
          if ("temporary" != a2)
            throw new TypeError("Session type " + a2 + " is unsupported on this platform.");
          return new shaka.polyfill.PatchedMediaKeysApple.MediaKeySession(this.nativeMediaKeys_, a2);
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeys.prototype.setServerCertificate = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeys.setServerCertificate");
          return Promise.resolve(false);
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeys.prototype.setMedia = function(a2) {
          var b2 = this, c2 = shaka.polyfill.PatchedMediaKeysApple;
          this.eventManager_.removeAll();
          if (!a2)
            return Promise.resolve();
          this.eventManager_.listen(a2, "webkitneedkey", c2.onWebkitNeedKey_);
          try {
            return shaka.util.MediaReadyState.waitForReadyState(a2, HTMLMediaElement.HAVE_METADATA, this.eventManager_, function() {
              a2.webkitSetMediaKeys(b2.nativeMediaKeys_);
            }), Promise.resolve();
          } catch (d2) {
            return Promise.reject(d2);
          }
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySession");
          shaka.util.FakeEventTarget.call(this);
          this.nativeMediaKeySession_ = null;
          this.nativeMediaKeys_ = a2;
          this.updatePromise_ = this.generateRequestPromise_ = null;
          this.eventManager_ = new shaka.util.EventManager();
          this.sessionId = "";
          this.expiration = NaN;
          this.closed = new shaka.util.PublicPromise();
          this.keyStatuses = new shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap();
        };
        $jscomp.inherits(shaka.polyfill.PatchedMediaKeysApple.MediaKeySession, shaka.util.FakeEventTarget);
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.generateRequest = function(a2, b2) {
          var c2 = this;
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySession.generateRequest");
          this.generateRequestPromise_ = new shaka.util.PublicPromise();
          try {
            var d2 = this.nativeMediaKeys_.createSession("video/mp4", shaka.util.BufferUtils.toUint8(b2));
            this.nativeMediaKeySession_ = d2;
            this.sessionId = d2.sessionId || "";
            this.eventManager_.listen(this.nativeMediaKeySession_, "webkitkeymessage", function(e2) {
              return c2.onWebkitKeyMessage_(e2);
            });
            this.eventManager_.listen(d2, "webkitkeyadded", function(e2) {
              return c2.onWebkitKeyAdded_(e2);
            });
            this.eventManager_.listen(d2, "webkitkeyerror", function(e2) {
              return c2.onWebkitKeyError_(e2);
            });
            this.updateKeyStatus_("status-pending");
          } catch (e2) {
            this.generateRequestPromise_.reject(e2);
          }
          return this.generateRequestPromise_;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.load = function() {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySession.load");
          return Promise.reject(Error("MediaKeySession.load not yet supported"));
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.update = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySession.update");
          this.updatePromise_ = new shaka.util.PublicPromise();
          try {
            this.nativeMediaKeySession_.update(shaka.util.BufferUtils.toUint8(a2));
          } catch (b2) {
            this.updatePromise_.reject(b2);
          }
          return this.updatePromise_;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.close = function() {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySession.close");
          try {
            this.nativeMediaKeySession_.close(), this.closed.resolve(), this.eventManager_.removeAll();
          } catch (a2) {
            this.closed.reject(a2);
          }
          return this.closed;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.remove = function() {
          shaka.log.debug("PatchedMediaKeysApple.MediaKeySession.remove");
          return Promise.reject(Error("MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform"));
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.onWebkitKeyMessage_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.onWebkitKeyMessage_", a2);
          goog.asserts.assert(this.generateRequestPromise_, "generateRequestPromise_ should be set before now!");
          this.generateRequestPromise_ && (this.generateRequestPromise_.resolve(), this.generateRequestPromise_ = null);
          var b2 = void 0 == this.keyStatuses.getStatus();
          a2 = (/* @__PURE__ */ new Map()).set("messageType", b2 ? "license-request" : "license-renewal").set("message", shaka.util.BufferUtils.toArrayBuffer(a2.message));
          a2 = new shaka.util.FakeEvent("message", a2);
          this.dispatchEvent(a2);
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.onWebkitKeyAdded_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.onWebkitKeyAdded_", a2);
          goog.asserts.assert(!this.generateRequestPromise_, "Key added during generate!");
          goog.asserts.assert(this.updatePromise_, "updatePromise_ should be set before now!");
          this.updatePromise_ && (this.updateKeyStatus_("usable"), this.updatePromise_.resolve(), this.updatePromise_ = null);
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.onWebkitKeyError_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysApple.onWebkitKeyError_", a2);
          a2 = Error("EME PatchedMediaKeysApple key error");
          a2.errorCode = this.nativeMediaKeySession_.error;
          if (null != this.generateRequestPromise_)
            this.generateRequestPromise_.reject(a2), this.generateRequestPromise_ = null;
          else if (null != this.updatePromise_)
            this.updatePromise_.reject(a2), this.updatePromise_ = null;
          else
            switch (this.nativeMediaKeySession_.error.code) {
              case WebKitMediaKeyError.MEDIA_KEYERR_OUTPUT:
              case WebKitMediaKeyError.MEDIA_KEYERR_HARDWARECHANGE:
                this.updateKeyStatus_("output-not-allowed");
                break;
              default:
                this.updateKeyStatus_("internal-error");
            }
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeySession.prototype.updateKeyStatus_ = function(a2) {
          this.keyStatuses.setStatus(a2);
          a2 = new shaka.util.FakeEvent("keystatuseschange");
          this.dispatchEvent(a2);
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap = function() {
          this.size = 0;
          this.status_ = void 0;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap.prototype.setStatus = function(a2) {
          this.size = void 0 == a2 ? 0 : 1;
          this.status_ = a2;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap.prototype.getStatus = function() {
          return this.status_;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap.prototype.forEach = function(a2) {
          this.status_ && a2(this.status_, shaka.media.DrmEngine.DUMMY_KEY_ID.value());
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap.prototype.get = function(a2) {
          if (this.has(a2))
            return this.status_;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap.prototype.has = function(a2) {
          var b2 = shaka.media.DrmEngine.DUMMY_KEY_ID.value();
          return this.status_ && shaka.util.BufferUtils.equal(a2, b2) ? true : false;
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap.prototype.entries = function() {
          goog.asserts.assert(false, "Not used!  Provided only for the compiler.");
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap.prototype.keys = function() {
          goog.asserts.assert(false, "Not used!  Provided only for the compiler.");
        };
        shaka.polyfill.PatchedMediaKeysApple.MediaKeyStatusMap.prototype.values = function() {
          goog.asserts.assert(false, "Not used!  Provided only for the compiler.");
        };
        shaka.polyfill.register(shaka.polyfill.PatchedMediaKeysApple.install);
        shaka.polyfill.PatchedMediaKeysMs = function() {
        };
        shaka.polyfill.PatchedMediaKeysMs.install = function() {
          if (window.HTMLVideoElement && window.MSMediaKeys && (!navigator.requestMediaKeySystemAccess || !MediaKeySystemAccess.prototype.getConfiguration)) {
            shaka.log.info("Using ms-prefixed EME v20140218");
            var a2 = shaka.polyfill.PatchedMediaKeysMs;
            delete HTMLMediaElement.prototype.mediaKeys;
            HTMLMediaElement.prototype.mediaKeys = null;
            window.MediaKeys = a2.MediaKeys;
            window.MediaKeySystemAccess = a2.MediaKeySystemAccess;
            navigator.requestMediaKeySystemAccess = a2.requestMediaKeySystemAccess;
            HTMLMediaElement.prototype.setMediaKeys = a2.MediaKeySystemAccess.setMediaKeys;
          }
        };
        shaka.polyfill.PatchedMediaKeysMs.requestMediaKeySystemAccess = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysMs.requestMediaKeySystemAccess");
          goog.asserts.assert(this == navigator, 'bad "this" for requestMediaKeySystemAccess');
          var c2 = shaka.polyfill.PatchedMediaKeysMs;
          try {
            var d2 = new c2.MediaKeySystemAccess(a2, b2);
            return Promise.resolve(d2);
          } catch (e2) {
            return Promise.reject(e2);
          }
        };
        shaka.polyfill.PatchedMediaKeysMs.onMsNeedKey_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.onMsNeedKey_", a2);
          if (a2.initData) {
            var b2 = new CustomEvent("encrypted");
            b2.initDataType = "cenc";
            b2.initData = shaka.util.BufferUtils.toArrayBuffer(shaka.util.Pssh.normaliseInitData(a2.initData));
            this.dispatchEvent(b2);
          }
        };
        goog.exportProperty(shaka.polyfill, "PatchedMediaKeysMs", shaka.polyfill.PatchedMediaKeysMs);
        goog.exportProperty(shaka.polyfill.PatchedMediaKeysMs, "install", shaka.polyfill.PatchedMediaKeysMs.install);
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySystemAccess");
          this.keySystem = a2;
          for (var c2 = false, d2 = $jscomp.makeIterator(b2), e2 = d2.next(); !e2.done; e2 = d2.next()) {
            e2 = e2.value;
            var f2 = { audioCapabilities: [], videoCapabilities: [], persistentState: "optional", distinctiveIdentifier: "optional", initDataTypes: e2.initDataTypes, sessionTypes: ["temporary"], label: e2.label }, g = false;
            if (e2.audioCapabilities) {
              for (var h = $jscomp.makeIterator(e2.audioCapabilities), k2 = h.next(); !k2.done; k2 = h.next())
                if (k2 = k2.value, k2.contentType) {
                  g = true;
                  var l = k2.contentType.split(";")[0];
                  MSMediaKeys.isTypeSupported(this.keySystem, l) && (f2.audioCapabilities.push(k2), c2 = true);
                }
            }
            if (e2.videoCapabilities)
              for (h = $jscomp.makeIterator(e2.videoCapabilities), k2 = h.next(); !k2.done; k2 = h.next())
                k2 = k2.value, k2.contentType && (g = true, l = k2.contentType.split(";")[0], MSMediaKeys.isTypeSupported(this.keySystem, l) && (f2.videoCapabilities.push(k2), c2 = true));
            g || (c2 = MSMediaKeys.isTypeSupported(this.keySystem, "video/mp4"));
            "required" == e2.persistentState && (c2 = false);
            if (c2) {
              this.configuration_ = f2;
              return;
            }
          }
          c2 = Error("Unsupported keySystem");
          c2.name = "NotSupportedError";
          c2.code = DOMException.NOT_SUPPORTED_ERR;
          throw c2;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.prototype.createMediaKeys = function() {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySystemAccess.createMediaKeys");
          var a2 = new shaka.polyfill.PatchedMediaKeysMs.MediaKeys(this.keySystem);
          return Promise.resolve(a2);
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.prototype.getConfiguration = function() {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySystemAccess.getConfiguration");
          return this.configuration_;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.setMediaKeys = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.setMediaKeys");
          goog.asserts.assert(this instanceof HTMLMediaElement, 'bad "this" for setMediaKeys');
          var b2 = shaka.polyfill.PatchedMediaKeysMs, c2 = this.mediaKeys;
          c2 && c2 != a2 && (goog.asserts.assert(c2 instanceof b2.MediaKeys, "non-polyfill instance of oldMediaKeys"), c2.setMedia(null));
          delete this.mediaKeys;
          return (this.mediaKeys = a2) ? (goog.asserts.assert(a2 instanceof b2.MediaKeys, "non-polyfill instance of newMediaKeys"), a2.setMedia(this)) : Promise.resolve();
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeys = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeys");
          this.nativeMediaKeys_ = new MSMediaKeys(a2);
          this.eventManager_ = new shaka.util.EventManager();
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.createSession = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeys.createSession");
          a2 = a2 || "temporary";
          if ("temporary" != a2)
            throw new TypeError("Session type " + a2 + " is unsupported on this platform.");
          return new shaka.polyfill.PatchedMediaKeysMs.MediaKeySession(this.nativeMediaKeys_, a2);
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.setServerCertificate = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeys.setServerCertificate");
          return Promise.resolve(false);
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.setMedia = function(a2) {
          var b2 = this, c2 = shaka.polyfill.PatchedMediaKeysMs;
          this.eventManager_.removeAll();
          if (!a2)
            return Promise.resolve();
          this.eventManager_.listen(a2, "msneedkey", c2.onMsNeedKey_);
          try {
            return shaka.util.MediaReadyState.waitForReadyState(a2, HTMLMediaElement.HAVE_METADATA, this.eventManager_, function() {
              a2.msSetMediaKeys(b2.nativeMediaKeys_);
            }), Promise.resolve();
          } catch (d2) {
            return Promise.reject(d2);
          }
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySession");
          shaka.util.FakeEventTarget.call(this);
          this.nativeMediaKeySession_ = null;
          this.nativeMediaKeys_ = a2;
          this.updatePromise_ = this.generateRequestPromise_ = null;
          this.eventManager_ = new shaka.util.EventManager();
          this.sessionId = "";
          this.expiration = NaN;
          this.closed = new shaka.util.PublicPromise();
          this.keyStatuses = new shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap();
        };
        $jscomp.inherits(shaka.polyfill.PatchedMediaKeysMs.MediaKeySession, shaka.util.FakeEventTarget);
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.generateRequest = function(a2, b2) {
          var c2 = this;
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySession.generateRequest");
          this.generateRequestPromise_ = new shaka.util.PublicPromise();
          try {
            this.nativeMediaKeySession_ = this.nativeMediaKeys_.createSession("video/mp4", shaka.util.BufferUtils.toUint8(b2), null), this.eventManager_.listen(this.nativeMediaKeySession_, "mskeymessage", function(d2) {
              return c2.onMsKeyMessage_(d2);
            }), this.eventManager_.listen(
              this.nativeMediaKeySession_,
              "mskeyadded",
              function(d2) {
                return c2.onMsKeyAdded_(d2);
              }
            ), this.eventManager_.listen(this.nativeMediaKeySession_, "mskeyerror", function(d2) {
              return c2.onMsKeyError_(d2);
            }), this.updateKeyStatus_("status-pending");
          } catch (d2) {
            this.generateRequestPromise_.reject(d2);
          }
          return this.generateRequestPromise_;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.load = function() {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySession.load");
          return Promise.reject(Error("MediaKeySession.load not yet supported"));
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.update = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySession.update");
          this.updatePromise_ = new shaka.util.PublicPromise();
          try {
            this.nativeMediaKeySession_.update(shaka.util.BufferUtils.toUint8(a2));
          } catch (b2) {
            this.updatePromise_.reject(b2);
          }
          return this.updatePromise_;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.close = function() {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySession.close");
          try {
            this.nativeMediaKeySession_.close(), this.closed.resolve(), this.eventManager_.removeAll();
          } catch (a2) {
            this.closed.reject(a2);
          }
          return this.closed;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.remove = function() {
          shaka.log.debug("PatchedMediaKeysMs.MediaKeySession.remove");
          return Promise.reject(Error("MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform"));
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyMessage_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.onMsKeyMessage_", a2);
          goog.asserts.assert(this.generateRequestPromise_, "generateRequestPromise_ not set in onMsKeyMessage_");
          this.generateRequestPromise_ && (this.generateRequestPromise_.resolve(), this.generateRequestPromise_ = null);
          var b2 = void 0 == this.keyStatuses.getStatus();
          a2 = (/* @__PURE__ */ new Map()).set("messageType", b2 ? "license-request" : "license-renewal").set("message", shaka.util.BufferUtils.toArrayBuffer(a2.message));
          a2 = new shaka.util.FakeEvent("message", a2);
          this.dispatchEvent(a2);
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyAdded_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.onMsKeyAdded_", a2);
          this.generateRequestPromise_ ? (shaka.log.debug("Simulating completion for a PR persistent license."), goog.asserts.assert(!this.updatePromise_, "updatePromise_ and generateRequestPromise_ set in onMsKeyAdded_"), this.updateKeyStatus_("usable"), this.generateRequestPromise_.resolve(), this.generateRequestPromise_ = null) : (goog.asserts.assert(this.updatePromise_, "updatePromise_ not set in onMsKeyAdded_"), this.updatePromise_ && (this.updateKeyStatus_("usable"), this.updatePromise_.resolve(), this.updatePromise_ = null));
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyError_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysMs.onMsKeyError_", a2);
          a2 = Error("EME PatchedMediaKeysMs key error");
          a2.errorCode = this.nativeMediaKeySession_.error;
          if (null != this.generateRequestPromise_)
            this.generateRequestPromise_.reject(a2), this.generateRequestPromise_ = null;
          else if (null != this.updatePromise_)
            this.updatePromise_.reject(a2), this.updatePromise_ = null;
          else
            switch (this.nativeMediaKeySession_.error.code) {
              case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:
              case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:
                this.updateKeyStatus_("output-not-allowed");
                break;
              default:
                this.updateKeyStatus_("internal-error");
            }
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.updateKeyStatus_ = function(a2) {
          this.keyStatuses.setStatus(a2);
          a2 = new shaka.util.FakeEvent("keystatuseschange");
          this.dispatchEvent(a2);
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap = function() {
          this.size = 0;
          this.status_ = void 0;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.setStatus = function(a2) {
          this.size = void 0 == a2 ? 0 : 1;
          this.status_ = a2;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.getStatus = function() {
          return this.status_;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.forEach = function(a2) {
          this.status_ && a2(this.status_, shaka.media.DrmEngine.DUMMY_KEY_ID.value());
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.get = function(a2) {
          if (this.has(a2))
            return this.status_;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.has = function(a2) {
          var b2 = shaka.media.DrmEngine.DUMMY_KEY_ID.value();
          return this.status_ && shaka.util.BufferUtils.equal(a2, b2) ? true : false;
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.entries = function() {
          goog.asserts.assert(false, "Not used!  Provided only for the compiler.");
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.keys = function() {
          goog.asserts.assert(false, "Not used!  Provided only for the compiler.");
        };
        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.values = function() {
          goog.asserts.assert(false, "Not used!  Provided only for the compiler.");
        };
        shaka.polyfill.register(shaka.polyfill.PatchedMediaKeysMs.install);
        shaka.polyfill.PatchedMediaKeysNop = function() {
        };
        shaka.polyfill.PatchedMediaKeysNop.install = function() {
          if (!(!window.HTMLVideoElement || navigator.requestMediaKeySystemAccess && MediaKeySystemAccess.prototype.getConfiguration)) {
            shaka.log.info("EME not available.");
            var a2 = shaka.polyfill.PatchedMediaKeysNop;
            navigator.requestMediaKeySystemAccess = a2.requestMediaKeySystemAccess;
            delete HTMLMediaElement.prototype.mediaKeys;
            HTMLMediaElement.prototype.mediaKeys = null;
            HTMLMediaElement.prototype.setMediaKeys = a2.setMediaKeys;
            window.MediaKeys = a2.MediaKeys;
            window.MediaKeySystemAccess = a2.MediaKeySystemAccess;
          }
        };
        shaka.polyfill.PatchedMediaKeysNop.requestMediaKeySystemAccess = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysNop.requestMediaKeySystemAccess");
          goog.asserts.assert(this == navigator, 'bad "this" for requestMediaKeySystemAccess');
          return Promise.reject(Error("The key system specified is not supported."));
        };
        shaka.polyfill.PatchedMediaKeysNop.setMediaKeys = function(a2) {
          shaka.log.debug("PatchedMediaKeysNop.setMediaKeys");
          goog.asserts.assert(this instanceof HTMLMediaElement, 'bad "this" for setMediaKeys');
          return null == a2 ? Promise.resolve() : Promise.reject(Error("MediaKeys not supported."));
        };
        goog.exportProperty(shaka.polyfill, "PatchedMediaKeysNop", shaka.polyfill.PatchedMediaKeysNop);
        goog.exportProperty(shaka.polyfill.PatchedMediaKeysNop, "install", shaka.polyfill.PatchedMediaKeysNop.install);
        shaka.polyfill.PatchedMediaKeysNop.MediaKeys = function() {
          throw new TypeError("Illegal constructor.");
        };
        shaka.polyfill.PatchedMediaKeysNop.MediaKeys.prototype.createSession = function() {
        };
        shaka.polyfill.PatchedMediaKeysNop.MediaKeys.prototype.setServerCertificate = function() {
        };
        shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess = function() {
          this.keySystem = "";
          throw new TypeError("Illegal constructor.");
        };
        shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.getConfiguration = function() {
        };
        shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.createMediaKeys = function() {
        };
        shaka.polyfill.register(shaka.polyfill.PatchedMediaKeysNop.install, -10);
        shaka.polyfill.PatchedMediaKeysWebkit = function() {
        };
        shaka.polyfill.PatchedMediaKeysWebkit.install = function() {
          var a2 = shaka.polyfill.PatchedMediaKeysWebkit;
          if (!(!window.HTMLVideoElement || navigator.requestMediaKeySystemAccess && MediaKeySystemAccess.prototype.getConfiguration)) {
            if (HTMLMediaElement.prototype.webkitGenerateKeyRequest)
              shaka.log.info("Using webkit-prefixed EME v0.1b"), a2.prefix_ = "webkit";
            else if (HTMLMediaElement.prototype.generateKeyRequest)
              shaka.log.info("Using nonprefixed EME v0.1b");
            else
              return;
            goog.asserts.assert(
              HTMLMediaElement.prototype[a2.prefixApi_("generateKeyRequest")],
              "PatchedMediaKeysWebkit APIs not available!"
            );
            navigator.requestMediaKeySystemAccess = a2.requestMediaKeySystemAccess;
            delete HTMLMediaElement.prototype.mediaKeys;
            HTMLMediaElement.prototype.mediaKeys = null;
            HTMLMediaElement.prototype.setMediaKeys = a2.setMediaKeys;
            window.MediaKeys = a2.MediaKeys;
            window.MediaKeySystemAccess = a2.MediaKeySystemAccess;
          }
        };
        shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_ = function(a2) {
          var b2 = shaka.polyfill.PatchedMediaKeysWebkit.prefix_;
          return b2 ? b2 + a2.charAt(0).toUpperCase() + a2.slice(1) : a2;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.requestMediaKeySystemAccess = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysWebkit.requestMediaKeySystemAccess");
          goog.asserts.assert(this == navigator, 'bad "this" for requestMediaKeySystemAccess');
          var c2 = shaka.polyfill.PatchedMediaKeysWebkit;
          try {
            var d2 = new c2.MediaKeySystemAccess(a2, b2);
            return Promise.resolve(d2);
          } catch (e2) {
            return Promise.reject(e2);
          }
        };
        shaka.polyfill.PatchedMediaKeysWebkit.setMediaKeys = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.setMediaKeys");
          goog.asserts.assert(this instanceof HTMLMediaElement, 'bad "this" for setMediaKeys');
          var b2 = shaka.polyfill.PatchedMediaKeysWebkit, c2 = this.mediaKeys;
          c2 && c2 != a2 && (goog.asserts.assert(c2 instanceof b2.MediaKeys, "non-polyfill instance of oldMediaKeys"), c2.setMedia(null));
          delete this.mediaKeys;
          if (this.mediaKeys = a2)
            goog.asserts.assert(a2 instanceof b2.MediaKeys, "non-polyfill instance of newMediaKeys"), a2.setMedia(this);
          return Promise.resolve();
        };
        shaka.polyfill.PatchedMediaKeysWebkit.getVideoElement_ = function() {
          var a2 = document.getElementsByTagName("video");
          return a2.length ? a2[0] : document.createElement("video");
        };
        goog.exportProperty(shaka.polyfill, "PatchedMediaKeysWebkit", shaka.polyfill.PatchedMediaKeysWebkit);
        goog.exportProperty(shaka.polyfill.PatchedMediaKeysWebkit, "install", shaka.polyfill.PatchedMediaKeysWebkit.install);
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySystemAccess");
          this.internalKeySystem_ = this.keySystem = a2;
          var c2 = false;
          "org.w3.clearkey" == a2 && (this.internalKeySystem_ = "webkit-org.w3.clearkey", c2 = false);
          for (var d2 = false, e2 = shaka.polyfill.PatchedMediaKeysWebkit.getVideoElement_(), f2 = $jscomp.makeIterator(b2), g = f2.next(); !g.done; g = f2.next()) {
            g = g.value;
            var h = {
              audioCapabilities: [],
              videoCapabilities: [],
              persistentState: "optional",
              distinctiveIdentifier: "optional",
              initDataTypes: g.initDataTypes,
              sessionTypes: ["temporary"],
              label: g.label
            }, k2 = false;
            if (g.audioCapabilities) {
              for (var l = $jscomp.makeIterator(g.audioCapabilities), m = l.next(); !m.done; m = l.next())
                if (m = m.value, m.contentType) {
                  k2 = true;
                  var n = m.contentType.split(";")[0];
                  e2.canPlayType(n, this.internalKeySystem_) && (h.audioCapabilities.push(m), d2 = true);
                }
            }
            if (g.videoCapabilities)
              for (l = $jscomp.makeIterator(g.videoCapabilities), m = l.next(); !m.done; m = l.next())
                m = m.value, m.contentType && (k2 = true, e2.canPlayType(m.contentType, this.internalKeySystem_) && (h.videoCapabilities.push(m), d2 = true));
            k2 || (d2 = e2.canPlayType("video/mp4", this.internalKeySystem_) || e2.canPlayType("video/webm", this.internalKeySystem_));
            "required" == g.persistentState && (c2 ? (h.persistentState = "required", h.sessionTypes = ["persistent-license"]) : d2 = false);
            if (d2) {
              this.configuration_ = h;
              return;
            }
          }
          c2 = "Unsupported keySystem";
          if ("org.w3.clearkey" == a2 || "com.widevine.alpha" == a2)
            c2 = "None of the requested configurations were supported.";
          c2 = Error(c2);
          c2.name = "NotSupportedError";
          c2.code = DOMException.NOT_SUPPORTED_ERR;
          throw c2;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess.prototype.createMediaKeys = function() {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySystemAccess.createMediaKeys");
          var a2 = new shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys(this.internalKeySystem_);
          return Promise.resolve(a2);
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess.prototype.getConfiguration = function() {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySystemAccess.getConfiguration");
          return this.configuration_;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeys");
          this.keySystem_ = a2;
          this.media_ = null;
          this.eventManager_ = new shaka.util.EventManager();
          this.newSessions_ = [];
          this.sessionMap_ = /* @__PURE__ */ new Map();
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.setMedia = function(a2) {
          var b2 = this;
          this.media_ = a2;
          this.eventManager_.removeAll();
          var c2 = shaka.polyfill.PatchedMediaKeysWebkit.prefix_;
          a2 && (this.eventManager_.listen(a2, c2 + "needkey", function(d2) {
            return b2.onWebkitNeedKey_(d2);
          }), this.eventManager_.listen(a2, c2 + "keymessage", function(d2) {
            return b2.onWebkitKeyMessage_(d2);
          }), this.eventManager_.listen(a2, c2 + "keyadded", function(d2) {
            return b2.onWebkitKeyAdded_(d2);
          }), this.eventManager_.listen(a2, c2 + "keyerror", function(d2) {
            return b2.onWebkitKeyError_(d2);
          }));
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.createSession = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeys.createSession");
          a2 = a2 || "temporary";
          if ("temporary" != a2 && "persistent-license" != a2)
            throw new TypeError("Session type " + a2 + " is unsupported on this platform.");
          var b2 = shaka.polyfill.PatchedMediaKeysWebkit, c2 = this.media_ || document.createElement("video");
          c2.src || (c2.src = "about:blank");
          a2 = new b2.MediaKeySession(c2, this.keySystem_, a2);
          this.newSessions_.push(a2);
          return a2;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.setServerCertificate = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeys.setServerCertificate");
          return Promise.resolve(false);
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitNeedKey_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.onWebkitNeedKey_", a2);
          goog.asserts.assert(this.media_, "media_ not set in onWebkitNeedKey_");
          var b2 = new CustomEvent("encrypted");
          b2.initDataType = "cenc";
          b2.initData = shaka.util.BufferUtils.toArrayBuffer(a2.initData);
          this.media_.dispatchEvent(b2);
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyMessage_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.onWebkitKeyMessage_", a2);
          var b2 = this.findSession_(a2.sessionId);
          if (b2) {
            var c2 = void 0 == b2.keyStatuses.getStatus();
            a2 = (/* @__PURE__ */ new Map()).set("messageType", c2 ? "licenserequest" : "licenserenewal").set("message", a2.message);
            a2 = new shaka.util.FakeEvent("message", a2);
            b2.generated();
            b2.dispatchEvent(a2);
          } else
            shaka.log.error("Session not found", a2.sessionId);
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyAdded_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.onWebkitKeyAdded_", a2);
          a2 = this.findSession_(a2.sessionId);
          goog.asserts.assert(a2, "unable to find session in onWebkitKeyAdded_");
          a2 && a2.ready();
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyError_ = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.onWebkitKeyError_", a2);
          var b2 = this.findSession_(a2.sessionId);
          goog.asserts.assert(b2, "unable to find session in onWebkitKeyError_");
          b2 && b2.handleError(a2);
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.findSession_ = function(a2) {
          var b2 = this.sessionMap_.get(a2);
          return b2 ? (shaka.log.debug("PatchedMediaKeysWebkit.MediaKeys.findSession_", b2), b2) : (b2 = this.newSessions_.shift()) ? (b2.sessionId = a2, this.sessionMap_.set(a2, b2), shaka.log.debug("PatchedMediaKeysWebkit.MediaKeys.findSession_", b2), b2) : null;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession = function(a2, b2, c2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession");
          shaka.util.FakeEventTarget.call(this);
          this.media_ = a2;
          this.initialized_ = false;
          this.updatePromise_ = this.generatePromise_ = null;
          this.keySystem_ = b2;
          this.type_ = c2;
          this.sessionId = "";
          this.expiration = NaN;
          this.closed = new shaka.util.PublicPromise();
          this.keyStatuses = new shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap();
        };
        $jscomp.inherits(shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession, shaka.util.FakeEventTarget);
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generated = function() {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession.generated");
          this.generatePromise_ && (this.generatePromise_.resolve(), this.generatePromise_ = null);
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.ready = function() {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession.ready");
          this.updateKeyStatus_("usable");
          this.updatePromise_ && this.updatePromise_.resolve();
          this.updatePromise_ = null;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.handleError = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession.handleError", a2);
          var b2 = Error("EME v0.1b key error"), c2 = a2.errorCode;
          c2.systemCode = a2.systemCode;
          b2.errorCode = c2;
          !a2.sessionId && this.generatePromise_ ? (45 == a2.systemCode && (b2.message = "Unsupported session type."), this.generatePromise_.reject(b2), this.generatePromise_ = null) : a2.sessionId && this.updatePromise_ ? (this.updatePromise_.reject(b2), this.updatePromise_ = null) : (b2 = a2.systemCode, a2.errorCode.code == MediaKeyError.MEDIA_KEYERR_OUTPUT ? this.updateKeyStatus_("output-restricted") : 1 == b2 ? this.updateKeyStatus_("expired") : this.updateKeyStatus_("internal-error"));
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generate_ = function(a2, b2) {
          var c2 = this, d2 = shaka.polyfill.PatchedMediaKeysWebkit;
          if (this.initialized_)
            return Promise.reject(Error("The session is already initialized."));
          this.initialized_ = true;
          try {
            if ("persistent-license" == this.type_) {
              var e2 = shaka.util.StringUtils;
              if (b2)
                var f2 = shaka.util.BufferUtils.toUint8(e2.toUTF8("LOAD_SESSION|" + b2));
              else {
                goog.asserts.assert(a2, "expecting init data");
                var g = e2.toUTF8("PERSISTENT|");
                f2 = shaka.util.Uint8ArrayUtils.concat(
                  g,
                  a2
                );
              }
            } else
              goog.asserts.assert("temporary" == this.type_, "expected temporary session"), goog.asserts.assert(!b2, "unexpected offline session ID"), goog.asserts.assert(a2, "expecting init data"), f2 = shaka.util.BufferUtils.toUint8(a2);
            goog.asserts.assert(f2, "init data not set!");
          } catch (k2) {
            return Promise.reject(k2);
          }
          goog.asserts.assert(null == this.generatePromise_, "generatePromise_ should be null");
          this.generatePromise_ = new shaka.util.PublicPromise();
          var h = d2.prefixApi_("generateKeyRequest");
          try {
            this.media_[h](
              this.keySystem_,
              f2
            );
          } catch (k2) {
            if ("InvalidStateError" != k2.name)
              return this.generatePromise_ = null, Promise.reject(k2);
            new shaka.util.Timer(function() {
              try {
                c2.media_[h](c2.keySystem_, f2);
              } catch (l) {
                c2.generatePromise_.reject(l), c2.generatePromise_ = null;
              }
            }).tickAfter(0.01);
          }
          return this.generatePromise_;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.update_ = function(a2, b2) {
          var c2 = this, d2 = shaka.polyfill.PatchedMediaKeysWebkit;
          if (this.updatePromise_)
            this.updatePromise_.then(function() {
              return c2.update_(a2, b2);
            })["catch"](function() {
              return c2.update_(a2, b2);
            });
          else {
            this.updatePromise_ = a2;
            if ("webkit-org.w3.clearkey" == this.keySystem_) {
              var e2 = shaka.util.Uint8ArrayUtils;
              var f2 = shaka.util.StringUtils.fromUTF8(b2);
              var g = JSON.parse(f2);
              "oct" != g.keys[0].kty && (this.updatePromise_.reject(Error("Response is not a valid JSON Web Key Set.")), this.updatePromise_ = null);
              f2 = e2.fromBase64(g.keys[0].k);
              e2 = e2.fromBase64(g.keys[0].kid);
            } else
              f2 = shaka.util.BufferUtils.toUint8(b2), e2 = null;
            d2 = d2.prefixApi_("addKey");
            try {
              this.media_[d2](this.keySystem_, f2, e2, this.sessionId);
            } catch (h) {
              this.updatePromise_.reject(h), this.updatePromise_ = null;
            }
          }
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.updateKeyStatus_ = function(a2) {
          this.keyStatuses.setStatus(a2);
          a2 = new shaka.util.FakeEvent("keystatuseschange");
          this.dispatchEvent(a2);
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generateRequest = function(a2, b2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession.generateRequest");
          return this.generate_(b2, null);
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.load = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession.load");
          return "persistent-license" == this.type_ ? this.generate_(null, a2) : Promise.reject(Error("Not a persistent session."));
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.update = function(a2) {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession.update", a2);
          goog.asserts.assert(this.sessionId, "update without session ID");
          var b2 = new shaka.util.PublicPromise();
          this.update_(b2, a2);
          return b2;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.close = function() {
          var a2 = shaka.polyfill.PatchedMediaKeysWebkit;
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession.close");
          if ("persistent-license" != this.type_) {
            if (!this.sessionId)
              return this.closed.reject(Error("The session is not callable.")), this.closed;
            a2 = a2.prefixApi_("cancelKeyRequest");
            try {
              this.media_[a2](this.keySystem_, this.sessionId);
            } catch (b2) {
            }
          }
          this.closed.resolve();
          return this.closed;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.remove = function() {
          shaka.log.debug("PatchedMediaKeysWebkit.MediaKeySession.remove");
          return "persistent-license" != this.type_ ? Promise.reject(Error("Not a persistent session.")) : this.close();
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap = function() {
          this.size = 0;
          this.status_ = void 0;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.setStatus = function(a2) {
          this.size = void 0 == a2 ? 0 : 1;
          this.status_ = a2;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.getStatus = function() {
          return this.status_;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.forEach = function(a2) {
          this.status_ && a2(this.status_, shaka.media.DrmEngine.DUMMY_KEY_ID.value());
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.get = function(a2) {
          if (this.has(a2))
            return this.status_;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.has = function(a2) {
          var b2 = shaka.media.DrmEngine.DUMMY_KEY_ID.value();
          return this.status_ && shaka.util.BufferUtils.equal(a2, b2) ? true : false;
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.entries = function() {
          goog.asserts.assert(false, "Not used!  Provided only for compiler.");
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.keys = function() {
          goog.asserts.assert(false, "Not used!  Provided only for compiler.");
        };
        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.values = function() {
          goog.asserts.assert(false, "Not used!  Provided only for compiler.");
        };
        shaka.polyfill.PatchedMediaKeysWebkit.prefix_ = "";
        shaka.polyfill.register(shaka.polyfill.PatchedMediaKeysWebkit.install);
        shaka.polyfill.PiPWebkit = function() {
        };
        shaka.polyfill.PiPWebkit.install = function() {
          if (window.HTMLVideoElement) {
            var a2 = HTMLVideoElement.prototype;
            if ((!a2.requestPictureInPicture || !document.exitPictureInPicture) && a2.webkitSupportsPresentationMode) {
              var b2 = shaka.polyfill.PiPWebkit;
              shaka.log.debug("PiPWebkit.install");
              document.pictureInPictureEnabled = true;
              document.pictureInPictureElement = null;
              a2.requestPictureInPicture = b2.requestPictureInPicture_;
              Object.defineProperty(a2, "disablePictureInPicture", {
                get: b2.getDisablePictureInPicture_,
                set: b2.setDisablePictureInPicture_,
                enumerable: true,
                configurable: true
              });
              document.exitPictureInPicture = b2.exitPictureInPicture_;
              document.addEventListener("webkitpresentationmodechanged", b2.proxyEvent_, true);
            }
          }
        };
        shaka.polyfill.PiPWebkit.proxyEvent_ = function(a2) {
          a2 = a2.target;
          if (a2.webkitPresentationMode == shaka.polyfill.PiPWebkit.PIP_MODE_) {
            document.pictureInPictureElement = a2;
            var b2 = new Event("enterpictureinpicture");
            a2.dispatchEvent(b2);
          } else
            document.pictureInPictureElement == a2 && (document.pictureInPictureElement = null), b2 = new Event("leavepictureinpicture"), a2.dispatchEvent(b2);
        };
        shaka.polyfill.PiPWebkit.requestPictureInPicture_ = function() {
          var a2 = shaka.polyfill.PiPWebkit;
          return this.webkitSupportsPresentationMode(a2.PIP_MODE_) ? (this.webkitSetPresentationMode(a2.PIP_MODE_), document.pictureInPictureElement = this, Promise.resolve()) : Promise.reject(Error("PiP not allowed by video element"));
        };
        shaka.polyfill.PiPWebkit.exitPictureInPicture_ = function() {
          var a2 = shaka.polyfill.PiPWebkit, b2 = document.pictureInPictureElement;
          return b2 ? (b2.webkitSetPresentationMode(a2.INLINE_MODE_), document.pictureInPictureElement = null, Promise.resolve()) : Promise.reject(Error("No picture in picture element found"));
        };
        shaka.polyfill.PiPWebkit.getDisablePictureInPicture_ = function() {
          return this.hasAttribute("disablePictureInPicture") ? true : !this.webkitSupportsPresentationMode(shaka.polyfill.PiPWebkit.PIP_MODE_);
        };
        shaka.polyfill.PiPWebkit.setDisablePictureInPicture_ = function(a2) {
          a2 ? this.setAttribute("disablePictureInPicture", "") : this.removeAttribute("disablePictureInPicture");
        };
        goog.exportProperty(shaka.polyfill, "PiPWebkit", shaka.polyfill.PiPWebkit);
        goog.exportProperty(shaka.polyfill.PiPWebkit, "install", shaka.polyfill.PiPWebkit.install);
        shaka.polyfill.PiPWebkit.PIP_MODE_ = "picture-in-picture";
        shaka.polyfill.PiPWebkit.INLINE_MODE_ = "inline";
        shaka.polyfill.register(shaka.polyfill.PiPWebkit.install);
        shaka.polyfill.RandomUUID = function() {
        };
        shaka.polyfill.RandomUUID.install = function() {
          shaka.log.debug("randomUUID.install");
          window.crypto ? "randomUUID" in window.crypto ? shaka.log.debug("RandomUUID: Native window.crypto.randomUUID() support found.") : window.crypto.randomUUID = shaka.polyfill.RandomUUID.randomUUID_ : shaka.log.debug("window.crypto must be available to install randomUUID polyfill.");
        };
        shaka.polyfill.RandomUUID.randomUUID_ = function() {
          var a2 = URL.createObjectURL(new Blob()), b2 = a2.toString();
          URL.revokeObjectURL(a2);
          return b2.substr(b2.lastIndexOf("/") + 1);
        };
        goog.exportProperty(shaka.polyfill, "RandomUUID", shaka.polyfill.RandomUUID);
        goog.exportProperty(shaka.polyfill.RandomUUID, "install", shaka.polyfill.RandomUUID.install);
        shaka.polyfill.register(shaka.polyfill.RandomUUID.install);
        shaka.polyfill.StorageEstimate = function() {
        };
        shaka.polyfill.StorageEstimate.install = function() {
          navigator.storage && navigator.storage.estimate || !navigator.webkitTemporaryStorage || !navigator.webkitTemporaryStorage.queryUsageAndQuota || ("storage" in navigator || (navigator.storage = {}), navigator.storage.estimate = shaka.polyfill.StorageEstimate.storageEstimate_);
        };
        shaka.polyfill.StorageEstimate.storageEstimate_ = function() {
          return new Promise(function(a2, b2) {
            navigator.webkitTemporaryStorage.queryUsageAndQuota(function(c2, d2) {
              a2({ usage: c2, quota: d2 });
            }, b2);
          });
        };
        goog.exportProperty(shaka.polyfill, "StorageEstimate", shaka.polyfill.StorageEstimate);
        goog.exportProperty(shaka.polyfill.StorageEstimate, "install", shaka.polyfill.StorageEstimate.install);
        shaka.polyfill.register(shaka.polyfill.StorageEstimate.install);
        shaka.polyfill.Symbol = function() {
        };
        shaka.polyfill.Symbol.install = function() {
          shaka.log.debug("Symbol.install");
          var a2 = Symbol.prototype;
          "description" in a2 || Object.defineProperty(a2, "description", { get: shaka.polyfill.Symbol.getSymbolDescription_ });
        };
        shaka.polyfill.Symbol.getSymbolDescription_ = function() {
          var a2 = /\((.*)\)/.exec(this.toString());
          return a2 ? a2[1] : void 0;
        };
        goog.exportProperty(shaka.polyfill, "Symbol", shaka.polyfill.Symbol);
        goog.exportProperty(shaka.polyfill.Symbol, "install", shaka.polyfill.Symbol.install);
        shaka.polyfill.register(shaka.polyfill.Symbol.install);
        shaka.polyfill.VideoPlayPromise = function() {
        };
        shaka.polyfill.VideoPlayPromise.install = function() {
          shaka.log.debug("VideoPlayPromise.install");
          if (window.HTMLMediaElement) {
            var a2 = HTMLMediaElement.prototype.play;
            HTMLMediaElement.prototype.play = function() {
              var b2 = a2.apply(this);
              b2 && b2["catch"](function() {
              });
              return b2;
            };
          }
        };
        goog.exportProperty(shaka.polyfill, "VideoPlayPromise", shaka.polyfill.VideoPlayPromise);
        goog.exportProperty(shaka.polyfill.VideoPlayPromise, "install", shaka.polyfill.VideoPlayPromise.install);
        shaka.polyfill.register(shaka.polyfill.VideoPlayPromise.install);
        shaka.polyfill.VideoPlaybackQuality = function() {
        };
        shaka.polyfill.VideoPlaybackQuality.install = function() {
          if (window.HTMLVideoElement) {
            var a2 = HTMLVideoElement.prototype;
            !a2.getVideoPlaybackQuality && ("webkitDroppedFrameCount" in a2 || shaka.util.Platform.isWebOS3()) && (a2.getVideoPlaybackQuality = shaka.polyfill.VideoPlaybackQuality.webkit_);
          }
        };
        shaka.polyfill.VideoPlaybackQuality.webkit_ = function() {
          return { droppedVideoFrames: this.webkitDroppedFrameCount, totalVideoFrames: this.webkitDecodedFrameCount, corruptedVideoFrames: 0, creationTime: NaN, totalFrameDelay: 0 };
        };
        goog.exportProperty(shaka.polyfill, "VideoPlaybackQuality", shaka.polyfill.VideoPlaybackQuality);
        goog.exportProperty(shaka.polyfill.VideoPlaybackQuality, "install", shaka.polyfill.VideoPlaybackQuality.install);
        shaka.polyfill.register(shaka.polyfill.VideoPlaybackQuality.install);
        shaka.polyfill.VTTCue = function() {
        };
        shaka.polyfill.VTTCue.install = function() {
          if (window.VTTCue)
            shaka.log.info("Using native VTTCue.");
          else if (window.TextTrackCue) {
            var a2 = null, b2 = TextTrackCue.length;
            3 == b2 ? (shaka.log.info("Using VTTCue polyfill from 3 argument TextTrackCue."), a2 = shaka.polyfill.VTTCue.from3ArgsTextTrackCue_) : 6 == b2 ? (shaka.log.info("Using VTTCue polyfill from 6 argument TextTrackCue."), a2 = shaka.polyfill.VTTCue.from6ArgsTextTrackCue_) : shaka.polyfill.VTTCue.canUse3ArgsTextTrackCue_() && (shaka.log.info("Using VTTCue polyfill from 3 argument TextTrackCue."), a2 = shaka.polyfill.VTTCue.from3ArgsTextTrackCue_);
            a2 ? window.VTTCue = function(c2, d2, e2) {
              return a2(c2, d2, e2);
            } : shaka.log.error("No recognized signature for TextTrackCue found!");
          } else
            shaka.log.error("VTTCue not available.");
        };
        shaka.polyfill.VTTCue.from3ArgsTextTrackCue_ = function(a2, b2, c2) {
          return new window.TextTrackCue(a2, b2, c2);
        };
        shaka.polyfill.VTTCue.from6ArgsTextTrackCue_ = function(a2, b2, c2) {
          return new window.TextTrackCue(a2 + "-" + b2 + "-" + c2, a2, b2, c2);
        };
        shaka.polyfill.VTTCue.canUse3ArgsTextTrackCue_ = function() {
          try {
            return !!shaka.polyfill.VTTCue.from3ArgsTextTrackCue_(1, 2, "");
          } catch (a2) {
            return false;
          }
        };
        goog.exportProperty(shaka.polyfill, "VTTCue", shaka.polyfill.VTTCue);
        goog.exportProperty(shaka.polyfill.VTTCue, "install", shaka.polyfill.VTTCue.install);
        shaka.polyfill.register(shaka.polyfill.VTTCue.install);
        shaka.text.LrcTextParser = function() {
        };
        shaka.text.LrcTextParser.prototype.parseInit = function(a2) {
          goog.asserts.assert(false, "LRC does not have init segments");
        };
        shaka.text.LrcTextParser.prototype.parseMedia = function(a2, b2) {
          var c2 = shaka.text.LrcTextParser, d2 = null, e2 = [], f2 = shaka.util.StringUtils.fromUTF8(a2).split(/\r?\n/);
          f2 = $jscomp.makeIterator(f2);
          for (var g = f2.next(); !g.done; g = f2.next()) {
            var h = g.value;
            h && !/^\s+$/.test(h) && ((g = c2.lyricLine_.exec(h)) ? (h = c2.parseTime_(g[1]), g = new shaka.text.Cue(h, b2.segmentEnd ? b2.segmentEnd : h + 2, g[2]), d2 && (d2.endTime = h, e2.push(d2)), d2 = g) : shaka.log.warning("LrcTextParser encountered an unknown line.", h));
          }
          d2 && e2.push(d2);
          return e2;
        };
        shaka.text.LrcTextParser.parseTime_ = function(a2) {
          var b2 = shaka.text.LrcTextParser.timeFormat_.exec(a2);
          a2 = parseInt(b2[1], 10);
          b2 = parseFloat(b2[2].replace(",", "."));
          return 60 * a2 + b2;
        };
        goog.exportSymbol("shaka.text.LrcTextParser", shaka.text.LrcTextParser);
        goog.exportProperty(shaka.text.LrcTextParser.prototype, "parseMedia", shaka.text.LrcTextParser.prototype.parseMedia);
        goog.exportProperty(shaka.text.LrcTextParser.prototype, "parseInit", shaka.text.LrcTextParser.prototype.parseInit);
        shaka.text.LrcTextParser.lyricLine_ = /^\[(\d{1,2}:\d{1,2}(?:[.,]\d{1,3})?)\](.*)/;
        shaka.text.LrcTextParser.timeFormat_ = /^(\d+):(\d{1,2}(?:[.,]\d{1,3})?)$/;
        shaka.text.TextEngine.registerParser("application/x-subtitle-lrc", function() {
          return new shaka.text.LrcTextParser();
        });
        shaka.text.TtmlTextParser = function() {
        };
        shaka.text.TtmlTextParser.prototype.parseInit = function(a2) {
          goog.asserts.assert(false, "TTML does not have init segments");
        };
        shaka.text.TtmlTextParser.prototype.parseMedia = function(a2, b2) {
          var c2 = shaka.text.TtmlTextParser, d2 = shaka.util.XmlUtils, e2 = c2.parameterNs_, f2 = c2.styleNs_, g = shaka.util.StringUtils.fromUTF8(a2), h = [], k2 = new DOMParser(), l = null;
          if ("" == g)
            return h;
          try {
            l = k2.parseFromString(g, "text/xml");
          } catch (u) {
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_XML, "Failed to parse TTML.");
          }
          if (l) {
            if (g = l.getElementsByTagName("parsererror")[0])
              throw new shaka.util.Error(
                shaka.util.Error.Severity.CRITICAL,
                shaka.util.Error.Category.TEXT,
                shaka.util.Error.Code.INVALID_XML,
                g.textContent
              );
            g = l.getElementsByTagName("tt")[0];
            if (!g)
              throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_XML, "TTML does not contain <tt> tag.");
            l = g.getElementsByTagName("body")[0];
            if (!l)
              return [];
            k2 = d2.getAttributeNSList(g, e2, "frameRate");
            var m = d2.getAttributeNSList(g, e2, "subFrameRate"), n = d2.getAttributeNSList(g, e2, "frameRateMultiplier"), p = d2.getAttributeNSList(g, e2, "tickRate"), q = d2.getAttributeNSList(g, e2, "cellResolution"), r = g.getAttribute("xml:space") || "default";
            e2 = d2.getAttributeNSList(g, f2, "extent");
            if ("default" != r && "preserve" != r)
              throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_XML, "Invalid xml:space value: " + r);
            f2 = "default" == r;
            k2 = new c2.RateInfo_(k2, m, n, p);
            m = c2.getCellResolution_(q);
            n = (n = g.getElementsByTagName("metadata")[0]) ? d2.getChildren(n) : [];
            p = Array.from(g.getElementsByTagName("style"));
            g = Array.from(g.getElementsByTagName("region"));
            q = [];
            r = $jscomp.makeIterator(g);
            for (var t = r.next(); !t.done; t = r.next())
              (t = c2.parseCueRegion_(t.value, p, e2)) && q.push(t);
            if (d2.findChildren(l, "p").length)
              throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_TEXT_CUE, "<p> can only be inside <div> in TTML");
            e2 = $jscomp.makeIterator(d2.findChildren(l, "div"));
            for (r = e2.next(); !r.done; r = e2.next())
              if (d2.findChildren(r.value, "span").length)
                throw new shaka.util.Error(
                  shaka.util.Error.Severity.CRITICAL,
                  shaka.util.Error.Category.TEXT,
                  shaka.util.Error.Code.INVALID_TEXT_CUE,
                  "<span> can only be inside <p> in TTML"
                );
            (c2 = c2.parseCue_(l, b2.periodStart, k2, n, p, g, q, f2, m, null, false)) && h.push(c2);
          }
          return h;
        };
        shaka.text.TtmlTextParser.parseCue_ = function(a2, b2, c2, d2, e2, f2, g, h, k2, l, m) {
          var n = a2.parentNode;
          if (a2.nodeType == Node.COMMENT_NODE)
            return null;
          if (a2.nodeType == Node.TEXT_NODE) {
            if (!m)
              return null;
            var p = document.createElement("span");
            p.textContent = a2.textContent;
          } else
            goog.asserts.assert(a2.nodeType == Node.ELEMENT_NODE, "nodeType should be ELEMENT_NODE!"), p = a2;
          goog.asserts.assert(p, "cueElement should be non-null!");
          for (var q = null, r = $jscomp.makeIterator(shaka.text.TtmlTextParser.smpteNsList_), t = r.next(); !t.done && !(q = shaka.text.TtmlTextParser.getElementsFromCollection_(
            p,
            "backgroundImage",
            d2,
            "#",
            t.value
          )[0]); t = r.next())
            ;
          r = m;
          if ("p" == a2.nodeName || q)
            m = true;
          h = "default" == (p.getAttribute("xml:space") || (h ? "default" : "preserve"));
          t = Array.from(p.childNodes).every(function(x) {
            return x.nodeType == Node.TEXT_NODE;
          });
          a2 = [];
          if (!t)
            for (var u = $jscomp.makeIterator(p.childNodes), v = u.next(); !v.done; v = u.next())
              (v = shaka.text.TtmlTextParser.parseCue_(v.value, b2, c2, d2, e2, f2, g, h, k2, p, m)) && a2.push(v);
          d2 = null != l;
          u = /\S/.test(p.textContent);
          var y = p.hasAttribute("begin") || p.hasAttribute("end") || p.hasAttribute("dur");
          if (!(y || u || "br" == p.tagName || 0 != a2.length || d2 && !h))
            return null;
          v = shaka.text.TtmlTextParser.parseTime_(p, c2);
          u = v.start;
          for (v = v.end; n && n.nodeType == Node.ELEMENT_NODE && "tt" != n.tagName; )
            v = shaka.text.TtmlTextParser.resolveTime_(n, c2, u, v), u = v.start, v = v.end, n = n.parentNode;
          null == u && (u = 0);
          u += b2;
          v = null == v ? Infinity : v + b2;
          if (!y && 0 < a2.length)
            for (u = Infinity, v = 0, b2 = $jscomp.makeIterator(a2), c2 = b2.next(); !c2.done; c2 = b2.next())
              c2 = c2.value, u = Math.min(u, c2.startTime), v = Math.max(v, c2.endTime);
          if ("br" == p.tagName)
            return e2 = new shaka.text.Cue(
              u,
              v,
              ""
            ), e2.lineBreak = true, e2;
          b2 = "";
          t && (b2 = p.textContent, h && (b2 = b2.trim(), b2 = b2.replace(/\s+/g, " ")));
          b2 = new shaka.text.Cue(u, v, b2);
          b2.nestedCues = a2;
          m || (b2.isContainer = true);
          k2 && (b2.cellResolution = k2);
          k2 = shaka.text.TtmlTextParser.getElementsFromCollection_(p, "region", f2, "")[0];
          if (p.hasAttribute("region") && k2 && k2.getAttribute("xml:id")) {
            var w = k2.getAttribute("xml:id");
            b2.region = g.filter(function(x) {
              return x.id == w;
            })[0];
          }
          g = k2;
          l && d2 && !p.getAttribute("region") && !p.getAttribute("style") && (g = shaka.text.TtmlTextParser.getElementsFromCollection_(
            l,
            "region",
            f2,
            ""
          )[0]);
          shaka.text.TtmlTextParser.addStyle_(b2, p, g, q, e2, r, 0 == a2.length);
          return b2;
        };
        shaka.text.TtmlTextParser.parseCueRegion_ = function(a2, b2, c2) {
          var d2 = shaka.text.TtmlTextParser, e2 = new shaka.text.CueRegion(), f2 = a2.getAttribute("xml:id");
          if (!f2)
            return shaka.log.warning("TtmlTextParser parser encountered a region with no id. Region will be ignored."), null;
          e2.id = f2;
          f2 = null;
          c2 && (f2 = d2.percentValues_.exec(c2) || d2.pixelValues_.exec(c2));
          c2 = f2 ? Number(f2[1]) : null;
          f2 = f2 ? Number(f2[2]) : null;
          var g, h;
          if (g = d2.getStyleAttributeFromRegion_(a2, b2, "extent"))
            g = (h = d2.percentValues_.exec(g)) || d2.pixelValues_.exec(g), null != g && (e2.width = Number(g[1]), e2.height = Number(g[2]), h || (null != c2 && (e2.width = 100 * e2.width / c2), null != f2 && (e2.height = 100 * e2.height / f2)), e2.widthUnits = h || null != c2 ? shaka.text.CueRegion.units.PERCENTAGE : shaka.text.CueRegion.units.PX, e2.heightUnits = h || null != f2 ? shaka.text.CueRegion.units.PERCENTAGE : shaka.text.CueRegion.units.PX);
          if (a2 = d2.getStyleAttributeFromRegion_(a2, b2, "origin"))
            g = (h = d2.percentValues_.exec(a2)) || d2.pixelValues_.exec(a2), null != g && (e2.viewportAnchorX = Number(g[1]), e2.viewportAnchorY = Number(g[2]), h || (null != f2 && (e2.viewportAnchorY = 100 * e2.viewportAnchorY / f2), null != c2 && (e2.viewportAnchorX = 100 * e2.viewportAnchorX / c2)), e2.viewportAnchorUnits = h || null != c2 ? shaka.text.CueRegion.units.PERCENTAGE : shaka.text.CueRegion.units.PX);
          return e2;
        };
        shaka.text.TtmlTextParser.addStyle_ = function(a2, b2, c2, d2, e2, f2, g) {
          var h = shaka.text.TtmlTextParser, k2 = shaka.text.Cue;
          f2 = f2 || g;
          "rtl" == h.getStyleAttribute_(b2, c2, e2, "direction", f2) && (a2.direction = k2.direction.HORIZONTAL_RIGHT_TO_LEFT);
          g = h.getStyleAttribute_(b2, c2, e2, "writingMode", f2);
          "tb" == g || "tblr" == g ? a2.writingMode = k2.writingMode.VERTICAL_LEFT_TO_RIGHT : "tbrl" == g ? a2.writingMode = k2.writingMode.VERTICAL_RIGHT_TO_LEFT : "rltb" == g || "rl" == g ? a2.direction = k2.direction.HORIZONTAL_RIGHT_TO_LEFT : g && (a2.direction = k2.direction.HORIZONTAL_LEFT_TO_RIGHT);
          (g = h.getStyleAttribute_(b2, c2, e2, "textAlign", true)) ? (a2.positionAlign = h.textAlignToPositionAlign_[g], a2.lineAlign = h.textAlignToLineAlign_[g], goog.asserts.assert(g.toUpperCase() in k2.textAlign, g.toUpperCase() + " Should be in Cue.textAlign values!"), a2.textAlign = k2.textAlign[g.toUpperCase()]) : a2.textAlign = k2.textAlign.CENTER;
          if (g = h.getStyleAttribute_(b2, c2, e2, "displayAlign", true))
            goog.asserts.assert(g.toUpperCase() in k2.displayAlign, g.toUpperCase() + " Should be in Cue.displayAlign values!"), a2.displayAlign = k2.displayAlign[g.toUpperCase()];
          if (g = h.getStyleAttribute_(b2, c2, e2, "color", f2))
            a2.color = g;
          if (g = h.getStyleAttribute_(b2, c2, e2, "backgroundColor", f2))
            a2.backgroundColor = g;
          if (g = h.getStyleAttribute_(b2, c2, e2, "border", f2))
            a2.border = g;
          if (g = h.getStyleAttribute_(b2, c2, e2, "fontFamily", f2))
            a2.fontFamily = g;
          (g = h.getStyleAttribute_(b2, c2, e2, "fontWeight", f2)) && "bold" == g && (a2.fontWeight = k2.fontWeight.BOLD);
          g = h.getStyleAttribute_(b2, c2, e2, "wrapOption", f2);
          a2.wrapLine = g && "noWrap" == g ? false : true;
          (g = h.getStyleAttribute_(b2, c2, e2, "lineHeight", f2)) && g.match(h.unitValues_) && (a2.lineHeight = g);
          (g = h.getStyleAttribute_(b2, c2, e2, "fontSize", f2)) && (g.match(h.unitValues_) || g.match(h.percentValue_)) && (a2.fontSize = g);
          if (g = h.getStyleAttribute_(b2, c2, e2, "fontStyle", f2))
            goog.asserts.assert(g.toUpperCase() in k2.fontStyle, g.toUpperCase() + " Should be in Cue.fontStyle values!"), a2.fontStyle = k2.fontStyle[g.toUpperCase()];
          d2 && (k2 = d2.getAttribute("imageType") || d2.getAttribute("imagetype"), g = d2.getAttribute("encoding"), d2 = d2.textContent.trim(), "PNG" == k2 && "Base64" == g && d2 && (a2.backgroundImage = "data:image/png;base64," + d2));
          if (d2 = h.getStyleAttribute_(
            b2,
            c2,
            e2,
            "textOutline",
            f2
          ))
            d2 = d2.split(" "), d2[0].match(h.unitValues_) ? a2.textStrokeColor = a2.color : (a2.textStrokeColor = d2[0], d2.shift()), d2[0] && d2[0].match(h.unitValues_) ? a2.textStrokeWidth = d2[0] : a2.textStrokeColor = "";
          (d2 = h.getStyleAttribute_(b2, c2, e2, "letterSpacing", f2)) && d2.match(h.unitValues_) && (a2.letterSpacing = d2);
          (d2 = h.getStyleAttribute_(b2, c2, e2, "linePadding", f2)) && d2.match(h.unitValues_) && (a2.linePadding = d2);
          if (f2 = h.getStyleAttribute_(b2, c2, e2, "opacity", f2))
            a2.opacity = parseFloat(f2);
          (c2 = h.getStyleAttributeFromRegion_(c2, e2, "textDecoration")) && h.addTextDecoration_(a2, c2);
          (b2 = h.getStyleAttributeFromElement_(b2, e2, "textDecoration")) && h.addTextDecoration_(a2, b2);
        };
        shaka.text.TtmlTextParser.addTextDecoration_ = function(a2, b2) {
          for (var c2 = shaka.text.Cue, d2 = $jscomp.makeIterator(b2.split(" ")), e2 = d2.next(); !e2.done; e2 = d2.next())
            switch (e2.value) {
              case "underline":
                a2.textDecoration.includes(c2.textDecoration.UNDERLINE) || a2.textDecoration.push(c2.textDecoration.UNDERLINE);
                break;
              case "noUnderline":
                a2.textDecoration.includes(c2.textDecoration.UNDERLINE) && shaka.util.ArrayUtils.remove(a2.textDecoration, c2.textDecoration.UNDERLINE);
                break;
              case "lineThrough":
                a2.textDecoration.includes(c2.textDecoration.LINE_THROUGH) || a2.textDecoration.push(c2.textDecoration.LINE_THROUGH);
                break;
              case "noLineThrough":
                a2.textDecoration.includes(c2.textDecoration.LINE_THROUGH) && shaka.util.ArrayUtils.remove(a2.textDecoration, c2.textDecoration.LINE_THROUGH);
                break;
              case "overline":
                a2.textDecoration.includes(c2.textDecoration.OVERLINE) || a2.textDecoration.push(c2.textDecoration.OVERLINE);
                break;
              case "noOverline":
                a2.textDecoration.includes(c2.textDecoration.OVERLINE) && shaka.util.ArrayUtils.remove(a2.textDecoration, c2.textDecoration.OVERLINE);
            }
        };
        shaka.text.TtmlTextParser.getStyleAttribute_ = function(a2, b2, c2, d2, e2) {
          e2 = void 0 === e2 ? true : e2;
          var f2 = shaka.text.TtmlTextParser;
          return (a2 = f2.getStyleAttributeFromElement_(a2, c2, d2)) ? a2 : e2 ? f2.getStyleAttributeFromRegion_(b2, c2, d2) : null;
        };
        shaka.text.TtmlTextParser.getStyleAttributeFromRegion_ = function(a2, b2, c2) {
          if (!a2)
            return null;
          var d2 = shaka.util.XmlUtils.getAttributeNSList(a2, shaka.text.TtmlTextParser.styleNs_, c2);
          return d2 ? d2 : shaka.text.TtmlTextParser.getInheritedStyleAttribute_(a2, b2, c2);
        };
        shaka.text.TtmlTextParser.getStyleAttributeFromElement_ = function(a2, b2, c2) {
          var d2 = shaka.util.XmlUtils.getAttributeNSList(a2, shaka.text.TtmlTextParser.styleNs_, c2);
          return d2 ? d2 : shaka.text.TtmlTextParser.getInheritedStyleAttribute_(a2, b2, c2);
        };
        shaka.text.TtmlTextParser.getInheritedStyleAttribute_ = function(a2, b2, c2) {
          var d2 = shaka.util.XmlUtils, e2 = shaka.text.TtmlTextParser.styleNs_, f2 = shaka.text.TtmlTextParser.styleEbuttsNs_;
          a2 = shaka.text.TtmlTextParser.getElementsFromCollection_(a2, "style", b2, "");
          for (var g = null, h = 0; h < a2.length; h++) {
            var k2 = d2.getAttributeNS(a2[h], f2, c2);
            k2 || (k2 = d2.getAttributeNSList(a2[h], e2, c2));
            k2 || (k2 = shaka.text.TtmlTextParser.getStyleAttributeFromElement_(a2[h], b2, c2));
            k2 && (g = k2);
          }
          return g;
        };
        shaka.text.TtmlTextParser.getElementsFromCollection_ = function(a2, b2, c2, d2, e2) {
          var f2 = [];
          if (!a2 || 1 > c2.length)
            return f2;
          if (a2 = shaka.text.TtmlTextParser.getInheritedAttribute_(a2, b2, e2))
            for (a2 = a2.split(" "), a2 = $jscomp.makeIterator(a2), b2 = a2.next(); !b2.done; b2 = a2.next()) {
              b2 = b2.value;
              e2 = $jscomp.makeIterator(c2);
              for (var g = e2.next(); !g.done; g = e2.next())
                if (g = g.value, d2 + g.getAttribute("xml:id") == b2) {
                  f2.push(g);
                  break;
                }
            }
          return f2;
        };
        shaka.text.TtmlTextParser.getInheritedAttribute_ = function(a2, b2, c2) {
          for (var d2 = null, e2 = shaka.util.XmlUtils; a2 && !(d2 = c2 ? e2.getAttributeNS(a2, c2, b2) : a2.getAttribute(b2)) && (a2 = a2.parentNode, a2 instanceof Element); )
            ;
          return d2;
        };
        shaka.text.TtmlTextParser.resolveTime_ = function(a2, b2, c2, d2) {
          a2 = shaka.text.TtmlTextParser.parseTime_(a2, b2);
          null == c2 ? c2 = a2.start : null != a2.start && (c2 += a2.start);
          null == d2 ? d2 = a2.end : null != a2.start && (d2 += a2.start);
          return { start: c2, end: d2 };
        };
        shaka.text.TtmlTextParser.parseTime_ = function(a2, b2) {
          var c2 = shaka.text.TtmlTextParser.parseTimeAttribute_(a2.getAttribute("begin"), b2), d2 = shaka.text.TtmlTextParser.parseTimeAttribute_(a2.getAttribute("end"), b2), e2 = shaka.text.TtmlTextParser.parseTimeAttribute_(a2.getAttribute("dur"), b2);
          null == d2 && null != e2 && (d2 = c2 + e2);
          return { start: c2, end: d2 };
        };
        shaka.text.TtmlTextParser.parseTimeAttribute_ = function(a2, b2) {
          var c2 = null, d2 = shaka.text.TtmlTextParser;
          if (d2.timeColonFormatFrames_.test(a2))
            c2 = d2.parseColonTimeWithFrames_(b2, a2);
          else if (d2.timeColonFormat_.test(a2))
            c2 = d2.parseTimeFromRegex_(d2.timeColonFormat_, a2);
          else if (d2.timeColonFormatMilliseconds_.test(a2))
            c2 = d2.parseTimeFromRegex_(d2.timeColonFormatMilliseconds_, a2);
          else if (d2.timeFramesFormat_.test(a2))
            c2 = d2.parseFramesTime_(b2, a2);
          else if (d2.timeTickFormat_.test(a2))
            c2 = d2.parseTickTime_(b2, a2);
          else if (d2.timeHMSFormat_.test(a2))
            c2 = d2.parseTimeFromRegex_(d2.timeHMSFormat_, a2);
          else if (a2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_TEXT_CUE, "Could not parse cue time range in TTML");
          return c2;
        };
        shaka.text.TtmlTextParser.parseFramesTime_ = function(a2, b2) {
          var c2 = shaka.text.TtmlTextParser.timeFramesFormat_.exec(b2);
          return Number(c2[1]) / a2.frameRate;
        };
        shaka.text.TtmlTextParser.parseTickTime_ = function(a2, b2) {
          var c2 = shaka.text.TtmlTextParser.timeTickFormat_.exec(b2);
          return Number(c2[1]) / a2.tickRate;
        };
        shaka.text.TtmlTextParser.parseColonTimeWithFrames_ = function(a2, b2) {
          var c2 = shaka.text.TtmlTextParser.timeColonFormatFrames_.exec(b2), d2 = Number(c2[1]), e2 = Number(c2[2]), f2 = Number(c2[3]), g = Number(c2[4]);
          g += (Number(c2[5]) || 0) / a2.subFrameRate;
          f2 += g / a2.frameRate;
          return f2 + 60 * e2 + 3600 * d2;
        };
        shaka.text.TtmlTextParser.parseTimeFromRegex_ = function(a2, b2) {
          var c2 = a2.exec(b2);
          return null == c2 || "" == c2[0] ? null : (Number(c2[4]) || 0) / 1e3 + (Number(c2[3]) || 0) + 60 * (Number(c2[2]) || 0) + 3600 * (Number(c2[1]) || 0);
        };
        shaka.text.TtmlTextParser.getCellResolution_ = function(a2) {
          if (!a2)
            return null;
          var b2 = /^(\d+) (\d+)$/.exec(a2);
          if (!b2)
            return null;
          a2 = parseInt(b2[1], 10);
          b2 = parseInt(b2[2], 10);
          return { columns: a2, rows: b2 };
        };
        goog.exportSymbol("shaka.text.TtmlTextParser", shaka.text.TtmlTextParser);
        goog.exportProperty(shaka.text.TtmlTextParser.prototype, "parseMedia", shaka.text.TtmlTextParser.prototype.parseMedia);
        goog.exportProperty(shaka.text.TtmlTextParser.prototype, "parseInit", shaka.text.TtmlTextParser.prototype.parseInit);
        shaka.text.TtmlTextParser.RateInfo_ = function(a2, b2, c2, d2) {
          this.frameRate = Number(a2) || 30;
          this.subFrameRate = Number(b2) || 1;
          this.tickRate = Number(d2);
          0 == this.tickRate && (this.tickRate = a2 ? this.frameRate * this.subFrameRate : 1);
          c2 && (a2 = /^(\d+) (\d+)$/g.exec(c2)) && (this.frameRate *= Number(a2[1]) / Number(a2[2]));
        };
        shaka.text.TtmlTextParser.percentValues_ = /^(\d{1,2}(?:\.\d+)?|100(?:\.0+)?)% (\d{1,2}(?:\.\d+)?|100(?:\.0+)?)%$/;
        shaka.text.TtmlTextParser.percentValue_ = /^(\d{1,2}(?:\.\d+)?|100)%$/;
        shaka.text.TtmlTextParser.unitValues_ = /^(\d+px|\d+em|\d*\.?\d+c)$/;
        shaka.text.TtmlTextParser.pixelValues_ = /^(\d+)px (\d+)px$/;
        shaka.text.TtmlTextParser.timeColonFormatFrames_ = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/;
        shaka.text.TtmlTextParser.timeColonFormat_ = /^(?:(\d{2,}):)?(\d{2}):(\d{2})$/;
        shaka.text.TtmlTextParser.timeColonFormatMilliseconds_ = /^(?:(\d{2,}):)?(\d{2}):(\d{2}\.\d{2,})$/;
        shaka.text.TtmlTextParser.timeFramesFormat_ = /^(\d*(?:\.\d*)?)f$/;
        shaka.text.TtmlTextParser.timeTickFormat_ = /^(\d*(?:\.\d*)?)t$/;
        shaka.text.TtmlTextParser.timeHMSFormat_ = RegExp("^(?:(\\d*(?:\\.\\d*)?)h)?(?:(\\d*(?:\\.\\d*)?)m)?(?:(\\d*(?:\\.\\d*)?)s)?(?:(\\d*(?:\\.\\d*)?)ms)?$");
        shaka.text.TtmlTextParser.textAlignToLineAlign_ = { left: shaka.text.Cue.lineAlign.START, center: shaka.text.Cue.lineAlign.CENTER, right: shaka.text.Cue.lineAlign.END, start: shaka.text.Cue.lineAlign.START, end: shaka.text.Cue.lineAlign.END };
        shaka.text.TtmlTextParser.textAlignToPositionAlign_ = { left: shaka.text.Cue.positionAlign.LEFT, center: shaka.text.Cue.positionAlign.CENTER, right: shaka.text.Cue.positionAlign.RIGHT };
        shaka.text.TtmlTextParser.parameterNs_ = ["http://www.w3.org/ns/ttml#parameter", "http://www.w3.org/2006/10/ttaf1#parameter"];
        shaka.text.TtmlTextParser.styleNs_ = ["http://www.w3.org/ns/ttml#styling", "http://www.w3.org/2006/10/ttaf1#styling"];
        shaka.text.TtmlTextParser.styleEbuttsNs_ = "urn:ebu:tt:style";
        shaka.text.TtmlTextParser.smpteNsList_ = ["http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt", "http://www.smpte-ra.org/schemas/2052-1/2013/smpte-tt"];
        shaka.text.TextEngine.registerParser("application/ttml+xml", function() {
          return new shaka.text.TtmlTextParser();
        });
        shaka.text.Mp4TtmlParser = function() {
          this.parser_ = new shaka.text.TtmlTextParser();
        };
        shaka.text.Mp4TtmlParser.prototype.parseInit = function(a2) {
          var b2 = shaka.util.Mp4Parser, c2 = false;
          new b2().box("moov", b2.children).box("trak", b2.children).box("mdia", b2.children).box("minf", b2.children).box("stbl", b2.children).fullBox("stsd", b2.sampleDescription).box("stpp", function(d2) {
            c2 = true;
            d2.parser.stop();
          }).parse(a2);
          if (!c2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_MP4_TTML);
        };
        shaka.text.Mp4TtmlParser.prototype.parseMedia = function(a2, b2) {
          var c2 = this, d2 = shaka.util.Mp4Parser, e2 = false, f2 = [];
          new d2().box("mdat", d2.allData(function(g) {
            e2 = true;
            f2 = f2.concat(c2.parser_.parseMedia(g, b2));
          })).parse(a2, false);
          if (!e2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_MP4_TTML);
          return f2;
        };
        goog.exportSymbol("shaka.text.Mp4TtmlParser", shaka.text.Mp4TtmlParser);
        goog.exportProperty(shaka.text.Mp4TtmlParser.prototype, "parseMedia", shaka.text.Mp4TtmlParser.prototype.parseMedia);
        goog.exportProperty(shaka.text.Mp4TtmlParser.prototype, "parseInit", shaka.text.Mp4TtmlParser.prototype.parseInit);
        shaka.text.TextEngine.registerParser('application/mp4; codecs="stpp"', function() {
          return new shaka.text.Mp4TtmlParser();
        });
        shaka.text.TextEngine.registerParser('application/mp4; codecs="stpp.ttml"', function() {
          return new shaka.text.Mp4TtmlParser();
        });
        shaka.text.TextEngine.registerParser('application/mp4; codecs="stpp.ttml.im1t"', function() {
          return new shaka.text.Mp4TtmlParser();
        });
        shaka.text.TextEngine.registerParser('application/mp4; codecs="stpp.TTML.im1t"', function() {
          return new shaka.text.Mp4TtmlParser();
        });
        shaka.text.VttTextParser = function() {
        };
        shaka.text.VttTextParser.prototype.parseInit = function(a2) {
          goog.asserts.assert(false, "VTT does not have init segments");
        };
        shaka.text.VttTextParser.prototype.parseMedia = function(a2, b2) {
          var c2 = shaka.text.VttTextParser, d2 = shaka.util.StringUtils.fromUTF8(a2);
          d2 = d2.replace(/\r\n|\r(?=[^\n]|$)/gm, "\n");
          d2 = d2.split(/\n{2,}/m);
          if (!/^WEBVTT($|[ \t\n])/m.test(d2[0]))
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_TEXT_HEADER);
          var e2 = b2.periodStart;
          if (d2[0].includes("X-TIMESTAMP-MAP")) {
            var f2 = d2[0].match(/LOCAL:((?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3}))/m), g = d2[0].match(/MPEGTS:(\d+)/m);
            if (f2 && g) {
              e2 = new shaka.util.TextParser(f2[1]);
              e2 = shaka.text.VttTextParser.parseTime_(e2);
              if (null == e2)
                throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_TEXT_HEADER);
              g = Number(g[1]);
              f2 = shaka.text.VttTextParser.MPEG_TIMESCALE_;
              for (var h = shaka.text.VttTextParser.TS_ROLLOVER_ / f2, k2 = b2.segmentStart; k2 >= h; )
                k2 -= h, g += shaka.text.VttTextParser.TS_ROLLOVER_;
              e2 = b2.periodStart + g / f2 - e2;
            }
          }
          g = [];
          f2 = $jscomp.makeIterator(d2[0].split("\n"));
          for (h = f2.next(); !h.done; h = f2.next())
            h = h.value, /^Region:/.test(h) && (h = c2.parseRegion_(h), g.push(h));
          f2 = /* @__PURE__ */ new Map();
          c2.addDefaultTextColor_(f2);
          h = [];
          d2 = $jscomp.makeIterator(d2.slice(1));
          for (k2 = d2.next(); !k2.done; k2 = d2.next())
            k2 = k2.value.split("\n"), c2.parseStyle_(k2, f2), (k2 = c2.parseCue_(k2, e2, g, f2)) && h.push(k2);
          return h;
        };
        shaka.text.VttTextParser.addDefaultTextColor_ = function(a2) {
          for (var b2 = $jscomp.makeIterator(Object.entries(shaka.text.Cue.defaultTextColor)), c2 = b2.next(); !c2.done; c2 = b2.next()) {
            var d2 = $jscomp.makeIterator(c2.value);
            c2 = d2.next().value;
            d2 = d2.next().value;
            var e2 = new shaka.text.Cue(0, 0, "");
            e2.color = d2;
            a2.set(c2, e2);
          }
          b2 = $jscomp.makeIterator(Object.entries(shaka.text.Cue.defaultTextBackgroundColor));
          for (c2 = b2.next(); !c2.done; c2 = b2.next())
            d2 = $jscomp.makeIterator(c2.value), c2 = d2.next().value, d2 = d2.next().value, e2 = new shaka.text.Cue(0, 0, ""), e2.backgroundColor = d2, a2.set(c2, e2);
        };
        shaka.text.VttTextParser.parseRegion_ = function(a2) {
          var b2 = shaka.text.VttTextParser;
          a2 = new shaka.util.TextParser(a2);
          var c2 = new shaka.text.CueRegion();
          a2.readWord();
          a2.skipWhitespace();
          for (var d2 = a2.readWord(); d2; )
            b2.parseRegionSetting_(c2, d2) || shaka.log.warning("VTT parser encountered an invalid VTTRegion setting: ", d2, " The setting will be ignored."), a2.skipWhitespace(), d2 = a2.readWord();
          return c2;
        };
        shaka.text.VttTextParser.parseStyle_ = function(a2, b2) {
          if ((1 != a2.length || a2[0]) && !/^NOTE($|[ \t])/.test(a2[0]) && "STYLE" == a2[0] && a2[1].includes("::cue")) {
            var c2 = "global", d2 = a2[1].match(/\((.*)\)/);
            d2 && (c2 = d2.pop());
            d2 = a2.slice(2, -1);
            if (a2[1].includes("}")) {
              var e2 = /\{(.*?)\}/.exec(a2[1]);
              e2 && (d2 = e2[1].split(";"));
            }
            e2 = new shaka.text.Cue(0, 0, "");
            for (var f2 = false, g = 0; g < d2.length; g++) {
              var h = /^\s*([^:]+):\s*(.*)/.exec(d2[g]);
              if (h) {
                var k2 = h[1].trim(), l = h[2].trim().replace(";", "");
                switch (k2) {
                  case "background-color":
                    f2 = true;
                    e2.backgroundColor = l;
                    break;
                  case "color":
                    f2 = true;
                    e2.color = l;
                    break;
                  case "font-family":
                    f2 = true;
                    e2.fontFamily = l;
                    break;
                  case "font-size":
                    f2 = true;
                    e2.fontSize = l;
                    break;
                  case "font-weight":
                    700 <= parseInt(l, 10) && (f2 = true, e2.fontWeight = shaka.text.Cue.fontWeight.BOLD);
                    break;
                  case "font-style":
                    switch (l) {
                      case "normal":
                        f2 = true;
                        e2.fontStyle = shaka.text.Cue.fontStyle.NORMAL;
                        break;
                      case "italic":
                        f2 = true;
                        e2.fontStyle = shaka.text.Cue.fontStyle.ITALIC;
                        break;
                      case "oblique":
                        f2 = true, e2.fontStyle = shaka.text.Cue.fontStyle.OBLIQUE;
                    }
                    break;
                  case "opacity":
                    f2 = true;
                    e2.opacity = parseFloat(l);
                    break;
                  case "white-space":
                    f2 = true;
                    e2.wrapLine = "noWrap" != l;
                    break;
                  default:
                    shaka.log.warning("VTT parser encountered an unsupported style: ", h);
                }
              }
            }
            f2 && b2.set(c2, e2);
          }
        };
        shaka.text.VttTextParser.parseCue_ = function(a2, b2, c2, d2) {
          var e2 = shaka.text.VttTextParser;
          if (1 == a2.length && !a2[0] || /^NOTE($|[ \t])/.test(a2[0]) || "STYLE" == a2[0])
            return null;
          var f2 = null;
          a2[0].includes("-->") || (f2 = a2[0], a2.splice(0, 1));
          var g = new shaka.util.TextParser(a2[0]), h = e2.parseTime_(g), k2 = g.readRegex(/[ \t]+--\x3e[ \t]+/g), l = e2.parseTime_(g);
          if (null == h || null == k2 || null == l)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_TEXT_CUE, "Could not parse cue time range in WebVTT");
          h += b2;
          l += b2;
          b2 = a2.slice(1).join("\n").trim();
          d2.has("global") ? (a2 = d2.get("global").clone(), a2.startTime = h, a2.endTime = l, a2.payload = "") : a2 = new shaka.text.Cue(h, l, "");
          e2.parseCueStyles(b2, a2, d2);
          g.skipWhitespace();
          for (d2 = g.readWord(); d2; )
            e2.parseCueSetting(a2, d2, c2) || shaka.log.warning("VTT parser encountered an invalid VTT setting: ", d2, " The setting will be ignored."), g.skipWhitespace(), d2 = g.readWord();
          null != f2 && (a2.id = f2);
          return a2;
        };
        shaka.text.VttTextParser.parseCueStyles = function(a2, b2, c2) {
          var d2 = shaka.text.VttTextParser;
          0 === c2.size && d2.addDefaultTextColor_(c2);
          a2 = d2.replaceColorPayload_(a2);
          var e2 = shaka.util.XmlUtils.parseXmlString("<span>" + a2 + "</span>", "span");
          if (e2) {
            var f2 = [];
            e2 = e2.childNodes;
            if (1 == e2.length) {
              var g = e2[0];
              if (g.nodeType == Node.TEXT_NODE || g.nodeType == Node.CDATA_SECTION_NODE) {
                b2.payload = a2;
                return;
              }
            }
            a2 = $jscomp.makeIterator(e2);
            for (e2 = a2.next(); !e2.done; e2 = a2.next())
              d2.generateCueFromElement_(e2.value, b2, f2, c2);
            b2.nestedCues = f2;
          } else
            shaka.log.warning(
              "The cue's markup could not be parsed: ",
              a2
            ), b2.payload = a2;
        };
        shaka.text.VttTextParser.replaceColorPayload_ = function(a2) {
          for (var b2 = [], c2 = -1, d2 = "", e2 = 0; e2 < a2.length; e2++)
            if ("/" === a2[e2]) {
              var f2 = a2.indexOf(">", e2);
              if (f2 <= e2)
                return a2;
              f2 = a2.substring(e2 + 1, f2);
              var g = b2.pop();
              if (f2 && g) {
                if (g === f2)
                  d2 += "/" + f2 + ">";
                else {
                  if (!g.startsWith("c.") || "c" !== f2)
                    return a2;
                  d2 += "/" + g + ">";
                }
                e2 += f2.length + 1;
              } else
                return a2;
            } else
              "<" === a2[e2] ? c2 = e2 + 1 : ">" === a2[e2] && 0 < c2 && (b2.push(a2.substr(c2, e2 - c2)), c2 = -1), d2 += a2[e2];
          return d2;
        };
        shaka.text.VttTextParser.getOrDefault_ = function(a2, b2) {
          return a2 && 0 < a2.length ? a2 : b2;
        };
        shaka.text.VttTextParser.mergeStyle_ = function(a2, b2) {
          if (b2) {
            var c2 = shaka.text.VttTextParser;
            a2.backgroundColor = c2.getOrDefault_(b2.backgroundColor, a2.backgroundColor);
            a2.color = c2.getOrDefault_(b2.color, a2.color);
            a2.fontFamily = c2.getOrDefault_(b2.fontFamily, a2.fontFamily);
            a2.fontSize = c2.getOrDefault_(b2.fontSize, a2.fontSize);
            a2.fontWeight = b2.fontWeight;
            a2.fontStyle = b2.fontStyle;
            a2.opacity = b2.opacity;
            a2.wrapLine = b2.wrapLine;
          }
        };
        shaka.text.VttTextParser.generateCueFromElement_ = function(a2, b2, c2, d2) {
          var e2 = shaka.text.VttTextParser, f2 = b2.clone();
          if (a2.nodeType === Node.ELEMENT_NODE && a2.nodeName) {
            var g = shaka.text.Cue.fontWeight.BOLD, h = shaka.text.Cue.fontStyle.ITALIC, k2 = shaka.text.Cue.textDecoration.UNDERLINE, l = a2.nodeName.split(/[ .]+/);
            l = $jscomp.makeIterator(l);
            for (var m = l.next(); !m.done; m = l.next())
              switch (m = m.value, d2.has(m) && e2.mergeStyle_(f2, d2.get(m)), m) {
                case "b":
                  f2.fontWeight = g;
                  break;
                case "i":
                  f2.fontStyle = h;
                  break;
                case "u":
                  f2.textDecoration.push(k2);
              }
          }
          if (shaka.util.XmlUtils.isText(a2))
            for (d2 = a2.textContent.split("\n"), e2 = true, d2 = $jscomp.makeIterator(d2), a2 = d2.next(); !a2.done; a2 = d2.next())
              a2 = a2.value, e2 || (e2 = b2.clone(), e2.lineBreak = true, c2.push(e2)), 0 < a2.length && (e2 = f2.clone(), e2.payload = a2, c2.push(e2)), e2 = false;
          else
            for (b2 = $jscomp.makeIterator(a2.childNodes), a2 = b2.next(); !a2.done; a2 = b2.next())
              e2.generateCueFromElement_(a2.value, f2, c2, d2);
        };
        shaka.text.VttTextParser.parseCueSetting = function(a2, b2, c2) {
          var d2 = shaka.text.VttTextParser, e2;
          if (e2 = /^align:(start|middle|center|end|left|right)$/.exec(b2))
            d2.setTextAlign_(a2, e2[1]);
          else if (e2 = /^vertical:(lr|rl)$/.exec(b2))
            d2.setVerticalWritingMode_(a2, e2[1]);
          else if (e2 = /^size:([\d.]+)%$/.exec(b2))
            a2.size = Number(e2[1]);
          else if (e2 = /^position:([\d.]+)%(?:,(line-left|line-right|center|start|end))?$/.exec(b2))
            a2.position = Number(e2[1]), e2[2] && d2.setPositionAlign_(a2, e2[2]);
          else if (e2 = /^region:(.*)$/.exec(b2)) {
            if (b2 = d2.getRegionById_(
              c2,
              e2[1]
            ))
              a2.region = b2;
          } else
            return d2.parsedLineValueAndInterpretation_(a2, b2);
          return true;
        };
        shaka.text.VttTextParser.getRegionById_ = function(a2, b2) {
          var c2 = a2.filter(function(d2) {
            return d2.id == b2;
          });
          if (!c2.length)
            return shaka.log.warning("VTT parser could not find a region with id: ", b2, " The region will be ignored."), null;
          goog.asserts.assert(1 == c2.length, "VTTRegion ids should be unique!");
          return c2[0];
        };
        shaka.text.VttTextParser.parseRegionSetting_ = function(a2, b2) {
          var c2;
          if (c2 = /^id=(.*)$/.exec(b2))
            a2.id = c2[1];
          else if (c2 = /^width=(\d{1,2}|100)%$/.exec(b2))
            a2.width = Number(c2[1]);
          else if (c2 = /^lines=(\d+)$/.exec(b2))
            a2.height = Number(c2[1]), a2.heightUnits = shaka.text.CueRegion.units.LINES;
          else if (c2 = /^regionanchor=(\d{1,2}|100)%,(\d{1,2}|100)%$/.exec(b2))
            a2.regionAnchorX = Number(c2[1]), a2.regionAnchorY = Number(c2[2]);
          else if (c2 = /^viewportanchor=(\d{1,2}|100)%,(\d{1,2}|100)%$/.exec(b2))
            a2.viewportAnchorX = Number(c2[1]), a2.viewportAnchorY = Number(c2[2]);
          else if (/^scroll=up$/.exec(b2))
            a2.scroll = shaka.text.CueRegion.scrollMode.UP;
          else
            return false;
          return true;
        };
        shaka.text.VttTextParser.setTextAlign_ = function(a2, b2) {
          var c2 = shaka.text.Cue;
          "middle" == b2 ? a2.textAlign = c2.textAlign.CENTER : (goog.asserts.assert(b2.toUpperCase() in c2.textAlign, b2.toUpperCase() + " Should be in Cue.textAlign values!"), a2.textAlign = c2.textAlign[b2.toUpperCase()]);
        };
        shaka.text.VttTextParser.setPositionAlign_ = function(a2, b2) {
          var c2 = shaka.text.Cue;
          a2.positionAlign = "line-left" == b2 || "start" == b2 ? c2.positionAlign.LEFT : "line-right" == b2 || "end" == b2 ? c2.positionAlign.RIGHT : c2.positionAlign.CENTER;
        };
        shaka.text.VttTextParser.setVerticalWritingMode_ = function(a2, b2) {
          var c2 = shaka.text.Cue;
          a2.writingMode = "lr" == b2 ? c2.writingMode.VERTICAL_LEFT_TO_RIGHT : c2.writingMode.VERTICAL_RIGHT_TO_LEFT;
        };
        shaka.text.VttTextParser.parsedLineValueAndInterpretation_ = function(a2, b2) {
          var c2 = shaka.text.Cue, d2;
          if (d2 = /^line:([\d.]+)%(?:,(start|end|center))?$/.exec(b2))
            a2.lineInterpretation = c2.lineInterpretation.PERCENTAGE, a2.line = Number(d2[1]), d2[2] && (goog.asserts.assert(d2[2].toUpperCase() in c2.lineAlign, d2[2].toUpperCase() + " Should be in Cue.lineAlign values!"), a2.lineAlign = c2.lineAlign[d2[2].toUpperCase()]);
          else if (d2 = /^line:(-?\d+)(?:,(start|end|center))?$/.exec(b2))
            a2.lineInterpretation = c2.lineInterpretation.LINE_NUMBER, a2.line = Number(d2[1]), d2[2] && (goog.asserts.assert(d2[2].toUpperCase() in c2.lineAlign, d2[2].toUpperCase() + " Should be in Cue.lineAlign values!"), a2.lineAlign = c2.lineAlign[d2[2].toUpperCase()]);
          else
            return false;
          return true;
        };
        shaka.text.VttTextParser.parseTime_ = function(a2) {
          a2 = a2.readRegex(/(?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{2,3})/g);
          if (null == a2)
            return null;
          var b2 = Number(a2[2]), c2 = Number(a2[3]);
          return 59 < b2 || 59 < c2 ? null : Number(a2[4]) / 1e3 + c2 + 60 * b2 + 3600 * (Number(a2[1]) || 0);
        };
        goog.exportSymbol("shaka.text.VttTextParser", shaka.text.VttTextParser);
        goog.exportProperty(shaka.text.VttTextParser.prototype, "parseMedia", shaka.text.VttTextParser.prototype.parseMedia);
        goog.exportProperty(shaka.text.VttTextParser.prototype, "parseInit", shaka.text.VttTextParser.prototype.parseInit);
        shaka.text.VttTextParser.MPEG_TIMESCALE_ = 9e4;
        shaka.text.VttTextParser.TS_ROLLOVER_ = 8589934592;
        shaka.text.TextEngine.registerParser("text/vtt", function() {
          return new shaka.text.VttTextParser();
        });
        shaka.text.TextEngine.registerParser('text/vtt; codecs="vtt"', function() {
          return new shaka.text.VttTextParser();
        });
        shaka.text.TextEngine.registerParser('text/vtt; codecs="wvtt"', function() {
          return new shaka.text.VttTextParser();
        });
        shaka.text.Mp4VttParser = function() {
          this.timescale_ = null;
        };
        shaka.text.Mp4VttParser.prototype.parseInit = function(a2) {
          var b2 = this, c2 = shaka.util.Mp4Parser, d2 = false;
          new c2().box("moov", c2.children).box("trak", c2.children).box("mdia", c2.children).fullBox("mdhd", function(e2) {
            goog.asserts.assert(0 == e2.version || 1 == e2.version, "MDHD version can only be 0 or 1");
            e2 = shaka.util.Mp4BoxParsers.parseMDHD(e2.reader, e2.version);
            b2.timescale_ = e2.timescale;
          }).box("minf", c2.children).box("stbl", c2.children).fullBox("stsd", c2.sampleDescription).box("wvtt", function(e2) {
            d2 = true;
          }).parse(a2);
          if (!this.timescale_)
            throw new shaka.util.Error(
              shaka.util.Error.Severity.CRITICAL,
              shaka.util.Error.Category.TEXT,
              shaka.util.Error.Code.INVALID_MP4_VTT
            );
          if (!d2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_MP4_VTT);
        };
        shaka.text.Mp4VttParser.prototype.parseMedia = function(a2, b2) {
          if (!this.timescale_)
            throw shaka.log.error("No init segment for MP4+VTT!"), new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_MP4_VTT);
          var c2 = shaka.util.Mp4Parser, d2 = 0, e2 = [], f2, g = [], h = false, k2 = false, l = false, m = null;
          new c2().box("moof", c2.children).box("traf", c2.children).fullBox("tfdt", function(x) {
            h = true;
            goog.asserts.assert(0 == x.version || 1 == x.version, "TFDT version can only be 0 or 1");
            d2 = shaka.util.Mp4BoxParsers.parseTFDT(
              x.reader,
              x.version
            ).baseMediaDecodeTime;
          }).fullBox("tfhd", function(x) {
            goog.asserts.assert(null != x.flags, "A TFHD box should have a valid flags value");
            m = shaka.util.Mp4BoxParsers.parseTFHD(x.reader, x.flags).defaultSampleDuration;
          }).fullBox("trun", function(x) {
            k2 = true;
            goog.asserts.assert(null != x.version, "A TRUN box should have a valid version value");
            goog.asserts.assert(null != x.flags, "A TRUN box should have a valid flags value");
            e2 = shaka.util.Mp4BoxParsers.parseTRUN(x.reader, x.version, x.flags).sampleData;
          }).box(
            "mdat",
            c2.allData(function(x) {
              goog.asserts.assert(!l, "VTT cues in mp4 with multiple MDAT are not currently supported");
              l = true;
              f2 = x;
            })
          ).parse(a2, false);
          if (!l && !h && !k2)
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_MP4_VTT);
          c2 = d2;
          for (var n = new shaka.util.DataViewReader(f2, shaka.util.DataViewReader.Endianness.BIG_ENDIAN), p = $jscomp.makeIterator(e2), q = p.next(); !q.done; q = p.next()) {
            q = q.value;
            var r = q.sampleDuration || m, t = q.sampleCompositionTimeOffset ? d2 + q.sampleCompositionTimeOffset : c2;
            c2 = t + (r || 0);
            var u = 0;
            do {
              var v = n.readUint32();
              u += v;
              var y = n.readUint32();
              y = shaka.util.Mp4Parser.typeToString(y);
              var w = null;
              "vttc" == y ? 8 < v && (w = n.readBytes(v - 8)) : ("vtte" != y && shaka.log.error("Unknown box " + y + "! Skipping!"), n.skip(v - 8));
              r ? w && (goog.asserts.assert(null != this.timescale_, "Timescale should not be null!"), v = shaka.text.Mp4VttParser.parseVTTC_(w, b2.periodStart + t / this.timescale_, b2.periodStart + c2 / this.timescale_), g.push(v)) : shaka.log.error("WVTT sample duration unknown, and no default found!");
              goog.asserts.assert(!q.sampleSize || u <= q.sampleSize, "The samples do not fit evenly into the sample sizes given in the TRUN box!");
            } while (q.sampleSize && u < q.sampleSize);
          }
          goog.asserts.assert(!n.hasMoreData(), "MDAT which contain VTT cues and non-VTT data are not currently supported!");
          return g.filter(shaka.util.Functional.isNotNull);
        };
        shaka.text.Mp4VttParser.parseVTTC_ = function(a2, b2, c2) {
          var d2, e2, f2;
          new shaka.util.Mp4Parser().box("payl", shaka.util.Mp4Parser.allData(function(g) {
            d2 = shaka.util.StringUtils.fromUTF8(g);
          })).box("iden", shaka.util.Mp4Parser.allData(function(g) {
            e2 = shaka.util.StringUtils.fromUTF8(g);
          })).box("sttg", shaka.util.Mp4Parser.allData(function(g) {
            f2 = shaka.util.StringUtils.fromUTF8(g);
          })).parse(a2);
          return d2 ? shaka.text.Mp4VttParser.assembleCue_(d2, e2, f2, b2, c2) : null;
        };
        shaka.text.Mp4VttParser.assembleCue_ = function(a2, b2, c2, d2, e2) {
          d2 = new shaka.text.Cue(d2, e2, "");
          e2 = /* @__PURE__ */ new Map();
          shaka.text.VttTextParser.parseCueStyles(a2, d2, e2);
          b2 && (d2.id = b2);
          if (c2)
            for (a2 = new shaka.util.TextParser(c2), b2 = a2.readWord(); b2; )
              shaka.text.VttTextParser.parseCueSetting(d2, b2, []) || shaka.log.warning("VTT parser encountered an invalid VTT setting: ", b2, " The setting will be ignored."), a2.skipWhitespace(), b2 = a2.readWord();
          return d2;
        };
        goog.exportSymbol("shaka.text.Mp4VttParser", shaka.text.Mp4VttParser);
        goog.exportProperty(shaka.text.Mp4VttParser.prototype, "parseMedia", shaka.text.Mp4VttParser.prototype.parseMedia);
        goog.exportProperty(shaka.text.Mp4VttParser.prototype, "parseInit", shaka.text.Mp4VttParser.prototype.parseInit);
        shaka.text.TextEngine.registerParser('application/mp4; codecs="wvtt"', function() {
          return new shaka.text.Mp4VttParser();
        });
        shaka.text.SbvTextParser = function() {
        };
        shaka.text.SbvTextParser.prototype.parseInit = function(a2) {
          goog.asserts.assert(false, "SubViewer does not have init segments");
        };
        shaka.text.SbvTextParser.prototype.parseMedia = function(a2, b2) {
          var c2 = shaka.text.SbvTextParser, d2 = shaka.util.StringUtils.fromUTF8(a2).replace(/\r+/g, "");
          d2 = d2.trim();
          var e2 = [];
          if ("" == d2)
            return e2;
          d2 = d2.split("\n\n");
          d2 = $jscomp.makeIterator(d2);
          for (var f2 = d2.next(); !f2.done; f2 = d2.next()) {
            var g = f2.value.split("\n"), h = new shaka.util.TextParser(g[0]);
            f2 = c2.parseTime_(h);
            var k2 = h.readRegex(/,/g);
            h = c2.parseTime_(h);
            if (null == f2 || null == k2 || null == h)
              throw new shaka.util.Error(
                shaka.util.Error.Severity.CRITICAL,
                shaka.util.Error.Category.TEXT,
                shaka.util.Error.Code.INVALID_TEXT_CUE,
                "Could not parse cue time range in SubViewer"
              );
            g = g.slice(1).join("\n").trim();
            f2 = new shaka.text.Cue(f2, h, g);
            e2.push(f2);
          }
          return e2;
        };
        shaka.text.SbvTextParser.parseTime_ = function(a2) {
          a2 = a2.readRegex(/(?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{2,3})/g);
          if (null == a2)
            return null;
          var b2 = Number(a2[2]), c2 = Number(a2[3]);
          return 59 < b2 || 59 < c2 ? null : Number(a2[4]) / 1e3 + c2 + 60 * b2 + 3600 * (Number(a2[1]) || 0);
        };
        goog.exportSymbol("shaka.text.SbvTextParser", shaka.text.SbvTextParser);
        goog.exportProperty(shaka.text.SbvTextParser.prototype, "parseMedia", shaka.text.SbvTextParser.prototype.parseMedia);
        goog.exportProperty(shaka.text.SbvTextParser.prototype, "parseInit", shaka.text.SbvTextParser.prototype.parseInit);
        shaka.text.TextEngine.registerParser("text/x-subviewer", function() {
          return new shaka.text.SbvTextParser();
        });
        shaka.text.SrtTextParser = function() {
          this.parser_ = new shaka.text.VttTextParser();
        };
        shaka.text.SrtTextParser.prototype.parseInit = function(a2) {
          goog.asserts.assert(false, "SRT does not have init segments");
        };
        shaka.text.SrtTextParser.prototype.parseMedia = function(a2, b2) {
          var c2 = shaka.text.SrtTextParser, d2 = shaka.util.BufferUtils, e2 = shaka.util.StringUtils, f2 = e2.fromUTF8(a2);
          c2 = c2.srt2webvtt(f2);
          d2 = d2.toUint8(e2.toUTF8(c2));
          return this.parser_.parseMedia(d2, b2);
        };
        shaka.text.SrtTextParser.srt2webvtt = function(a2) {
          var b2 = shaka.text.SrtTextParser, c2 = "WEBVTT\n\n";
          if ("" == a2)
            return c2;
          a2 = a2.replace(/\r+/g, "");
          a2 = a2.trim();
          a2 = a2.split("\n\n");
          a2 = $jscomp.makeIterator(a2);
          for (var d2 = a2.next(); !d2.done; d2 = a2.next())
            c2 += b2.convertSrtCue_(d2.value);
          return c2;
        };
        shaka.text.SrtTextParser.convertSrtCue_ = function(a2) {
          a2 = a2.split(/\n/);
          a2[0].match(/\d+/) && a2.shift();
          a2[0] = a2[0].replace(/,/g, ".");
          return a2.join("\n") + "\n\n";
        };
        goog.exportSymbol("shaka.text.SrtTextParser", shaka.text.SrtTextParser);
        goog.exportProperty(shaka.text.SrtTextParser, "srt2webvtt", shaka.text.SrtTextParser.srt2webvtt);
        goog.exportProperty(shaka.text.SrtTextParser.prototype, "parseMedia", shaka.text.SrtTextParser.prototype.parseMedia);
        goog.exportProperty(shaka.text.SrtTextParser.prototype, "parseInit", shaka.text.SrtTextParser.prototype.parseInit);
        shaka.text.TextEngine.registerParser("text/srt", function() {
          return new shaka.text.SrtTextParser();
        });
        shaka.text.SsaTextParser = function() {
        };
        shaka.text.SsaTextParser.prototype.parseInit = function(a2) {
          goog.asserts.assert(false, "SSA does not have init segments");
        };
        shaka.text.SsaTextParser.prototype.parseMedia = function(a2, b2) {
          var c2 = shaka.text.SsaTextParser, d2 = "", e2 = "", f2 = shaka.util.StringUtils.fromUTF8(a2).split(/\r?\n\s*\r?\n/);
          f2 = $jscomp.makeIterator(f2);
          for (var g = f2.next(); !g.done; g = f2.next()) {
            g = g.value;
            var h = c2.ssaContent_.exec(g);
            if (h) {
              var k2 = h[1];
              h = h[2];
              if ("V4 Styles" == k2 || "V4+ Styles" == k2) {
                d2 = h;
                continue;
              }
              if ("Events" == k2) {
                e2 = h;
                continue;
              }
            }
            shaka.log.warning("SsaTextParser parser encountered an unknown part.", g);
          }
          f2 = [];
          g = null;
          d2 = d2.split(/\r?\n/);
          d2 = $jscomp.makeIterator(d2);
          for (h = d2.next(); !h.done; h = d2.next())
            if (k2 = h.value, !/^\s*;/.test(k2) && (h = c2.lineParts_.exec(k2))) {
              if (k2 = h[1].trim(), h = h[2].trim(), "Format" == k2)
                g = h.split(c2.valuesFormat_);
              else if ("Style" == k2) {
                k2 = h.split(c2.valuesFormat_);
                h = {};
                for (var l = 0; l < g.length && l < k2.length; l++)
                  h[g[l]] = k2[l];
                f2.push(h);
              }
            }
          g = [];
          d2 = null;
          k2 = e2.split(/\r?\n/);
          e2 = {};
          k2 = $jscomp.makeIterator(k2);
          for (h = k2.next(); !h.done; e2 = { $jscomp$loop$prop$styleName$632: e2.$jscomp$loop$prop$styleName$632 }, h = k2.next())
            if (h = h.value, !/^\s*;/.test(h) && (l = c2.lineParts_.exec(h))) {
              if (h = l[1].trim(), l = l[2].trim(), "Format" == h)
                d2 = l.split(c2.valuesFormat_);
              else if ("Dialogue" == h) {
                l = l.split(c2.valuesFormat_);
                h = {};
                for (var m = 0; m < d2.length && m < l.length; m++)
                  h[d2[m]] = l[m];
                m = c2.parseTime_(h.Start);
                var n = c2.parseTime_(h.End);
                l = l.slice(d2.length - 1).join(",").replace(/\\N/g, "\n").replace(/\{[^}]+\}/g, "");
                l = new shaka.text.Cue(m, n, l);
                e2.$jscomp$loop$prop$styleName$632 = h.Style;
                (h = f2.find(function(p) {
                  return function(q) {
                    return q.Name == p.$jscomp$loop$prop$styleName$632;
                  };
                }(e2))) && c2.addStyle_(l, h);
                g.push(l);
              }
            }
          return g;
        };
        shaka.text.SsaTextParser.addStyle_ = function(a2, b2) {
          var c2 = shaka.text.Cue, d2 = shaka.text.SsaTextParser, e2 = b2.Fontname;
          e2 && (a2.fontFamily = e2);
          if (e2 = b2.Fontsize)
            a2.fontSize = e2 + "px";
          if (e2 = b2.PrimaryColour) {
            if (e2 = d2.parseSsaColor_(e2))
              a2.color = e2;
          }
          if (e2 = b2.BackColour) {
            if (d2 = d2.parseSsaColor_(e2))
              a2.backgroundColor = d2;
          }
          b2.Bold && (a2.fontWeight = c2.fontWeight.BOLD);
          b2.Italic && (a2.fontStyle = c2.fontStyle.ITALIC);
          b2.Underline && a2.textDecoration.push(c2.textDecoration.UNDERLINE);
          if (d2 = b2.Spacing)
            a2.letterSpacing = d2 + "px";
          if (d2 = b2.Alignment)
            switch (parseInt(
              d2,
              10
            )) {
              case 1:
                a2.displayAlign = c2.displayAlign.AFTER;
                a2.textAlign = c2.textAlign.START;
                break;
              case 2:
                a2.displayAlign = c2.displayAlign.AFTER;
                a2.textAlign = c2.textAlign.CENTER;
                break;
              case 3:
                a2.displayAlign = c2.displayAlign.AFTER;
                a2.textAlign = c2.textAlign.END;
                break;
              case 5:
                a2.displayAlign = c2.displayAlign.BEFORE;
                a2.textAlign = c2.textAlign.START;
                break;
              case 6:
                a2.displayAlign = c2.displayAlign.BEFORE;
                a2.textAlign = c2.textAlign.CENTER;
                break;
              case 7:
                a2.displayAlign = c2.displayAlign.BEFORE;
                a2.textAlign = c2.textAlign.END;
                break;
              case 9:
                a2.displayAlign = c2.displayAlign.CENTER;
                a2.textAlign = c2.textAlign.START;
                break;
              case 10:
                a2.displayAlign = c2.displayAlign.CENTER;
                a2.textAlign = c2.textAlign.CENTER;
                break;
              case 11:
                a2.displayAlign = c2.displayAlign.CENTER, a2.textAlign = c2.textAlign.END;
            }
          if (c2 = b2.AlphaLevel)
            a2.opacity = parseFloat(c2);
        };
        shaka.text.SsaTextParser.parseSsaColor_ = function(a2) {
          a2 = parseInt(a2.replace("&H", ""), 16);
          return 0 <= a2 ? "rgba(" + (a2 & 255) + "," + (a2 >> 8 & 255) + "," + (a2 >> 16 & 255) + "," + (a2 >> 24 & 255 ^ 255) / 255 + ")" : null;
        };
        shaka.text.SsaTextParser.parseTime_ = function(a2) {
          var b2 = shaka.text.SsaTextParser.timeFormat_.exec(a2);
          a2 = b2[1] ? parseInt(b2[1].replace(":", ""), 10) : 0;
          var c2 = parseInt(b2[2], 10);
          b2 = parseFloat(b2[3]);
          return 3600 * a2 + 60 * c2 + b2;
        };
        goog.exportSymbol("shaka.text.SsaTextParser", shaka.text.SsaTextParser);
        goog.exportProperty(shaka.text.SsaTextParser.prototype, "parseMedia", shaka.text.SsaTextParser.prototype.parseMedia);
        goog.exportProperty(shaka.text.SsaTextParser.prototype, "parseInit", shaka.text.SsaTextParser.prototype.parseInit);
        shaka.text.SsaTextParser.ssaContent_ = /^\s*\[([^\]]+)\]\r?\n([\s\S]*)/;
        shaka.text.SsaTextParser.lineParts_ = /^\s*([^:]+):\s*(.*)/;
        shaka.text.SsaTextParser.valuesFormat_ = /\s*,\s*/;
        shaka.text.SsaTextParser.timeFormat_ = /^(\d+:)?(\d{1,2}):(\d{1,2}(?:[.]\d{1,3})?)?$/;
        shaka.text.TextEngine.registerParser("text/x-ssa", function() {
          return new shaka.text.SsaTextParser();
        });
        var EmeEncryptionSchemePolyfill = function() {
        };
        EmeEncryptionSchemePolyfill.install = function() {
          EmeEncryptionSchemePolyfill.originalRMKSA_ ? console.debug("EmeEncryptionSchemePolyfill: Already installed.") : navigator.requestMediaKeySystemAccess && MediaKeySystemAccess.prototype.getConfiguration ? (EmeEncryptionSchemePolyfill.originalRMKSA_ = navigator.requestMediaKeySystemAccess, console.debug("EmeEncryptionSchemePolyfill: Waiting to detect encryptionScheme support."), navigator.requestMediaKeySystemAccess = EmeEncryptionSchemePolyfill.probeRMKSA_) : console.debug("EmeEncryptionSchemePolyfill: EME not found");
        };
        EmeEncryptionSchemePolyfill.probeRMKSA_ = function(a2, b2) {
          var c2 = this, d2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(e2) {
            if (1 == e2.nextAddress)
              return console.assert(c2 == navigator, 'bad "this" for requestMediaKeySystemAccess'), e2.yield(EmeEncryptionSchemePolyfill.originalRMKSA_.call(c2, a2, b2), 2);
            d2 = e2.yieldResult;
            if (hasEncryptionScheme(d2))
              return console.debug("EmeEncryptionSchemePolyfill: Native encryptionScheme support found."), navigator.requestMediaKeySystemAccess = EmeEncryptionSchemePolyfill.originalRMKSA_, e2["return"](d2);
            console.debug("EmeEncryptionSchemePolyfill: No native encryptionScheme support found. Patching encryptionScheme support.");
            navigator.requestMediaKeySystemAccess = EmeEncryptionSchemePolyfill.polyfillRMKSA_;
            return e2["return"](EmeEncryptionSchemePolyfill.polyfillRMKSA_.call(c2, a2, b2));
          });
        };
        EmeEncryptionSchemePolyfill.polyfillRMKSA_ = function(a2, b2) {
          var c2 = this, d2, e2, f2, g, h, k2, l, m, n, p;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(q) {
            if (1 == q.nextAddress) {
              console.assert(c2 == navigator, 'bad "this" for requestMediaKeySystemAccess');
              d2 = guessSupportedScheme(a2);
              e2 = [];
              f2 = $jscomp.makeIterator(b2);
              for (g = f2.next(); !g.done; g = f2.next())
                h = g.value, k2 = EmeEncryptionSchemePolyfill.filterCapabilities_(h.videoCapabilities, d2), l = EmeEncryptionSchemePolyfill.filterCapabilities_(h.audioCapabilities, d2), h.videoCapabilities && h.videoCapabilities.length && !k2.length || h.audioCapabilities && h.audioCapabilities.length && !l.length || (m = Object.assign({}, h), m.videoCapabilities = k2, m.audioCapabilities = l, e2.push(m));
              if (!e2.length)
                throw n = Error("Unsupported keySystem or supportedConfigurations."), n.name = "NotSupportedError", n.code = DOMException.NOT_SUPPORTED_ERR, n;
              return q.yield(EmeEncryptionSchemePolyfill.originalRMKSA_.call(c2, a2, e2), 2);
            }
            p = q.yieldResult;
            return q["return"](new EmeEncryptionSchemePolyfillMediaKeySystemAccess(p, d2));
          });
        };
        EmeEncryptionSchemePolyfill.filterCapabilities_ = function(a2, b2) {
          return a2 ? a2.filter(function(c2) {
            return !c2.encryptionScheme || c2.encryptionScheme == b2;
          }) : a2;
        };
        goog.exportSymbol("EmeEncryptionSchemePolyfill", EmeEncryptionSchemePolyfill);
        goog.exportProperty(EmeEncryptionSchemePolyfill, "install", EmeEncryptionSchemePolyfill.install);
        var McEncryptionSchemePolyfill = function() {
        };
        McEncryptionSchemePolyfill.install = function() {
          McEncryptionSchemePolyfill.originalDecodingInfo_ ? console.debug("McEncryptionSchemePolyfill: Already installed.") : navigator.mediaCapabilities ? (McEncryptionSchemePolyfill.originalDecodingInfo_ = navigator.mediaCapabilities.decodingInfo, console.debug("McEncryptionSchemePolyfill: Waiting to detect encryptionScheme support."), navigator.mediaCapabilities.decodingInfo = McEncryptionSchemePolyfill.probeDecodingInfo_) : console.debug("McEncryptionSchemePolyfill: MediaCapabilities not found");
        };
        McEncryptionSchemePolyfill.probeDecodingInfo_ = function(a2) {
          var b2 = this, c2, d2, e2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(f2) {
            switch (f2.nextAddress) {
              case 1:
                return console.assert(b2 == navigator.mediaCapabilities, 'bad "this" for decodingInfo'), f2.yield(McEncryptionSchemePolyfill.originalDecodingInfo_.call(b2, a2), 2);
              case 2:
                c2 = f2.yieldResult;
                if (!a2.keySystemConfiguration)
                  return f2["return"](c2);
                if ((d2 = c2.keySystemAccess) && hasEncryptionScheme(d2))
                  return console.debug("McEncryptionSchemePolyfill: Native encryptionScheme support found."), navigator.mediaCapabilities.decodingInfo = McEncryptionSchemePolyfill.originalDecodingInfo_, f2["return"](c2);
                console.debug("McEncryptionSchemePolyfill: No native encryptionScheme support found. Patching encryptionScheme support.");
                navigator.mediaCapabilities.decodingInfo = McEncryptionSchemePolyfill.polyfillDecodingInfo_;
                if (d2) {
                  f2.jumpTo(3);
                  break;
                }
                e2 = c2;
                return f2.yield(McEncryptionSchemePolyfill.getMediaKeySystemAccess_(a2), 4);
              case 4:
                return e2.keySystemAccess = f2.yieldResult, f2["return"](c2);
              case 3:
                return f2["return"](McEncryptionSchemePolyfill.polyfillDecodingInfo_.call(
                  b2,
                  a2
                ));
            }
          });
        };
        McEncryptionSchemePolyfill.polyfillDecodingInfo_ = function(a2) {
          var b2 = this, c2, d2, e2, f2, g, h, k2, l;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(m) {
            switch (m.nextAddress) {
              case 1:
                return console.assert(b2 == navigator.mediaCapabilities, 'bad "this" for decodingInfo'), c2 = null, a2.keySystemConfiguration && (d2 = a2.keySystemConfiguration, e2 = d2.keySystem, f2 = d2.audio && d2.audio.encryptionScheme, g = d2.video && d2.video.encryptionScheme, c2 = guessSupportedScheme(e2), h = { powerEfficient: false, smooth: false, supported: false, keySystemAccess: null, configuration: a2 }, f2 && f2 != c2 || g && g != c2) ? m["return"](h) : m.yield(McEncryptionSchemePolyfill.originalDecodingInfo_.call(b2, a2), 2);
              case 2:
                k2 = m.yieldResult;
                if (k2.keySystemAccess) {
                  k2.keySystemAccess = new EmeEncryptionSchemePolyfillMediaKeySystemAccess(k2.keySystemAccess, c2);
                  m.jumpTo(3);
                  break;
                }
                if (!a2.keySystemConfiguration) {
                  m.jumpTo(3);
                  break;
                }
                l = k2;
                return m.yield(McEncryptionSchemePolyfill.getMediaKeySystemAccess_(a2), 5);
              case 5:
                l.keySystemAccess = m.yieldResult;
              case 3:
                return m["return"](k2);
            }
          });
        };
        McEncryptionSchemePolyfill.getMediaKeySystemAccess_ = function(a2) {
          var b2, c2;
          return $jscomp.asyncExecutePromiseGeneratorProgram(function(d2) {
            if (1 == d2.nextAddress)
              return b2 = McEncryptionSchemePolyfill.convertToMediaKeySystemConfig_(a2), d2.yield(navigator.requestMediaKeySystemAccess(a2.keySystemConfiguration.keySystem, [b2]), 2);
            c2 = d2.yieldResult;
            return d2["return"](c2);
          });
        };
        McEncryptionSchemePolyfill.convertToMediaKeySystemConfig_ = function(a2) {
          var b2 = a2.keySystemConfiguration, c2 = [], d2 = [];
          b2.audio && c2.push({ robustness: b2.audio.robustness || "", contentType: a2.audio.contentType });
          b2.video && d2.push({ robustness: b2.video.robustness || "", contentType: a2.video.contentType });
          a2 = { initDataTypes: b2.initDataType ? [b2.initDataType] : [], distinctiveIdentifier: b2.distinctiveIdentifier, persistentState: b2.persistentState, sessionTypes: b2.sessionTypes };
          c2.length && (a2.audioCapabilities = c2);
          d2.length && (a2.videoCapabilities = d2);
          return a2;
        };
        goog.exportSymbol("McEncryptionSchemePolyfill", McEncryptionSchemePolyfill);
        goog.exportProperty(McEncryptionSchemePolyfill, "install", McEncryptionSchemePolyfill.install);
        var EmeEncryptionSchemePolyfillMediaKeySystemAccess = function(a2, b2) {
          this.mksa_ = a2;
          this.scheme_ = b2;
          this.keySystem = a2.keySystem;
        };
        EmeEncryptionSchemePolyfillMediaKeySystemAccess.prototype.getConfiguration = function() {
          var a2 = this.mksa_.getConfiguration();
          if (a2.videoCapabilities)
            for (var b2 = $jscomp.makeIterator(a2.videoCapabilities), c2 = b2.next(); !c2.done; c2 = b2.next())
              c2.value.encryptionScheme = this.scheme_;
          if (a2.audioCapabilities)
            for (b2 = $jscomp.makeIterator(a2.audioCapabilities), c2 = b2.next(); !c2.done; c2 = b2.next())
              c2.value.encryptionScheme = this.scheme_;
          return a2;
        };
        EmeEncryptionSchemePolyfillMediaKeySystemAccess.prototype.createMediaKeys = function() {
          return this.mksa_.createMediaKeys();
        };
        function guessSupportedScheme(a2) {
          if (a2.startsWith("com.widevine") || a2.startsWith("com.microsoft") || a2.startsWith("com.chromecast") || a2.startsWith("com.adobe") || a2.startsWith("org.w3"))
            return "cenc";
          if (a2.startsWith("com.apple"))
            return "cbcs-1-9";
          console.warn("EmeEncryptionSchemePolyfill: Unknown key system:", a2, "Please contribute!");
          return null;
        }
        function hasEncryptionScheme(a2) {
          a2 = a2.getConfiguration();
          var b2 = a2.audioCapabilities && a2.audioCapabilities[0];
          return (a2 = a2.videoCapabilities && a2.videoCapabilities[0] || b2) && void 0 !== a2.encryptionScheme ? true : false;
        }
        var EncryptionSchemePolyfills = function() {
        };
        EncryptionSchemePolyfills.install = function() {
          EmeEncryptionSchemePolyfill.install();
          McEncryptionSchemePolyfill.install();
        };
        goog.exportSymbol("EncryptionSchemePolyfills", EncryptionSchemePolyfills);
        goog.exportProperty(EncryptionSchemePolyfills, "install", EncryptionSchemePolyfills.install);
        (function() {
          "undefined" !== typeof module && module.exports && (module.exports = EncryptionSchemePolyfills);
        })();
      }).call(exportTo, innerGlobal, innerGlobal, void 0);
      if (typeof exports != "undefined")
        for (var k in exportTo.shaka)
          exports[k] = exportTo.shaka[k];
      else if (typeof define == "function" && define.amd)
        define(function() {
          return exportTo.shaka;
        });
      else
        innerGlobal.shaka = exportTo.shaka;
    })();
  }
});

// src/player.ts
var import_mux = __toESM(require_mux(), 1);
var import_object_hash = __toESM(require_object_hash(), 1);

// src/types.ts
var DRMEnums = /* @__PURE__ */ ((DRMEnums2) => {
  DRMEnums2["WIDEVINE"] = "widevine";
  DRMEnums2["FAIRPLAY"] = "fairplay";
  return DRMEnums2;
})(DRMEnums || {});
var TextTrackLabels = {
  eng: "English",
  en: "English",
  und: "English"
};
var SETTINGS_CC_TEXT_SIZE = {
  "Default": "default",
  "50%": 0.5,
  "75%": 0.75,
  "100%": 1,
  "150%": 1.5,
  "200%": 2
};
var SETTINGS_CC_COLORS = {
  Default: "default",
  White: "255, 255, 255",
  Black: "0, 0, 0",
  Gray: "128, 128, 128",
  Yellow: "255, 255, 0",
  Green: "0, 128, 0",
  Cyan: "0, 255, 255",
  Blue: "0, 0, 255",
  Red: "255, 0, 0"
};
var SETTINGS_CC_OPACITY = {
  "Default": "default",
  "25%": 0.2,
  "50%": 0.4,
  "75%": 0.6,
  "100%": 0.8
};

// src/utils.ts
var _Utils = class {
  static async togglePlayPause(ui) {
    if (ui.player.playerState.isCasting) {
      ui.player.castSender.onPlayPause();
      return;
    }
    if (!ui.player.playerState.loaded)
      return;
    if (ui.contextMenu.style.display === "block") {
      ui.contextMenu.style.display = "none";
      return;
    }
    if (ui.optionsMenuWrapper.classList.contains("flex")) {
      this.toggleShowHide(ui.optionsMenuWrapper, "none");
      return;
    }
    const video = ui.videoElement;
    if (video.paused) {
      ui.player.hls.startLoad();
      await video.play();
      ui.player.setPlayerState({ hasUserPaused: false });
      if (typeof ui.player.onPlayCallback === "function") {
        ui.player.onPlayCallback();
      }
    } else {
      ui.player.hls.stopLoad();
      video.pause();
      ui.player.setPlayerState({ hasUserPaused: true });
      if (typeof ui.player.onPauseCallback === "function") {
        ui.player.onPauseCallback();
      }
    }
  }
  static toggleMuteUnMute(ui) {
    if (ui.player.playerState.isCasting) {
      ui.player.castSender.onMuteUnMute();
      return;
    }
    if (!ui.player.playerState.loaded)
      return;
    const video = ui.videoElement;
    if (video.muted) {
      video.muted = false;
    } else {
      video.muted = true;
    }
  }
  static toggleForwardRewind(ui, forward) {
    if (ui.player.playerState.isCasting) {
      if (forward) {
        ui.player.castSender.onForward();
      } else {
        ui.player.castSender.onRewind();
      }
      return;
    }
    if (!ui.player.playerState.loaded)
      return;
    const video = ui.videoElement;
    if (video) {
      if (!video.duration)
        return;
      const ct = video.currentTime;
      const dt = video.duration;
      if (ct >= 0 && dt >= 0) {
        if (forward) {
          video.currentTime = Math.min(ct + 30, dt);
          return;
        }
        video.currentTime = Math.max(0, ct - 15);
      }
    }
  }
  static seekTime(ui, timeInSeconds) {
    if (ui.player.playerState.isCasting)
      return;
    if (!ui.player.playerState.loaded)
      return;
    const video = ui.videoElement;
    if (video) {
      if (!video.duration || video.duration === Infinity)
        return;
      video.currentTime = timeInSeconds;
    }
  }
  static togglePip(ui) {
    if (ui.player.playerState.isCasting)
      return;
    if (!ui.player.playerState.loaded)
      return;
    const video = ui.videoElement;
    if (!document.pictureInPictureEnabled)
      return;
    if (this.isFullScreen()) {
      this.toggleFullScreen(ui);
    }
    if (!!video && video !== document.pictureInPictureElement) {
      video.requestPictureInPicture().catch(() => console.log());
    } else {
      document.exitPictureInPicture().catch(() => console.log());
    }
  }
  static toggleFullScreen(ui) {
    if (ui.player.playerState.isCasting)
      return;
    if (!ui.player.playerState.loaded)
      return;
    const video = ui.videoElement;
    const videoContainer = ui.mainWrapper;
    if (video === document.pictureInPictureElement) {
      this.togglePip(ui);
    }
    if (document.fullscreenElement) {
      document.exitFullscreen();
    } else if (document.webkitFullscreenElement) {
      document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (videoContainer.webkitRequestFullscreen) {
      videoContainer.webkitRequestFullscreen();
    } else if (videoContainer.requestFullscreen) {
      videoContainer.requestFullscreen();
    } else if (videoContainer.msRequestFullscreen) {
      videoContainer.msRequestFullscreen();
    }
  }
  static fullScreenEvent(ui) {
    if (ui.player.playerState.isCasting)
      return;
    if (this.isFullScreen()) {
      ui.controlsFullScreen.innerHTML = this.Icons({
        type: "fullscreen_exit"
      });
    } else {
      ui.controlsFullScreen.innerHTML = this.Icons({
        type: "fullscreen_enter"
      });
    }
  }
  static onEndedReplay(ui) {
    if (ui.player.playerState.isCasting) {
      ui.player.castSender.onRestartPlay();
      return;
    }
    if (!ui.player.playerState.loaded)
      return;
    ui.videoElement.currentTime = 0;
    if (!ui.player.playerState.isPlaying) {
      this.toggleWrappers({ ui, none: true });
      this.togglePlayPause(ui).catch(() => console.log());
    }
  }
  static isFullScreen() {
    if (document.fullscreenElement || document.webkitFullscreenElement || document.msExitFullscreen) {
      return true;
    }
    return false;
  }
  static formatTime(timeInSeconds) {
    if (Number.isNaN(timeInSeconds) || !Number.isFinite(timeInSeconds)) {
      return "00:00";
    }
    const t = timeInSeconds ? new Date(timeInSeconds * 1e3).toISOString().substring(11, 19).split(":") : [];
    if (t.length === 3) {
      if (parseInt(t[0]) === 0)
        return `${t[1]}:${t[2]}`;
      if (parseInt(t[0]) > 0)
        return `${t[0]}:${t[1]}:${t[2]}`;
    }
    return "00:00";
  }
  static getBrowser() {
    const userAgent = navigator.userAgent;
    if (/edg/i.test(userAgent)) {
      return "edge" /* EDGE */;
    }
    if (/chrome|crios/i.test(userAgent) && !/opr|opera|chromium|edg|ucbrowser|googlebot/i.test(userAgent) || /chromium/i.test(userAgent)) {
      return "chrome" /* CHROME */;
    }
    if (/firefox|fxios/i.test(userAgent) && !/seamonkey/i.test(userAgent)) {
      return "firefox" /* FIREFOX */;
    }
    if (/; msie|trident/i.test(userAgent) && !/ucbrowser/i.test(userAgent)) {
      return "ie" /* IE */;
    }
    if (/safari/i.test(userAgent) && !/chromium|edg|ucbrowser|chrome|crios|opr|opera|fxios|firefox/i.test(userAgent)) {
      return "safari" /* SAFARI */;
    }
    if (/opr|opera/i.test(userAgent)) {
      return "opera" /* OPERA */;
    }
    return "unkown" /* UNKNOWN */;
  }
  static delay(ms = 0) {
    return new Promise((resolve) => setTimeout(() => resolve(true), ms));
  }
  static hasHeader(obj) {
    return !!obj && typeof obj === "object" && Object.keys(obj).length === 1 && typeof Object.keys(obj)[0] === "string" && typeof Object.values(obj)[0] === "string";
  }
  static toggleShowHide(elem, show) {
    if (show === "none") {
      elem.classList.remove("flex");
      elem.classList.remove("block");
      elem.classList.add("none");
      return;
    }
    if (show === "block") {
      elem.classList.remove("none");
      elem.classList.remove("flex");
      elem.classList.add("block");
      return;
    }
    if (show === "flex") {
      elem.classList.remove("none");
      elem.classList.remove("block");
      elem.classList.add("flex");
    }
  }
  static toggleOpacity(elem, show) {
    if (elem) {
      if (show) {
        elem.classList.remove("opacity-0");
        elem.classList.add("opacity-1");
      } else {
        elem.classList.remove("opacity-1");
        elem.classList.add("opacity-0");
      }
    }
  }
  static toggleWrappers({
    ui,
    none,
    loading,
    error,
    ended,
    na
  }) {
    const allNone = () => {
      this.toggleShowHide(ui.loaderWrapper, "none");
      this.toggleShowHide(ui.errorWrapper, "none");
      this.toggleShowHide(ui.endedWrapper, "none");
      this.toggleShowHide(ui.contentNotAvailableWrapper, "none");
      ui.player.setPlayerState({
        uiState: "none"
      });
    };
    if (none) {
      allNone();
      return;
    }
    if (loading) {
      allNone();
      this.toggleShowHide(ui.loaderWrapper, "flex");
      ui.player.setPlayerState({ uiState: "loading" });
      return;
    }
    if (error) {
      allNone();
      this.toggleShowHide(ui.errorWrapper, "flex");
      ui.player.setPlayerState({ uiState: "error" });
      return;
    }
    if (ended) {
      allNone();
      this.toggleShowHide(ui.endedWrapper, "flex");
      ui.player.setPlayerState({ uiState: "ended" });
      return;
    }
    if (na) {
      allNone();
      this.toggleShowHide(ui.contentNotAvailableWrapper, "flex");
    }
  }
  static fatelErrorRetry(ui) {
    const maxCount = ui.player.getConfig().maxRetryCount;
    console.log("RETRY #", this.retryCount, this.fairPlayErrorCount);
    if (this.retryCount === maxCount) {
      this.toggleWrappers({ ui, error: true });
      return;
    }
    this.toggleWrappers({ ui, loading: true });
    this.retryCount += 1;
    ui.player.retry();
  }
  static resetRetryCounter() {
    this.retryCount = 0;
    this.fairPlayErrorCount = 0;
  }
  static async getMimeType(url) {
    if (url) {
      try {
        if (/.*(\.mp4).*$/.test(url))
          return "video/mp4" /* MP4 */;
        if (/.*(\.webm).*$/.test(url))
          return "video/webm" /* WEBM */;
        if (/.*(\.ogg).*$/.test(url))
          return "audio/ogg" /* OGG */;
        if (/.*(\.ogv).*$/.test(url))
          return "audio/ogg" /* OGG */;
        if (/.*(\.m3u8).*$/.test(url))
          return "application/x-mpegurl" /* M3U8_1 */;
        if (/.*(\.mpd).*$/.test(url))
          return "application/dash+xml" /* MPD */;
        const resp = await fetch(url, { method: "HEAD" });
        const contentType = resp.headers.get("content-type");
        if (contentType) {
          if (contentType.includes("application/x-mpegurl" /* M3U8_1 */)) {
            return "application/x-mpegurl" /* M3U8_1 */;
          }
          if (contentType.includes("application/vnd.apple.mpegurl" /* M3U8_2 */)) {
            return "application/vnd.apple.mpegurl" /* M3U8_2 */;
          }
          if (contentType.includes("application/dash+xml" /* MPD */))
            return "application/dash+xml" /* MPD */;
        }
        return "none" /* NONE */;
      } catch (e2) {
        return "none" /* NONE */;
      }
    }
    return "none" /* NONE */;
  }
  static urlCheck(source) {
    if (!source.url) {
      console.error(`Incorrect Source: ${JSON.stringify(source, null, 2)}`);
      return false;
    }
    return true;
  }
  static checkTextTracks(ui) {
    if (ui.player.getPlayerState().loaded) {
      if (this.checkTextTracksTimer)
        clearTimeout(this.checkTextTracksTimer);
      const tracks = ui.getVideoElement().textTracks;
      const tracksData = Object.keys(tracks || {}).reduce((a2, c2) => {
        tracks[c2].mode = "hidden";
        return tracks[c2].kind !== "metadata" && !!Object.keys(tracks[c2].cues || {}).length ? [
          ...a2,
          {
            id: c2,
            label: tracks[c2].label,
            lang: tracks[c2].language,
            track: tracks[c2]
          }
        ] : [...a2];
      }, []);
      if (!tracksData.length) {
        this.checkTextTracksTimer = setTimeout(() => this.checkTextTracks(ui), 500);
      } else {
        ui.player.setPlayerState({ textTracks: tracksData });
        ui.controlsCloseCaptionButton.classList.remove("none");
        const id = sessionStorage.getItem("closeCaptionID" /* CC_ID */);
        if (id)
          this.setSelectedTextTrack(ui, id);
        this.setCloseCaptionButtonUI(ui);
      }
    }
  }
  static setCloseCaptionButtonUI(ui) {
    if (ui.player.playerState.selectedTextTrackId) {
      ui.controlsCloseCaptionButton.innerHTML = this.Icons({
        type: "cc_enabled"
      });
    } else {
      ui.controlsCloseCaptionButton.innerHTML = this.Icons({
        type: "cc_disabled"
      });
    }
  }
  static isLive(ui) {
    if (ui.videoElement.duration === Infinity || ui.player.shaka.isLive()) {
      return true;
    }
    return false;
  }
  static onVolumeSliderChange(ui, e2) {
    const { value } = e2.target;
    ui.volumeSliderValue = value;
    const volume = Number(value);
    const video = ui.videoElement;
    video.volume = volume;
    if (volume > 0) {
      if (video.muted) {
        video.muted = false;
      }
    } else {
      video.muted = true;
    }
  }
  static onVideoProgressChange(ui, e2) {
    const { value } = e2.target;
    ui.progressSliderValue = value;
    ui.videoElement.currentTime = Number(value);
  }
  static sliderColorValue(slider) {
    if (!slider)
      return;
    const value = (Number(slider.value) - Number(slider.min)) / (Number(slider.max) - Number(slider.min)) * 100;
    slider.style.background = `linear-gradient(to right, #1C6FEE 0%, #1C6FEE ${value}%, rgba(240, 240, 240, 0.4) ${value}%, rgba(240, 240, 240, 0.4) 100%)`;
  }
  static enterPIP(ui, callback) {
    ui.controlsPIP.innerHTML = this.Icons({ type: "pip_exit" });
    if (typeof callback === "function")
      callback();
  }
  static leavePIP(ui, callback) {
    ui.controlsPIP.innerHTML = this.Icons({ type: "pip_enter" });
    if (typeof callback === "function")
      callback();
  }
  static setSelectedTextTrack(ui, trackId) {
    ui.optionsMenuState = "none" /* NONE */;
    this.toggleShowHide(ui.optionsMenuWrapper, "none");
    if (trackId === ui.player.playerState.selectedTextTrackId)
      return;
    ui.player.setPlayerState({ selectedTextTrackId: trackId });
    this.setCloseCaptionButtonUI(ui);
    this.toggleTextTracks(ui, trackId);
  }
  static toggleTextTracks(ui, trackId) {
    const tracks = ui.player.playerState.textTracks;
    this.resetCloseCaptionContainer(ui);
    const cuesEvent = this.activeCuesEvent(ui);
    if (tracks?.length) {
      tracks.forEach((t) => {
        t.track.removeEventListener("cuechange", cuesEvent, true);
      });
      if (trackId) {
        Object.keys(ui.videoElement.textTracks || {}).forEach((t) => {
          if (ui.videoElement)
            ui.videoElement.textTracks[t].mode = "disabled";
        });
        Object.keys(ui.videoElement.textTracks || {}).forEach((t) => {
          if (ui.videoElement)
            ui.videoElement.textTracks[t].mode = "hidden";
        });
        tracks[trackId].track.addEventListener("cuechange", cuesEvent, true);
      } else {
        Object.keys(ui.videoElement.textTracks || {}).forEach((t) => {
          if (ui.videoElement)
            ui.videoElement.textTracks[t].mode = "disabled";
        });
      }
    }
  }
  static setCloseCaptionStyles(ui, styles = {}, isFullScreen = false) {
    const storedStyled = localStorage.getItem("closeCaptionStyles" /* CC_STYLES */);
    let storedStyledPased = {};
    if (storedStyled) {
      storedStyledPased = JSON.parse(storedStyled);
    }
    const values = {
      textSize: SETTINGS_CC_TEXT_SIZE.Default,
      textColor: SETTINGS_CC_COLORS.Default,
      bgColor: SETTINGS_CC_COLORS.Default,
      bgOpacity: SETTINGS_CC_OPACITY.Default,
      ...storedStyledPased,
      ...styles
    };
    localStorage.setItem("closeCaptionStyles" /* CC_STYLES */, JSON.stringify({ ...values }));
    const elems = ui.closeCaptionsContainer.getElementsByClassName(
      "close-caption"
    );
    if (elems?.length) {
      if (values.textColor === SETTINGS_CC_COLORS.Default) {
        for (let i = 0, len = elems.length; i < len; i++) {
          elems[i].style.color = `rgb(${SETTINGS_CC_COLORS.White})`;
        }
      } else {
        for (let i = 0, len = elems.length; i < len; i++) {
          elems[i].style.color = `rgb(${values.textColor})`;
        }
      }
      for (let i = 0, len = elems.length; i < len; i++) {
        elems[i].style.backgroundColor = `rgba(${values.bgColor === "default" ? SETTINGS_CC_COLORS.Black : values.bgColor},${values.bgOpacity === "default" ? SETTINGS_CC_OPACITY["100%"] : values.bgOpacity})`;
      }
      if (values.textSize === SETTINGS_CC_TEXT_SIZE.Default) {
        for (let i = 0, len = elems.length; i < len; i++) {
          elems[i].style.fontSize = isFullScreen ? `${SETTINGS_CC_TEXT_SIZE["100%"] + 1}rem` : `${SETTINGS_CC_TEXT_SIZE["100%"]}rem`;
        }
      } else {
        for (let i = 0, len = elems.length; i < len; i++) {
          elems[i].style.fontSize = isFullScreen ? `${Number(values.textSize) + 1}rem` : `${Number(values.textSize)}rem`;
        }
      }
    }
  }
  static getCloseCaptionStyles() {
    const storedStyled = localStorage.getItem("closeCaptionStyles" /* CC_STYLES */);
    let storedStyledPased = {};
    if (storedStyled) {
      storedStyledPased = JSON.parse(storedStyled);
    }
    const textSize = Object.keys(SETTINGS_CC_TEXT_SIZE).find(
      // @ts-ignore
      (k2) => SETTINGS_CC_TEXT_SIZE[k2] === storedStyledPased.textSize
    );
    const textColor = Object.keys(SETTINGS_CC_COLORS).find(
      // @ts-ignore
      (k2) => SETTINGS_CC_COLORS[k2] === storedStyledPased.textColor
    );
    const bgColor = Object.keys(SETTINGS_CC_COLORS).find(
      // @ts-ignore
      (k2) => SETTINGS_CC_COLORS[k2] === storedStyledPased.bgColor
    );
    const bgOpacity = Object.keys(SETTINGS_CC_OPACITY).find(
      // @ts-ignore
      (k2) => SETTINGS_CC_OPACITY[k2] === storedStyledPased.bgOpacity
    );
    return { textColor, textSize, bgColor, bgOpacity };
  }
  static isCastSenderFrameworkAvailable() {
    return window?.cast && window?.chrome?.cast && window?.cast?.framework;
  }
  static Icons({
    type,
    iconSize = "24px",
    fill = "#fff"
  }) {
    switch (type) {
      case "play":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M8 5v14l11-7L8 5z"/></svg>`;
      case "pause":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/></svg>`;
      case "volume_up":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/></svg>`;
      case "volume_down":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M18.5 12c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM5 9v6h4l5 5V4L9 9H5z"/></svg>`;
      case "volume_off":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M4.34 2.93L2.93 4.34 7.29 8.7 7 9H3v6h4l5 5v-6.59l4.18 4.18c-.65.49-1.38.88-2.18 1.11v2.06c1.34-.3 2.57-.92 3.61-1.75l2.05 2.05 1.41-1.41L4.34 2.93zM19 12c0 .82-.15 1.61-.41 2.34l1.53 1.53c.56-1.17.88-2.48.88-3.87 0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zm-7-8l-1.88 1.88L12 7.76zm4.5 8c0-1.77-1.02-3.29-2.5-4.03v1.79l2.48 2.48c.01-.08.02-.16.02-.24z"/></svg>`;
      case "cast_enter":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0zm0 0h24v24H0V0z" fill="none"/><path d="M23 3H1v5h2V5h18v14h-7v2h9V3zM1 18v3h3c0-1.66-1.34-3-3-3zm0-4v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm0-4v2c4.97 0 9 4.03 9 9h2c0-6.08-4.93-11-11-11z"/></svg>`;
      case "cast_exit":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0zm0 0h24v24H0V0z" fill="none"/><path d="M1 18v3h3c0-1.66-1.34-3-3-3zm0-4v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm18-7H5v1.63c3.96 1.28 7.09 4.41 8.37 8.37H19V7zM1 10v2c4.97 0 9 4.03 9 9h2c0-6.08-4.93-11-11-11zm22-7H1v5h2V5h18v14h-7v2h9V3z"/></svg>`;
      case "airplay_exit":
      case "airplay_enter":
        return `<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><g><rect fill="none" height="24" width="24"/><rect fill="none" height="24" width="24"/><rect fill="none" height="24" width="24"/></g><g><path d="M6,22h12l-6-6L6,22z M23,3H1v16h6v-2H3V5h18v12h-4v2h6V3z"/></g></svg>`;
      case "fullscreen_enter":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg>`;
      case "fullscreen_exit":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"/></svg>`;
      case "pip_enter":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M19 11h-8v6h8v-6zm4 10V3H1v18h22zm-2-1.98H3V4.97h18v14.05z"/></svg>`;
      case "pip_exit":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M23 3H1v18h22V3zm-2 16h-9v-6h9v6z"/></svg>`;
      case "settings":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M19.44 12.99l-.01.02c.04-.33.08-.67.08-1.01 0-.34-.03-.66-.07-.99l.01.02 2.44-1.92-2.43-4.22-2.87 1.16.01.01c-.52-.4-1.09-.74-1.71-1h.01L14.44 2H9.57l-.44 3.07h.01c-.62.26-1.19.6-1.71 1l.01-.01-2.88-1.17-2.44 4.22 2.44 1.92.01-.02c-.04.33-.07.65-.07.99 0 .34.03.68.08 1.01l-.01-.02-2.1 1.65-.33.26 2.43 4.2 2.88-1.15-.02-.04c.53.41 1.1.75 1.73 1.01h-.03L9.58 22h4.85s.03-.18.06-.42l.38-2.65h-.01c.62-.26 1.2-.6 1.73-1.01l-.02.04 2.88 1.15 2.43-4.2s-.14-.12-.33-.26l-2.11-1.66zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"/></svg>`;
      case "cc_enabled":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none"/><path d="M21 4H3v16h18V4zm-10 7H9.5v-.5h-2v3h2V13H11v2H6V9h5v2zm7 0h-1.5v-.5h-2v3h2V13H18v2h-5V9h5v2z"/></svg>`;
      case "cc_disabled":
        return `<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><rect fill="none" height="24" width="24"/><path d="M6.83,4H21v14.17L17.83,15H18v-2h-1.5v0.5h-0.17l-1.83-1.83V10.5h2V11H18V9h-5v1.17L6.83,4z M19.78,22.61L17.17,20H3V5.83 L1.39,4.22l1.41-1.41l18.38,18.38L19.78,22.61z M11,13.83L10.17,13H9.5v0.5h-2v-3h0.17L6.17,9H6v6h5V13.83z"/></svg>`;
      case "arrow_back":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0V0z" fill="none" opacity=".87"/><path d="M17.51 3.87L15.73 2.1 5.84 12l9.9 9.9 1.77-1.77L9.38 12l8.13-8.13z"/></svg>`;
      case "replay":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0z" fill="none"/><path d="M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"/></svg>`;
      case "rewind":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0z" fill="none"/><path d="M11 18V6l-8.5 6 8.5 6zm.5-6l8.5 6V6l-8.5 6z"/></svg>`;
      case "forward":
        return `<svg xmlns="http://www.w3.org/2000/svg" height=${iconSize} viewBox="0 0 24 24" width=${iconSize} fill=${fill}><path d="M0 0h24v24H0z" fill="none"/><path d="M4 18l8.5-6L4 6v12zm9-12v12l8.5-6L13 6z"/></svg>`;
      default:
        return ``;
    }
  }
};
var Utils = _Utils;
__publicField(Utils, "retryCount", 0);
__publicField(Utils, "fairPlayErrorCount", 0);
__publicField(Utils, "checkTextTracksTimer", null);
__publicField(Utils, "activeCuesEvent", (ui) => {
  return (e2) => {
    let text = [];
    const cues = e2?.target?.activeCues;
    if (Object.keys(cues || {})?.length) {
      text = Object.keys(cues).reduce((a2, c2) => {
        return [...a2, cues[c2].text];
      }, []);
    }
    _Utils.resetCloseCaptionContainer(ui);
    const container = ui.closeCaptionsContainer;
    if (container) {
      if (text?.length) {
        text.forEach((txt) => {
          const wrapper = document.createElement("div");
          wrapper.className = "close-caption";
          wrapper.id = "close-caption";
          wrapper.innerHTML = txt;
          container.appendChild(wrapper);
        });
        _Utils.setCloseCaptionStyles(ui, {}, _Utils.isFullScreen());
        container.style.display = "flex";
      }
    }
  };
});
__publicField(Utils, "resetCloseCaptionContainer", (ui) => {
  const container = ui.closeCaptionsContainer;
  if (container) {
    container.style.display = "none";
    while (container.firstChild) {
      container.removeChild(container.firstChild);
    }
  }
});
__publicField(Utils, "addEventCallback", (ui, event) => {
  if (ui.player.eventCallbacks?.length) {
    const idx = ui.player.eventCallbacks.findIndex((e2) => e2.event === event);
    if (idx !== -1) {
      const call = ui.player.eventCallbacks[idx];
      if (typeof call.callback === "function")
        call.callback();
    }
  }
});

// src/airplay.ts
var AirPlay = class {
  ui;
  constructor(ui) {
    this.ui = ui;
  }
  webkitPlaybackTargetAvailabilityChangedEvent = (airplay, video) => {
    return (event) => {
      switch (event?.availability) {
        case "available":
          airplay.innerHTML = Utils.Icons({
            type: "airplay_enter"
          });
          airplay.classList.remove("none");
          airplay.onclick = () => {
            video.webkitShowPlaybackTargetPicker();
          };
          break;
        case "not-available":
        default:
          airplay.innerHTML = "";
          airplay.classList.add("none");
          break;
      }
    };
  };
  webkitCurrentPlaybackTargetIsWirelessChangedEvent = (airplay, isLive, volume) => {
    return (event) => {
      const state = event?.target?.remote?.state;
      if (state === "connected") {
        airplay.innerHTML = Utils.Icons({
          type: "airplay_exit"
        });
        Utils.toggleShowHide(volume, "none");
        this.ui.player.setPlayerState({ isAirplay: true });
        if (this.ui.player.playerState.isPlaying && isLive) {
          this.ui.player.reloadPlayer().catch(() => console.log());
        }
      } else if (state === "disconnected") {
        airplay.innerHTML = Utils.Icons({
          type: "airplay_enter"
        });
        Utils.toggleShowHide(volume, "flex");
        this.ui.player.setPlayerState({ isAirplay: false });
        if (this.ui.player.playerState.isPlaying && isLive) {
          this.ui.player.reloadPlayer().catch(() => console.log());
        }
      }
    };
  };
  init = () => {
    if (Utils.getBrowser() === "safari" /* SAFARI */ && window.WebKitPlaybackTargetAvailabilityEvent) {
      const video = this.ui.videoElement;
      const airplay = this.ui.controlsRemotePlaybackButton;
      const volume = this.ui.controlsVolumeWrapper;
      const isLive = Utils.isLive(this.ui);
      const webkitPlaybackTargetAvailabilityChanged = this.webkitPlaybackTargetAvailabilityChangedEvent(airplay, video);
      const webkitCurrentPlaybackTargetIsWirelessChanged = this.webkitCurrentPlaybackTargetIsWirelessChangedEvent(airplay, isLive, volume);
      video.addEventListener(
        "webkitplaybacktargetavailabilitychanged",
        webkitPlaybackTargetAvailabilityChanged
      );
      video.addEventListener(
        "webkitcurrentplaybacktargetiswirelesschanged",
        webkitCurrentPlaybackTargetIsWirelessChanged
      );
    }
  };
};

// src/cast.sender.ts
var MESSAGE_NAMESPACE = "urn:x-cast:com.multiplayer.app";
var CastingSender = class {
  ui;
  androidReceiverCompatible = false;
  castReceiverId = null;
  hasReceivers = false;
  session = null;
  receiverName = "";
  apiReady = false;
  isCasting = false;
  seekTime = -1;
  playerCastingButton;
  isTextTrackVisible = false;
  loaded = false;
  stoppedForced = false;
  type = null;
  constructor(ui) {
    this.ui = ui;
  }
  load = () => {
    window.__onGCastApiAvailable = (loaded) => {
      if (loaded && window?.cast && window?.chrome?.cast && window?.cast?.framework) {
        this.loaded = true;
      }
    };
    window.addEventListener("unload", () => {
      if (this.isCasting) {
        this.stopCasting();
      }
    });
  };
  init = () => {
    if (Utils.getBrowser() !== "chrome" /* CHROME */ && Utils.getBrowser() !== "edge" /* EDGE */) {
      return;
    }
    this.playerCastingButton = this.ui.controlsRemotePlaybackButton;
    this.castReceiverId = this.ui.player.config.castReceiverId;
    if (!this.loaded)
      return;
    if (!this.castReceiverId)
      return;
    this.apiReady = true;
    if (window?.chrome?.cast?.SessionRequest) {
      const sessionRequest = new window.chrome.cast.SessionRequest(
        this.castReceiverId,
        [],
        null,
        this.androidReceiverCompatible,
        null
      );
      const apiConfig = new window.chrome.cast.ApiConfig(
        sessionRequest,
        (session) => this.onSessionInitiated(session),
        (availability) => this.onReceiverStatusChange(availability),
        "origin_scoped"
      );
      window.chrome.cast.initialize(
        apiConfig,
        () => this.onInitSuccess(),
        (error) => this.onInitError(error)
      );
    }
  };
  onInitSuccess = () => {
    console.log();
  };
  onInitError = (error) => {
    console.log("onInitError: ", error);
    this.hasReceivers = false;
    this.isCasting = false;
  };
  onSessionInitiated = (session) => {
    this.session = session;
    this.session.addUpdateListener(this.onConnectionStatusChanged.bind(this));
    this.session.addMessageListener(
      MESSAGE_NAMESPACE,
      (namespace, data) => this.onMessageReceived(namespace, data)
    );
    this.onConnectionStatusChanged();
  };
  removeListeners = () => {
    if (this.session) {
      this.session.removeUpdateListener(this.onConnectionStatusChanged.bind(this));
      this.session.removeMessageListener(
        MESSAGE_NAMESPACE,
        (namespace, data) => this.onMessageReceived(namespace, data)
      );
    }
  };
  onReceiverStatusChange = (availability) => {
    this.hasReceivers = availability === "available";
    if (this.ui.player.isInitialized) {
      if (this.hasReceivers) {
        this.playerCastingButton.innerHTML = Utils.Icons({
          type: "cast_enter"
        });
        this.playerCastingButton.classList.remove("none");
        this.playerCastingButton.onclick = this.cast.bind(this);
      } else {
        this.playerCastingButton.innerHTML = "";
        this.playerCastingButton.classList.add("none");
      }
    }
  };
  onConnectionStatusChanged = () => {
    const connected = this.session && this.session.status === "connected";
    if (!this.isCasting && connected) {
    }
    if (this.isCasting && !connected) {
    }
    this.seekTime = this.ui.player.isInitialized ? this.ui.getVideoElement().currentTime : -1;
    this.isCasting = connected;
    this.receiverName = connected ? this.session.receiver.friendlyName : "";
    if (this.isCasting) {
      this.playerCastingButton.innerHTML = Utils.Icons({
        type: "cast_exit"
      });
      this.ui.mainWrapper.classList.add("none");
      this.ui.player.removePlayer();
      setTimeout(() => {
        this.ui.player.setPlayerState({ isCasting: true });
        this.ui.addCastingUIElements();
        this.CastingUIBinds();
        this.stoppedForced = false;
      }, 300);
    } else {
      this.ui.player.setPlayerState({ isCasting: false });
      this.ui.removeCastingUIElements();
      if (this.stoppedForced)
        return;
      this.ui.player.init({
        elem: this.ui.container,
        source: this.ui.player.source,
        config: this.ui.player.config,
        contextLogoUrl: this.ui.contextLogoUrl,
        eventCallbacks: this.ui.player.eventCallbacks,
        onPauseCallback: this.ui.player.onPauseCallback,
        onPlayCallback: this.ui.player.onPlayCallback,
        onLeavePIPCallback: this.ui.player.onLeavePIPCallback,
        onEnterPIPCallback: this.ui.player.onEnterPIPCallback,
        onPlayerStateChange: this.ui.player.onPlayerStateChange
      }).catch(() => {
      });
    }
  };
  CastingUIBinds = () => {
    this.ui.castingTitle.innerHTML = `Casting to <b>${this.receiverName}</b>`;
    this.ui.castingRemotePlaybackButton.onclick = this.cast.bind(this);
    this.ui.castingPlayPauseButton.onclick = this.onPlayPause.bind(this);
    this.ui.castingVolumeButtoon.onclick = this.onMuteUnMute.bind(this);
    this.ui.castingForwardButton.onclick = this.onForward.bind(this);
    this.ui.castingRewindButton.onclick = this.onRewind.bind(this);
    this.ui.castingRestartPlayButton.onclick = this.onRestartPlay.bind(this);
    this.ui.castingCloseCaptionButton.onclick = this.onTextTracksChange.bind(this);
  };
  onConnectionError = (error) => {
    if (error?.code === "timeout") {
      this.stopCasting();
    }
  };
  stopCasting = () => {
    try {
      this.session.stop(
        () => {
          this.stoppedForced = true;
        },
        () => {
          this.stoppedForced = true;
        }
      );
    } catch (_err) {
      console.log();
    }
  };
  cast = () => {
    if (!this.apiReady) {
      console.log("error: ", "api is not ready.");
      return;
    }
    if (!this.hasReceivers) {
      console.log("error: ", "no receivers.");
      return;
    }
    window.chrome.cast.requestSession(
      (session) => this.onSessionInitiated(session),
      (error) => this.onConnectionError(error)
    );
  };
  onMessageReceived = (_namespace, message) => {
    try {
      const msg = JSON.parse(message);
      const { type, data } = msg;
      switch (type) {
        case "info": {
          const { currentTime } = data;
          sessionStorage.setItem("videoCurrentTime" /* VIDOE_CURRENT_TIME */, String(Math.floor(currentTime)));
          break;
        }
        case "player_loaded": {
          const { texts, variants } = data;
          this.ui.player.setPlayerState({ textTracks: texts || [] });
          this.ui.player.setPlayerState({ videoTracks: variants || [] });
          if (Array.isArray(texts) && texts.length) {
            this.ui.castingCloseCaptionButton.classList.remove("none");
          }
          break;
        }
        case "player": {
          const { event, value } = data;
          switch (event) {
            case "playing":
              this.ui.player.setPlayerState({ isPlaying: value });
              this.ui.castingPlayPauseButton.innerHTML = value ? Utils.Icons({ type: "pause" }) : Utils.Icons({ type: "play" });
              break;
            case "mute":
              this.ui.player.setPlayerState({ isMuted: value });
              this.ui.castingVolumeButtoon.innerHTML = value ? Utils.Icons({ type: "volume_off" }) : Utils.Icons({ type: "volume_up" });
              break;
            case "text-tracks":
              this.isTextTrackVisible = value;
              this.ui.castingCloseCaptionButton.innerHTML = value ? Utils.Icons({ type: "cc_enabled" }) : Utils.Icons({ type: "cc_disabled" });
              break;
            case "abort":
            case "emptied":
            case "ended":
              this.ui.castingPlayPauseButton.classList.add("none");
              this.ui.castingVolumeButtoon.classList.add("none");
              this.ui.castingForwardButton.classList.add("none");
              this.ui.castingRestartPlayButton.classList.add("none");
              this.ui.castingRewindButton.classList.add("none");
              this.ui.castingCloseCaptionButton.classList.add("none");
              break;
            case "canplaythrough":
            case "loadeddata":
              Utils.addEventCallback(this.ui, "loadedmetadata" /* LOADEDMETADATA */);
              this.ui.castingPlayPauseButton.classList.remove("none");
              this.ui.castingVolumeButtoon.classList.remove("none");
              if (this.type !== "channel") {
                this.ui.castingForwardButton.classList.remove("none");
                this.ui.castingRestartPlayButton.classList.remove("none");
                this.ui.castingRewindButton.classList.remove("none");
              }
              break;
            default:
              break;
          }
          break;
        }
        default:
          break;
      }
    } catch (e2) {
      console.log("onMessageReceived: ", "error in parse", e2);
    }
  };
  sendMessage = (data) => {
    const serialized = JSON.stringify(data);
    if (this.isCasting && this.session) {
      try {
        this.session.sendMessage(
          MESSAGE_NAMESPACE,
          serialized,
          () => {
          },
          (e2) => console.log("sendMessage error: ", e2)
        );
      } catch (e2) {
        console.log("try sendMessage error", e2);
      }
    }
  };
  onPlayPause = () => {
    this.sendMessage({
      type: "player",
      data: {
        event: "playing",
        value: !this.ui.player.playerState.isPlaying
      }
    });
    if (!this.ui.player.playerState.isPlaying) {
      this.ui.player?.onPlayCallback?.();
    } else {
      this.ui.player?.onPauseCallback?.();
    }
  };
  onMuteUnMute = () => {
    this.sendMessage({
      type: "player",
      data: {
        event: "mute",
        value: !this.ui.player.playerState.isMuted
      }
    });
  };
  onForward = () => {
    this.sendMessage({
      type: "player",
      data: {
        event: "forward",
        value: 10
      }
    });
  };
  onRewind = () => {
    this.sendMessage({
      type: "player",
      data: {
        event: "rewind",
        value: 10
      }
    });
  };
  onRestartPlay = () => {
    this.sendMessage({
      type: "player",
      data: {
        event: "restart",
        value: true
      }
    });
  };
  onTextTracksChange = () => {
    this.sendMessage({
      type: "player",
      data: {
        event: "text-tracks",
        value: !this.isTextTrackVisible
      }
    });
  };
  sendSourceInfo = ({
    type,
    stream,
    vidgoToken,
    seekTime
  }) => {
    this.sendMessage({
      type: "stream",
      data: {
        type,
        stream,
        seekTime,
        vidgoToken
      }
    });
    this.type = type;
  };
  sendMediaInfo = ({
    vidTitle,
    description,
    logoUrl
  }) => {
    this.sendMessage({
      type: "media_info",
      data: {
        vidTitle,
        description,
        logoUrl
      }
    });
  };
  sendRefreshToken = (token) => {
    this.sendMessage({
      type: "vidgo",
      data: { token }
    });
  };
};

// src/hls.ts
var import_hls = __toESM(require_hls_min(), 1);
var HlsPlayer = class {
  ui;
  player = null;
  isHlsStopped = false;
  constructor(ui) {
    this.ui = ui;
  }
  init = async (video, source, debug) => {
    if (!import_hls.default.isSupported()) {
      console.error("HLS not supported.");
      return Promise.reject();
    }
    Utils.urlCheck(source);
    if (!this.player) {
      this.player = new import_hls.default({
        ...import_hls.default.DefaultConfig,
        debug,
        startPosition: source.startTime ?? -1,
        liveDurationInfinity: true,
        enableWorker: true,
        // lowLatencyMode: true,
        // backBufferLength: 30,
        maxBufferLength: 30,
        // maxMaxBufferLength: 300,
        maxBufferSize: 3e7
        // maxLoadingDelay: 1,
        // maxBufferLength: 10,
        // maxMaxBufferLength: 300,
        // maxBufferSize: 30 * 1000 * 1000,
        // liveSyncDurationCount: 1,
        // progressive: true,
      });
    }
    this.player.attachMedia(video);
    this.player.on(import_hls.default.Events.MEDIA_ATTACHED, () => {
      this.player.loadSource(source.url ?? "");
    });
    this.addEvents();
    return Promise.resolve();
  };
  destroy = async () => {
    if (this.player) {
      this.player.stopLoad();
      this.player.detachMedia();
      this.player.destroy();
      this.player = null;
    }
    return Promise.resolve();
  };
  startLoad = (startPosition) => {
    if (this.player && this.isHlsStopped) {
      this.player.startLoad(startPosition);
      this.isHlsStopped = false;
    }
  };
  stopLoad = () => {
    if (this.player) {
      this.player.stopLoad();
      this.isHlsStopped = true;
    }
  };
  addEvents = () => {
    if (this.player) {
      this.player.on(import_hls.default.Events.ERROR, this.errorEvent.bind(this));
    }
  };
  removeEvents = () => {
    if (this.player) {
      this.player.removeAllListeners();
    }
  };
  errorEvent = (e2, d2) => {
    console.log("hls-error", e2, d2);
    if (d2?.details === "bufferStalledError") {
      Utils.toggleWrappers({ ui: this.ui, loading: true });
    }
    if (d2?.fatal) {
      Utils.fatelErrorRetry(this.ui);
    }
  };
};

// src/native.ts
var NativePlayer = class {
  ui;
  constructor(ui) {
    this.ui = ui;
  }
  init = async (video, source) => {
    Utils.urlCheck(source);
    video.src = source.url || "";
    return Promise.resolve();
  };
  destroy = async () => {
    this.ui.videoElement.src = "";
    this.ui.videoElement.load();
  };
};

// src/shaka.ts
var import_shaka_player_compiled = __toESM(require_shaka_player_compiled_debug(), 1);
var ShakaPlayer = class {
  ui;
  player;
  isSupported = false;
  contentId = null;
  url = void 0;
  constructor(ui) {
    this.ui = ui;
    this.player = new import_shaka_player_compiled.default.Player();
    this.isSupported = import_shaka_player_compiled.default.Player.isBrowserSupported();
    if (this.isSupported) {
      import_shaka_player_compiled.default.polyfill.installAll();
    }
  }
  isLive = () => {
    return this.player.isLive();
  };
  init = async (video, source, debug, mimeType, isVidgo) => {
    try {
      if (!this.isSupported) {
        console.log("Shaka not supported");
        return;
      }
      Utils.urlCheck(source);
      await this.player.attach(video);
      this.ui.player.setPlayerState({ player: "shaka" /* SHAKA */ });
      this.url = source.url;
      const isSafari = Utils.getBrowser() === "safari" /* SAFARI */;
      import_shaka_player_compiled.default.log.setLevel(
        debug ? import_shaka_player_compiled.default.log.Level.DEBUG : import_shaka_player_compiled.default.log.Level.NONE
      );
      this.player.resetConfiguration();
      this.player.getNetworkingEngine()?.clearAllResponseFilters();
      this.player.getNetworkingEngine()?.clearAllRequestFilters();
      this.addEvents();
      let drmConfig = {};
      const hasHeader = Utils.hasHeader(source.drm?.licenseHeader);
      if (isSafari && source.drm?.drmType === "fairplay" /* FAIRPLAY */) {
        if (isVidgo) {
          drmConfig = this.basicDrmConfigs(source);
          this.vidgoResponseFilter();
        } else if (hasHeader) {
          drmConfig = this.basicDrmConfigs(source, false);
          this.buydrmFairplayRequestFilter(source);
          this.buyDrmFairplayResponseFilter();
        } else {
          drmConfig = this.basicDrmConfigs(source);
        }
      } else if (source.drm?.drmType === "widevine" /* WIDEVINE */) {
        drmConfig = this.basicDrmConfigs(source);
        if (hasHeader) {
          this.buydrmWidevineRequestFilter(source);
        }
      }
      this.player.configure({
        streaming: {
          alwaysStreamText: true,
          autoLowLatencyMode: true,
          jumpLargeGaps: true,
          lowLatencyMode: false,
          updateIntervalSeconds: 0.1,
          preferNativeHls: true,
          useNativeHlsOnSafari: true,
          stallEnabled: true,
          stallSkip: 0
        },
        ...drmConfig
      });
      this.player.load(this.url ?? "", null, mimeType).then(() => {
        video.play().catch(() => console.log());
        video.currentTime = source.startTime ?? -1;
      }).catch(() => {
      });
    } catch (e2) {
      console.log("shaka-init-error", e2);
      this.ui.player.setPlayerState({ player: "none" /* NONE */ });
      return Promise.reject();
    }
  };
  buydrmWidevineRequestFilter = (source) => {
    const filter = this.buydrmWidevineRequestFilterImpl(source);
    this.player.getNetworkingEngine()?.registerRequestFilter(filter);
  };
  buydrmFairplayRequestFilter = (source) => {
    const filter = this.buydrmFairplayRequestFilterImpl(source);
    this.player.getNetworkingEngine()?.registerRequestFilter(filter);
  };
  buyDrmFairplayResponseFilter = () => {
    const filter = this.buyDrmFairplayResponseFilterImpl();
    this.player.getNetworkingEngine()?.registerResponseFilter(filter);
  };
  vidgoResponseFilter = () => {
    const filter = this.vidgoResponseFilterImpl();
    this.player.getNetworkingEngine()?.registerResponseFilter(filter);
  };
  buydrmWidevineRequestFilterImpl = (source) => {
    return (type, req) => {
      if (type === import_shaka_player_compiled.default.net.NetworkingEngine.RequestType.LICENSE) {
        req.headers = {
          ...req.headers,
          ...source.drm?.licenseHeader
        };
      }
    };
  };
  buydrmFairplayRequestFilterImpl = (source) => {
    return (type, req) => {
      if (type === import_shaka_player_compiled.default.net.NetworkingEngine.RequestType.LICENSE) {
        const originalPayload = new Uint8Array(req.body);
        const base64Payload = import_shaka_player_compiled.default.util.Uint8ArrayUtils.toStandardBase64(originalPayload);
        const params = `spc=${base64Payload}&assetId=${this.contentId}`;
        req.headers = {
          ...req.headers,
          "Content-Type": "application/x-www-form-urlencoded",
          ...source.drm?.licenseHeader
        };
        req.body = import_shaka_player_compiled.default.util.StringUtils.toUTF8(params);
      }
    };
  };
  buyDrmFairplayResponseFilterImpl = () => {
    return (type, resp) => {
      if (type === import_shaka_player_compiled.default.net.NetworkingEngine.RequestType.LICENSE) {
        let txt = import_shaka_player_compiled.default.util.StringUtils.fromUTF8(resp.data);
        txt = txt.trim();
        if (txt.startsWith("<ckc>") && txt.endsWith("</ckc>")) {
          txt = txt.slice(5, -6);
        }
        resp.data = import_shaka_player_compiled.default.util.Uint8ArrayUtils.fromBase64(txt).buffer;
      }
    };
  };
  vidgoResponseFilterImpl = () => {
    return (type, resp) => {
      if (type === import_shaka_player_compiled.default.net.NetworkingEngine.RequestType.LICENSE) {
        const jsonResp = JSON.parse(
          String.fromCharCode.apply(null, new Uint8Array(resp.data))
        );
        const raw = Buffer.from(jsonResp.ckc, "base64");
        const rawLength = raw.length;
        const data = new Uint8Array(new ArrayBuffer(rawLength));
        for (let i = 0; i < rawLength; i += 1) {
          data[i] = raw[i];
        }
        resp.data = data;
      }
    };
  };
  initDataTransformImpl = (initData, initDataType, drmInfo) => {
    if (initDataType !== "skd")
      return initData;
    this.contentId = import_shaka_player_compiled.default.util.FairPlayUtils.defaultGetContentId(initData);
    const cert = drmInfo.serverCertificate;
    return import_shaka_player_compiled.default.util.FairPlayUtils.initDataTransform(initData, this.contentId, cert);
  };
  basicDrmConfigs = (source, lagacyFairplay = true) => {
    if (source.drm?.drmType === "widevine" /* WIDEVINE */) {
      return {
        drm: {
          servers: {
            "com.widevine.alpha": source.drm?.licenseUrl
          },
          advanced: {
            "com.widevine.alpha": {
              videoRobustness: "SW_SECURE_CRYPTO",
              audioRobustness: "SW_SECURE_CRYPTO"
            }
          }
        }
      };
    }
    if (source.drm?.drmType === "fairplay" /* FAIRPLAY */) {
      if (lagacyFairplay) {
        return {
          drm: {
            servers: {
              "com.apple.fps.1_0": source.drm?.licenseUrl
            },
            advanced: {
              "com.apple.fps.1_0": {
                serverCertificateUri: source.drm?.certicateUrl
              }
            }
          }
        };
      }
      return {
        drm: {
          servers: {
            "com.apple.fps": source.drm?.licenseUrl
          },
          advanced: {
            "com.apple.fps": {
              serverCertificateUri: source.drm?.certicateUrl
            }
          },
          initDataTransform: this.initDataTransformImpl
        }
      };
    }
    return {};
  };
  reload = async () => {
    if (this.url) {
      try {
        await this.player.load(this.url || "");
        return Promise.resolve();
      } catch (e2) {
        Utils.fatelErrorRetry(this.ui);
        return Promise.reject(e2);
      }
    }
  };
  destroy = async () => {
    await this.player.detach();
    return Promise.resolve();
  };
  addEvents = () => {
    this.removeEvents();
    this.player.addEventListener("buffering" /* BUFFERING */, this.shakaBufferingEvent.bind(this));
    this.player.addEventListener("error" /* ERROR */, this.shakaErrorEvent.bind(this));
    this.player.addEventListener(
      "stalldetected" /* STALL_DETECTED */,
      this.shakaStallDetectedEvent.bind(this)
    );
  };
  removeEvents = () => {
    this.player.removeEventListener("buffering" /* BUFFERING */, this.shakaBufferingEvent.bind(this));
    this.player.removeEventListener("error" /* ERROR */, this.shakaErrorEvent.bind(this));
    this.player.removeEventListener(
      "stalldetected" /* STALL_DETECTED */,
      this.shakaStallDetectedEvent.bind(this)
    );
  };
  shakaBufferingEvent = (d2) => {
    if (this.ui.player.getPlayerState().loaded) {
      if (d2?.buffering) {
        Utils.toggleWrappers({ ui: this.ui, loading: true });
      } else {
        Utils.toggleWrappers({ ui: this.ui, loading: false });
      }
    }
  };
  shakaErrorEvent = (d2) => {
    console.log("shaka-error-event", d2);
    Utils.fatelErrorRetry(this.ui);
  };
  shakaStallDetectedEvent = () => {
    if (this.ui.player.getPlayerState().loaded) {
      Utils.toggleWrappers({ ui: this.ui, loading: true });
    }
  };
};

// src/ui.ts
var UI = class {
  player;
  container;
  containerWrapper;
  mainWrapper;
  contextMenu;
  contextLogoUrl = "";
  contextMenuTimer = null;
  wrapper;
  media;
  videoElement;
  closeCaptionsContainer;
  loaderWrapper;
  endedWrapper;
  replayButton;
  errorWrapper;
  contentNotAvailableWrapper;
  controlsWrapper;
  showControlsTimer = null;
  controlsPlayPauseButton;
  controlsVolumeWrapper;
  controlsVolumeButton;
  controlsVolumeRangeInput;
  controlsTimeText;
  controlsProgressBar;
  controlsProgressRangeInput;
  controlsPIP;
  controlsRemotePlaybackButton;
  controlsCloseCaptionButton;
  controlsFullScreen;
  controlsSettingsButton;
  optionsMenuWrapper;
  // casting ui
  castingWrapper;
  castingTitle;
  castingIconsContainer;
  castingPlayPauseButton;
  castingCloseCaptionButton;
  castingVolumeButtoon;
  castingRemotePlaybackButton;
  castingRewindButton;
  castingForwardButton;
  castingRestartPlayButton;
  // values
  volumeSliderValue = "0";
  progressSliderValue = "0";
  isElementsAdded = false;
  isCastingUIAdded = false;
  optionsMenuState = "none" /* NONE */;
  constructor() {
  }
  setContainer = (player2, elem, contextLogoUrl = "") => {
    this.player = player2;
    this.container = elem;
    this.container.style.backgroundColor = "#000";
    this.contextLogoUrl = contextLogoUrl;
    this.addContainerWrapper();
    if (!this.isElementsAdded)
      this.addElements();
    Utils.toggleWrappers({ ui: this, none: true });
  };
  addElements = () => {
    this.addMainWrapper();
    this.addAspectRatio();
    this.addWrapperDiv();
    this.addMediaDiv();
    this.addVideoElement();
    this.addCloseCaptionContainer();
    this.addLoaderWrapper();
    this.addEndedWrapper();
    this.addControlsWrapper();
    this.addControlsProgressBar();
    this.addOptionsMenuWrapper();
    this.addContextMenu();
    this.addErrorWrapper();
    this.addContentNotAvailableWrapper();
    this.isElementsAdded = true;
  };
  removeUI = () => {
    if (!this.isElementsAdded)
      return;
    this.mainWrapper.remove();
    this.isElementsAdded = false;
  };
  removeCastingUIElements = () => {
    if (!this.isCastingUIAdded)
      return;
    this.castingWrapper.remove();
    this.isCastingUIAdded = false;
    this.isElementsAdded = false;
  };
  removeAllUI = () => {
    if (!this.isElementsAdded)
      return;
    this.containerWrapper.remove();
    this.isCastingUIAdded = false;
    this.isElementsAdded = false;
  };
  create = (args) => {
    const el = document.createElement(args.tag);
    if (args.classListAdd)
      el.classList.add(...args.classListAdd);
    if (args.className)
      el.className = args.className;
    if (args.id)
      el.id = args.id;
    if (args.innerHTML)
      el.innerHTML = args.innerHTML;
    if (args.innerText)
      el.innerText = args.innerText;
    args.parent.appendChild(el);
    return el;
  };
  addContainerWrapper = () => {
    if (!document.getElementById("media-player-main-wrappper")) {
      this.containerWrapper = this.create({
        tag: "div",
        parent: this.container,
        className: "wrapper",
        id: "media-player-main-wrappper"
      });
    }
  };
  addMainWrapper = () => {
    this.mainWrapper = this.create({
      tag: "div",
      parent: this.containerWrapper,
      className: "media-player"
    });
    if (this.contextLogoUrl) {
      this.mainWrapper.oncontextmenu = this.mainWrapperContextMenu.bind(this);
    }
    this.mainWrapper.onclick = this.mainWrapperClick.bind(this);
    this.mainWrapper.onmouseenter = this.mainWrapperMouseEnter.bind(this);
    this.mainWrapper.onmousemove = this.mainWrapperMouseEnter.bind(this);
    this.mainWrapper.onmouseleave = this.mainWrapperMouseLeave.bind(this);
  };
  addMediaDiv = () => {
    this.media = this.create({
      tag: "div",
      parent: this.wrapper,
      className: "media"
    });
  };
  addWrapperDiv = () => {
    this.wrapper = this.create({
      tag: "div",
      parent: this.mainWrapper,
      className: "wrapper"
    });
  };
  addAspectRatio = () => {
    this.create({
      tag: "div",
      parent: this.mainWrapper,
      className: "aspect reset"
    });
  };
  mainWrapperMouseEnter = () => {
    if (this.showControlsTimer)
      clearTimeout(this.showControlsTimer);
    const playerState = this.player.getPlayerState();
    if (playerState.loaded && playerState.uiState !== "error" && playerState.uiState !== "ended") {
      Utils.toggleOpacity(this.controlsWrapper, true);
    }
  };
  mainWrapperMouseLeave = () => {
    if (this.showControlsTimer)
      clearTimeout(this.showControlsTimer);
    if (this.optionsMenuWrapper.classList.contains("flex"))
      return;
    this.showControlsTimer = setTimeout(() => {
      Utils.toggleOpacity(this.controlsWrapper, false);
    }, 1e3);
  };
  mainWrapperContextMenu = (e2) => {
    e2.preventDefault();
    const { clientX, clientY } = e2;
    const { x, y, width, height } = this.mainWrapper.getBoundingClientRect();
    this.contextMenu.style.display = `block`;
    const { clientWidth: contextWidth, clientHeight: contextHeight } = this.contextMenu;
    const maxWidth = x + width - contextWidth - 5;
    const maxHeight = y + height - contextHeight - 5;
    const top = clientY > maxHeight ? maxHeight : clientY;
    const left = clientX > maxWidth ? maxWidth : clientX;
    this.contextMenu.style.top = `${top}px`;
    this.contextMenu.style.left = `${left}px`;
    this.hideContextMenu(true);
  };
  hideContextMenu = (timer) => {
    if (this.contextMenuTimer)
      clearTimeout(this.contextMenuTimer);
    if (timer) {
      this.contextMenuTimer = setTimeout(() => this.contextMenu.style.display = `none`, 5 * 1e3);
    } else {
      this.contextMenu.style.display = `none`;
    }
  };
  mainWrapperClick = (e2) => {
    e2.preventDefault();
    this.hideContextMenu(false);
  };
  addCloseCaptionContainer = () => {
    this.closeCaptionsContainer = this.create({
      tag: "div",
      parent: this.wrapper,
      className: "close-captions-container"
    });
  };
  addLoaderWrapper = () => {
    this.loaderWrapper = this.create({
      tag: "div",
      parent: this.wrapper,
      className: "loader-wrapper",
      innerHTML: `<div class="loader"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>`
    });
  };
  addEndedWrapper = () => {
    this.endedWrapper = this.create({
      tag: "div",
      parent: this.wrapper,
      className: "ended-wrapper"
    });
    this.replayButton = this.create({
      tag: "div",
      parent: this.endedWrapper,
      className: "icons",
      innerHTML: Utils.Icons({ type: "replay" })
    });
    this.endedWrapper.onclick = () => Utils.onEndedReplay(this);
  };
  addControlsWrapper = () => {
    this.controlsWrapper = this.create({
      tag: "div",
      parent: this.wrapper,
      classListAdd: ["controls-wrapper", "none"]
    });
    const main = this.create({
      tag: "div",
      parent: this.controlsWrapper,
      className: "controls"
    });
    const first = this.create({
      tag: "div",
      parent: main,
      className: "controls-first"
    });
    const second = this.create({
      tag: "div",
      parent: main,
      className: "controls-second"
    });
    this.addControlsPlayPauseButton(first);
    this.addVolumeControls(first);
    this.addControlsTimeText(first);
    this.addControlsRemovePlayback(second);
    this.addControlsPIP(second);
    this.addControlsCloseCaptionButton(second);
    this.addControlsFullScreen(second);
    this.addControlsSettingsButton(second);
  };
  addControlsPlayPauseButton = (parent) => {
    this.controlsPlayPauseButton = this.create({
      tag: "div",
      parent,
      className: "icons",
      innerHTML: Utils.Icons({ type: "pause" })
    });
    this.controlsPlayPauseButton.onclick = async () => {
      await Utils.togglePlayPause(this);
    };
  };
  addVolumeControls = (parent) => {
    this.controlsVolumeWrapper = this.create({
      tag: "div",
      parent,
      classListAdd: ["vertical-slider", "flex"]
    });
    this.controlsVolumeButton = this.create({
      tag: "div",
      parent: this.controlsVolumeWrapper,
      className: "icons",
      innerHTML: Utils.Icons({ type: "volume_off" })
    });
    this.controlsVolumeButton.onclick = () => {
      Utils.toggleMuteUnMute(this);
    };
    const volumeRangeWrapper = this.create({
      tag: "div",
      parent: this.controlsVolumeWrapper,
      className: "volume-range"
    });
    this.controlsVolumeRangeInput = this.create({
      tag: "input",
      parent: volumeRangeWrapper
    });
    this.controlsVolumeRangeInput.type = "range";
    this.controlsVolumeRangeInput.min = "0";
    this.controlsVolumeRangeInput.max = "1";
    this.controlsVolumeRangeInput.step = "any";
    this.controlsVolumeRangeInput.value = this.volumeSliderValue;
    this.controlsVolumeRangeInput.oninput = (e2) => Utils.onVolumeSliderChange(this, e2);
  };
  addControlsTimeText = (parent) => {
    this.controlsTimeText = this.create({
      tag: "div",
      parent,
      className: "time-text"
    });
  };
  addControlsProgressBar = () => {
    this.controlsProgressBar = this.create({
      tag: "div",
      parent: this.controlsWrapper,
      classListAdd: ["video-progress", "none"]
    });
    this.controlsProgressRangeInput = this.create({
      tag: "input",
      parent: this.controlsProgressBar
    });
    this.controlsProgressRangeInput.type = "range";
    this.controlsProgressRangeInput.min = "0";
    this.controlsProgressRangeInput.max = "0";
    this.controlsProgressRangeInput.step = "any";
    this.controlsProgressRangeInput.value = this.progressSliderValue;
    this.controlsProgressRangeInput.oninput = (e2) => Utils.onVideoProgressChange(this, e2);
  };
  addControlsPIP = (parent) => {
    this.controlsPIP = this.create({
      tag: "div",
      parent,
      classListAdd: ["icons", "none"]
    });
    this.controlsPIP.onclick = () => Utils.togglePip(this);
  };
  addControlsRemovePlayback = (parent) => {
    this.controlsRemotePlaybackButton = this.create({
      tag: "div",
      parent,
      classListAdd: ["icons", "none"]
    });
  };
  addControlsCloseCaptionButton = (parent) => {
    this.controlsCloseCaptionButton = this.create({
      tag: "div",
      parent,
      classListAdd: ["icons", "none"]
    });
    this.controlsCloseCaptionButton.onclick = () => {
      if (this.optionsMenuState !== "cc" /* CC */) {
        this.optionsMenuState = "cc" /* CC */;
        this.addControlsCloseCaptionMenu();
      } else {
        this.optionsMenuState = "none" /* NONE */;
        this.addControlsCloseCaptionMenu();
      }
    };
  };
  addControlsCloseCaptionMenu = () => {
    this.optionsMenuWrapper.innerHTML = "";
    if (this.optionsMenuState === "cc" /* CC */) {
      Utils.toggleShowHide(this.optionsMenuWrapper, "flex");
      this.optionsMenuWrapper.style.right = "70px";
      const tracks = this.player.playerState.textTracks;
      const selected = this.player.playerState.selectedTextTrackId;
      const head = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "head"
      });
      this.create({
        tag: "div",
        parent: head,
        className: "head-item",
        innerText: "Close Caption"
      });
      const menu = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "menu"
      });
      const ccMenuItemOff = this.create({
        tag: "div",
        parent: menu,
        className: "cc-menu-item"
      });
      ccMenuItemOff.setAttribute("role", "cc-off");
      ccMenuItemOff.onclick = () => {
        Utils.setSelectedTextTrack(this, null);
        sessionStorage.removeItem("closeCaptionID" /* CC_ID */);
      };
      this.create({
        tag: "div",
        parent: ccMenuItemOff,
        className: selected === null ? "menu-select" : ""
      });
      this.create({
        tag: "div",
        parent: ccMenuItemOff,
        innerText: "Off"
      });
      tracks.forEach((t, idx) => {
        const ccMenuItem = this.create({
          tag: "div",
          parent: menu,
          className: "cc-menu-item"
        });
        ccMenuItem.setAttribute("role", `cc-${idx}`);
        ccMenuItem.onclick = () => {
          Utils.setSelectedTextTrack(this, String(idx));
          sessionStorage.setItem("closeCaptionID" /* CC_ID */, String(idx));
        };
        this.create({
          tag: "div",
          parent: ccMenuItem,
          className: selected === idx.toString() ? "menu-select" : ""
        });
        this.create({
          tag: "div",
          parent: ccMenuItem,
          // @ts-ignore
          innerHTML: `<div>${TextTrackLabels[t.lang] || "English"}</div>`
        });
      });
    } else {
      Utils.toggleShowHide(this.optionsMenuWrapper, "none");
    }
  };
  addControlsSettingsButton = (parent) => {
    this.controlsSettingsButton = this.create({
      tag: "div",
      parent,
      className: "icons",
      innerHTML: Utils.Icons({ type: "settings" })
    });
    this.controlsSettingsButton.onclick = () => {
      if (this.optionsMenuState === "none" /* NONE */ || this.optionsMenuState === "cc" /* CC */) {
        this.optionsMenuState = "settings" /* SETINGS */;
        this.addControlsSetingsMenu();
      } else {
        this.optionsMenuState = "none" /* NONE */;
        this.addControlsSetingsMenu();
      }
    };
  };
  addControlsSetingsMenu = () => {
    this.optionsMenuWrapper.innerHTML = "";
    if (this.optionsMenuState === "none" /* NONE */) {
      Utils.toggleShowHide(this.optionsMenuWrapper, "none");
      return;
    }
    Utils.toggleShowHide(this.optionsMenuWrapper, "flex");
    this.optionsMenuWrapper.style.right = "10px";
    if (this.optionsMenuState === "settings" /* SETINGS */) {
      const head = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "head"
      });
      this.create({
        tag: "div",
        parent: head,
        className: "head-item",
        innerText: "Settings"
      });
      const menu = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "menu"
      });
      const menuItem = this.create({
        tag: "div",
        parent: menu,
        className: "menu-item",
        innerHTML: `<div>Close Caption</div><div>Options</div>`
      });
      menuItem.setAttribute("role", "cc-settings");
      menuItem.onclick = () => {
        this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
        this.addControlsSetingsMenu();
      };
      return;
    }
    if (this.optionsMenuState === "cc_settings" /* CC_SETTINGS */) {
      const head = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "head"
      });
      head.style.cursor = "pointer";
      head.setAttribute("role", "back-to-settings");
      head.onclick = () => {
        this.optionsMenuState = "settings" /* SETINGS */;
        this.addControlsSetingsMenu();
      };
      this.create({
        tag: "div",
        parent: head,
        className: "head-item",
        innerHTML: `${Utils.Icons({
          type: "arrow_back",
          iconSize: "12px"
        })}<div>Close Caption Options</div>`
      });
      const menu = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "menu"
      });
      const textSize = this.create({
        tag: "div",
        parent: menu,
        className: "menu-item",
        innerHTML: `<div>Text Size</div><div>${Utils.getCloseCaptionStyles().textSize}</div>`
      });
      textSize.setAttribute("role", "cc-settings-text-size");
      textSize.onclick = () => {
        this.optionsMenuState = "textSize" /* TEXT_SIZE */;
        this.addControlsSetingsMenu();
      };
      const textColor = this.create({
        tag: "div",
        parent: menu,
        className: "menu-item",
        innerHTML: `<div>Text Color</div><div>${Utils.getCloseCaptionStyles().textColor}</div>`
      });
      textColor.setAttribute("role", "cc-settings-text-color");
      textColor.onclick = () => {
        this.optionsMenuState = "textColor" /* TEXT_COLOR */;
        this.addControlsSetingsMenu();
      };
      const bgColor = this.create({
        tag: "div",
        parent: menu,
        className: "menu-item",
        innerHTML: `<div>Background Color</div><div>${Utils.getCloseCaptionStyles().bgColor}</div>`
      });
      bgColor.setAttribute("role", "cc-settings-bg-color");
      bgColor.onclick = () => {
        this.optionsMenuState = "bgColor" /* BG_COLOR */;
        this.addControlsSetingsMenu();
      };
      const bgOpacity = this.create({
        tag: "div",
        parent: menu,
        className: "menu-item",
        innerHTML: `<div>Background Opacity</div><div>${Utils.getCloseCaptionStyles().bgOpacity}</div>`
      });
      bgOpacity.setAttribute("role", "cc-settings-bg-opacity");
      bgOpacity.onclick = () => {
        this.optionsMenuState = "bgOpacity" /* BG_OPACITY */;
        this.addControlsSetingsMenu();
      };
      return;
    }
    if (this.optionsMenuState === "textSize" /* TEXT_SIZE */) {
      const head = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "head"
      });
      head.style.cursor = "pointer";
      head.setAttribute("role", "back-to-cc-settings");
      head.onclick = () => {
        this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
        this.addControlsSetingsMenu();
      };
      this.create({
        tag: "div",
        parent: head,
        className: "head-item",
        innerHTML: `${Utils.Icons({
          type: "arrow_back",
          iconSize: "12px"
        })}<div>Text Size</div>`
      });
      const menu = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "menu"
      });
      const currentValue = Utils.getCloseCaptionStyles().textSize;
      Object.keys(SETTINGS_CC_TEXT_SIZE).forEach((d2) => {
        const item = this.create({
          tag: "div",
          parent: menu,
          className: "menu-item-options",
          innerHTML: `<div>${d2}</div>`
        });
        item.setAttribute("role", `cc-settings-text-size-${d2}`);
        item.style.backgroundColor = currentValue === d2 ? "#1c6fee" : "";
        item.onclick = () => {
          this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
          Utils.setCloseCaptionStyles(
            this,
            {
              // @ts-ignore
              textSize: SETTINGS_CC_TEXT_SIZE[d2]
            },
            Utils.isFullScreen()
          );
          this.addControlsSetingsMenu();
        };
      });
      return;
    }
    if (this.optionsMenuState === "textColor" /* TEXT_COLOR */) {
      const head = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "head"
      });
      head.style.cursor = "pointer";
      head.setAttribute("role", "back-to-cc-settings");
      head.onclick = () => {
        this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
        this.addControlsSetingsMenu();
      };
      this.create({
        tag: "div",
        parent: head,
        className: "head-item",
        innerHTML: `${Utils.Icons({
          type: "arrow_back",
          iconSize: "12px"
        })}<div>Text Color</div>`
      });
      const menu = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "menu"
      });
      const currentValue = Utils.getCloseCaptionStyles().textColor;
      Object.keys(SETTINGS_CC_COLORS).forEach((d2) => {
        const item = this.create({
          tag: "div",
          parent: menu,
          className: "menu-item-options",
          innerHTML: `<div>${d2}</div>`
        });
        item.setAttribute("role", `cc-settings-text-color-${d2}`);
        item.style.backgroundColor = currentValue === d2 ? "#1c6fee" : "";
        item.onclick = () => {
          this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
          Utils.setCloseCaptionStyles(
            this,
            {
              // @ts-ignore
              textColor: SETTINGS_CC_COLORS[d2]
            },
            Utils.isFullScreen()
          );
          this.addControlsSetingsMenu();
        };
      });
      return;
    }
    if (this.optionsMenuState === "bgColor" /* BG_COLOR */) {
      const head = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "head"
      });
      head.style.cursor = "pointer";
      head.setAttribute("role", "back-to-cc-settings");
      head.onclick = () => {
        this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
        this.addControlsSetingsMenu();
      };
      this.create({
        tag: "div",
        parent: head,
        className: "head-item",
        innerHTML: `${Utils.Icons({
          type: "arrow_back",
          iconSize: "12px"
        })}<div>Background Color</div>`
      });
      const menu = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "menu"
      });
      const currentValue = Utils.getCloseCaptionStyles().bgColor;
      Object.keys(SETTINGS_CC_COLORS).forEach((d2) => {
        const item = this.create({
          tag: "div",
          parent: menu,
          className: "menu-item-options",
          innerHTML: `<div>${d2}</div>`
        });
        item.setAttribute("role", `cc-settings-bg-color-${d2}`);
        item.style.backgroundColor = currentValue === d2 ? "#1c6fee" : "";
        item.onclick = () => {
          this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
          Utils.setCloseCaptionStyles(
            this,
            {
              // @ts-ignore
              bgColor: SETTINGS_CC_COLORS[d2]
            },
            Utils.isFullScreen()
          );
          this.addControlsSetingsMenu();
        };
      });
      return;
    }
    if (this.optionsMenuState === "bgOpacity" /* BG_OPACITY */) {
      const head = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "head"
      });
      head.style.cursor = "pointer";
      head.setAttribute("role", "back-to-cc-settings");
      head.onclick = () => {
        this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
        this.addControlsSetingsMenu();
      };
      this.create({
        tag: "div",
        parent: head,
        className: "head-item",
        innerHTML: `${Utils.Icons({
          type: "arrow_back",
          iconSize: "12px"
        })}<div>Backgroud Opacity</div>`
      });
      const menu = this.create({
        tag: "div",
        parent: this.optionsMenuWrapper,
        className: "menu"
      });
      const currentValue = Utils.getCloseCaptionStyles().bgOpacity;
      Object.keys(SETTINGS_CC_OPACITY).forEach((d2) => {
        const item = this.create({
          tag: "div",
          parent: menu,
          className: "menu-item-options",
          innerHTML: `<div>${d2}</div>`
        });
        item.setAttribute("role", `cc-settings-bg-opacity-${d2}`);
        item.style.backgroundColor = currentValue === d2 ? "#1c6fee" : "";
        item.onclick = () => {
          this.optionsMenuState = "cc_settings" /* CC_SETTINGS */;
          Utils.setCloseCaptionStyles(
            this,
            {
              // @ts-ignore
              bgOpacity: SETTINGS_CC_OPACITY[d2]
            },
            Utils.isFullScreen()
          );
          this.addControlsSetingsMenu();
        };
      });
    }
  };
  addControlsFullScreen = (parent) => {
    this.controlsFullScreen = this.create({
      tag: "div",
      parent,
      className: "icons",
      innerHTML: Utils.Icons({ type: "fullscreen_enter" })
    });
    this.controlsFullScreen.onclick = () => Utils.toggleFullScreen(this);
  };
  addContextMenu = () => {
    this.contextMenu = this.create({
      tag: "div",
      parent: this.mainWrapper,
      className: "context-menu"
    });
    const item = this.create({
      tag: "div",
      parent: this.contextMenu,
      className: "item"
    });
    const img = this.create({ tag: "img", parent: item });
    img.src = this.contextLogoUrl || "";
    img.alt = "Logo";
    this.create({ tag: "div", parent: item, className: "text" }).innerText = "Player";
  };
  addVideoElement = () => {
    this.videoElement = this.create({ tag: "video", parent: this.media });
    this.videoElement.setAttribute("preload", "metadata");
    this.videoElement.setAttribute("playsinline", "true");
    this.videoElement.setAttribute("webkit-playsinline", "true");
    this.videoElement.setAttribute("x-webkit-airplay", "allow");
    this.videoElement.setAttribute("airplay", "allow");
    this.videoElement.oncontextmenu = this.videoElementContextMenu.bind(this);
    this.videoElement.onclick = async () => {
      await Utils.togglePlayPause(this);
    };
  };
  removeVideoPlayer = () => {
    this.videoElement.remove();
  };
  videoElementContextMenu = (e2) => {
    e2.preventDefault();
    return false;
  };
  addOptionsMenuWrapper = () => {
    this.optionsMenuWrapper = this.create({
      tag: "div",
      parent: this.wrapper,
      classListAdd: ["options-menu", "none"]
    });
  };
  addErrorWrapper = () => {
    this.errorWrapper = this.create({
      tag: "div",
      parent: this.wrapper,
      className: "error-wrapper",
      innerHTML: `<div class="error-msg"><div style="cursor: auto"></div><div>ERROR</div></div>`
    });
  };
  addContentNotAvailableWrapper = () => {
    this.contentNotAvailableWrapper = this.create({
      tag: "div",
      parent: this.wrapper,
      className: "content-not-available",
      innerHTML: `<div class="content-msg"><div style="cursor: auto"></div><div>Content is currently unavailable.</div></div>`
    });
  };
  getVideoElement = () => {
    return this.videoElement;
  };
  // casting ui
  addCastingUIElements = () => {
    if (!document.getElementById("media-player-casting-wrapper")) {
      this.castingWrapper = this.create({
        tag: "div",
        id: "media-player-casting-wrapper",
        parent: this.containerWrapper,
        className: "cast-overlay-container"
      });
      this.castingWrapper.oncontextmenu = (e2) => {
        e2.preventDefault();
      };
      this.addCastingTtile();
      this.addCastingIconsContainer();
      this.addCastingRewindButton();
      this.addCastingPlayPauseButton();
      this.addCastingForwardButton();
      this.addCastingRestartPlayButton();
      this.addCastingCloseCaptionButton();
      this.addCastingVolumeButtoon();
      this.addCastingRemotePlaybackButton();
      this.isCastingUIAdded = true;
    }
  };
  addCastingTtile = () => {
    this.castingTitle = this.create({
      tag: "div",
      parent: this.castingWrapper,
      className: "title"
    });
  };
  addCastingIconsContainer = () => {
    this.castingIconsContainer = this.create({
      tag: "div",
      parent: this.castingWrapper,
      classListAdd: ["icons-container"]
    });
  };
  addCastingPlayPauseButton = () => {
    this.castingPlayPauseButton = this.create({
      tag: "div",
      parent: this.castingIconsContainer,
      classListAdd: ["icons", "none"],
      innerHTML: Utils.Icons({ type: "play" })
    });
  };
  addCastingCloseCaptionButton = () => {
    this.castingCloseCaptionButton = this.create({
      tag: "div",
      parent: this.castingIconsContainer,
      classListAdd: ["icons", "none"],
      innerHTML: Utils.Icons({ type: "cc_disabled" })
    });
  };
  addCastingVolumeButtoon = () => {
    this.castingVolumeButtoon = this.create({
      tag: "div",
      parent: this.castingIconsContainer,
      classListAdd: ["icons", "none"],
      innerHTML: Utils.Icons({ type: "volume_up" })
    });
  };
  addCastingRemotePlaybackButton = () => {
    this.castingRemotePlaybackButton = this.create({
      tag: "div",
      parent: this.castingIconsContainer,
      className: "icons",
      innerHTML: Utils.Icons({ type: "cast_exit" })
    });
  };
  addCastingRewindButton = () => {
    this.castingRewindButton = this.create({
      tag: "div",
      parent: this.castingIconsContainer,
      classListAdd: ["icons", "none"],
      innerHTML: Utils.Icons({ type: "rewind" })
    });
  };
  addCastingForwardButton = () => {
    this.castingForwardButton = this.create({
      tag: "div",
      parent: this.castingIconsContainer,
      classListAdd: ["icons", "none"],
      innerHTML: Utils.Icons({ type: "forward" })
    });
  };
  addCastingRestartPlayButton = () => {
    this.castingRestartPlayButton = this.create({
      tag: "div",
      parent: this.castingIconsContainer,
      classListAdd: ["icons", "none"],
      innerHTML: Utils.Icons({ type: "replay" })
    });
  };
};

// src/video.events.ts
var VideoEvents = class {
  ui;
  timeUpdated = false;
  progressCounter = 0;
  events = [];
  constructor(ui) {
    this.ui = ui;
    this.events = [
      { event: "abort" /* ABORT */, callback: this.abortEvent.bind(this) },
      { event: "canplay" /* CANPLAY */, callback: this.canPlayEvent.bind(this) },
      {
        event: "canplaythrough" /* CANPLAYTHROUGH */,
        callback: this.canPlayThroughEvent.bind(this)
      },
      {
        event: "durationchange" /* DURATIONCHANGE */,
        callback: this.durationChangeEvent.bind(this)
      },
      { event: "emptied" /* EMPTIED */, callback: this.emptiedEvent.bind(this) },
      { event: "ended" /* ENDED */, callback: this.endedEvent.bind(this) },
      { event: "error" /* ERROR */, callback: this.errorEvent.bind(this) },
      {
        event: "loadeddata" /* LOADEDDATA */,
        callback: this.loadedDataEvent.bind(this)
      },
      {
        event: "loadedmetadata" /* LOADEDMETADATA */,
        callback: this.loadedMetaDataEvent.bind(this)
      },
      { event: "loadstart" /* LOADSTART */, callback: this.loadStartEvent.bind(this) },
      { event: "pause" /* PAUSE */, callback: this.pauseEvent.bind(this) },
      { event: "play" /* PLAY */, callback: this.playEvent.bind(this) },
      { event: "playing" /* PLAYING */, callback: this.playingEvent.bind(this) },
      { event: "progress" /* PROGRESS */, callback: this.progressEvent.bind(this) },
      {
        event: "ratechange" /* RATECHANGE */,
        callback: this.rateChangeEvent.bind(this)
      },
      { event: "seeked" /* SEEKED */, callback: this.seekedEvent.bind(this) },
      { event: "seeking" /* SEEKING */, callback: this.seekingEvent.bind(this) },
      { event: "stalled" /* STALLED */, callback: this.stalledEvent.bind(this) },
      { event: "suspend" /* SUSPEND */, callback: this.suspendEvent.bind(this) },
      {
        event: "timeupdate" /* TIMEUPDATE */,
        callback: this.timeUpdateEvent.bind(this)
      },
      {
        event: "volumechange" /* VOLUMECHANGE */,
        callback: this.volumeChangeEvent.bind(this)
      },
      { event: "waiting" /* WAITING */, callback: this.waitingEvent.bind(this) }
    ];
  }
  addEvents = () => {
    this.removeEvents();
    this.events.forEach((d2) => {
      this.ui.videoElement.addEventListener(d2.event, d2.callback);
    });
  };
  removeEvents = () => {
    this.events.forEach((d2) => {
      this.ui.videoElement.removeEventListener(d2.event, d2.callback);
    });
  };
  getConfig = () => {
    return this.ui.player.getConfig();
  };
  abortEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onAbort");
    this.timeUpdated = false;
    Utils.addEventCallback(this.ui, "abort" /* ABORT */);
  };
  canPlayEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onCanPlay");
    Utils.addEventCallback(this.ui, "canplay" /* CANPLAY */);
  };
  canPlayThroughEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onCanPlayThrough");
    Utils.addEventCallback(this.ui, "canplaythrough" /* CANPLAYTHROUGH */);
  };
  durationChangeEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onDurationChange");
    Utils.addEventCallback(this.ui, "durationchange" /* DURATIONCHANGE */);
  };
  emptiedEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onEmptied");
    this.ui.player.setPlayerState({ isPlaying: false });
    if (this.ui.player.playerState.uiState === "error", this.ui.player.playerState.player !== "shaka" /* SHAKA */) {
      Utils.toggleWrappers({ ui: this.ui, loading: true });
    }
    Utils.addEventCallback(this.ui, "emptied" /* EMPTIED */);
  };
  endedEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onEnded");
    Utils.toggleWrappers({ ui: this.ui, ended: true });
    Utils.addEventCallback(this.ui, "ended" /* ENDED */);
  };
  errorEvent = (e2) => {
    console.log("error", e2);
    if (this.getConfig().debug)
      console.log("VIDEO - onError");
    Utils.fatelErrorRetry(this.ui);
    Utils.addEventCallback(this.ui, "error" /* ERROR */);
  };
  loadedDataEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onLoadedData");
    if (this.ui.videoElement.buffered.length) {
      Utils.resetRetryCounter();
    }
    if (!this.getConfig().disableControls) {
      Utils.toggleShowHide(this.ui.controlsWrapper, "flex");
      Utils.toggleOpacity(this.ui.controlsWrapper, false);
    }
    this.ui.player.setPlayerState({ loaded: true, isPlaying: false });
    Utils.checkTextTracks(this.ui);
    this.volumeChangeEvent();
    Utils.addEventCallback(this.ui, "loadeddata" /* LOADEDDATA */);
  };
  loadedMetaDataEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onLoadedMetaData");
    const video = this.ui.videoElement;
    video.play().then(() => {
    }).catch(() => {
      video.muted = true;
      video.play().catch(() => {
      });
    });
    Utils.addEventCallback(this.ui, "loadedmetadata" /* LOADEDMETADATA */);
  };
  loadStartEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onLoadStart");
    Utils.toggleWrappers({ ui: this.ui, loading: true });
    this.ui.player.setPlayerState({ isPlaying: false });
    Utils.addEventCallback(this.ui, "loadstart" /* LOADSTART */);
  };
  pauseEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onPause");
    this.ui.controlsPlayPauseButton.innerHTML = Utils.Icons({ type: "play" });
    this.ui.player.setPlayerState({ isPlaying: false });
    if (this.ui.player.playerState.isPIP)
      this.ui.player?.onPauseCallback?.();
    Utils.addEventCallback(this.ui, "pause" /* PAUSE */);
  };
  playEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onPlay");
    Utils.toggleWrappers({ ui: this.ui, none: true });
    if (this.ui.player.playerState.isPIP)
      this.ui.player?.onPlayCallback?.();
    Utils.addEventCallback(this.ui, "play" /* PLAY */);
  };
  playingEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onPlaying");
    this.ui.controlsPlayPauseButton.innerHTML = Utils.Icons({
      type: "pause"
    });
    Utils.toggleWrappers({ ui: this.ui, none: true });
    this.ui.player.setPlayerState({ isPlaying: true });
    Utils.resetRetryCounter();
    Utils.addEventCallback(this.ui, "playing" /* PLAYING */);
  };
  progressEvent = () => {
    if (this.getConfig().debug) {
      console.log(
        "VIDEO - onProgress",
        "progressCounter",
        this.progressCounter,
        "timeUpdated",
        this.timeUpdated
      );
    }
    Utils.addEventCallback(this.ui, "progress" /* PROGRESS */);
    if (!this.ui.player.playerState.hasUserPaused) {
      if (this.timeUpdated) {
        this.progressCounter = 0;
        this.timeUpdated = false;
        return;
      }
      if (this.progressCounter > 5 && this.progressCounter <= 10) {
        if (this.ui.videoElement.buffered?.length) {
          this.ui.videoElement.currentTime = this.ui.videoElement.buffered.end(0);
        }
      }
      if (this.progressCounter > 10) {
        this.progressCounter = 0;
        this.ui.player.reloadPlayer().catch(() => console.log());
      }
    }
    this.progressCounter += 1;
  };
  rateChangeEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onRateChange");
    Utils.toggleWrappers({ ui: this.ui, loading: true });
    Utils.addEventCallback(this.ui, "ratechange" /* RATECHANGE */);
  };
  seekedEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onSeeked", this.ui.player.playerState);
    Utils.toggleWrappers({ ui: this.ui, none: true });
    if (!this.ui.player.playerState.isPlaying) {
      this.ui.player.hls.stopLoad();
      if (!this.ui.player.playerState.hasUserPaused) {
        this.ui.videoElement.play().catch(() => console.log());
      }
    }
    Utils.addEventCallback(this.ui, "seeked" /* SEEKED */);
  };
  seekingEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onSeeking");
    if (!this.ui.player.playerState.isPlaying) {
      Utils.toggleWrappers({ ui: this.ui, loading: true });
      this.ui.player.hls.startLoad();
    }
    Utils.addEventCallback(this.ui, "seeking" /* SEEKING */);
  };
  stalledEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onStalled");
    if (this.ui.player.playerState.isPlaying) {
      Utils.toggleWrappers({ ui: this.ui, loading: true });
    }
    if (Utils.isLive(this.ui) && !this.timeUpdated && !this.ui.player.playerState.hasUserPaused) {
      if (this.ui.videoElement.buffered.length) {
        this.ui.videoElement.currentTime = this.ui.videoElement.buffered.end(0);
      }
      this.ui.videoElement.play().catch(() => {
      });
    }
    Utils.addEventCallback(this.ui, "stalled" /* STALLED */);
  };
  suspendEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onSuspend");
    Utils.addEventCallback(this.ui, "suspend" /* SUSPEND */);
  };
  timeUpdateEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onTimeUpdate");
    this.timeUpdated = true;
    if (this.ui.player.playerState.isPlaying) {
      Utils.toggleWrappers({ ui: this.ui, none: true });
    }
    const video = this.ui.videoElement;
    const currentTime = video.currentTime;
    const duration = video.duration;
    const isLive = Utils.isLive(this.ui);
    if (this.ui.player.playerState.loaded) {
      if (isLive) {
        this.ui.controlsTimeText.innerText = "Live";
        Utils.toggleShowHide(this.ui.controlsProgressBar, "none");
      } else if (duration && currentTime) {
        sessionStorage.setItem("videoCurrentTime" /* VIDOE_CURRENT_TIME */, String(Math.floor(currentTime)));
        Utils.sliderColorValue(this.ui.controlsProgressRangeInput);
        Utils.toggleShowHide(this.ui.controlsProgressBar, "flex");
        this.ui.controlsProgressRangeInput.value = String(currentTime);
        this.ui.controlsTimeText.innerText = `${Utils.formatTime(
          currentTime
        )} / ${Utils.formatTime(duration)}`;
        this.ui.controlsProgressRangeInput.max = String(duration);
      } else {
        this.ui.controlsTimeText.innerText = "";
      }
    }
    Utils.addEventCallback(this.ui, "timeupdate" /* TIMEUPDATE */);
  };
  volumeChangeEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onVolumeChange");
    const video = this.ui.videoElement;
    if (video.muted) {
      this.ui.volumeSliderValue = "0";
      this.ui.controlsVolumeRangeInput.value = "0";
      this.ui.player.setPlayerState({ isMuted: true });
      this.ui.controlsVolumeButton.innerHTML = Utils.Icons({
        type: "volume_off"
      });
    } else {
      this.ui.volumeSliderValue = String(video.volume);
      this.ui.controlsVolumeRangeInput.value = String(video.volume);
      this.ui.player.setPlayerState({ isMuted: false });
      if (video.volume > 0.5) {
        this.ui.controlsVolumeButton.innerHTML = Utils.Icons({
          type: "volume_up"
        });
      } else {
        this.ui.controlsVolumeButton.innerHTML = Utils.Icons({
          type: "volume_down"
        });
      }
    }
    Utils.sliderColorValue(this.ui.controlsVolumeRangeInput);
    Utils.addEventCallback(this.ui, "volumechange" /* VOLUMECHANGE */);
  };
  waitingEvent = () => {
    if (this.getConfig().debug)
      console.log("VIDEO - onWaiting");
    Utils.toggleWrappers({ ui: this.ui, loading: true });
    if (!this.ui.player.playerState.hasUserPaused) {
      this.ui.player.hls.startLoad();
    }
    Utils.addEventCallback(this.ui, "waiting" /* WAITING */);
  };
};

// src/player.ts
var defaultConfig = {
  debug: false,
  isVidgo: false,
  maxRetryCount: 5,
  disableControls: false,
  type: null,
  castReceiverId: null
};
var defaultPlayerState = {
  player: "none" /* NONE */,
  loaded: false,
  uiState: "none",
  textTracks: [],
  videoTracks: [],
  audioTracks: [],
  selectedTextTrackId: null,
  selectedVideoTrackId: null,
  selectedAudioTrackId: null,
  isPlaying: false,
  isMuted: false,
  showPIP: false,
  isPIP: false,
  isCasting: false,
  isAirplay: false,
  hasUserPaused: false
};
var _Player = class {
  ui;
  videoEvents;
  native;
  hls;
  shaka;
  airplay;
  castSender;
  isInitialized = false;
  stateTimer = void 0;
  playerState;
  source = { url: void 0, drm: void 0 };
  config;
  onPauseCallback = void 0;
  onPlayCallback = void 0;
  onEnterPIPCallback = void 0;
  onLeavePIPCallback = void 0;
  onPlayerStateChange = void 0;
  eventCallbacks = [];
  constructor() {
    window.muxjs = import_mux.default;
    this.ui = new UI();
    this.castSender = new CastingSender(this.ui);
    this.castSender.load();
    this.videoEvents = new VideoEvents(this.ui);
    this.native = new NativePlayer(this.ui);
    this.hls = new HlsPlayer(this.ui);
    this.shaka = new ShakaPlayer(this.ui);
    this.airplay = new AirPlay(this.ui);
    this.config = defaultConfig;
    this.playerState = defaultPlayerState;
  }
  /**
   * @param  elem: HTMLDivElement;
   * @param source: ISource;
   * @param config?: Partial<IConfig>;
   * @param contextLogoUrl?: string;
   * @param onPauseCallback?: () => void;
   * @param onPlayCallback?: () => void;
   * @param onEnterPIPCallback?: () => void;
   * @param onLeavePIPCallback?: () => void;
   * @param eventCallbacks?: Array<{
      event: keyof typeof EventsEnum;
      callback: () => void;
    }>;
   */
  init = async ({
    elem,
    source,
    contextLogoUrl,
    config,
    eventCallbacks,
    onPauseCallback,
    onPlayCallback,
    onLeavePIPCallback,
    onEnterPIPCallback,
    onPlayerStateChange
  }) => {
    try {
      if (!elem)
        return;
      if (!this.isInitialized && !this.playerState.isCasting) {
        clearTimeout(this.stateTimer);
        this.ui.setContainer(this, elem, contextLogoUrl);
        this.videoEvents.addEvents();
        this.airplay.init();
        this.__windowOnLoad();
        Utils.setCloseCaptionStyles(this.ui);
        this.isInitialized = true;
      }
      this.eventCallbacks = eventCallbacks;
      this.onPauseCallback = onPauseCallback;
      this.onPlayCallback = onPlayCallback;
      this.onEnterPIPCallback = onEnterPIPCallback;
      this.onLeavePIPCallback = onLeavePIPCallback;
      this.onPlayerStateChange = onPlayerStateChange;
      this.updateConfig(config);
      this.castSender.init();
      await this.setSource(source, false);
    } catch (e2) {
      console.log(e2);
    }
  };
  setSource = async (source, retry) => {
    try {
      if (!source.url)
        return Promise.resolve();
      const hashedSourceNew = (0, import_object_hash.default)(source);
      const hashedSourceOld = (0, import_object_hash.default)(this.source);
      let videoCurrentTime = -1;
      if (hashedSourceNew === hashedSourceOld) {
        videoCurrentTime = Number(sessionStorage.getItem("videoCurrentTime" /* VIDOE_CURRENT_TIME */)) || -1;
      } else {
        sessionStorage.removeItem("videoCurrentTime" /* VIDOE_CURRENT_TIME */);
      }
      this.source = {
        ...source,
        startTime: source.startTime ?? videoCurrentTime
      };
      if (this.playerState.isCasting) {
        return Promise.resolve();
      }
      const isDRM = this.source.drm?.drmType === "fairplay" /* FAIRPLAY */ || this.source.drm?.drmType === "widevine" /* WIDEVINE */;
      const mimeType = await Utils.getMimeType(this.source.url);
      const isM3U8 = mimeType === "application/x-mpegurl" /* M3U8_1 */ || mimeType === "application/vnd.apple.mpegurl" /* M3U8_2 */;
      const isMPD = mimeType === "application/dash+xml" /* MPD */;
      const isSafari = Utils.getBrowser() === "safari" /* SAFARI */;
      const useShaka = isSafari || isDRM || isMPD;
      const useHLS = !isSafari && isM3U8;
      const useNative = !useShaka && !useHLS;
      await this.detachMediaElement(retry);
      if (useShaka) {
        await this.shaka.init(
          this.ui.videoElement,
          this.source,
          this.config.debug,
          mimeType,
          this.config.isVidgo
        );
        return Promise.resolve();
      }
      if (useHLS) {
        this.setPlayerState({ player: "hls" /* HLS */ });
        await this.hls.init(this.ui.videoElement, this.source, this.config.debug);
        return Promise.resolve();
      }
      if (useNative) {
        this.setPlayerState({ player: "native" /* NATIVE */ });
        await this.native.init(this.ui.videoElement, this.source);
        return Promise.resolve();
      }
      return Promise.resolve();
    } catch (e2) {
      console.log(e2);
      return Promise.reject(e2);
    }
  };
  getSource = () => {
    return this.source;
  };
  getConfig = () => {
    return this.config;
  };
  updateConfig = (data) => {
    this.config = { ...defaultConfig, ...this.config, ...data };
  };
  getPlayerState = () => {
    return this.playerState;
  };
  setPlayerState = (state) => {
    this.playerState = { ...defaultPlayerState, ...this.playerState, ...state };
    if (typeof this.onPlayerStateChange === "function") {
      this.onPlayerStateChange(this.playerState);
    }
  };
  fullScreenEvent = (ui) => {
    Utils.fullScreenEvent(ui);
  };
  enterPIPEvent = (ui) => {
    Utils.enterPIP(ui, this.onEnterPIPCallback);
  };
  leavePIPEvent = (ui) => {
    Utils.leavePIP(ui, this.onLeavePIPCallback);
  };
  getVideoElement = () => {
    return this.ui.videoElement;
  };
  // NOT IN USE.
  toggleVideoElement = () => {
    Utils.toggleTextTracks(this.ui, null);
    this.videoEvents.removeEvents();
    this.ui.removeVideoPlayer();
    this.ui.addVideoElement();
    this.videoEvents.addEvents();
    this.airplay.init();
    this.castSender.init();
  };
  detachMediaElement = async (retry) => {
    try {
      if (this.playerState.player === "none" /* NONE */) {
        return Promise.resolve();
      }
      if (!retry) {
        Utils.toggleShowHide(this.ui.controlsWrapper, "none");
        Utils.toggleOpacity(this.ui.controlsWrapper, false);
        Utils.toggleShowHide(this.ui.optionsMenuWrapper, "none");
        Utils.toggleShowHide(this.ui.controlsProgressBar, "none");
        this.ui.controlsTimeText.innerText = "";
        this.ui.controlsPIP.innerHTML = "";
        this.ui.controlsPIP.classList.add("none");
        this.ui.controlsCloseCaptionButton.classList.add("none");
        this.ui.optionsMenuState = "none" /* NONE */;
        this.ui.optionsMenuWrapper.innerHTML = "";
        Utils.resetRetryCounter();
      }
      if (this.playerState.player === "shaka" /* SHAKA */) {
        await this.shaka.destroy();
      }
      if (this.playerState.player === "hls" /* HLS */) {
        await this.hls.destroy();
      }
      if (this.playerState.player === "native" /* NATIVE */) {
        await this.native.destroy();
      }
      this.setPlayerState({
        ...defaultPlayerState,
        isCasting: this.playerState.isCasting,
        isPIP: this.playerState.isPIP,
        isAirplay: this.playerState.isAirplay
      });
      Utils.toggleTextTracks(this.ui, null);
      return Promise.resolve();
    } catch (e2) {
      console.log(e2);
      return Promise.reject(e2);
    }
  };
  removePlayer = () => {
    if (!this.isInitialized)
      return;
    this.ui.videoElement.muted = true;
    this.detachMediaElement(false).then(() => {
      this.videoEvents.removeEvents();
      this.removeEvents();
      if (!!document.pictureInPictureEnabled && !!document.pictureInPictureElement) {
        sessionStorage.removeItem("pip-enter");
        document.exitPictureInPicture().catch((e2) => console.log(e2));
      }
      this.ui.removeUI();
      this.isInitialized = false;
    }).catch(() => {
    });
  };
  removeEvents = () => {
    document.removeEventListener("fullscreenchange", this.fullScreenEvent.bind(this, this.ui));
    document.removeEventListener("enterpictureinpicture", this.enterPIPEvent.bind(this, this.ui));
    document.removeEventListener("leavepictureinpicture", this.leavePIPEvent.bind(this, this.ui));
    clearInterval(this.stateTimer);
  };
  unmount = () => {
    if (this.playerState.isCasting) {
      this.castSender.stopCasting();
      this.isInitialized = false;
      this.setPlayerState({
        ...defaultPlayerState
      });
    }
    if (!this.isInitialized)
      return;
    sessionStorage.removeItem("videoCurrentTime" /* VIDOE_CURRENT_TIME */);
    this.removePlayer();
    this.ui.removeAllUI();
  };
  reloadPlayer = async (wait = true) => {
    try {
      if (wait)
        await Utils.delay(2 * 1e3);
      if (this.playerState.player === "shaka" /* SHAKA */) {
        await this.shaka.reload();
        return Promise.resolve();
      }
      this.retry(true);
      return Promise.resolve();
    } catch (e2) {
      return Promise.reject();
    }
  };
  retry = (hard = false) => {
    Utils.toggleWrappers({ ui: this.ui, loading: true });
    if (hard) {
      this.setSource(this.source, hard).catch(() => {
      });
      return;
    }
    this.reloadPlayer().catch(() => console.log());
  };
  onTogglePlayPause = () => {
    Utils.togglePlayPause(this.ui).catch(() => {
    });
  };
  onToggleMuteUnMute = () => {
    Utils.toggleMuteUnMute(this.ui);
  };
  onToggleForwardRewind = (forward) => {
    Utils.toggleForwardRewind(this.ui, forward);
  };
  onSeekTime = (timeInSeconds) => {
    Utils.seekTime(this.ui, timeInSeconds);
  };
  onTogglePip = () => {
    Utils.togglePip(this.ui);
  };
  onToggleFullScreen = () => {
    Utils.toggleFullScreen(this.ui);
  };
  onEndedReplay = () => {
    Utils.onEndedReplay(this.ui);
  };
  __windowOnLoad = () => {
    this.removeEvents();
    document.addEventListener("fullscreenchange", this.fullScreenEvent.bind(this, this.ui));
    document.addEventListener("enterpictureinpicture", this.enterPIPEvent.bind(this, this.ui));
    document.addEventListener("leavepictureinpicture", this.leavePIPEvent.bind(this, this.ui));
    this.__stateUpdater();
  };
  __stateUpdater = () => {
    clearTimeout(this.stateTimer);
    const showPIP = !!document.pictureInPictureEnabled;
    const isPIP = this.ui.videoElement === document.pictureInPictureElement;
    if (showPIP) {
      this.ui.controlsPIP.innerHTML = isPIP ? Utils.Icons({ type: "pip_exit" }) : Utils.Icons({ type: "pip_enter" });
      this.ui.controlsPIP.classList.remove("none");
    }
    this.setPlayerState({ showPIP, isPIP });
    this.stateTimer = setTimeout(this.__stateUpdater.bind(this), 500);
  };
};
var Player = _Player;
__publicField(Player, "_instance");
__publicField(Player, "_isBrowser", () => {
  return typeof window === "object";
});
__publicField(Player, "getInstance", () => {
  if (_Player._isBrowser()) {
    if (!_Player._instance) {
      _Player._instance = new _Player();
    }
    return _Player._instance;
  } else {
    throw new Error("Library only supported in browsers!");
  }
});
var playerInstance = Player.getInstance();

// src/index.ts
var player = {
  instance: playerInstance,
  DRMEnums,
  init: playerInstance.init,
  getVideoElement: playerInstance.ui.getVideoElement,
  getPlayerState: playerInstance.getPlayerState,
  setPlayerState: playerInstance.setPlayerState,
  unmount: playerInstance.unmount,
  removePlayer: playerInstance.removePlayer,
  onTogglePlayPause: playerInstance.onTogglePlayPause,
  onToggleMuteUnMute: playerInstance.onToggleMuteUnMute,
  onToggleForwardRewind: playerInstance.onToggleForwardRewind,
  onSeekTime: playerInstance.onSeekTime,
  onTogglePip: playerInstance.onTogglePip,
  onToggleFullScreen: playerInstance.onToggleFullScreen,
  onEndedReplay: playerInstance.onEndedReplay,
  setCastingSource: playerInstance.castSender.sendSourceInfo,
  setCastingMediaInfo: playerInstance.castSender.sendMediaInfo,
  stopCasting: playerInstance.castSender.stopCasting
};
export {
  DRMEnums,
  player as default
};
/*! Bundled license information:

mux.js/dist/mux.js:
  (*! @name mux.js @version 5.14.1 @license Apache-2.0 *)

shaka-player/dist/shaka-player.compiled.debug.js:
  (*
   @license
   Shaka Player
   Copyright 2016 Google LLC
   SPDX-License-Identifier: Apache-2.0
  *)
  (*
   @license
   Copyright 2008 The Closure Library Authors
   SPDX-License-Identifier: Apache-2.0
  *)
  (*
   @license
   Copyright 2006 The Closure Library Authors
   SPDX-License-Identifier: Apache-2.0
  *)
  (*
   @license
   EME Encryption Scheme Polyfill
   Copyright 2019 Google LLC
   SPDX-License-Identifier: Apache-2.0
  *)
*/
